###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Nov/2018  13:52:22
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDObject.c
#    Command line       =  
#        -f "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -f "D:\1.embedded\kit\cc2530\Reference\Z-Stack
#        Mesh 1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDObject.c" -D FEATURE_SYSTEM_STATS -D
#        POWER_SAVING -lC "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
#        Pe001,Pa010 -o "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --no_code_motion
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\ZDObject.lst
#    Object file        =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\ZDObject.r51
#
###############################################################################

D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2014-08-04 18:42:36 -0700 (Mon, 04 Aug 2014) $
      4            Revision:       $Revision: 39656 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          
     73          /*********************************************************************
     74           * MACROS
     75           */
     76          
     77          /*********************************************************************
     78           * CONSTANTS
     79           */
     80          // NLME Stub Implementations
     81          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     82          
     83          /*********************************************************************
     84           * TYPEDEFS
     85           */
     86          #if defined ( REFLECTOR )
     87          typedef struct
     88          {
     89            byte SrcTransSeq;
     90            zAddrType_t SrcAddr;
     91            uint16 LocalCoordinator;
     92            byte epIntf;
     93            uint16 ProfileID;
     94            byte numInClusters;
     95            uint16 *inClusters;
     96            byte numOutClusters;
     97            uint16 *outClusters;
     98            byte SecurityUse;
     99            byte status;
    100          } ZDO_EDBind_t;
    101          #endif // defined ( REFLECTOR )
    102          
    103          enum
    104          {
    105            ZDMATCH_INIT,           // Initialized
    106            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    107            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    108          };
    109          
    110          enum
    111          {
    112            ZDMATCH_SENDING_NOT,
    113            ZDMATCH_SENDING_UNBIND,
    114            ZDMATCH_SENDING_BIND
    115          };
    116          
    117          /*********************************************************************
    118           * GLOBAL VARIABLES
    119           */
    120          
    121          /*********************************************************************
    122           * EXTERNAL VARIABLES
    123           */
    124          
    125          /*********************************************************************
    126           * EXTERNAL FUNCTIONS
    127           */
    128          
    129          /*********************************************************************
    130           * LOCAL VARIABLES
    131           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    133          
    134          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    136          #endif
    137          
    138          #if defined ( MANAGED_SCAN )
    139            uint32 managedScanNextChannel = 0;
    140            uint32 managedScanChannelMask = 0;
    141            uint8  managedScanTimesPerChannel = 0;
    142          #endif
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    145          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    148          int16 zdpExternalStateTaskID = -1;
   \                     zdpExternalStateTaskID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for zdpExternalStateTaskID>`
   \   000002                REQUIRE __INIT_XDATA_I
    149          
    150          /*********************************************************************
    151           * LOCAL FUNCTIONS
    152           */
    153          static void ZDODeviceSetup( void );
    154          #if defined ( MANAGED_SCAN )
    155            static void ZDOManagedScan_Next( void );
    156          #endif
    157          #if defined ( REFLECTOR )
    158            static void ZDO_RemoveEndDeviceBind( void );
    159            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    160          #endif
    161          #if ( ZG_BUILD_COORDINATOR_TYPE )
    162            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    163                                                 byte numList2, uint16 *list2, uint16 *pMatches );
    164            static void ZDO_RemoveMatchMemory( void );
    165            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    166            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    167          #endif
    168          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    169          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    170          
    171          /*********************************************************************
    172           * @fn          ZDO_Init
    173           *
    174           * @brief       ZDObject and ZDProfile initialization.
    175           *
    176           * @param       none
    177           *
    178           * @return      none
    179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    180          void ZDO_Init( void )
   \                     ZDO_Init:
    181          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    182            // Initialize ZD items
    183            #if defined ( REFLECTOR )
    184            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    185            #endif
    186          
    187            // Initialize default ZDO_UseExtendedPANID to the APS one.
    188            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    189          
    190            // Setup the device - type of device to create.
    191            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function NLME_CoordinatorInit
   \   000016   12....       LCALL   `??NLME_CoordinatorInit::?relay`; Banked call to: NLME_CoordinatorInit
   \   000019                ; Setup parameters for call to function APS_ReflectorInit
   \   000019   12....       LCALL   `??APS_ReflectorInit::?relay`; Banked call to: APS_ReflectorInit
   \   00001C                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   00001C   12....       LCALL   `??NLME_DeviceJoiningInit::?relay`; Banked call to: NLME_DeviceJoiningInit
    192          }
   \   00001F   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    193          
    194          #if defined ( MANAGED_SCAN )
    195          /*********************************************************************
    196           * @fn      ZDOManagedScan_Next()
    197           *
    198           * @brief   Setup a managed scan.
    199           *
    200           * @param   none
    201           *
    202           * @return  none
    203           */
    204          static void ZDOManagedScan_Next( void )
    205          {
    206            // Is it the first time
    207            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    208            {
    209              // Setup the defaults
    210              managedScanNextChannel  = 1;
    211          
    212              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    213                managedScanNextChannel <<= 1;
    214          
    215              managedScanChannelMask = managedScanNextChannel;
    216              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    217            }
    218            else
    219            {
    220              // Do we need to go to the next channel
    221              if ( managedScanTimesPerChannel == 0 )
    222              {
    223                // Find next active channel
    224                managedScanChannelMask  = managedScanNextChannel;
    225                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    226              }
    227              else
    228              {
    229                managedScanTimesPerChannel--;
    230          
    231                if ( managedScanTimesPerChannel == 0 )
    232                {
    233                  managedScanNextChannel  <<= 1;
    234                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    235                    managedScanNextChannel <<= 1;
    236          
    237                  if ( managedScanNextChannel == 0 )
    238                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    239                }
    240              }
    241            }
    242          }
    243          #endif // MANAGED_SCAN
    244          
    245          /*********************************************************************
    246           * @fn      ZDODeviceSetup()
    247           *
    248           * @brief   Call set functions depending on the type of device compiled.
    249           *
    250           * @param   none
    251           *
    252           * @return  none
    253           */
    254          static void ZDODeviceSetup( void )
    255          {
    256            if ( ZG_BUILD_COORDINATOR_TYPE )
    257            {
    258              NLME_CoordinatorInit();
    259            }
    260          
    261          #if defined ( REFLECTOR )
    262            APS_ReflectorInit();
    263          #endif
    264          
    265            if ( ZG_BUILD_JOINING_TYPE )
    266            {
    267              NLME_DeviceJoiningInit();
    268            }
    269          }
    270          
    271          /*********************************************************************
    272           * @fn          ZDO_StartDevice
    273           *
    274           * @brief       This function starts a device in a network.
    275           *
    276           * @param       logicalType     - Device type to start
    277           *              startMode       - indicates mode of device startup
    278           *              beaconOrder     - indicates time betwen beacons
    279           *              superframeOrder - indicates length of active superframe
    280           *
    281           * @return      none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V1,R1
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V2,R3
    285            ZStatus_t ret;
    286          #if defined ( ZIGBEE_FREQ_AGILITY )
    287            static uint8 discRetries = 0;
    288          #endif
    289          #if defined ( ZIGBEE_COMMISSIONING )
    290            static uint8 scanCnt = 0;
    291          #endif
    292          
    293            ret = ZUnsupportedMode;
    294          
    295            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
   \   000010   E9           MOV     A,R1
   \   000011   705F         JNZ     ??ZDO_StartDevice_0
    296            {
    297              if ( startMode == MODE_HARD )
   \   000013   7402         MOV     A,#0x2
   \   000015   65..         XRL     A,?V0
   \   000017   703E         JNZ     ??ZDO_StartDevice_1
    298              {
    299                devState = DEV_COORD_STARTING;
   \   000019   90....       MOV     DPTR,#devState
   \   00001C   7408         MOV     A,#0x8
   \   00001E   F0           MOVX    @DPTR,A
    300                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    301                                                    zgDefaultStartingScanDuration, beaconOrder,
    302                                                    superframeOrder, false );
   \   00001F                ; Setup parameters for call to function NLME_NetworkFormationRequest
   \   00001F   75..00       MOV     ?V4,#0x0
   \   000022   78..         MOV     R0,#?V4
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000027   EC           MOV     A,R4
   \   000028   F5..         MOV     ?V4,A
   \   00002A   78..         MOV     R0,#?V4
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002F   EB           MOV     A,R3
   \   000030   F5..         MOV     ?V4,A
   \   000032   78..         MOV     R0,#?V4
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000037   90....       MOV     DPTR,#zgDefaultChannelList
   \   00003A   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00003D   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   7C..         MOV     R4,#zgApsUseExtendedPANID & 0xff
   \   000044   7D..         MOV     R5,#(zgApsUseExtendedPANID >> 8) & 0xff
   \   000046   90....       MOV     DPTR,#zgConfigPANID
   \   000049   12....       LCALL   ??Subroutine241_0 & 0xFFFF
    303              }
   \                     ??CrossCallReturnLabel_479:
   \   00004C   12....       LCALL   `??NLME_NetworkFormationRequest::?relay`; Banked call to: NLME_NetworkFormationRequest
   \   00004F   7407         MOV     A,#0x7
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   02....       LJMP    ??ZDO_StartDevice_2 & 0xFFFF
    304              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_1:
   \   000057   7401         MOV     A,#0x1
   \   000059   65..         XRL     A,?V0
   \   00005B   6003         JZ      $+5
   \   00005D   02....       LJMP    ??ZDO_StartDevice_3 & 0xFFFF
    305              {
    306                // Just start the coordinator
    307                devState = DEV_COORD_STARTING;
   \   000060   90....       MOV     DPTR,#devState
   \   000063   7408         MOV     A,#0x8
   \   000065   F0           MOVX    @DPTR,A
    308                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
   \   000066                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000066   7B00         MOV     R3,#0x0
   \   000068   AA..         MOV     R2,?V2
   \   00006A   A9..         MOV     R1,?V2
   \   00006C   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   00006F   02....       LJMP    ??ZDO_StartDevice_2 & 0xFFFF
    309              }
    310              else
    311              {
    312          #if defined( LCD_SUPPORTED )
    313                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    314          #endif
    315              }
    316            }
    317          
    318            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \                     ??ZDO_StartDevice_0:
   \   000072   7401         MOV     A,#0x1
   \   000074   65..         XRL     A,?V1
   \   000076   6009         JZ      ??ZDO_StartDevice_4
   \   000078   7402         MOV     A,#0x2
   \   00007A   65..         XRL     A,?V1
   \   00007C   6003         JZ      $+5
   \   00007E   02....       LJMP    ??ZDO_StartDevice_3 & 0xFFFF
    319            {
    320              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_4:
   \   000081   EA           MOV     A,R2
   \   000082   6006         JZ      ??ZDO_StartDevice_5
   \   000084   7403         MOV     A,#0x3
   \   000086   65..         XRL     A,?V0
   \   000088   7042         JNZ     ??ZDO_StartDevice_6
    321              {
    322                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_5:
   \   00008A   90....       MOV     DPTR,#devState
   \   00008D   7402         MOV     A,#0x2
   \   00008F   12....       LCALL   ?Subroutine48 & 0xFFFF
    323          
    324            #if defined( MANAGED_SCAN )
    325                ZDOManagedScan_Next();
    326                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    327            #else
    328                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \                     ??CrossCallReturnLabel_74:
   \   000092   12....       LCALL   ?XLOAD_R2345
   \   000095   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000098   E9           MOV     A,R1
   \   000099   F9           MOV     R1,A
    329              #if defined ( ZIGBEE_FREQ_AGILITY )
    330                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    331                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
   \   00009A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   A2E3         MOV     C,0xE0 /* A   */.3
   \   0000A0   4010         JC      ??CrossCallReturnLabel_29
   \   0000A2   E9           MOV     A,R1
   \   0000A3   700D         JNZ     ??CrossCallReturnLabel_29
   \   0000A5   90....       MOV     DPTR,#??discRetries
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   04           INC     A
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   6404         XRL     A,#0x4
   \   0000AD   7003         JNZ     ??CrossCallReturnLabel_29
    332                {
    333                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    334                  // change will not be recieved. On these devices or routers that have
    335                  // lost the network, an active scan shall be conducted on the Default
    336                  // Channel list using the extended PANID to find the network. If the
    337                  // extended PANID isn't found using the Default Channel list, an scan
    338                  // should be completed using all channels.
    339                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   0000AF   12....       LCALL   ?Subroutine26 & 0xFFFF
    340                }
    341              #endif // ZIGBEE_FREQ_AGILITY
    342              #if defined ( ZIGBEE_COMMISSIONING )
    343                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \                     ??CrossCallReturnLabel_29:
   \   0000B2   7403         MOV     A,#0x3
   \   0000B4   65..         XRL     A,?V0
   \   0000B6   705E         JNZ     ??ZDO_StartDevice_7
   \   0000B8   90....       MOV     DPTR,#??scanCnt
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   F8           MOV     R0,A
   \   0000BD   7401         MOV     A,#0x1
   \   0000BF   28           ADD     A,R0
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   E8           MOV     A,R0
   \   0000C2   C3           CLR     C
   \   0000C3   9405         SUBB    A,#0x5
   \   0000C5   404F         JC      ??ZDO_StartDevice_7
    344                {
    345                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    346                  // application specific means, the device shall conduct an active scan
    347                  // on the Default Channel list and join the PAN with the same
    348                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    349                  // on all channels.
    350                  // When devices rejoin the network and the PAN is not found from
    351                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   0000C7   12....       LCALL   ?Subroutine26 & 0xFFFF
    352                }
    353              #endif // ZIGBEE_COMMISSIONING
    354            #endif
    355              }
   \                     ??CrossCallReturnLabel_30:
   \   0000CA   804A         SJMP    ??ZDO_StartDevice_7
    356              else if ( startMode == MODE_RESUME )
   \                     ??ZDO_StartDevice_6:
   \   0000CC   7401         MOV     A,#0x1
   \   0000CE   65..         XRL     A,?V0
   \   0000D0   7047         JNZ     ??ZDO_StartDevice_3
    357              {
    358                if ( logicalType == NODETYPE_ROUTER )
   \   0000D2   7401         MOV     A,#0x1
   \   0000D4   65..         XRL     A,?V1
   \   0000D6   90....       MOV     DPTR,#devState
   \   0000D9   702E         JNZ     ??ZDO_StartDevice_8
    359                {
    360                  ZMacScanCnf_t scanCnf;
    361                  devState = DEV_NWK_ORPHAN;
   \   0000DB   740A         MOV     A,#0xa
   \   0000DD   F0           MOVX    @DPTR,A
    362          
    363                  /* if router and nvram is available, fake successful orphan scan */
    364                  scanCnf.hdr.Status = ZSUCCESS;
   \   0000DE   7401         MOV     A,#0x1
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   E4           CLR     A
   \   0000E4   F0           MOVX    @DPTR,A
    365                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
   \   0000E5   7402         MOV     A,#0x2
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   7403         MOV     A,#0x3
   \   0000EC   F0           MOVX    @DPTR,A
    366                  scanCnf.UnscannedChannels = 0;
   \   0000ED   04           INC     A
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   E4           CLR     A
   \   0000F2   F0           MOVX    @DPTR,A
   \   0000F3   A3           INC     DPTR
   \   0000F4   F0           MOVX    @DPTR,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   A3           INC     DPTR
   \   0000F8   F0           MOVX    @DPTR,A
    367                  scanCnf.ResultListSize = 0;
   \   0000F9   7408         MOV     A,#0x8
   \   0000FB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FE   E4           CLR     A
   \   0000FF   F0           MOVX    @DPTR,A
    368                  nwk_ScanJoiningOrphan(&scanCnf);
   \   000100                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   000100   AA..         MOV     R2,?XSP + 0
   \   000102   AB..         MOV     R3,?XSP + 1
   \   000104   12....       LCALL   `??nwk_ScanJoiningOrphan::?relay`; Banked call to: nwk_ScanJoiningOrphan
    369          
    370                  ret = ZSuccess;
   \   000107   8027         SJMP    ??ZDO_StartDevice_9
    371                }
    372                else
    373                {
    374                  devState = DEV_NWK_ORPHAN;
   \                     ??ZDO_StartDevice_8:
   \   000109   740A         MOV     A,#0xa
   \   00010B   12....       LCALL   ?Subroutine48 & 0xFFFF
    375                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    376                                                zgDefaultStartingScanDuration );
    377                }
    378              }
    379              else
    380              {
    381          #if defined( LCD_SUPPORTED )
    382                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    383          #endif
    384              }
    385            }
   \                     ??CrossCallReturnLabel_75:
   \   00010E   12....       LCALL   ?XLOAD_R2345
   \   000111   12....       LCALL   `??NLME_OrphanJoinRequest::?relay`; Banked call to: NLME_OrphanJoinRequest
   \                     ??ZDO_StartDevice_2:
   \   000114   E9           MOV     A,R1
   \   000115   F9           MOV     R1,A
    386          
    387            if ( ret != ZSuccess )
   \                     ??ZDO_StartDevice_7:
   \   000116   E9           MOV     A,R1
   \   000117   6017         JZ      ??ZDO_StartDevice_9
    388            {
    389              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_3:
   \   000119                ; Setup parameters for call to function osal_start_timerEx
   \   000119   90....       MOV     DPTR,#__Constant_3e8
   \   00011C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00011F   7A01         MOV     R2,#0x1
   \   000121   7B00         MOV     R3,#0x0
   \   000123   90....       MOV     DPTR,#ZDAppTaskID
   \   000126   E0           MOVX    A,@DPTR
   \   000127   F9           MOV     R1,A
   \   000128   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00012B   7404         MOV     A,#0x4
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
    390            }
    391          }
   \                     ??ZDO_StartDevice_9:
   \   000130   740B         MOV     A,#0xb
   \   000132   12....       LCALL   ?DEALLOC_XSTACK8
   \   000135   7F05         MOV     R7,#0x5
   \   000137   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000001                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000001   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   90....       MOV     DPTR,#zgDefaultChannelList
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV     DPTR,#zgDefaultChannelList
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   74F8         MOV     A,#-0x8
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   74FF         MOV     A,#-0x1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   7407         MOV     A,#0x7
   \   000010   F0           MOVX    @DPTR,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine241_0:
   \   000000   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine243_0:
   \   000000   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   000003   FB           MOV     R3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine257_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??discRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    392          
    393          /**************************************************************************************************
    394           * @fn          zdoSendStateChangeMsg
    395           *
    396           * @brief       Helper function for ZDO_UpdateNwkStatus.
    397           *
    398           * input parameters
    399           *
    400           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    401           * @param       state - The current device state.
    402           *
    403           * output parameters
    404           *
    405           * None.
    406           *
    407           * @return      None.
    408           **************************************************************************************************
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
   \                     zdoSendStateChangeMsg:
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
    412            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
   \   000009                ; Setup parameters for call to function osal_msg_find
   \   000009   7AD1         MOV     R2,#-0x2f
   \   00000B   F9           MOV     R1,A
   \   00000C   12....       LCALL   `??osal_msg_find::?relay`; Banked call to: osal_msg_find
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
    413          
    414            if (NULL == pMsg)
   \   000013   E582         MOV     A,DPL
   \   000015   4583         ORL     A,DPH
   \   000017   702A         JNZ     ??zdoSendStateChangeMsg_0
    415            {
    416              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
   \   000019                ; Setup parameters for call to function osal_msg_allocate
   \   000019   7A02         MOV     R2,#0x2
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000020   EA           MOV     A,R2
   \   000021   4B           ORL     A,R3
   \   000022   700E         JNZ     ??zdoSendStateChangeMsg_1
    417              {
    418                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    419                // try again later when more Heap may be available.
    420                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
   \   000024                ; Setup parameters for call to function osal_set_event
   \   000024   7A10         MOV     R2,#0x10
   \   000026   7B00         MOV     R3,#0x0
   \   000028   90....       MOV     DPTR,#ZDAppTaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000030   8014         SJMP    ??zdoSendStateChangeMsg_2
    421              }
    422              else
    423              {
    424                pMsg->event = ZDO_STATE_CHANGE;
   \                     ??zdoSendStateChangeMsg_1:
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   74D1         MOV     A,#-0x2f
   \   000038   F0           MOVX    @DPTR,A
    425                pMsg->status = state;
   \   000039   EF           MOV     A,R7
   \   00003A   A3           INC     DPTR
   \   00003B   F0           MOVX    @DPTR,A
    426          
    427                (void)osal_msg_send(taskId, (uint8 *)pMsg);
   \   00003C                ; Setup parameters for call to function osal_msg_send
   \   00003C   EE           MOV     A,R6
   \   00003D   F9           MOV     R1,A
   \   00003E   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   \   000041   8003         SJMP    ??zdoSendStateChangeMsg_2
    428              }
    429            }
    430            else
    431            {
    432              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    433              pMsg->status = state;
   \                     ??zdoSendStateChangeMsg_0:
   \   000043   EF           MOV     A,R7
   \   000044   A3           INC     DPTR
   \   000045   F0           MOVX    @DPTR,A
    434            }
    435          }
   \                     ??zdoSendStateChangeMsg_2:
   \   000046   02....       LJMP    ??Subroutine210_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    436          
    437          /**************************************************************************************************
    438           * @fn          ZDO_UpdateNwkStatus
    439           *
    440           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    441           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    442           *              than one registered EndPoint, it will only receive one notification per state
    443           *              change. Although the device may go through a sequence of state changes, the
    444           *              Application task may only receive notification of the final, steady-state state
    445           *              because it has the lowest priority and never even runs to receive the intermediate
    446           *              state change notifications.
    447           *
    448           * input parameters
    449           *
    450           * @param       state - The current device state.
    451           *
    452           * output parameters
    453           *
    454           * None.
    455           *
    456           * @return      None.
    457           **************************************************************************************************
    458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    459          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    460          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
    461            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   00000D   FF           MOV     R7,A
    462          
    463          #if defined MT_ZDO_CB_FUNC
    464            if ( zdpExternalStateTaskID == -1 )
   \   00000E   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F4           CPL     A
   \   000013   7003         JNZ     ??ZDO_UpdateNwkStatus_0
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F4           CPL     A
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000018   702D         JNZ     ??CrossCallReturnLabel_131
    465            {
    466              zdpExternalStateTaskID = MT_TaskID;
   \   00001A   90....       MOV     DPTR,#MT_TaskID
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   8020         SJMP    ??CrossCallReturnLabel_131
    467            }
    468          #endif
    469          
    470            while (pItem != NULL)
    471            {
    472              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   A3           INC     DPTR
   \   00002C   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   00002F   600F         JZ      ??ZDO_UpdateNwkStatus_2
    473              {
    474                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \   000031                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   12....       LCALL   ?Subroutine62 & 0xFFFF
    475              }
   \                     ??CrossCallReturnLabel_399:
   \   00003A   FA           MOV     R2,A
   \   00003B   A9..         MOV     R1,?V0
   \   00003D   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    476          
    477              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_2:
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   12....       LCALL   ?Subroutine81 & 0xFFFF
    478            }
   \                     ??CrossCallReturnLabel_131:
   \   000047   EE           MOV     A,R6
   \   000048   4F           ORL     A,R7
   \   000049   70DC         JNZ     ??ZDO_UpdateNwkStatus_1
    479            
    480            if ( zdpExternalStateTaskID != -1 )
   \   00004B   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F4           CPL     A
   \   000050   7003         JNZ     ??ZDO_UpdateNwkStatus_3
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F4           CPL     A
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000055   600A         JZ      ??ZDO_UpdateNwkStatus_4
    481            {  
    482              zdoSendStateChangeMsg( state, zdpExternalStateTaskID );
   \   000057                ; Setup parameters for call to function zdoSendStateChangeMsg
   \   000057   90....       MOV     DPTR,#zdpExternalStateTaskID
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FA           MOV     R2,A
   \   00005C   A9..         MOV     R1,?V0
   \   00005E   12....       LCALL   `??zdoSendStateChangeMsg::?relay`; Banked call to: zdoSendStateChangeMsg
    483            }
    484            
    485            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_4:
   \   000061                ; Setup parameters for call to function NLME_GetShortAddr
   \   000061   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000064   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000067   12....       LCALL   ?Subroutine51 & 0xFFFF
    486            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_333:
   \   00006A                ; Setup parameters for call to function NLME_GetExtAddr
   \   00006A   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    487          }
   \   00006D                REQUIRE ?Subroutine2
   \   00006D                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   FF           MOV     R7,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine175:
   \   000000   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine169:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine211_0
   \   000001                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F583         MOV     DPH,A
   \   000004   8882         MOV     DPL,R0
   \   000006                REQUIRE ??Subroutine227_0
   \   000006                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine228_0
   \   000001                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine199:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine256_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    488          
    489          #if defined ( REFLECTOR )
    490          /*********************************************************************
    491           * @fn          ZDO_RemoveEndDeviceBind
    492           *
    493           * @brief       Remove the end device bind
    494           *
    495           * @param  none
    496           *
    497           * @return      none
    498           */
    499          static void ZDO_RemoveEndDeviceBind( void )
    500          {
    501            if ( ZDO_EDBind != NULL )
    502            {
    503              // Free the RAM
    504              if ( ZDO_EDBind->inClusters != NULL )
    505              {
    506                osal_mem_free( ZDO_EDBind->inClusters );
    507              }
    508              if ( ZDO_EDBind->outClusters != NULL )
    509              {
    510                osal_mem_free( ZDO_EDBind->outClusters );
    511              }
    512              osal_mem_free( ZDO_EDBind );
    513              ZDO_EDBind = NULL;
    514            }
    515          }
    516          #endif // REFLECTOR
    517          
    518          #if defined ( REFLECTOR )
    519          /*********************************************************************
    520           * @fn          ZDO_RemoveEndDeviceBind
    521           *
    522           * @brief       Remove the end device bind
    523           *
    524           * @param  none
    525           *
    526           * @return      none
    527           */
    528          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    529          {
    530            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    531          
    532          #if defined( LCD_SUPPORTED )
    533            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    534            if ( Status == ZDP_SUCCESS )
    535            {
    536              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    537            }
    538            else
    539            {
    540              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    541            }
    542          #endif
    543          
    544          }
    545          #endif // REFLECTOR
    546          
    547          #if ( ZG_BUILD_COORDINATOR_TYPE )
    548          /*********************************************************************
    549           * @fn          ZDO_CompareClusterLists
    550           *
    551           * @brief       Compare one list to another list
    552           *
    553           * @param       numList1 - number of items in list 1
    554           * @param       list1 - first list of cluster IDs
    555           * @param       numList2 - number of items in list 2
    556           * @param       list2 - second list of cluster IDs
    557           * @param       pMatches - buffer to put matches
    558           *
    559           * @return      number of matches
    560           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    561          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
   \                     ZDO_CompareClusterLists:
    562                                    byte numList2, uint16 *list2, uint16 *pMatches )
    563          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8C..         MOV     ?V4,R4
    564            byte x, y;
    565            uint16 z;
    566            byte numMatches = 0;
   \   000009   75..00       MOV     ?V0,#0x0
    567          
    568            // Check the first in against the seconds out
    569            for ( x = 0; x < numList1; x++ )
   \   00000C   75..00       MOV     ?V1,#0x0
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   00001F   803C         SJMP    ??ZDO_CompareClusterLists_0
    570            {
    571              for ( y = 0; y < numList2; y++ )
    572              {
    573                z = list2[y];
   \                     ??ZDO_CompareClusterLists_1:
   \   000021   A8..         MOV     R0,?V2
   \   000023   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000026   F5..         MOV     ?V6,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V7,A
    574                if ( list1[x] == z )
   \   00002C   A8..         MOV     R0,?V1
   \   00002E   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000031   F583         MOV     DPH,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   65..         XRL     A,?V6
   \   000036   7004         JNZ     ??ZDO_CompareClusterLists_2
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   65..         XRL     A,?V7
   \                     ??ZDO_CompareClusterLists_2:
   \   00003C   7014         JNZ     ??ZDO_CompareClusterLists_3
    575                {
    576                  pMatches[numMatches++] = z;
   \   00003E   12....       LCALL   ?Subroutine118 & 0xFFFF
    577                }
    578              }
   \                     ??CrossCallReturnLabel_330:
   \   000041   EE           MOV     A,R6
   \   000042   28           ADD     A,R0
   \   000043   F582         MOV     DPL,A
   \   000045   EF           MOV     A,R7
   \   000046   39           ADDC    A,R1
   \   000047   F583         MOV     DPH,A
   \   000049   E5..         MOV     A,?V6
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E5..         MOV     A,?V7
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   05..         INC     ?V0
   \                     ??ZDO_CompareClusterLists_3:
   \   000052   05..         INC     ?V2
   \                     ??ZDO_CompareClusterLists_4:
   \   000054   E5..         MOV     A,?V2
   \   000056   C3           CLR     C
   \   000057   95..         SUBB    A,?V4
   \   000059   40C6         JC      ??ZDO_CompareClusterLists_1
   \   00005B   05..         INC     ?V1
   \                     ??ZDO_CompareClusterLists_0:
   \   00005D   E5..         MOV     A,?V1
   \   00005F   C3           CLR     C
   \   000060   95..         SUBB    A,?V3
   \   000062   5005         JNC     ??ZDO_CompareClusterLists_5
   \   000064   75..00       MOV     ?V2,#0x0
   \   000067   80EB         SJMP    ??ZDO_CompareClusterLists_4
    579            }
    580          
    581            return ( numMatches );
   \                     ??ZDO_CompareClusterLists_5:
   \   000069   A9..         MOV     R1,?V0
   \   00006B   80..         SJMP    ??Subroutine207_0
    582          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   A8..         MOV     R0,?V0
   \   000002                REQUIRE ??Subroutine206_0
   \   000002                ; // Fall through to label ??Subroutine206_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   28           ADD     A,R0
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   39           ADDC    A,R1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   E8           MOV     A,R0
   \   000001   28           ADD     A,R0
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   EC           MOV     A,R4
   \   000007   28           ADD     A,R0
   \   000008   F582         MOV     DPL,A
   \   00000A   ED           MOV     A,R5
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   000003   FC           MOV     R4,A
   \   000004   E9           MOV     A,R1
   \   000005   FD           MOV     R5,A
   \   000006   22           RET
    583          #endif // ZG_BUILD_COORDINATOR_TYPE
    584          
    585          /*********************************************************************
    586           * Utility functions
    587           */
    588          
    589          /*********************************************************************
    590           * @fn          ZDO_CompareByteLists
    591           *
    592           * @brief       Compares two lists for matches.
    593           *
    594           * @param       ACnt  - number of entries in list A
    595           * @param       AList  - List A
    596           * @param       BCnt  - number of entries in list B
    597           * @param       BList  - List B
    598           *
    599           * @return      true if a match is found
    600           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    601          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    602          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8C..         MOV     ?V2,R4
    603            byte x, y;
    604          
    605            for ( x = 0; x < ACnt; x++ )
   \   000009   75..00       MOV     ?V0,#0x0
   \   00000C   740C         MOV     A,#0xc
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000014   8002         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000016   05..         INC     ?V0
   \                     ??ZDO_AnyClusterMatches_0:
   \   000018   E5..         MOV     A,?V0
   \   00001A   C3           CLR     C
   \   00001B   95..         SUBB    A,?V3
   \   00001D   5028         JNC     ??ZDO_AnyClusterMatches_2
    606            {
    607              for ( y = 0; y < BCnt; y++ )
   \   00001F   75..00       MOV     ?V1,#0x0
   \   000022   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   000024   05..         INC     ?V1
   \                     ??ZDO_AnyClusterMatches_3:
   \   000026   E5..         MOV     A,?V1
   \   000028   C3           CLR     C
   \   000029   95..         SUBB    A,?V2
   \   00002B   50E9         JNC     ??ZDO_AnyClusterMatches_1
    608              {
    609                if ( AList[x] == BList[y] )
   \   00002D   A8..         MOV     R0,?V0
   \   00002F   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000032   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_613:
   \   000035   FF           MOV     R7,A
   \   000036   A8..         MOV     R0,?V1
   \   000038   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00003B   6E           XRL     A,R6
   \   00003C   7003         JNZ     ??ZDO_AnyClusterMatches_5
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6F           XRL     A,R7
   \                     ??ZDO_AnyClusterMatches_5:
   \   000041   70E1         JNZ     ??ZDO_AnyClusterMatches_4
    610                {
    611                  return true;
   \   000043   7901         MOV     R1,#0x1
   \   000045   8002         SJMP    ??ZDO_AnyClusterMatches_6
    612                }
    613              }
    614            }
    615          
    616            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   000047   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   000049   80..         SJMP    ??Subroutine208_0
    617          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine256_0
   \   000002                ; // Fall through to label ??Subroutine256_0
    618          
    619          /*********************************************************************
    620           * Callback functions from ZDProfile
    621           */
    622          
    623          /*********************************************************************
    624           * @fn          ZDO_ProcessNodeDescReq
    625           *
    626           * @brief       This function processes and responds to the
    627           *              Node_Desc_req message.
    628           *
    629           * @param       inMsg - incoming message
    630           *
    631           * @return      none
    632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    633          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    634          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine60 & 0xFFFF
    635            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    636            NodeDescriptorFormat_t *desc = NULL;
    637          
    638            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_93:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    639            {
    640              desc = &ZDO_Config_Node_Descriptor;
    641            }
    642          
    643            if ( desc != NULL )
    644            {
    645              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_NodeDescMsg::?relay`; Banked call to: ZDP_NodeDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessNodeDescReq_2
    646            }
    647            else
    648            {
    649              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    650                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0,#0x2
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine65 & 0xFFFF
    651            }
   \                     ??CrossCallReturnLabel_102:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    652          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000045   80..         SJMP    ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_601:
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FD           MOV     R5,A
   \   000008   7C80         MOV     R4,#-0x80
   \   00000A   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000007   FC           MOV     R4,A
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   FD           MOV     R5,A
   \   00000B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6C           XRL     A,R4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine181:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   EE           MOV     A,R6
   \   000008   240F         ADD     A,#0xf
   \   00000A   F582         MOV     DPL,A
   \   00000C   E4           CLR     A
   \   00000D   3F           ADDC    A,R7
   \   00000E   F583         MOV     DPH,A
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine165:
   \   000000   12....       LCALL   ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000003   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   00000D   F8           MOV     R0,A
   \   00000E   E4           CLR     A
   \   00000F   C8           XCH     A,R0
   \   000010   F9           MOV     R1,A
   \   000011   EA           MOV     A,R2
   \   000012   28           ADD     A,R0
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine203:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine180:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine254_0
   \   000001                ; // Fall through to label ??Subroutine254_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine254_0:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET
    653          
    654          /*********************************************************************
    655           * @fn          ZDO_ProcessPowerDescReq
    656           *
    657           * @brief       This function processes and responds to the
    658           *              Node_Power_req message.
    659           *
    660           * @param       inMsg  - incoming request
    661           *
    662           * @return      none
    663           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    664          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    665          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine60 & 0xFFFF
    666            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    667            NodePowerDescriptorFormat_t *desc = NULL;
    668          
    669            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_94:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    670            {
    671              desc = &ZDO_Config_Power_Descriptor;
    672            }
    673          
    674            if ( desc != NULL )
    675            {
    676              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV     ?V1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   `??ZDP_PowerDescMsg::?relay`; Banked call to: ZDP_PowerDescMsg
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessPowerDescReq_2
    677            }
    678            else
    679            {
    680              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    681                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0,#0x3
   \   000029   75..80       MOV     ?V1,#-0x80
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0,R4
   \   000033   8D..         MOV     ?V1,R5
   \   000035   78..         MOV     R0,#?V0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine65 & 0xFFFF
    682            }
   \                     ??CrossCallReturnLabel_103:
   \   00003D   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    683          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000045   80..         SJMP    ??Subroutine210_0
    684          
    685          /*********************************************************************
    686           * @fn          ZDO_ProcessSimpleDescReq
    687           *
    688           * @brief       This function processes and responds to the
    689           *              Simple_Desc_req message.
    690           *
    691           * @param       inMsg - incoming message (request)
    692           *
    693           * @return      none
    694           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine209_0
   \   000002                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine210_0
   \   000003                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    695          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    696          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    697            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   12....       LCALL   ?Subroutine35 & 0xFFFF
    698            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??CrossCallReturnLabel_47:
   \   00001A   12....       LCALL   ??Subroutine230_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   00001D   FC           MOV     R4,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FB           MOV     R3,A
   \   000021   EC           MOV     A,R4
   \   000022   FA           MOV     R2,A
    699            byte endPoint = inMsg->asdu[2];
   \   000023   8882         MOV     DPL,R0
   \   000025   8983         MOV     DPH,R1
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
    700            byte free = false;
   \   00002B   75..00       MOV     ?V1,#0x0
    701            byte stat = ZDP_SUCCESS;
   \   00002E   75..00       MOV     ?V0,#0x0
    702          
    703            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   000031   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000033   74FF         MOV     A,#-0x1
   \   000035   69           XRL     A,R1
   \   000036   7005         JNZ     ??ZDO_ProcessSimpleDescReq_1
    704            {
    705              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000038   75..82       MOV     ?V0,#-0x7e
   \   00003B   803E         SJMP    ??ZDO_ProcessSimpleDescReq_2
    706            }
    707            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003D   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6A           XRL     A,R2
   \   000042   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000047   701B         JNZ     ??ZDO_ProcessSimpleDescReq_4
    708            {
    709              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000049                ; Setup parameters for call to function afFindSimpleDesc
   \   000049   AA..         MOV     R2,?XSP + 0
   \   00004B   AB..         MOV     R3,?XSP + 1
   \   00004D   12....       LCALL   `??afFindSimpleDesc::?relay`; Banked call to: afFindSimpleDesc
   \   000050   E9           MOV     A,R1
   \   000051   FA           MOV     R2,A
    710              if ( sDesc == NULL )
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_430:
   \   00005B   7003         JNZ     ??ZDO_ProcessSimpleDescReq_5
    711              {
    712                stat = ZDP_NOT_ACTIVE;
   \   00005D   75..83       MOV     ?V0,#-0x7d
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   000060   8A..         MOV     ?V1,R2
   \   000062   8017         SJMP    ??ZDO_ProcessSimpleDescReq_2
    713              }
    714            }
    715            else
    716            {
    717              if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   000064   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6004         JZ      ??ZDO_ProcessSimpleDescReq_6
   \   00006A   6401         XRL     A,#0x1
   \   00006C   7005         JNZ     ??ZDO_ProcessSimpleDescReq_7
    718              {
    719                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_6:
   \   00006E   75..81       MOV     ?V0,#-0x7f
   \   000071   8008         SJMP    ??ZDO_ProcessSimpleDescReq_2
    720              }
    721              else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_ProcessSimpleDescReq_7:
   \   000073   E0           MOVX    A,@DPTR
   \   000074   6402         XRL     A,#0x2
   \   000076   7003         JNZ     ??ZDO_ProcessSimpleDescReq_2
    722              {
    723                stat = ZDP_INVALID_REQTYPE;
   \   000078   75..80       MOV     ?V0,#-0x80
    724              }
    725            }
    726          
    727            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   00007B                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   00007B   85..82       MOV     DPL,?XSP + 0
   \   00007E   85..83       MOV     DPH,?XSP + 1
   \   000081   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_555:
   \   000084   FD           MOV     R5,A
   \   000085   A9..         MOV     R1,?V0
   \   000087   EE           MOV     A,R6
   \   000088   FA           MOV     R2,A
   \   000089   EF           MOV     A,R7
   \   00008A   FB           MOV     R3,A
   \   00008B   12....       LCALL   `??ZDP_SimpleDescMsg::?relay`; Banked call to: ZDP_SimpleDescMsg
    728          
    729            if ( free && sDesc )
   \   00008E   E5..         MOV     A,?V1
   \   000090   6011         JZ      ??ZDO_ProcessSimpleDescReq_8
   \   000092   85..82       MOV     DPL,?XSP + 0
   \   000095   85..83       MOV     DPH,?XSP + 1
   \   000098   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_431:
   \   00009B   6006         JZ      ??ZDO_ProcessSimpleDescReq_8
    730            {
    731              osal_mem_free( sDesc );
   \   00009D                ; Setup parameters for call to function osal_mem_free
   \   00009D   12....       LCALL   ??Subroutine240_0 & 0xFFFF
    732            }
   \                     ??CrossCallReturnLabel_503:
   \   0000A0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    733          }
   \                     ??ZDO_ProcessSimpleDescReq_8:
   \   0000A3   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine183:
   \   000000   12....       LCALL   ?Subroutine203 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine230_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine234_0:
   \   000000   12....       LCALL   ?Subroutine175 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   000003   49           ORL     A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine240_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine241_0
   \   000006                ; // Fall through to label ??Subroutine241_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine250_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    734          
    735          /*********************************************************************
    736           * @fn          ZDO_ProcessActiveEPReq
    737           *
    738           * @brief       This function processes and responds to the
    739           *              Active_EP_req message.
    740           *
    741           * @param       inMsg  - incoming message (request)
    742           *
    743           * @return      none
    744           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    745          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    746          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    747            byte cnt = 0;
   \   000009   75..00       MOV     ?V0,#0x0
    748            uint16 aoi;
    749            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V1,#0x0
    750          
    751            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000012   F5..         MOV     ?V2,A
   \   000014   E4           CLR     A
   \   000015   39           ADDC    A,R1
   \   000016   F5..         MOV     ?V3,A
    752          
    753            if ( aoi == NLME_GetShortAddr() )
   \   000018                ; Setup parameters for call to function NLME_GetShortAddr
   \   000018   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   00001B   EA           MOV     A,R2
   \   00001C   65..         XRL     A,?V2
   \   00001E   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000020   EB           MOV     A,R3
   \   000021   65..         XRL     A,?V3
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000023   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    754            {
    755              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000025                ; Setup parameters for call to function afNumEndPoints
   \   000025   12....       LCALL   `??afNumEndPoints::?relay`; Banked call to: afNumEndPoints
   \   000028   E9           MOV     A,R1
   \   000029   14           DEC     A
   \   00002A   F5..         MOV     ?V0,A
    756              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002C                ; Setup parameters for call to function afEndPoints
   \   00002C   7901         MOV     R1,#0x1
   \   00002E   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000030   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000032   12....       LCALL   `??afEndPoints::?relay`; Banked call to: afEndPoints
   \   000035   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    757            }
    758            else
    759            {
    760              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000037   75..80       MOV     ?V1,#-0x80
    761            }
    762          
    763            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    764                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003A                ; Setup parameters for call to function ZDP_EPRsp
   \   00003A   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_552:
   \   00003D   F5..         MOV     ?V4,A
   \   00003F   78..         MOV     R0,#?V4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   000047   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00004A   78..         MOV     R0,#?V4
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   78..         MOV     R0,#?V0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   78..         MOV     R0,#?V2
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   E5..         MOV     A,?V1
   \   00005B   F5..         MOV     ?V0,A
   \   00005D   78..         MOV     R0,#?V0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   000065   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   000068   F9           MOV     R1,A
   \   000069   7A05         MOV     R2,#0x5
   \   00006B   7B80         MOV     R3,#-0x80
   \   00006D   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   000070   7407         MOV     A,#0x7
   \   000072   02....       LJMP    ?Subroutine5 & 0xFFFF
    765          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine182:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FD           MOV     R5,A
   \   000007   EE           MOV     A,R6
   \   000008   240F         ADD     A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine165 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003                REQUIRE ??Subroutine249_0
   \   000003                ; // Fall through to label ??Subroutine249_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine249_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine253_0
   \   000003                ; // Fall through to label ??Subroutine253_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine253_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    766          
    767          /*********************************************************************
    768           * @fn          ZDO_ConvertOTAClusters
    769           *
    770           * @brief       This function will convert the over-the-air cluster list
    771           *              format to an internal format.
    772           *
    773           * @param       inMsg  - incoming message (request)
    774           *
    775           * @return      pointer to incremented inBuf
    776           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    777          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    778          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
    779            uint8 x;
    780          
    781            for ( x = 0; x < cnt; x++ )
   \   000007   75..00       MOV     ?V0,#0x0
   \   00000A   8029         SJMP    ??ZDO_ConvertOTAClusters_0
    782            {
    783              // convert ota format to internal
    784              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   000013   F8           MOV     R0,A
   \   000014   E4           CLR     A
   \   000015   C8           XCH     A,R0
   \   000016   F9           MOV     R1,A
   \   000017   EE           MOV     A,R6
   \   000018   28           ADD     A,R0
   \   000019   E4           CLR     A
   \   00001A   39           ADDC    A,R1
   \   00001B   FF           MOV     R7,A
   \   00001C   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   00001F   EC           MOV     A,R4
   \   000020   28           ADD     A,R0
   \   000021   F582         MOV     DPL,A
   \   000023   ED           MOV     A,R5
   \   000024   39           ADDC    A,R1
   \   000025   F583         MOV     DPH,A
   \   000027   EE           MOV     A,R6
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   EF           MOV     A,R7
   \   00002B   F0           MOVX    @DPTR,A
    785              inBuf += sizeof( uint16 );
   \   00002C   EA           MOV     A,R2
   \   00002D   2402         ADD     A,#0x2
   \   00002F   FA           MOV     R2,A
   \   000030   5001         JNC     ??ZDO_ConvertOTAClusters_2
   \   000032   0B           INC     R3
    786            }
   \                     ??ZDO_ConvertOTAClusters_2:
   \   000033   05..         INC     ?V0
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000035   E5..         MOV     A,?V0
   \   000037   C3           CLR     C
   \   000038   95..         SUBB    A,?V1
   \   00003A   40D0         JC      ??ZDO_ConvertOTAClusters_1
    787            return ( inBuf );
   \   00003C   02....       LJMP    ??Subroutine210_0 & 0xFFFF
    788          }
    789          
    790          /*********************************************************************
    791           * @fn          ZDO_ProcessMatchDescReq
    792           *
    793           * @brief       This function processes and responds to the
    794           *              Match_Desc_req message.
    795           *
    796           * @param       inMsg  - incoming message (request)
    797           *
    798           * @return      none
    799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    800          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V14,R2
   \   00000C   8B..         MOV     ?V15,R3
    802            uint8 epCnt = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    803            uint8 numInClusters;
    804            uint16 *inClusters = NULL;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    805            uint8 numOutClusters;
    806            uint16 *outClusters = NULL;
   \   00001F   04           INC     A
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
    807            epList_t *epDesc;
    808            SimpleDescriptionFormat_t *sDesc = NULL;
    809            uint8 allocated;
    810            uint8 *msg;
    811            uint16 aoi;
    812            uint16 profileID;
    813          
    814            // Parse the incoming message
    815            msg = inMsg->asdu;
   \   000027   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   00002A   35..         ADDC    A,?V15
   \   00002C   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   00002F   F5..         MOV     ?V3,A
    816            aoi = BUILD_UINT16( msg[0], msg[1] );
   \   000031   85..82       MOV     DPL,?V2
   \   000034   F583         MOV     DPH,A
   \   000036   12....       LCALL   ??Subroutine270_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_687:
   \   000039   FE           MOV     R6,A
   \   00003A   E4           CLR     A
   \   00003B   39           ADDC    A,R1
   \   00003C   FF           MOV     R7,A
    817            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   00003D   85..82       MOV     DPL,?V2
   \   000040   85..83       MOV     DPH,?V3
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   FA           MOV     R2,A
   \   000047   85..82       MOV     DPL,?V2
   \   00004A   85..83       MOV     DPH,?V3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   EA           MOV     A,R2
   \   000053   F5..         MOV     ?V0,A
   \   000055   E4           CLR     A
   \   000056   39           ADDC    A,R1
   \   000057   F5..         MOV     ?V1,A
    818            msg += 4;
    819          
    820            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   000059                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000059   EE           MOV     A,R6
   \   00005A   FA           MOV     R2,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000060   E9           MOV     A,R1
   \   000061   6401         XRL     A,#0x1
   \   000063   6016         JZ      ??ZDO_ProcessMatchDescReq_0
    821            {
    822              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    823                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    824              return;
    825            }
    826            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   000065                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000065   EE           MOV     A,R6
   \   000066   FA           MOV     R2,A
   \   000067   EF           MOV     A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00006C   E9           MOV     A,R1
   \   00006D   703D         JNZ     ??ZDO_ProcessMatchDescReq_1
   \   00006F   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000072   E0           MOVX    A,@DPTR
   \   000073   6E           XRL     A,R6
   \   000074   7003         JNZ     ??ZDO_ProcessMatchDescReq_2
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   000079   6031         JZ      ??ZDO_ProcessMatchDescReq_1
    827            {
    828              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    829                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   00007B                ; Setup parameters for call to function ZDP_EPRsp
   \   00007B   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000081   E4           CLR     A
   \   000082   F5..         MOV     ?V0,A
   \   000084   F5..         MOV     ?V1,A
   \   000086   78..         MOV     R0,#?V0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000090   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000093   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000096   75..80       MOV     ?V0,#-0x80
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   0000A1   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0000A4   7407         MOV     A,#0x7
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
    830              return;
   \   0000A9   02....       LJMP    ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
    831            }
    832          
    833            if ((numInClusters = *msg++) &&
    834                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000AC   85..82       MOV     DPL,?V2
   \   0000AF   85..83       MOV     DPH,?V3
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F5..         MOV     ?V8,A
   \   0000B9   E5..         MOV     A,?V2
   \   0000BB   2405         ADD     A,#0x5
   \   0000BD   F5..         MOV     ?V2,A
   \   0000BF   5002         JNC     ??ZDO_ProcessMatchDescReq_4
   \   0000C1   05..         INC     ?V3
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000C3   E5..         MOV     A,?V8
   \   0000C5   6029         JZ      ??ZDO_ProcessMatchDescReq_5
   \   0000C7                ; Setup parameters for call to function osal_mem_alloc
   \   0000C7   12....       LCALL   ??Subroutine266_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_668:
   \   0000CA   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CD   7403         MOV     A,#0x3
   \   0000CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D2   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   0000DB   6013         JZ      ??ZDO_ProcessMatchDescReq_5
    835            {
    836              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000DD                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000DD   7403         MOV     A,#0x3
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   12....       LCALL   ?Subroutine106 & 0xFFFF
    837            }
   \                     ??CrossCallReturnLabel_164:
   \   0000E5   A9..         MOV     R1,?V8
   \   0000E7   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000EA   8A..         MOV     ?V2,R2
   \   0000EC   8B..         MOV     ?V3,R3
   \   0000EE   8003         SJMP    ??ZDO_ProcessMatchDescReq_6
    838            else
    839            {
    840              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000F0   75..00       MOV     ?V8,#0x0
    841            }
    842          
    843            if ((numOutClusters = *msg++) &&
    844                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   0000F3   85..82       MOV     DPL,?V2
   \   0000F6   85..83       MOV     DPH,?V3
   \   0000F9   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   0000FC   6027         JZ      ??ZDO_ProcessMatchDescReq_7
   \   0000FE                ; Setup parameters for call to function osal_mem_alloc
   \   0000FE   12....       LCALL   ??Subroutine266_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_669:
   \   000101   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000104   7401         MOV     A,#0x1
   \   000106   12....       LCALL   ?XSTACK_DISP0_8
   \   000109   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   00010C   7401         MOV     A,#0x1
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_433:
   \   000114   600F         JZ      ??ZDO_ProcessMatchDescReq_7
    845            {
    846              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000116                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000116   7401         MOV     A,#0x1
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   12....       LCALL   ?Subroutine106 & 0xFFFF
    847            }
   \                     ??CrossCallReturnLabel_165:
   \   00011E   A9..         MOV     R1,?V7
   \   000120   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   000123   8003         SJMP    ??ZDO_ProcessMatchDescReq_8
    848            else
    849            {
    850              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000125   75..00       MOV     ?V7,#0x0
    851            }
    852          
    853            // First count the number of endpoints that match.
    854            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   000128   90....       MOV     DPTR,#epList
   \   00012B   805C         SJMP    ??ZDO_ProcessMatchDescReq_9
    855            while ( epDesc )
    856            {
    857              // Don't search endpoint 0 and check if response is allowed
    858              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    859              {
    860                if ( epDesc->pfnDescCB )
    861                {
    862                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    863                  allocated = TRUE;
    864                }
    865                else
    866                {
    867                  sDesc = epDesc->epDesc->simpleDesc;
    868                  allocated = FALSE;
    869                }
    870          
    871                // Allow specific ProfileId or Wildcard ProfileID
    872                if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
    873                {
    874                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    875          
    876                  // Are there matching input clusters?
    877                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    878                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    879                      // Are there matching output clusters?
    880                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    881                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    882                  {
    883                    // Notify the endpoint of the match.
    884                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    885                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    886          
    887                    if (pRspSent)
    888                    {
    889                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    890                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    891                      pRspSent->numInClusters = numInClusters;
    892                      pRspSent->numOutClusters = numOutClusters;
    893          
    894                      if (numInClusters)
    895                      {
    896                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    897                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    898                      }
    899                      else
    900                      {
    901                        pRspSent->pInClusters = NULL;
    902                      }
    903          
    904                      if (numOutClusters)
    905                      {
    906                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    907                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    908                      }
    909                      else
    910                      {
    911                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   00012D   85..82       MOV     DPL,?V2
   \   000130   85..83       MOV     DPH,?V3
   \   000133   A3           INC     DPTR
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   E4           CLR     A
   \   00013C   F0           MOVX    @DPTR,A
   \   00013D   A3           INC     DPTR
   \   00013E   F0           MOVX    @DPTR,A
    912                      }
    913          
    914                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   00013F                ; Setup parameters for call to function osal_msg_send
   \   00013F   AA..         MOV     R2,?V2
   \   000141   AB..         MOV     R3,?V3
   \   000143   85..82       MOV     DPL,?V12
   \   000146   85..83       MOV     DPH,?V13
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   F8           MOV     R0,A
   \   00014D   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000150   F9           MOV     R1,A
   \   000151   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    915                    }
    916          
    917                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   000154   85..82       MOV     DPL,?V10
   \   000157   85..83       MOV     DPH,?V11
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   C0E0         PUSH    A
   \   00015D   85..82       MOV     DPL,?XSP + 0
   \   000160   85..83       MOV     DPH,?XSP + 1
   \   000163   E0           MOVX    A,@DPTR
   \   000164   F8           MOV     R0,A
   \   000165   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   000167   28           ADD     A,R0
   \   000168   F582         MOV     DPL,A
   \   00016A   E4           CLR     A
   \   00016B   34..         ADDC    A,#(ZDOBuildBuf >> 8) & 0xff
   \   00016D   F583         MOV     DPH,A
   \   00016F   D0E0         POP     A
   \   000171   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000174   04           INC     A
   \   000175   F0           MOVX    @DPTR,A
    918                  }
    919                }
    920          
    921                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000176   E5..         MOV     A,?V9
   \   000178   A2E0         MOV     C,0xE0 /* A   */.0
   \   00017A   5007         JNC     ??ZDO_ProcessMatchDescReq_14
    922                {
    923                  osal_mem_free( sDesc );
   \   00017C                ; Setup parameters for call to function osal_mem_free
   \   00017C   AA..         MOV     R2,?V10
   \   00017E   AB..         MOV     R3,?V11
   \   000180   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    924                }
    925              }
    926              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000183   85..82       MOV     DPL,?V12
   \   000186   85..83       MOV     DPH,?V13
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   F5..         MOV     ?V12,A
   \   00018C   A3           INC     DPTR
   \   00018D   E0           MOVX    A,@DPTR
   \   00018E   F5..         MOV     ?V13,A
   \   000190   E5..         MOV     A,?V12
   \   000192   45..         ORL     A,?V13
   \   000194   7003         JNZ     $+5
   \   000196   02....       LJMP    ??ZDO_ProcessMatchDescReq_15 & 0xFFFF
   \   000199   85..82       MOV     DPL,?V12
   \   00019C   85..83       MOV     DPH,?V13
   \   00019F   A3           INC     DPTR
   \   0001A0   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   0001A3   60DE         JZ      ??ZDO_ProcessMatchDescReq_14
   \   0001A5   85..82       MOV     DPL,?V12
   \   0001A8   85..83       MOV     DPH,?V13
   \   0001AB   A3           INC     DPTR
   \   0001AC   A3           INC     DPTR
   \   0001AD   A3           INC     DPTR
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \   0001B2   A3           INC     DPTR
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001B6   50CB         JNC     ??ZDO_ProcessMatchDescReq_14
   \   0001B8   85..82       MOV     DPL,?V12
   \   0001BB   85..83       MOV     DPH,?V13
   \   0001BE   A3           INC     DPTR
   \   0001BF   A3           INC     DPTR
   \   0001C0   A3           INC     DPTR
   \   0001C1   A3           INC     DPTR
   \   0001C2   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   0001C5   85..82       MOV     DPL,?V12
   \   0001C8   85..83       MOV     DPH,?V13
   \   0001CB   A3           INC     DPTR
   \   0001CC   A3           INC     DPTR
   \   0001CD   601F         JZ      ??ZDO_ProcessMatchDescReq_16
   \   0001CF                ; Setup parameters for indirect call
   \   0001CF   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   0001D2   FA           MOV     R2,A
   \   0001D3   7901         MOV     R1,#0x1
   \   0001D5   85..82       MOV     DPL,?V12
   \   0001D8   85..83       MOV     DPH,?V13
   \   0001DB   A3           INC     DPTR
   \   0001DC   A3           INC     DPTR
   \   0001DD   A3           INC     DPTR
   \   0001DE   A3           INC     DPTR
   \   0001DF   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0001E2   12....       LCALL   ?CALL_IND
   \   0001E5   8A..         MOV     ?V10,R2
   \   0001E7   8B..         MOV     ?V11,R3
   \   0001E9   75..01       MOV     ?V9,#0x1
   \   0001EC   8010         SJMP    ??ZDO_ProcessMatchDescReq_17
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   0001EE   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   E0           MOVX    A,@DPTR
   \   0001F5   F5..         MOV     ?V10,A
   \   0001F7   A3           INC     DPTR
   \   0001F8   E0           MOVX    A,@DPTR
   \   0001F9   F5..         MOV     ?V11,A
   \   0001FB   75..00       MOV     ?V9,#0x0
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   0001FE   E5..         MOV     A,?V10
   \   000200   45..         ORL     A,?V11
   \   000202   7003         JNZ     $+5
   \   000204   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \   000207   85..82       MOV     DPL,?V10
   \   00020A   85..83       MOV     DPH,?V11
   \   00020D   A3           INC     DPTR
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   65..         XRL     A,?V0
   \   000211   7004         JNZ     ??ZDO_ProcessMatchDescReq_18
   \   000213   A3           INC     DPTR
   \   000214   E0           MOVX    A,@DPTR
   \   000215   65..         XRL     A,?V1
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   000217   600F         JZ      ??ZDO_ProcessMatchDescReq_19
   \   000219   74FF         MOV     A,#-0x1
   \   00021B   65..         XRL     A,?V0
   \   00021D   7004         JNZ     ??ZDO_ProcessMatchDescReq_20
   \   00021F   74FF         MOV     A,#-0x1
   \   000221   65..         XRL     A,?V1
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   000223   6003         JZ      $+5
   \   000225   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   000228                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000228   85..82       MOV     DPL,?V10
   \   00022B   85..83       MOV     DPH,?V11
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   A3           INC     DPTR
   \   000234   A3           INC     DPTR
   \   000235   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000238   85..82       MOV     DPL,?V10
   \   00023B   85..83       MOV     DPH,?V11
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   A3           INC     DPTR
   \   000242   A3           INC     DPTR
   \   000243   A3           INC     DPTR
   \   000244   E0           MOVX    A,@DPTR
   \   000245   FC           MOV     R4,A
   \   000246   7405         MOV     A,#0x5
   \   000248   12....       LCALL   ?XSTACK_DISP0_8
   \   00024B   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   00024E   A9..         MOV     R1,?V8
   \   000250   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   000253   7402         MOV     A,#0x2
   \   000255   12....       LCALL   ?DEALLOC_XSTACK8
   \   000258   E9           MOV     A,R1
   \   000259   703C         JNZ     ??ZDO_ProcessMatchDescReq_21
   \   00025B                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   00025B   85..82       MOV     DPL,?V10
   \   00025E   85..83       MOV     DPH,?V11
   \   000261   A3           INC     DPTR
   \   000262   A3           INC     DPTR
   \   000263   A3           INC     DPTR
   \   000264   A3           INC     DPTR
   \   000265   A3           INC     DPTR
   \   000266   A3           INC     DPTR
   \   000267   A3           INC     DPTR
   \   000268   A3           INC     DPTR
   \   000269   A3           INC     DPTR
   \   00026A   A3           INC     DPTR
   \   00026B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00026E   85..82       MOV     DPL,?V10
   \   000271   85..83       MOV     DPH,?V11
   \   000274   A3           INC     DPTR
   \   000275   A3           INC     DPTR
   \   000276   A3           INC     DPTR
   \   000277   A3           INC     DPTR
   \   000278   A3           INC     DPTR
   \   000279   A3           INC     DPTR
   \   00027A   A3           INC     DPTR
   \   00027B   A3           INC     DPTR
   \   00027C   A3           INC     DPTR
   \   00027D   E0           MOVX    A,@DPTR
   \   00027E   FC           MOV     R4,A
   \   00027F   7403         MOV     A,#0x3
   \   000281   12....       LCALL   ?XSTACK_DISP0_8
   \   000284   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   000287   A9..         MOV     R1,?V7
   \   000289   12....       LCALL   `??ZDO_AnyClusterMatches::?relay`; Banked call to: ZDO_AnyClusterMatches
   \   00028C   7402         MOV     A,#0x2
   \   00028E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000291   E9           MOV     A,R1
   \   000292   7003         JNZ     $+5
   \   000294   02....       LJMP    ??ZDO_ProcessMatchDescReq_13 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   000297                ; Setup parameters for call to function osal_msg_allocate
   \   000297   E5..         MOV     A,?V7
   \   000299   25..         ADD     A,?V8
   \   00029B   C3           CLR     C
   \   00029C   33           RLC     A
   \   00029D   240A         ADD     A,#0xa
   \   00029F   FA           MOV     R2,A
   \   0002A0   7B00         MOV     R3,#0x0
   \   0002A2   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   0002A5   8A..         MOV     ?V2,R2
   \   0002A7   8B..         MOV     ?V3,R3
   \   0002A9   EA           MOV     A,R2
   \   0002AA   45..         ORL     A,?V3
   \   0002AC   7003         JNZ     $+5
   \   0002AE   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   0002B1   8A82         MOV     DPL,R2
   \   0002B3   8B83         MOV     DPH,R3
   \   0002B5   74D2         MOV     A,#-0x2e
   \   0002B7   F0           MOVX    @DPTR,A
   \   0002B8   85..82       MOV     DPL,?V14
   \   0002BB   85..83       MOV     DPH,?V15
   \   0002BE   A3           INC     DPTR
   \   0002BF   A3           INC     DPTR
   \   0002C0   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   0002C3   8A82         MOV     DPL,R2
   \   0002C5   8B83         MOV     DPH,R3
   \   0002C7   A3           INC     DPTR
   \   0002C8   A3           INC     DPTR
   \   0002C9   E8           MOV     A,R0
   \   0002CA   F0           MOVX    @DPTR,A
   \   0002CB   A3           INC     DPTR
   \   0002CC   E9           MOV     A,R1
   \   0002CD   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   0002D0   A3           INC     DPTR
   \   0002D1   E5..         MOV     A,?V8
   \   0002D3   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0002D6   E5..         MOV     A,?V7
   \   0002D8   F0           MOVX    @DPTR,A
   \   0002D9   E5..         MOV     A,?V8
   \   0002DB   602F         JZ      ??ZDO_ProcessMatchDescReq_22
   \   0002DD   12....       LCALL   ?Subroutine187 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   0002E0   35..         ADDC    A,?V3
   \   0002E2   FB           MOV     R3,A
   \   0002E3   85..82       MOV     DPL,?V2
   \   0002E6   85..83       MOV     DPH,?V3
   \   0002E9   A3           INC     DPTR
   \   0002EA   A3           INC     DPTR
   \   0002EB   A3           INC     DPTR
   \   0002EC   A3           INC     DPTR
   \   0002ED   A3           INC     DPTR
   \   0002EE   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0002F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002F4   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   0002F7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002FA   AC..         MOV     R4,?V8
   \   0002FC   EC           MOV     A,R4
   \   0002FD   2C           ADD     A,R4
   \   0002FE   FC           MOV     R4,A
   \   0002FF   E4           CLR     A
   \   000300   33           RLC     A
   \   000301   FD           MOV     R5,A
   \   000302   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000305   7403         MOV     A,#0x3
   \   000307   12....       LCALL   ?DEALLOC_XSTACK8
   \   00030A   800D         SJMP    ??ZDO_ProcessMatchDescReq_23
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   00030C   8A82         MOV     DPL,R2
   \   00030E   8B83         MOV     DPH,R3
   \   000310   A3           INC     DPTR
   \   000311   A3           INC     DPTR
   \   000312   A3           INC     DPTR
   \   000313   A3           INC     DPTR
   \   000314   A3           INC     DPTR
   \   000315   E4           CLR     A
   \   000316   F0           MOVX    @DPTR,A
   \   000317   A3           INC     DPTR
   \   000318   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   000319   E5..         MOV     A,?V7
   \   00031B   7003         JNZ     $+5
   \   00031D   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
   \   000320   A8..         MOV     R0,?V8
   \   000322   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000325   E5..         MOV     A,?V2
   \   000327   28           ADD     A,R0
   \   000328   F8           MOV     R0,A
   \   000329   E5..         MOV     A,?V3
   \   00032B   39           ADDC    A,R1
   \   00032C   F9           MOV     R1,A
   \   00032D   E8           MOV     A,R0
   \   00032E   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   000331   39           ADDC    A,R1
   \   000332   FB           MOV     R3,A
   \   000333   85..82       MOV     DPL,?V2
   \   000336   85..83       MOV     DPH,?V3
   \   000339   A3           INC     DPTR
   \   00033A   A3           INC     DPTR
   \   00033B   A3           INC     DPTR
   \   00033C   A3           INC     DPTR
   \   00033D   A3           INC     DPTR
   \   00033E   A3           INC     DPTR
   \   00033F   A3           INC     DPTR
   \   000340   A3           INC     DPTR
   \   000341   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000344                ; Setup parameters for call to function osal_memcpy
   \   000344   7401         MOV     A,#0x1
   \   000346   12....       LCALL   ?XSTACK_DISP0_8
   \   000349   12....       LCALL   ?Subroutine89 & 0xFFFF
    927            }
   \                     ??CrossCallReturnLabel_147:
   \   00034C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00034F   AC..         MOV     R4,?V7
   \   000351   EC           MOV     A,R4
   \   000352   2C           ADD     A,R4
   \   000353   FC           MOV     R4,A
   \   000354   E4           CLR     A
   \   000355   33           RLC     A
   \   000356   FD           MOV     R5,A
   \   000357   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00035A   7403         MOV     A,#0x3
   \   00035C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00035F   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
    928          
    929            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   000362   85..82       MOV     DPL,?XSP + 0
   \   000365   85..83       MOV     DPH,?XSP + 1
   \   000368   E0           MOVX    A,@DPTR
   \   000369   6027         JZ      ??ZDO_ProcessMatchDescReq_24
    930            {
    931              // Send the message if at least one match found.
    932              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    933                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   00036B                ; Setup parameters for call to function ZDP_EPRsp
   \   00036B   12....       LCALL   ?Subroutine78 & 0xFFFF
    934              {
    935          #if defined( LCD_SUPPORTED )
    936                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
    937          #endif
    938              }
    939            }
   \                     ??CrossCallReturnLabel_349:
   \   00036E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000371   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   000374   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   000377   78..         MOV     R0,#?V0
   \   000379   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00037C   7403         MOV     A,#0x3
   \   00037E   12....       LCALL   ?XSTACK_DISP0_8
   \   000381   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000384   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000387   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00038A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00038D   75..00       MOV     ?V0,#0x0
   \   000390   8029         SJMP    ??ZDO_ProcessMatchDescReq_25
    940            else
    941            {
    942              // No match found
    943              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   000392                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000392   EE           MOV     A,R6
   \   000393   FA           MOV     R2,A
   \   000394   EF           MOV     A,R7
   \   000395   FB           MOV     R3,A
   \   000396   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   000399   E9           MOV     A,R1
   \   00039A   702F         JNZ     ??ZDO_ProcessMatchDescReq_26
    944              {
    945                // send response message with match length = 0
    946                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    947                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   00039C                ; Setup parameters for call to function ZDP_EPRsp
   \   00039C   12....       LCALL   ?Subroutine78 & 0xFFFF
    948          #if defined( LCD_SUPPORTED )
    949                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
    950          #endif
    951              }
    952              else
    953              {
    954                // no response mesage for broadcast message
    955          #if defined( LCD_SUPPORTED )
    956                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
    957          #endif
    958              }
    959            }
   \                     ??CrossCallReturnLabel_350:
   \   00039F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003A2   75....       MOV     ?V0,#ZDOBuildBuf & 0xff
   \   0003A5   75....       MOV     ?V1,#(ZDOBuildBuf >> 8) & 0xff
   \   0003A8   78..         MOV     R0,#?V0
   \   0003AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003AD   75..00       MOV     ?V0,#0x0
   \   0003B0   78..         MOV     R0,#?V0
   \   0003B2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003B5   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0003B8   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   0003BB   78..         MOV     R0,#?V0
   \   0003BD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003C0   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   0003C3   12....       LCALL   `??ZDP_EPRsp::?relay`; Banked call to: ZDP_EPRsp
   \   0003C6   7407         MOV     A,#0x7
   \   0003C8   12....       LCALL   ?DEALLOC_XSTACK8
    960          
    961            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   0003CB   7403         MOV     A,#0x3
   \   0003CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0003D0   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_435:
   \   0003D3   600B         JZ      ??ZDO_ProcessMatchDescReq_27
    962            {
    963              osal_mem_free( inClusters );
   \   0003D5                ; Setup parameters for call to function osal_mem_free
   \   0003D5   7403         MOV     A,#0x3
   \   0003D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0003DA   12....       LCALL   ??Subroutine241_0 & 0xFFFF
    964            }
   \                     ??CrossCallReturnLabel_482:
   \   0003DD   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    965          
    966            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   0003E0   7401         MOV     A,#0x1
   \   0003E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E5   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_436:
   \   0003E8   600B         JZ      ??ZDO_ProcessMatchDescReq_3
    967            {
    968              osal_mem_free( outClusters );
   \   0003EA                ; Setup parameters for call to function osal_mem_free
   \   0003EA   7401         MOV     A,#0x1
   \   0003EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EF   12....       LCALL   ??Subroutine241_0 & 0xFFFF
    969            }
   \                     ??CrossCallReturnLabel_483:
   \   0003F2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    970          }
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   0003F5   7405         MOV     A,#0x5
   \   0003F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003FA   7F10         MOV     R7,#0x10
   \   0003FC   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   E5..         MOV     A,?V14
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V15
   \   000008   FD           MOV     R5,A
   \   000009   E5..         MOV     A,?V14
   \   00000B   240F         ADD     A,#0xf
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   35..         ADDC    A,?V15
   \   000012   F583         MOV     DPH,A
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   7A06         MOV     R2,#0x6
   \   000018   7B80         MOV     R3,#-0x80
   \   00001A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_558:
   \   000003   FD           MOV     R5,A
   \   000004   AA..         MOV     R2,?V2
   \   000006   AB..         MOV     R3,?V3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V5,A
   \   000007   75..00       MOV     ?V6,#0x0
   \   00000A   78..         MOV     R0,#?V4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine212_0
   \   000002                ; // Fall through to label ??Subroutine212_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005                ; Setup parameters for call to function osal_memcpy
   \   000005                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000005   7403         MOV     A,#0x3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E5..         MOV     A,?V14
   \   000002   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   000005   35..         ADDC    A,?V15
   \   000007                REQUIRE ??Subroutine214_0
   \   000007                ; // Fall through to label ??Subroutine214_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine215_0
   \   000002                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   78..         MOV     R0,#?V0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine225_0
   \   000001                ; // Fall through to label ??Subroutine225_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_667:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine232_0:
   \   000000   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine187:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine258_0
   \   000001                ; // Fall through to label ??Subroutine258_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine258_0:
   \   000000   240A         ADD     A,#0xa
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine154:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V7,A
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V2,DPL
   \   000007   8583..       MOV     ?V3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine265_0:
   \   000000   2413         ADD     A,#0x13
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine266_0:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine176:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine270_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_693:
   \   000005   EA           MOV     A,R2
   \   000006   28           ADD     A,R0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
    971          
    972          #if defined ( REFLECTOR )
    973          /*********************************************************************
    974           * @fn      ZDO_ProcessBindUnbindReq()
    975           *
    976           * @brief   Called to process a Bind or Unbind Request message.
    977           *
    978           * @param   inMsg  - incoming message (request)
    979           * @param   pReq - place to put parsed information
    980           *
    981           * @return  none
    982           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    983          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    984          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    985            zAddrType_t SourceAddr;       // Binding Source addres
    986            byte bindStat;
    987          
    988            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    989            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP101_8
   \   00001D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    990          
    991            // If the local device is not the primary binding cache
    992            // check the src address of the bind request.
    993            // If it is not the local device's extended address
    994            // discard the request.
    995            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    996                  (pReq->dstAddress.addrMode != Addr64Bit &&
    997                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000020                ; Setup parameters for call to function NLME_GetExtAddr
   \   000020   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000023   8A..         MOV     ?V2,R2
   \   000025   8B..         MOV     ?V3,R3
   \   000027   AC..         MOV     R4,?V2
   \   000029   AD..         MOV     R5,?V3
   \   00002B                ; Setup parameters for call to function sAddrExtCmp
   \   00002B   7403         MOV     A,#0x3
   \   00002D   12....       LCALL   ?XSTACK_DISP101_8
   \   000030   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   000033   E9           MOV     A,R1
   \   000034   600A         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   000036   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000039   6010         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6401         XRL     A,#0x1
   \   00003E   600B         JZ      ??ZDO_ProcessBindUnbindReq_1
    998            {
    999              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   7484         MOV     A,#-0x7c
   \   000048   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1000            }
   1001            else
   1002            {
   1003              // Check source & destination endpoints
   1004              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
   1005                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1006                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6013         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00005A   F4           CPL     A
   \   00005B   6010         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00005D   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000060   7016         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   000062   EE           MOV     A,R6
   \   000063   2414         ADD     A,#0x14
   \   000065   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   000068   6003         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00006A   F4           CPL     A
   \   00006B   700B         JNZ     ??ZDO_ProcessBindUnbindReq_4
   1007              {
   1008                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   7482         MOV     A,#-0x7e
   \   000075   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
   1009              }
   1010              else
   1011              {
   1012                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   000078   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   6421         XRL     A,#0x21
   \   00007E   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   000080   A3           INC     DPTR
   \   000081   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   000082   6003         JZ      $+5
   \   000084   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
   1013                {
   1014                  // Assume the table is full
   1015                  bindStat = ZDP_TABLE_FULL;
   \   000087   85..82       MOV     DPL,?XSP + 0
   \   00008A   85..83       MOV     DPH,?XSP + 1
   \   00008D   748C         MOV     A,#-0x74
   \   00008F   12....       LCALL   ?Subroutine35 & 0xFFFF
   1016          
   1017          #if defined( APP_TP ) || defined( APP_TP2 )
   1018                  // For ZigBee Conformance Testing
   1019                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1020          #endif
   1021                  {
   1022          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1023                    uint16 nwkAddr;
   1024          
   1025                    // Verifies that a valid NWK address exists for the device
   1026                    // before creating a Binding entry. If NWK address does not
   1027                    // exist the request is sent out and the BindReq is saved, to
   1028                    // create the Bind Entry once the NwkAddrRsp is received
   1029                    if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1030                         ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
   \                     ??CrossCallReturnLabel_48:
   \   000092   6403         XRL     A,#0x3
   \   000094   6003         JZ      $+5
   \   000096   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   \   000099                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000099   7401         MOV     A,#0x1
   \   00009B   12....       LCALL   ?XSTACK_DISP102_8
   \   00009E   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0000A1   12....       LCALL   `??APSME_LookupNwkAddr::?relay`; Banked call to: APSME_LookupNwkAddr
   \   0000A4   E9           MOV     A,R1
   \   0000A5   6003         JZ      $+5
   \   0000A7   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   1031                    {
   1032                      // find an empty bind slot in the pending Bind Req list
   1033                      ZDO_PendingBindReq_t *pPendingBind;
   1034          
   1035                      if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
   \   0000AA                ; Setup parameters for call to function ZDApp_GetEmptyPendingBindReq
   \   0000AA   12....       LCALL   `??ZDApp_GetEmptyPendingBindReq::?relay`; Banked call to: ZDApp_GetEmptyPendingBindReq
   \   0000AD   8A..         MOV     ?V2,R2
   \   0000AF   8B..         MOV     ?V3,R3
   \   0000B1   EA           MOV     A,R2
   \   0000B2   45..         ORL     A,?V3
   \   0000B4   7003         JNZ     $+5
   \   0000B6   02....       LJMP    ??ZDO_ProcessBindUnbindReq_8 & 0xFFFF
   1036                      {
   1037                        // copy the received request into the empty slot and all required info
   1038                        osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
   \   0000B9                ; Setup parameters for call to function osal_memcpy
   \   0000B9   8E..         MOV     ?V4,R6
   \   0000BB   8F..         MOV     ?V5,R7
   \   0000BD   75..00       MOV     ?V6,#0x0
   \   0000C0   78..         MOV     R0,#?V4
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C5   7C15         MOV     R4,#0x15
   \   0000C7   7D00         MOV     R5,#0x0
   \   0000C9   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000CC   7403         MOV     A,#0x3
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
   1039          
   1040                        pPendingBind->srcAddr = inMsg->srcAddr;
   \   0000D1   85..82       MOV     DPL,?V0
   \   0000D4   85..83       MOV     DPH,?V1
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   E5..         MOV     A,?V2
   \   0000DB   2415         ADD     A,#0x15
   \   0000DD   FC           MOV     R4,A
   \   0000DE   E4           CLR     A
   \   0000DF   35..         ADDC    A,?V3
   \   0000E1   FD           MOV     R5,A
   \   0000E2   7409         MOV     A,#0x9
   \   0000E4   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1041                        pPendingBind->securityUse = inMsg->SecurityUse;
   \   0000E7   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   0000EA   C0E0         PUSH    A
   \   0000EC   E5..         MOV     A,?V2
   \   0000EE   241E         ADD     A,#0x1e
   \   0000F0   F582         MOV     DPL,A
   \   0000F2   E4           CLR     A
   \   0000F3   35..         ADDC    A,?V3
   \   0000F5   F583         MOV     DPH,A
   \   0000F7   D0E0         POP     A
   \   0000F9   12....       LCALL   ?Subroutine30 & 0xFFFF
   1042                        pPendingBind->transSeq = inMsg->TransSeq;
   \                     ??CrossCallReturnLabel_37:
   \   0000FC   C0E0         PUSH    A
   \   0000FE   E5..         MOV     A,?V2
   \   000100   241F         ADD     A,#0x1f
   \   000102   F582         MOV     DPL,A
   \   000104   E4           CLR     A
   \   000105   35..         ADDC    A,?V3
   \   000107   F583         MOV     DPH,A
   \   000109   D0E0         POP     A
   \   00010B   F0           MOVX    @DPTR,A
   1043                        pPendingBind->age = MAX_TIME_ADDR_REQ;
   \   00010C   E5..         MOV     A,?V2
   \   00010E   2420         ADD     A,#0x20
   \   000110   F582         MOV     DPL,A
   \   000112   E4           CLR     A
   \   000113   35..         ADDC    A,?V3
   \   000115   F583         MOV     DPH,A
   \   000117   7405         MOV     A,#0x5
   \   000119   F0           MOVX    @DPTR,A
   1044          
   1045                        // create an entry in Address Manager
   1046                        ( void )bindAddrIndexGet( &(pReq->dstAddress) );
   \   00011A   EE           MOV     A,R6
   \   00011B   240B         ADD     A,#0xb
   \   00011D   FE           MOV     R6,A
   \   00011E   5001         JNC     ??ZDO_ProcessBindUnbindReq_9
   \   000120   0F           INC     R7
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000121                ; Setup parameters for call to function bindAddrIndexGet
   \   000121   FA           MOV     R2,A
   \   000122   EF           MOV     A,R7
   \   000123   FB           MOV     R3,A
   \   000124   12....       LCALL   `??bindAddrIndexGet::?relay`; Banked call to: bindAddrIndexGet
   1047          
   1048                        ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   000127                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000127   7D00         MOV     R5,#0x0
   \   000129   7C00         MOV     R4,#0x0
   \   00012B   7900         MOV     R1,#0x0
   \   00012D   EE           MOV     A,R6
   \   00012E   FA           MOV     R2,A
   \   00012F   EF           MOV     A,R7
   \   000130   FB           MOV     R3,A
   \   000131   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   1049          
   1050                        osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   1051                                            AGE_OUT_PEND_BIND_REQ_DELAY );
   \   000134                ; Setup parameters for call to function osal_start_timerEx
   \   000134   90....       MOV     DPTR,#__Constant_3e8
   \   000137   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00013A   7A00         MOV     R2,#0x0
   \   00013C   7B10         MOV     R3,#0x10
   \   00013E   90....       MOV     DPTR,#ZDAppTaskID
   \   000141   E0           MOVX    A,@DPTR
   \   000142   F9           MOV     R1,A
   \   000143   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000146   7404         MOV     A,#0x4
   \   000148   12....       LCALL   ?DEALLOC_XSTACK8
   1052                        return;
   \   00014B   8078         SJMP    ??ZDO_ProcessBindUnbindReq_10
   1053                      }
   1054                    }
   1055                    // Add Bind entry
   1056                    else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1057                                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   00014D                ; Setup parameters for call to function APSME_BindRequest
   \   00014D   12....       LCALL   ?Subroutine129 & 0xFFFF
   1058                    {
   1059                      // valid entry
   1060                      bindStat = ZDP_SUCCESS;
   1061          
   1062                      // Notify to save info into NV
   1063                      ZDApp_NVUpdate();
   1064                    }
   1065          #else // ZDP_BIND_SKIP_VALIDATION  is defined
   1066                    // Create binding entry first independently of existance of  valid NWK addres
   1067                    // if NWK address does not exist a request is sent out
   1068                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1069                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   1070                    {
   1071                      uint16 nwkAddr;
   1072          
   1073                      // valid entry
   1074                      bindStat = ZDP_SUCCESS;
   1075          
   1076                      // Notify to save info into NV
   1077                      ZDApp_NVUpdate();
   1078          
   1079                      // Check for the destination address
   1080                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   1081                      {
   1082                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   1083                        {
   1084                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1085                        }
   1086                      }
   1087                    }
   1088          #endif
   1089                  }
   1090                }
   \                     ??CrossCallReturnLabel_206:
   \   000150   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000153   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000156   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   000159   7401         MOV     A,#0x1
   \   00015B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015E   E9           MOV     A,R1
   \   00015F   702C         JNZ     ??ZDO_ProcessBindUnbindReq_8
   \   000161   8014         SJMP    ??ZDO_ProcessBindUnbindReq_11
   1091                else // Unbind_req
   1092                {
   1093                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1094                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   000163                ; Setup parameters for call to function APSME_UnBindRequest
   \   000163   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000166   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000169   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00016C   12....       LCALL   `??APSME_UnBindRequest::?relay`; Banked call to: APSME_UnBindRequest
   \   00016F   7401         MOV     A,#0x1
   \   000171   12....       LCALL   ?DEALLOC_XSTACK8
   \   000174   E9           MOV     A,R1
   \   000175   700D         JNZ     ??ZDO_ProcessBindUnbindReq_12
   1095                  {
   1096                    bindStat = ZDP_SUCCESS;
   \                     ??ZDO_ProcessBindUnbindReq_11:
   \   000177   85..82       MOV     DPL,?XSP + 0
   \   00017A   85..83       MOV     DPH,?XSP + 1
   \   00017D   E4           CLR     A
   \   00017E   F0           MOVX    @DPTR,A
   1097          
   1098                    // Notify to save info into NV
   1099                    ZDApp_NVUpdate();
   \   00017F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00017F   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   000182   8009         SJMP    ??ZDO_ProcessBindUnbindReq_8
   1100                  }
   1101                  else
   1102                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_12:
   \   000184   85..82       MOV     DPL,?XSP + 0
   \   000187   85..83       MOV     DPH,?XSP + 1
   \   00018A   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   00018C   F0           MOVX    @DPTR,A
   1103                }
   1104              }
   1105            }
   1106          
   1107            // Send back a response message
   1108            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1109                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1110                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   00018D                ; Setup parameters for call to function ZDP_SendData
   \   00018D   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000190   F5..         MOV     ?V2,A
   \   000192   78..         MOV     R0,#?V2
   \   000194   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000197   7401         MOV     A,#0x1
   \   000199   12....       LCALL   ?XSTACK_DISP100_8
   \   00019C   88..         MOV     ?V2,R0
   \   00019E   89..         MOV     ?V3,R1
   \   0001A0   78..         MOV     R0,#?V2
   \   0001A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A5   E5..         MOV     A,?V0
   \   0001A7   240C         ADD     A,#0xc
   \   0001A9   F582         MOV     DPL,A
   \   0001AB   E4           CLR     A
   \   0001AC   35..         ADDC    A,?V1
   \   0001AE   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   0001B1   4480         ORL     A,#0x80
   \   0001B3   F5..         MOV     ?V3,A
   \   0001B5   78..         MOV     R0,#?V2
   \   0001B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BA   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   0001BD   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001C0   7405         MOV     A,#0x5
   \   0001C2   12....       LCALL   ?DEALLOC_XSTACK8
   1111          }
   \                     ??ZDO_ProcessBindUnbindReq_10:
   \   0001C5   740C         MOV     A,#0xc
   \   0001C7                REQUIRE ?Subroutine9
   \   0001C7                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   80..         SJMP    ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V2,A
   \   000007   78..         MOV     R0,#?V2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   12....       LCALL   ?Subroutine183 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   6403         XRL     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FC           MOV     R4,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FD           MOV     R5,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   12....       LCALL   ??Subroutine243_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E5..         MOV     A,?V0
   \   000003   240F         ADD     A,#0xf
   \   000005   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine190:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine223_0
   \   000003                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   35..         ADDC    A,?V1
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   7901         MOV     R1,#0x1
   \   000002   E5..         MOV     A,?V0
   \   000004   2402         ADD     A,#0x2
   \   000006   FC           MOV     R4,A
   \   000007   E4           CLR     A
   \   000008   35..         ADDC    A,?V1
   \   00000A   FD           MOV     R5,A
   \   00000B   E5..         MOV     A,?V0
   \   00000D   240F         ADD     A,#0xf
   \   00000F   FA           MOV     R2,A
   \   000010   E4           CLR     A
   \   000011   35..         ADDC    A,?V1
   \   000013   FB           MOV     R3,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   000005   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine188:
   \   000000   2414         ADD     A,#0x14
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   E5..         MOV     A,?V0
   \   000002   240C         ADD     A,#0xc
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET
   1112          #endif // REFLECTOR
   1113          
   1114          /*********************************************************************
   1115           * @fn      ZDO_UpdateAddrManager
   1116           *
   1117           * @brief   Update the Address Manager.
   1118           *
   1119           * @param   nwkAddr - network address
   1120           * @param   extAddr - extended address
   1121           *
   1122           * @return  none
   1123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1124          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1125          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1126            AddrMgrEntry_t addrEntry;
   1127          
   1128            // Update the address manager
   1129            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1130            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine46 & 0xFFFF
   1131            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_72:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   AA82         MOV     R2,DPL
   \   00001D   AB83         MOV     R3,DPH
   \   00001F   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   1132            AddrMgrEntryUpdate( &addrEntry );
   \   000022                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000022   AA..         MOV     R2,?XSP + 0
   \   000024   AB..         MOV     R3,?XSP + 1
   \   000026   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   1133          }
   \   000029   740D         MOV     A,#0xd
   \   00002B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002E   02....       LJMP    ?Subroutine0 & 0xFFFF
   1134          
   1135          /*********************************************************************
   1136           * @fn      ZDO_ProcessServerDiscReq
   1137           *
   1138           * @brief   Process the Server_Discovery_req message.
   1139           *
   1140           * @param   inMsg  - incoming message (request)
   1141           *
   1142           * @return  none
   1143           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1144          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1145          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine75 & 0xFFFF
   1146            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1147            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \                     ??CrossCallReturnLabel_120:
   \   000008   FA           MOV     R2,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   EA           MOV     A,R2
   \   00000D   F8           MOV     R0,A
   \   00000E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   58           ANL     A,R0
   \   000013   F5..         MOV     ?V0,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   59           ANL     A,R1
   \   000018   F5..         MOV     ?V1,A
   1148          
   1149            if ( matchMask )
   \   00001A   E5..         MOV     A,?V0
   \   00001C   45..         ORL     A,?V1
   \   00001E   601C         JZ      ??ZDO_ProcessServerDiscReq_0
   1150            {
   1151              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1152                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000020                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000025   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000028   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002B   12....       LCALL   ?Subroutine130 & 0xFFFF
   1153            }
   \                     ??CrossCallReturnLabel_553:
   \   00002E   FD           MOV     R5,A
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000034   12....       LCALL   `??ZDP_ServerDiscRsp::?relay`; Banked call to: ZDP_ServerDiscRsp
   \   000037   7404         MOV     A,#0x4
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   1154          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   00003C   02....       LJMP    ??Subroutine210_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine184:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ??Subroutine265_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_664:
   \   000004   3F           ADDC    A,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000007   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine174:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003                REQUIRE ??Subroutine230_0
   \   000003                ; // Fall through to label ??Subroutine230_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ?Subroutine181 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000003   22           RET
   1155          
   1156          #if defined ( ZIGBEE_CHILD_AGING )
   1157          /*********************************************************************
   1158           * @fn          ZDO_ProcessEndDeviceTimeoutReq
   1159           *
   1160           * @brief       This function processes and responds to the
   1161           *              End_Device_Timeout_Req message.
   1162           *
   1163           * @param       inMsg  - incoming message (request)
   1164           *
   1165           * @return      none
   1166           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine208_0
   \   000003                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1167          void ZDO_ProcessEndDeviceTimeoutReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessEndDeviceTimeoutReq:
   1168          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1169            uint8 stat = ZDP_SUCCESS;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   1170            uint8 *ieee = NULL;
   1171            uint16 reqTimeout;
   1172          
   1173            // Only process this message if Child Table Management is enabled OR
   1174            // If message was broadcast OR multicast OR
   1175            // if the NWK src and the MAC src are not the same) drop message
   1176            if ( ( zgChildAgingEnable == FALSE ) ||
   1177                 ( inMsg->wasBroadcast == TRUE ) ||
   1178                 ( inMsg->srcAddr.addr.shortAddr != inMsg->macSrcAddr ) )
   \   000016   90....       MOV     DPTR,#zgChildAgingEnable
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6021         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   00001C   EE           MOV     A,R6
   \   00001D   240B         ADD     A,#0xb
   \   00001F   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_543:
   \   000022   6401         XRL     A,#0x1
   \   000024   6017         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_0
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   00002F   EE           MOV     A,R6
   \   000030   2415         ADD     A,#0x15
   \   000032   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_544:
   \   000035   68           XRL     A,R0
   \   000036   7003         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_1
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   69           XRL     A,R1
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_1:
   \   00003B   6003         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_2
   1179            {
   1180              // the message does not come from a child, drop it
   1181              return;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_0:
   \   00003D   02....       LJMP    ??ZDO_ProcessEndDeviceTimeoutReq_3 & 0xFFFF
   1182            }
   1183          
   1184            ieee = inMsg->asdu;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_2:
   \   000040   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000043   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000046   E8           MOV     A,R0
   \   000047   FA           MOV     R2,A
   \   000048   E9           MOV     A,R1
   \   000049   FB           MOV     R3,A
   1185          
   1186            reqTimeout = BUILD_UINT16( inMsg->asdu[Z_EXTADDR_LEN], inMsg->asdu[Z_EXTADDR_LEN+1] );
   \   00004A   8882         MOV     DPL,R0
   \   00004C   8983         MOV     DPH,R1
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   FC           MOV     R4,A
   \   000058   8882         MOV     DPL,R0
   \   00005A   8983         MOV     DPH,R1
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_690:
   \   000067   EC           MOV     A,R4
   \   000068   28           ADD     A,R0
   \   000069   F5..         MOV     ?V0,A
   \   00006B   E4           CLR     A
   \   00006C   39           ADDC    A,R1
   \   00006D   F5..         MOV     ?V1,A
   1187          
   1188            if ( ( ( reqTimeout < ZDO_MIN_REQ_TIMEOUT ) || ( reqTimeout > ZDO_MAX_REQ_TIMEOUT ) ) ||
   1189                 ( ZSTACK_END_DEVICE_BUILD ) )
   \   00006F   EC           MOV     A,R4
   \   000070   45..         ORL     A,?V1
   \   000072   6010         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_4
   \   000074   EC           MOV     A,R4
   \   000075   9471         SUBB    A,#0x71
   \   000077   E9           MOV     A,R1
   \   000078   9408         SUBB    A,#0x8
   \   00007A   5008         JNC     ??ZDO_ProcessEndDeviceTimeoutReq_4
   \   00007C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   6402         XRL     A,#0x2
   \   000082   700A         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_5
   1190            {
   1191              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_4:
   \   000084   85..82       MOV     DPL,?XSP + 0
   \   000087   85..83       MOV     DPH,?XSP + 1
   \   00008A   7480         MOV     A,#-0x80
   \   00008C   8038         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_6
   1192            }
   1193            else
   1194            {
   1195              associated_devices_t *pAssoc;
   1196          
   1197              if ( ( ( pAssoc = AssocGetWithExt( ieee ) ) != NULL ) &&
   1198                   ( ( pAssoc->nodeRelation >= CHILD_RFD ) &&
   1199                     ( pAssoc->nodeRelation <= CHILD_RFD_RX_IDLE ) ) )
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_5:
   \   00008E                ; Setup parameters for call to function AssocGetWithExt
   \   00008E   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000091   8A..         MOV     ?V2,R2
   \   000093   8B..         MOV     ?V3,R3
   \   000095   A8..         MOV     R0,?V2
   \   000097   A9..         MOV     R1,?V3
   \   000099   E8           MOV     A,R0
   \   00009A   49           ORL     A,R1
   \   00009B   6021         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
   \   00009D   8882         MOV     DPL,R0
   \   00009F   8983         MOV     DPH,R1
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   6016         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_7
   \   0000A8   C3           CLR     C
   \   0000A9   9403         SUBB    A,#0x3
   \   0000AB   5011         JNC     ??ZDO_ProcessEndDeviceTimeoutReq_7
   1200              {
   1201                pAssoc->timeoutCounter = reqTimeout;
   \   0000AD   E8           MOV     A,R0
   \   0000AE   2412         ADD     A,#0x12
   \   0000B0   12....       LCALL   ?Subroutine117 & 0xFFFF
   1202                pAssoc->endDevKaTimeout = reqTimeout;
   \                     ??CrossCallReturnLabel_184:
   \   0000B3   E8           MOV     A,R0
   \   0000B4   2414         ADD     A,#0x14
   \   0000B6   12....       LCALL   ?Subroutine117 & 0xFFFF
   1203          
   1204                // Set event to save NV
   1205                ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_185:
   \   0000B9                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000B9   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   0000BC   8009         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_8
   1206              }
   1207              else
   1208              {
   1209                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_7:
   \   0000BE   85..82       MOV     DPL,?XSP + 0
   \   0000C1   85..83       MOV     DPH,?XSP + 1
   \   0000C4   7481         MOV     A,#-0x7f
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_6:
   \   0000C6   F0           MOVX    @DPTR,A
   1210              }
   1211          
   1212            }
   1213          
   1214            ZDP_EndDeviceTimeoutRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
   1215                                     inMsg->SecurityUse );
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_8:
   \   0000C7                ; Setup parameters for call to function ZDP_SendData
   \   0000C7   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   0000CA   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D0   7401         MOV     A,#0x1
   \   0000D2   12....       LCALL   ?XSTACK_DISP100_8
   \   0000D5   88..         MOV     ?V0,R0
   \   0000D7   89..         MOV     ?V1,R1
   \   0000D9   78..         MOV     R0,#?V0
   \   0000DB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DE   75..1F       MOV     ?V0,#0x1f
   \   0000E1   75..80       MOV     ?V1,#-0x80
   \   0000E4   78..         MOV     R0,#?V0
   \   0000E6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E9   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   0000EC   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000EF   7405         MOV     A,#0x5
   \   0000F1   12....       LCALL   ?DEALLOC_XSTACK8
   1216          }
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_3:
   \   0000F4   7401         MOV     A,#0x1
   \   0000F6   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   39           ADDC    A,R1
   \   000004   F583         MOV     DPH,A
   \   000006   E5..         MOV     A,?V0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E5..         MOV     A,?V1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   7901         MOV     R1,#0x1
   \   000002                REQUIRE ??Subroutine229_0
   \   000002                ; // Fall through to label ??Subroutine229_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   12....       LCALL   ?Subroutine182 & 0xFFFF
   \                     ??CrossCallReturnLabel_409:
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   12....       LCALL   ?Subroutine180 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   000003   3F           ADDC    A,R7
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine231_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine232_0
   \   000002                ; // Fall through to label ??Subroutine232_0
   1217          #endif // ZIGBEE_CHILD_AGING
   1218          
   1219          /*********************************************************************
   1220           * Call Back Functions from APS  - API
   1221           */
   1222          
   1223          /*********************************************************************
   1224           * @fn          ZDO_EndDeviceTimeoutCB
   1225           *
   1226           * @brief       This function handles the binding timer for the End
   1227           *              Device Bind command.
   1228           *
   1229           * @param       none
   1230           *
   1231           * @return      none
   1232           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1233          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1234          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1235          #if defined ( REFLECTOR )
   1236            byte stat;
   1237            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_437:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1238            {
   1239              stat = ZDO_EDBind->status;
   1240          
   1241              // Send the response message to the first sent
   1242              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1243                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C8           XCH     A,R0
   \   000017   2415         ADD     A,#0x15
   \   000019   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   00001C   F8           MOV     R0,A
   \   00001D   90....       MOV     DPTR,#ZDO_EDBind
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C9           XCH     A,R1
   \   000025   2416         ADD     A,#0x16
   \   000027   F582         MOV     DPL,A
   \   000029   E4           CLR     A
   \   00002A   39           ADDC    A,R1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   C0E0         PUSH    A
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   D0E0         POP     A
   \   000037   F0           MOVX    @DPTR,A
   \   000038   90....       MOV     DPTR,#ZDO_EDBind
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   2401         ADD     A,#0x1
   \   00003E   FC           MOV     R4,A
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   3400         ADDC    A,#0x0
   \   000043   FD           MOV     R5,A
   \   000044   90....       MOV     DPTR,#ZDO_EDBind
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F583         MOV     DPH,A
   \   00004D   8982         MOV     DPL,R1
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   F0           MOVX    @DPTR,A
   \   000057                ; Setup parameters for call to function ZDP_SendData
   \   000057   E8           MOV     A,R0
   \   000058   F5..         MOV     ?V0,A
   \   00005A   78..         MOV     R0,#?V0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   7402         MOV     A,#0x2
   \   000061   12....       LCALL   ?XSTACK_DISP100_8
   \   000064   88..         MOV     ?V0,R0
   \   000066   89..         MOV     ?V1,R1
   \   000068   78..         MOV     R0,#?V0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   75..20       MOV     ?V0,#0x20
   \   000070   75..80       MOV     ?V1,#-0x80
   \   000073   78..         MOV     R0,#?V0
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   7901         MOV     R1,#0x1
   \   00007A   7405         MOV     A,#0x5
   \   00007C   12....       LCALL   ?XSTACK_DISP101_8
   \   00007F   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000082   7405         MOV     A,#0x5
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   1244          
   1245              ZDO_RemoveEndDeviceBind();
   1246            }
   \   000087   90....       MOV     DPTR,#ZDO_EDBind
   \   00008A   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_438:
   \   00008D   604C         JZ      ??ZDO_EndDeviceTimeoutCB_0
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   C8           XCH     A,R0
   \   000091   2410         ADD     A,#0x10
   \   000093   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000096   6014         JZ      ??ZDO_EndDeviceTimeoutCB_1
   \   000098                ; Setup parameters for call to function osal_mem_free
   \   000098   90....       MOV     DPTR,#ZDO_EDBind
   \   00009B   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_564:
   \   00009E   2410         ADD     A,#0x10
   \   0000A0   F582         MOV     DPL,A
   \   0000A2   E4           CLR     A
   \   0000A3   38           ADDC    A,R0
   \   0000A4   F583         MOV     DPH,A
   \   0000A6   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   0000A9   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   0000AC   90....       MOV     DPTR,#ZDO_EDBind
   \   0000AF   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_565:
   \   0000B2   2413         ADD     A,#0x13
   \   0000B4   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   0000B7   6012         JZ      ??ZDO_EndDeviceTimeoutCB_2
   \   0000B9                ; Setup parameters for call to function osal_mem_free
   \   0000B9   90....       MOV     DPTR,#ZDO_EDBind
   \   0000BC   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   0000BF   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   0000C2   38           ADDC    A,R0
   \   0000C3   F583         MOV     DPH,A
   \   0000C5   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   0000C8   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   0000CB                ; Setup parameters for call to function osal_mem_free
   \   0000CB   90....       MOV     DPTR,#ZDO_EDBind
   \   0000CE   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_486:
   \   0000D1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000D4   90....       MOV     DPTR,#ZDO_EDBind
   \   0000D7   E4           CLR     A
   \   0000D8   F0           MOVX    @DPTR,A
   \   0000D9   A3           INC     DPTR
   \   0000DA   F0           MOVX    @DPTR,A
   1247          #endif  // REFLECTOR
   1248          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000DB   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004                REQUIRE ??Subroutine233_0
   \   000004                ; // Fall through to label ??Subroutine233_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine233_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine234_0
   \   000002                ; // Fall through to label ??Subroutine234_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine246_0:
   \   000000   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine200:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine252_0:
   \   000000   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   000003   22           RET
   1249          
   1250          /*********************************************************************
   1251           * Optional Management Messages
   1252           */
   1253          
   1254          /*********************************************************************
   1255           * @fn          ZDO_ProcessMgmtLqiReq
   1256           *
   1257           * @brief       This function handles parsing the incoming Management
   1258           *              LQI request and generate the response.
   1259           *
   1260           *   Note:      This function will limit the number of items returned
   1261           *              to ZDO_MAX_LQI_ITEMS items.
   1262           *
   1263           * @param       inMsg - incoming message (request)
   1264           *
   1265           * @return      none
   1266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1267          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1268          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V12,R2
   \   00000C   8B..         MOV     ?V13,R3
   1269            byte x;
   1270            byte index;
   1271            byte numItems;
   1272            byte maxItems;
   1273            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV     ?V10,#0x0
   \   000011   75..00       MOV     ?V11,#0x0
   1274            ZDP_MgmtLqiItem_t* item;
   1275            neighborEntry_t    entry;
   1276            byte aItems;
   1277            associated_devices_t *aDevice;
   1278            AddrMgrEntry_t  nwkEntry;
   1279            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000017   35..         ADDC    A,?V13
   \   000019   F583         MOV     DPH,A
   \   00001B   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   00001E   F5..         MOV     ?V6,A
   1280          
   1281            // Get the number of neighbor items
   1282            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \   000020                ; Setup parameters for call to function NLME_GetRequest
   \   000020   AC..         MOV     R4,?XSP + 0
   \   000022   AD..         MOV     R5,?XSP + 1
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B00         MOV     R3,#0x0
   \   000028   799C         MOV     R1,#-0x64
   \   00002A   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1283          
   1284            // Get the number of associated items
   1285            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00002D                ; Setup parameters for call to function AssocCount
   \   00002D   7A04         MOV     R2,#0x4
   \   00002F   7900         MOV     R1,#0x0
   \   000031   12....       LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
   \   000034   EA           MOV     A,R2
   \   000035   F5..         MOV     ?V4,A
   1286          
   1287            // Total number of items
   1288            maxItems += aItems;
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   2A           ADD     A,R2
   \   00003F   F0           MOVX    @DPTR,A
   1289          
   1290            // Start with the supplied index
   1291            if ( maxItems > StartIndex )
   \   000040   F8           MOV     R0,A
   \   000041   E5..         MOV     A,?V6
   \   000043   C3           CLR     C
   \   000044   98           SUBB    A,R0
   \   000045   4003         JC      $+5
   \   000047   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1292            {
   1293              numItems = maxItems - StartIndex;
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   C3           CLR     C
   \   00004C   95..         SUBB    A,?V6
   \   00004E   F5..         MOV     ?V1,A
   1294          
   1295              // limit the size of the list
   1296              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000050   C3           CLR     C
   \   000051   9404         SUBB    A,#0x4
   \   000053   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1297                numItems = ZDO_MAX_LQI_ITEMS;
   \   000055   75..03       MOV     ?V1,#0x3
   1298          
   1299              // Allocate the memory to build the table
   1300              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1301                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   E5..         MOV     A,?V1
   \   00005A   75F01A       MOV     B,#0x1a
   \   00005D   A4           MUL     AB
   \   00005E   FA           MOV     R2,A
   \   00005F   ABF0         MOV     R3,B
   \   000061   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000064   8A..         MOV     ?V10,R2
   \   000066   8B..         MOV     ?V11,R3
   1302          
   1303              if ( table != NULL )
   \   000068   EA           MOV     A,R2
   \   000069   45..         ORL     A,?V11
   \   00006B   7003         JNZ     $+5
   \   00006D   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1304              {
   1305                x = 0;
   \   000070   75..00       MOV     ?V5,#0x0
   1306                item = table;
   \   000073   AE..         MOV     R6,?V10
   \   000075   AF..         MOV     R7,?V11
   1307                index = StartIndex;
   \   000077   85....       MOV     ?V0,?V6
   \   00007A   807E         SJMP    ??ZDO_ProcessMgmtLqiReq_3
   1308          
   1309                // Loop through associated items and build list
   1310                for ( ; x < numItems; x++ )
   1311                {
   1312                  if ( index < aItems )
   1313                  {
   1314                    // get next associated device
   1315                    aDevice = AssocFindDevice( index++ );
   1316          
   1317                    // set basic fields
   1318                    item->panID   = _NIB.nwkPanId;
   1319                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1320                    item->nwkAddr = aDevice->shortAddr;
   1321                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1322                    item->depth   = 0xFF;
   1323                    item->lqi     = aDevice->linkInfo.rxLqi;
   1324          
   1325                    // set extented address
   1326                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1327                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1328          
   1329                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1330                    {
   1331                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1332                    }
   1333                    else
   1334                    {
   1335                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00007C                ; Setup parameters for call to function osal_memset
   \   00007C   12....       LCALL   ?Subroutine141 & 0xFFFF
   1336                    }
   \                     ??CrossCallReturnLabel_357:
   \   00007F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1337          
   1338                    // use association info to set other fields
   1339                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   000082   85..82       MOV     DPL,?V2
   \   000085   85..83       MOV     DPH,?V3
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   702D         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1340                    {
   1341                      if (  aDevice->shortAddr == 0 )
   \   00008F   85..82       MOV     DPL,?V2
   \   000092   85..83       MOV     DPH,?V3
   \   000095   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   000098   700C         JNZ     ??ZDO_ProcessMgmtLqiReq_7
   1342                      {
   1343                        item->devType = ZDP_MGMT_DT_COORD;
   \   00009A   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   00009D   F0           MOVX    @DPTR,A
   1344                        item->depth = 0;
   \   00009E   EE           MOV     A,R6
   \   00009F   2418         ADD     A,#0x18
   \   0000A1   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   1345                      }
   \                     ??CrossCallReturnLabel_535:
   \   0000A4   8010         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1346                      else
   1347                      {
   1348                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000A6   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   0000A9   F0           MOVX    @DPTR,A
   1349                        item->depth = _NIB.nodeDepth - 1;
   \   0000AA   90....       MOV     DPTR,#_NIB + 52
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   14           DEC     A
   \   0000AF   C0E0         PUSH    A
   \   0000B1   12....       LCALL   ?Subroutine148 & 0xFFFF
   1350                      }
   1351          
   1352                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1353                      item->relation = ZDP_MGMT_REL_PARENT;
   1354                    }
   \                     ??CrossCallReturnLabel_247:
   \   0000B4   D0E0         POP     A
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   0000B6   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000B9   E4           CLR     A
   \   0000BA   8034         SJMP    ??CrossCallReturnLabel_360
   1355                    else
   1356                    {
   1357                      // If not parent, then it's a child
   1358                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000BC   90....       MOV     DPTR,#_NIB + 52
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   04           INC     A
   \   0000C1   C0E0         PUSH    A
   \   0000C3   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   0000C6   D0E0         POP     A
   \   0000C8   12....       LCALL   ?Subroutine17 & 0xFFFF
   1359          
   1360                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_13:
   \   0000CB   C3           CLR     C
   \   0000CC   9403         SUBB    A,#0x3
   \   0000CE   EE           MOV     A,R6
   \   0000CF   4003         JC      $+5
   \   0000D1   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_9 & 0xFFFF
   1361                      {
   1362                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000D4   12....       LCALL   ??Subroutine247_0 & 0xFFFF
   1363          
   1364                        if ( aDevice->nodeRelation == CHILD_RFD )
   1365                        {
   1366                          item->rxOnIdle = FALSE;
   1367                        }
   1368                        else
   1369                        {
   1370                          item->rxOnIdle = TRUE;
   1371                        }
   1372                      }
   \                     ??CrossCallReturnLabel_528:
   \   0000D7   7402         MOV     A,#0x2
   \   0000D9   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000DC   6401         XRL     A,#0x1
   \   0000DE   7003         JNZ     $+5
   \   0000E0   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1373                      else
   1374                      {
   1375                        item->devType = ZDP_MGMT_DT_ROUTER;
   1376          
   1377                        if ( aDevice->nodeRelation == CHILD_FFD )
   1378                        {
   1379                          item->rxOnIdle = FALSE;
   1380                        }
   1381                        else
   1382                        {
   1383                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0000E3   EE           MOV     A,R6
   \   0000E4   2415         ADD     A,#0x15
   \   0000E6   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   1384                        }
   \                     ??CrossCallReturnLabel_359:
   \   0000E9   F0           MOVX    @DPTR,A
   1385                      }
   1386          
   1387                      item->relation = ZDP_MGMT_REL_CHILD;
   \   0000EA   EE           MOV     A,R6
   \   0000EB   2416         ADD     A,#0x16
   \   0000ED   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   0000F0   F0           MOVX    @DPTR,A
   1388                    }
   1389          
   1390                    item++;
   \   0000F1   EE           MOV     A,R6
   \   0000F2   241A         ADD     A,#0x1a
   \   0000F4   FE           MOV     R6,A
   \   0000F5   5001         JNC     ??ZDO_ProcessMgmtLqiReq_12
   \   0000F7   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   0000F8   05..         INC     ?V5
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   0000FA   E5..         MOV     A,?V5
   \   0000FC   C3           CLR     C
   \   0000FD   95..         SUBB    A,?V1
   \   0000FF   4003         JC      $+5
   \   000101   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   \   000104   E5..         MOV     A,?V0
   \   000106   C3           CLR     C
   \   000107   95..         SUBB    A,?V4
   \   000109   4003         JC      $+5
   \   00010B   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_14 & 0xFFFF
   \   00010E                ; Setup parameters for call to function AssocFindDevice
   \   00010E   AA..         MOV     R2,?V0
   \   000110   7B00         MOV     R3,#0x0
   \   000112   12....       LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
   \   000115   8A..         MOV     ?V2,R2
   \   000117   8B..         MOV     ?V3,R3
   \   000119   05..         INC     ?V0
   \   00011B   90....       MOV     DPTR,#_NIB + 33
   \   00011E   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000121   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000124   85..82       MOV     DPL,?V2
   \   000127   85..83       MOV     DPH,?V3
   \   00012A   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   00012D   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   000130   E8           MOV     A,R0
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   E9           MOV     A,R1
   \   000134   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000137   85..82       MOV     DPL,?V2
   \   00013A   85..83       MOV     DPH,?V3
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   A3           INC     DPTR
   \   000146   A3           INC     DPTR
   \   000147   E0           MOVX    A,@DPTR
   \   000148   C0E0         PUSH    A
   \   00014A   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00014D   D0E0         POP     A
   \   00014F   F0           MOVX    @DPTR,A
   \   000150   7401         MOV     A,#0x1
   \   000152   12....       LCALL   ?XSTACK_DISP0_8
   \   000155   E4           CLR     A
   \   000156   F0           MOVX    @DPTR,A
   \   000157   85..82       MOV     DPL,?V2
   \   00015A   85..83       MOV     DPH,?V3
   \   00015D   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_416:
   \   000160   7402         MOV     A,#0x2
   \   000162   12....       LCALL   ?XSTACK_DISP0_8
   \   000165   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000168                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000168   7401         MOV     A,#0x1
   \   00016A   12....       LCALL   ?XSTACK_DISP101_8
   \   00016D   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   000170   E9           MOV     A,R1
   \   000171   6401         XRL     A,#0x1
   \   000173   6003         JZ      $+5
   \   000175   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \   000178                ; Setup parameters for call to function sAddrExtCpy
   \   000178   7404         MOV     A,#0x4
   \   00017A   12....       LCALL   ?XSTACK_DISP0_8
   \   00017D   AC82         MOV     R4,DPL
   \   00017F   AD83         MOV     R5,DPH
   \   000181   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   000184   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000187   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_5 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   00018A   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   00018D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000190   6403         XRL     A,#0x3
   \   000192   6003         JZ      $+5
   \   000194   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   000197   EE           MOV     A,R6
   \   000198   2415         ADD     A,#0x15
   \   00019A   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   1391                  }
   \                     ??CrossCallReturnLabel_536:
   \   00019D   02....       LJMP    ??CrossCallReturnLabel_359 & 0xFFFF
   1392                  else
   1393                  {
   1394                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0001A0   E5..         MOV     A,?V4
   \   0001A2   C3           CLR     C
   \   0001A3   95..         SUBB    A,?V6
   \   0001A5   4005         JC      ??ZDO_ProcessMgmtLqiReq_15
   1395                      // Start with 1st neighbor
   1396                      index = 0;
   \   0001A7   75..00       MOV     ?V0,#0x0
   \   0001AA   801D         SJMP    ??ZDO_ProcessMgmtLqiReq_16
   1397                    else
   1398                      // Start with >1st neighbor
   1399                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001AC   E5..         MOV     A,?V6
   \   0001AE   C3           CLR     C
   \   0001AF   95..         SUBB    A,?V4
   \   0001B1   F5..         MOV     ?V0,A
   \   0001B3   8014         SJMP    ??ZDO_ProcessMgmtLqiReq_16
   1400                    break;
   1401                  }
   1402                }
   1403          
   1404                // Loop through neighbor items and finish list
   1405                for ( ; x < numItems; x++ )
   1406                {
   1407                  // Add next neighbor table item
   1408                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1409          
   1410                  // set ZDP_MgmtLqiItem_t fields
   1411                  item->panID    = entry.panId;
   1412                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1413                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1414                  item->nwkAddr  = entry.neighborAddress;
   1415                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1416                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1417                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1418                  item->depth    = 0xFF;
   1419                  item->lqi      = entry.linkInfo.rxLqi;
   1420          
   1421                  if ( item->nwkAddr == 0 )
   1422                  {
   1423                    item->devType = ZDP_MGMT_DT_COORD;
   1424                  }
   1425                  else
   1426                  {
   1427                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001B5   12....       LCALL   ?Subroutine127 & 0xFFFF
   1428                  }
   \                     ??CrossCallReturnLabel_363:
   \   0001B8   F0           MOVX    @DPTR,A
   1429          
   1430                  item++;
   \   0001B9   EE           MOV     A,R6
   \   0001BA   241A         ADD     A,#0x1a
   \   0001BC   FE           MOV     R6,A
   \   0001BD   5001         JNC     ??ZDO_ProcessMgmtLqiReq_18
   \   0001BF   0F           INC     R7
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0001C0   05..         INC     ?V5
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0001C2   E5..         MOV     A,?V5
   \   0001C4   C3           CLR     C
   \   0001C5   95..         SUBB    A,?V1
   \   0001C7   505C         JNC     ??ZDO_ProcessMgmtLqiReq_2
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001C9                ; Setup parameters for call to function NLME_GetRequest
   \   0001C9   740E         MOV     A,#0xe
   \   0001CB   12....       LCALL   ?XSTACK_DISP102_8
   \   0001CE   AA..         MOV     R2,?V0
   \   0001D0   7B00         MOV     R3,#0x0
   \   0001D2   7987         MOV     R1,#-0x79
   \   0001D4   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   0001D7   05..         INC     ?V0
   \   0001D9   7418         MOV     A,#0x18
   \   0001DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DE   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0001E1   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0001E4                ; Setup parameters for call to function osal_memset
   \   0001E4   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   0001E7   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0001EA   EE           MOV     A,R6
   \   0001EB   2412         ADD     A,#0x12
   \   0001ED   F8           MOV     R0,A
   \   0001EE   E4           CLR     A
   \   0001EF   3F           ADDC    A,R7
   \   0001F0   F9           MOV     R1,A
   \   0001F1   740E         MOV     A,#0xe
   \   0001F3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F6   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   0001F9   8882         MOV     DPL,R0
   \   0001FB   8983         MOV     DPH,R1
   \   0001FD   EA           MOV     A,R2
   \   0001FE   F0           MOVX    @DPTR,A
   \   0001FF   A3           INC     DPTR
   \   000200   EB           MOV     A,R3
   \   000201   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000204   7403         MOV     A,#0x3
   \   000206   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000209   741D         MOV     A,#0x1d
   \   00020B   12....       LCALL   ?XSTACK_DISP0_8
   \   00020E   E0           MOVX    A,@DPTR
   \   00020F   C0E0         PUSH    A
   \   000211   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000214   D0E0         POP     A
   \   000216   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000219   E8           MOV     A,R0
   \   00021A   49           ORL     A,R1
   \   00021B   7098         JNZ     ??ZDO_ProcessMgmtLqiReq_17
   \   00021D   12....       LCALL   ?Subroutine131 & 0xFFFF
   1431                }
   1432              }
   1433            }
   \                     ??CrossCallReturnLabel_539:
   \   000220   8096         SJMP    ??CrossCallReturnLabel_363
   1434            else
   1435            {
   1436              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000222   75..00       MOV     ?V1,#0x0
   1437            }
   1438          
   1439            // Send response
   1440            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1441                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   000225                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   000225   75..00       MOV     ?V2,#0x0
   \   000228   78..         MOV     R0,#?V2
   \   00022A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00022D   78..         MOV     R0,#?V10
   \   00022F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000232   78..         MOV     R0,#?V1
   \   000234   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000237   E5..         MOV     A,?V6
   \   000239   F5..         MOV     ?V1,A
   \   00023B   78..         MOV     R0,#?V1
   \   00023D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000240   7405         MOV     A,#0x5
   \   000242   12....       LCALL   ?XSTACK_DISP0_8
   \   000245   E0           MOVX    A,@DPTR
   \   000246   FD           MOV     R5,A
   \   000247   7C00         MOV     R4,#0x0
   \   000249   E5..         MOV     A,?V12
   \   00024B   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   00024E   35..         ADDC    A,?V13
   \   000250   FB           MOV     R3,A
   \   000251   E5..         MOV     A,?V12
   \   000253   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000256   35..         ADDC    A,?V13
   \   000258   F583         MOV     DPH,A
   \   00025A   E0           MOVX    A,@DPTR
   \   00025B   F9           MOV     R1,A
   \   00025C   12....       LCALL   `??ZDP_MgmtLqiRsp::?relay`; Banked call to: ZDP_MgmtLqiRsp
   \   00025F   7405         MOV     A,#0x5
   \   000261   12....       LCALL   ?DEALLOC_XSTACK8
   1442          
   1443            if ( table )
   \   000264   E5..         MOV     A,?V10
   \   000266   45..         ORL     A,?V11
   \   000268   6007         JZ      ??ZDO_ProcessMgmtLqiReq_19
   1444            {
   1445              osal_mem_free( table );
   \   00026A                ; Setup parameters for call to function osal_mem_free
   \   00026A   AA..         MOV     R2,?V10
   \   00026C   AB..         MOV     R3,?V11
   \   00026E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1446            }
   1447          }
   \                     ??ZDO_ProcessMgmtLqiReq_19:
   \   000271   7425         MOV     A,#0x25
   \   000273   12....       LCALL   ?DEALLOC_XSTACK8
   \   000276                REQUIRE ?Subroutine7
   \   000276                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   EE           MOV     A,R6
   \   000001   2419         ADD     A,#0x19
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine192:
   \   000000   EE           MOV     A,R6
   \   000001   2418         ADD     A,#0x18
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine216_0
   \   000001                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine191:
   \   000000   2412         ADD     A,#0x12
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   7C08         MOV     R4,#0x8
   \   000002   7D00         MOV     R5,#0x0
   \   000004   79FF         MOV     R1,#-0x1
   \   000006                REQUIRE ??Subroutine217_0
   \   000006                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_620:
   \   000004   3F           ADDC    A,R7
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine218_0
   \   000001                ; // Fall through to label ??Subroutine218_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   2414         ADD     A,#0x14
   \   000002                REQUIRE ??Subroutine219_0
   \   000002                ; // Fall through to label ??Subroutine219_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine221_0
   \   000001                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006                ; Setup parameters for call to function sAddrExtCpy
   \   000006   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000008   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   00000A   EE           MOV     A,R6
   \   00000B   2402         ADD     A,#0x2
   \   00000D   FA           MOV     R2,A
   \   00000E   E4           CLR     A
   \   00000F   3F           ADDC    A,R7
   \   000010   FB           MOV     R3,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine161:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine222_0
   \   000001                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V2
   \   000004   85..83       MOV     DPH,?V3
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003   7402         MOV     A,#0x2
   \   000005   F0           MOVX    @DPTR,A
   \   000006   EE           MOV     A,R6
   \   000007   2416         ADD     A,#0x16
   \   000009   F582         MOV     DPL,A
   \   00000B   E4           CLR     A
   \   00000C   3F           ADDC    A,R7
   \   00000D   F583         MOV     DPH,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   12....       LCALL   ?Subroutine192 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000010   74FF         MOV     A,#-0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine247_0:
   \   000000   12....       LCALL   ?Subroutine188 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003                REQUIRE ??Subroutine248_0
   \   000003                ; // Fall through to label ??Subroutine248_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine248_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E4           CLR     A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine177:
   \   000000   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine158:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine202:
   \   000000   2415         ADD     A,#0x15
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine255_0:
   \   000000   2402         ADD     A,#0x2
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine195:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET
   1448          
   1449          /*********************************************************************
   1450           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1451           *
   1452           * @brief       This function handles parsing the incoming Management
   1453           *              Network Discover request and starts the request.
   1454           *
   1455           * @param       inMsg - incoming message (request)
   1456           *
   1457           * @return      none
   1458           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1459          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1460          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine124 & 0xFFFF
   1461            NLME_ScanFields_t scan;
   1462            uint8             index;
   1463            uint8             *msg;
   1464          
   1465            msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_385:
   \   00000D   35..         ADDC    A,?V1
   \   00000F   12....       LCALL   ?Subroutine93 & 0xFFFF
   1466            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_150:
   \   000012   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000015   EA           MOV     A,R2
   \   000016   F8           MOV     R0,A
   \   000017   EB           MOV     A,R3
   \   000018   F9           MOV     R1,A
   \   000019   EC           MOV     A,R4
   \   00001A   FA           MOV     R2,A
   \   00001B   ED           MOV     A,R5
   \   00001C   FB           MOV     R3,A
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   12....       LCALL   ?XSTORE_R0123
   1467            msg += 4;
   1468            scan.duration = *msg++;
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   C0E0         PUSH    A
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   D0E0         POP     A
   \   000038   12....       LCALL   ?Subroutine37 & 0xFFFF
   1469            index         = *msg;
   \                     ??CrossCallReturnLabel_51:
   \   00003B   F8           MOV     R0,A
   1470            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00003C   7405         MOV     A,#0x5
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   7401         MOV     A,#0x1
   \   000043   F0           MOVX    @DPTR,A
   1471            scan.scanApp  = NLME_DISC_SCAN;
   \   000044   7406         MOV     A,#0x6
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   7401         MOV     A,#0x1
   \   00004B   F0           MOVX    @DPTR,A
   1472          
   1473            // Save off the information to be used for the response
   1474            zdappMgmtNwkDiscReqInProgress          = true;
   \   00004C   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   00004F   F0           MOVX    @DPTR,A
   1475            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000050   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000053   04           INC     A
   \   000054   12....       LCALL   ?Subroutine41 & 0xFFFF
   1476            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_60:
   \   000057   FA           MOV     R2,A
   \   000058   A3           INC     DPTR
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   FB           MOV     R3,A
   \   00005B   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   00005E   12....       LCALL   ?Subroutine51 & 0xFFFF
   1477            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_336:
   \   000061   E8           MOV     A,R0
   \   000062   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000065   12....       LCALL   ?Subroutine30 & 0xFFFF
   1478            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \                     ??CrossCallReturnLabel_38:
   \   000068   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   00006B   F0           MOVX    @DPTR,A
   1479          
   1480            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \   00006C                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   00006C   AA..         MOV     R2,?XSP + 0
   \   00006E   AB..         MOV     R3,?XSP + 1
   \   000070   12....       LCALL   `??NLME_NwkDiscReq2::?relay`; Banked call to: NLME_NwkDiscReq2
   \   000073   E9           MOV     A,R1
   \   000074   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1481            {
   1482              NLME_NwkDiscTerm();
   \   000076                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000076   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1483          
   1484              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1485            }
   1486          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000079   7407         MOV     A,#0x7
   \   00007B   02....       LJMP    ??Subroutine209_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   8A..         MOV     ?V0,R2
   \   000002   8B..         MOV     ?V1,R3
   \   000004                REQUIRE ??Subroutine224_0
   \   000004                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine197:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine159:
   \   000000   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine162:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FF           MOV     R7,A
   \   000007                ; Setup parameters for call to function osal_build_uint32
   \   000007                ; Setup parameters for call to function osal_build_uint32
   \   000007   7904         MOV     R1,#0x4
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   EF           MOV     A,R7
   \   00000C   FB           MOV     R3,A
   \   00000D   22           RET
   1487          
   1488          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1489          /*********************************************************************
   1490           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1491           *
   1492           * @brief       This function finishes the processing of the Management
   1493           *              Network Discover Request and generates the response.
   1494           *
   1495           *   Note:      This function will limit the number of items returned
   1496           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1497           *
   1498           * @param       ResultCountSrcAddr - source of the request
   1499           * @param       msg - pointer to incoming message
   1500           * @param       SecurityUse -
   1501           *
   1502           * @return      none
   1503           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1504          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   \                     ZDO_FinishProcessingMgmtNwkDiscReq:
   1505          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1506            byte count, i, ResultCount = 0;
   \   00000A   75..00       MOV     ?V0,#0x0
   1507            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   \   00000D   7E00         MOV     R6,#0x0
   \   00000F   7F00         MOV     R7,#0x0
   1508          
   1509            NetworkList = nwk_getNwkDescList();
   \   000011                ; Setup parameters for call to function nwk_getNwkDescList
   \   000011   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000014   8A..         MOV     ?V2,R2
   \   000016   8B..         MOV     ?V3,R3
   1510          
   1511            // Count the number of nwk descriptors in the list
   1512            pList = nwk_getNwkDescList();
   \   000018                ; Setup parameters for call to function nwk_getNwkDescList
   \   000018   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00001B   8A..         MOV     ?V4,R2
   \   00001D   8B..         MOV     ?V5,R3
   \   00001F   A8..         MOV     R0,?V4
   \   000021   A9..         MOV     R1,?V5
   \   000023   8005         SJMP    ??CrossCallReturnLabel_428
   1513            while (pList)
   1514            {
   1515              ResultCount++;
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_0:
   \   000025   05..         INC     ?V0
   1516              pList = pList->nextDesc;
   \   000027   12....       LCALL   ?Subroutine105 & 0xFFFF
   1517            }
   \                     ??CrossCallReturnLabel_428:
   \   00002A   E8           MOV     A,R0
   \   00002B   49           ORL     A,R1
   \   00002C   70F7         JNZ     ??ZDO_FinishProcessingMgmtNwkDiscReq_0
   1518          
   1519            if ( ZSTACK_ROUTER_BUILD )
   \   00002E   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6007         JZ      ??ZDO_FinishProcessingMgmtNwkDiscReq_1
   \   000034   6401         XRL     A,#0x1
   \   000036   6003         JZ      $+5
   \   000038   02....       LJMP    ??ZDO_FinishProcessingMgmtNwkDiscReq_2 & 0xFFFF
   1520            {
   1521              // Look for my PanID.
   1522              pList = nwk_getNwkDescList();
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_1:
   \   00003B                ; Setup parameters for call to function nwk_getNwkDescList
   \   00003B   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00003E   8A..         MOV     ?V4,R2
   \   000040   8B..         MOV     ?V5,R3
   \   000042   A8..         MOV     R0,?V4
   \   000044   A9..         MOV     R1,?V5
   1523              while ( pList )
   \   000046   E8           MOV     A,R0
   \   000047   49           ORL     A,R1
   \   000048   603B         JZ      ??ZDO_FinishProcessingMgmtNwkDiscReq_3
   \   00004A   8003         SJMP    ??CrossCallReturnLabel_429
   1524              {
   1525                if ( pList->panId == _NIB.nwkPanId )
   1526                {
   1527                  break;
   1528                }
   1529          
   1530          
   1531                if ( !pList->nextDesc )
   1532                {
   1533                  break;
   1534                }
   1535                pList = pList->nextDesc;
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_4:
   \   00004C   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   00004F   8882         MOV     DPL,R0
   \   000051   8983         MOV     DPH,R1
   \   000053   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_488:
   \   000056   90....       MOV     DPTR,#_NIB + 33
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6A           XRL     A,R2
   \   00005B   7003         JNZ     ??ZDO_FinishProcessingMgmtNwkDiscReq_5
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6B           XRL     A,R3
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_5:
   \   000060   600D         JZ      ??ZDO_FinishProcessingMgmtNwkDiscReq_6
   \   000062   12....       LCALL   ?Subroutine189 & 0xFFFF
   1536              }
   \                     ??CrossCallReturnLabel_636:
   \   000065   39           ADDC    A,R1
   \   000066   F583         MOV     DPH,A
   \   000068   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_489:
   \   00006B   EA           MOV     A,R2
   \   00006C   4B           ORL     A,R3
   \   00006D   70DD         JNZ     ??ZDO_FinishProcessingMgmtNwkDiscReq_4
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_6:
   \   00006F   8882         MOV     DPL,R0
   \   000071   8983         MOV     DPH,R1
   \   000073   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_417:
   \   000076   90....       MOV     DPTR,#_NIB + 33
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   68           XRL     A,R0
   \   00007B   7003         JNZ     ??ZDO_FinishProcessingMgmtNwkDiscReq_7
   \   00007D   A3           INC     DPTR
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   69           XRL     A,R1
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_7:
   \   000080   7003         JNZ     $+5
   \   000082   02....       LJMP    ??ZDO_FinishProcessingMgmtNwkDiscReq_2 & 0xFFFF
   1537          
   1538          
   1539              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1540              // prepend it.
   1541              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1542              {
   1543                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_3:
   \   000085                ; Setup parameters for call to function osal_mem_alloc
   \   000085   7A16         MOV     R2,#0x16
   \   000087   7B00         MOV     R3,#0x0
   \   000089   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00008C   8A..         MOV     ?V4,R2
   \   00008E   8B..         MOV     ?V5,R3
   \   000090   AE..         MOV     R6,?V4
   \   000092   AF..         MOV     R7,?V5
   1544                if ( newDesc )
   \   000094   EE           MOV     A,R6
   \   000095   4F           ORL     A,R7
   \   000096   6071         JZ      ??ZDO_FinishProcessingMgmtNwkDiscReq_2
   1545                {
   1546                  byte pJoin;
   1547          
   1548                  newDesc->panId = _NIB.nwkPanId;
   \   000098   90....       MOV     DPTR,#_NIB + 33
   \   00009B   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   00009E   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   1549                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   \                     ??CrossCallReturnLabel_371:
   \   0000A1   90....       MOV     DPTR,#_NIB + 22
   \   0000A4   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   0000A7   A3           INC     DPTR
   \   0000A8   F0           MOVX    @DPTR,A
   1550                  newDesc->version = NLME_GetProtocolVersion();
   \   0000A9                ; Setup parameters for call to function NLME_GetProtocolVersion
   \   0000A9   12....       LCALL   `??NLME_GetProtocolVersion::?relay`; Banked call to: NLME_GetProtocolVersion
   \   0000AC   E9           MOV     A,R1
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   F0           MOVX    @DPTR,A
   1551                  newDesc->stackProfile = zgStackProfile;
   \   0000B7   90....       MOV     DPTR,#zgStackProfile
   \   0000BA   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   F0           MOVX    @DPTR,A
   1552          
   1553                  //Extended PanID
   1554                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   \   0000C3                ; Setup parameters for call to function sAddrExtCpy
   \   0000C3   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   0000C5   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   0000C7   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   0000CA   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1555          
   1556                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   \   0000CD                ; Setup parameters for call to function ZMacGetReq
   \   0000CD   AA..         MOV     R2,?XSP + 0
   \   0000CF   AB..         MOV     R3,?XSP + 1
   \   0000D1   7941         MOV     R1,#0x41
   \   0000D3   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   1557                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1558                                                     INVALID_NODE_ADDR);
   \   0000D6   85..82       MOV     DPL,?XSP + 0
   \   0000D9   85..83       MOV     DPH,?XSP + 1
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   6008         JZ      ??ZDO_FinishProcessingMgmtNwkDiscReq_8
   \   0000DF   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000E2   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_418:
   \   0000E5   8004         SJMP    ??ZDO_FinishProcessingMgmtNwkDiscReq_9
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_8:
   \   0000E7   78FE         MOV     R0,#-0x2
   \   0000E9   79FF         MOV     R1,#-0x1
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_9:
   \   0000EB   8E82         MOV     DPL,R6
   \   0000ED   8F83         MOV     DPH,R7
   \   0000EF   A3           INC     DPTR
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   1559          
   1560                  newDesc->nextDesc = NetworkList;
   \                     ??CrossCallReturnLabel_372:
   \   0000F9   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   0000FC   E5..         MOV     A,?V2
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   A3           INC     DPTR
   \   000100   E5..         MOV     A,?V3
   \   000102   F0           MOVX    @DPTR,A
   1561                  NetworkList = newDesc;
   \   000103   8E..         MOV     ?V2,R6
   \   000105   8F..         MOV     ?V3,R7
   1562                  ResultCount++;
   \   000107   05..         INC     ?V0
   1563                }
   1564              }
   1565            }
   1566          
   1567            // Calc the count and apply a max count.
   1568            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_2:
   \   000109   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   00010C   E0           MOVX    A,@DPTR
   \   00010D   F8           MOV     R0,A
   \   00010E   E5..         MOV     A,?V0
   \   000110   C3           CLR     C
   \   000111   98           SUBB    A,R0
   \   000112   5004         JNC     ??ZDO_FinishProcessingMgmtNwkDiscReq_10
   1569            {
   1570              count = 0;
   \   000114   7900         MOV     R1,#0x0
   \   000116   8027         SJMP    ??ZDO_FinishProcessingMgmtNwkDiscReq_11
   1571            }
   1572            else
   1573            {
   1574              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_10:
   \   000118   E5..         MOV     A,?V0
   \   00011A   C3           CLR     C
   \   00011B   98           SUBB    A,R0
   \   00011C   F9           MOV     R1,A
   1575              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   \   00011D   C3           CLR     C
   \   00011E   9406         SUBB    A,#0x6
   \   000120   4002         JC      ??ZDO_FinishProcessingMgmtNwkDiscReq_12
   1576              {
   1577                count = ZDO_MAX_NWKDISC_ITEMS;
   \   000122   7905         MOV     R1,#0x5
   1578              }
   1579          
   1580              // Move the list pointer up to the start index.
   1581              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_12:
   \   000124   7800         MOV     R0,#0x0
   \   000126   800D         SJMP    ??ZDO_FinishProcessingMgmtNwkDiscReq_13
   1582              {
   1583                NetworkList = NetworkList->nextDesc;
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_14:
   \   000128   E5..         MOV     A,?V2
   \   00012A   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   1584              }
   \                     ??CrossCallReturnLabel_634:
   \   00012D   35..         ADDC    A,?V3
   \   00012F   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000132   F5..         MOV     ?V3,A
   \   000134   08           INC     R0
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_13:
   \   000135   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000138   E0           MOVX    A,@DPTR
   \   000139   FA           MOV     R2,A
   \   00013A   E8           MOV     A,R0
   \   00013B   C3           CLR     C
   \   00013C   9A           SUBB    A,R2
   \   00013D   40E9         JC      ??ZDO_FinishProcessingMgmtNwkDiscReq_14
   1585            }
   1586          
   1587            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1588                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1589                                zdappMgmtNwkDiscStartIndex,
   1590                                count,
   1591                                NetworkList,
   1592                                false );
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_11:
   \   00013F                ; Setup parameters for call to function ZDP_MgmtNwkDiscRsp
   \   00013F   75..00       MOV     ?V1,#0x0
   \   000142   78..         MOV     R0,#?V1
   \   000144   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000147   78..         MOV     R0,#?V2
   \   000149   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014C   E9           MOV     A,R1
   \   00014D   F5..         MOV     ?V1,A
   \   00014F   78..         MOV     R0,#?V1
   \   000151   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000154   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   000157   E0           MOVX    A,@DPTR
   \   000158   F5..         MOV     ?V1,A
   \   00015A   78..         MOV     R0,#?V1
   \   00015C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00015F   AD..         MOV     R5,?V0
   \   000161   7C00         MOV     R4,#0x0
   \   000163   7A..         MOV     R2,#zdappMgmtNwkDiscRspAddr & 0xff
   \   000165   7B..         MOV     R3,#(zdappMgmtNwkDiscRspAddr >> 8) & 0xff
   \   000167   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   00016A   E0           MOVX    A,@DPTR
   \   00016B   F9           MOV     R1,A
   \   00016C   12....       LCALL   `??ZDP_MgmtNwkDiscRsp::?relay`; Banked call to: ZDP_MgmtNwkDiscRsp
   \   00016F   7405         MOV     A,#0x5
   \   000171   12....       LCALL   ?DEALLOC_XSTACK8
   1593          
   1594            if ( ZSTACK_ROUTER_BUILD )
   \   000174   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000177   E0           MOVX    A,@DPTR
   \   000178   6004         JZ      ??ZDO_FinishProcessingMgmtNwkDiscReq_15
   \   00017A   6401         XRL     A,#0x1
   \   00017C   700B         JNZ     ??ZDO_FinishProcessingMgmtNwkDiscReq_16
   1595            {
   1596              if ( newDesc != NULL )
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_15:
   \   00017E   EE           MOV     A,R6
   \   00017F   4F           ORL     A,R7
   \   000180   6007         JZ      ??ZDO_FinishProcessingMgmtNwkDiscReq_16
   1597              {
   1598                osal_mem_free( newDesc );
   \   000182                ; Setup parameters for call to function osal_mem_free
   \   000182   EE           MOV     A,R6
   \   000183   FA           MOV     R2,A
   \   000184   EF           MOV     A,R7
   \   000185   FB           MOV     R3,A
   \   000186   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1599              }
   1600            }
   1601          
   1602            NLME_NwkDiscTerm();
   \                     ??ZDO_FinishProcessingMgmtNwkDiscReq_16:
   \   000189                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000189   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1603          }
   \   00018C   7401         MOV     A,#0x1
   \   00018E   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL   ?Subroutine189 & 0xFFFF
   \                     ??CrossCallReturnLabel_637:
   \   000003   39           ADDC    A,R1
   \   000004                REQUIRE ??Subroutine231_0
   \   000004                ; // Fall through to label ??Subroutine231_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine247_0
   \   000001                ; // Fall through to label ??Subroutine247_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   12....       LCALL   ?Subroutine177 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine189:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine261_0
   \   000001                ; // Fall through to label ??Subroutine261_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine261_0:
   \   000000   2414         ADD     A,#0x14
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine178:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET
   1604          #endif
   1605          
   1606          /*********************************************************************
   1607           * @fn          ZDO_ProcessMgmtRtgReq
   1608           *
   1609           * @brief       This function finishes the processing of the Management
   1610           *              Routing Request and generates the response.
   1611           *
   1612           *   Note:      This function will limit the number of items returned
   1613           *              to ZDO_MAX_RTG_ITEMS items.
   1614           *
   1615           * @param       inMsg - incoming message (request)
   1616           *
   1617           * @return      none
   1618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1619          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1620          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   1621            byte x;
   1622            byte maxNumItems;
   1623            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1624            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V6,R6
   \   000012   8E..         MOV     ?V7,R6
   1625            rtgItem_t *pList;
   1626            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000017   35..         ADDC    A,?V3
   \   000019   F583         MOV     DPH,A
   \   00001B   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   00001E   FF           MOV     R7,A
   1627          
   1628            // Get the number of table items
   1629            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   00001F                ; Setup parameters for call to function NLME_GetRequest
   \   00001F   AC..         MOV     R4,?XSP + 0
   \   000021   AD..         MOV     R5,?XSP + 1
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   799D         MOV     R1,#-0x63
   \   000029   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   1630          
   1631            if ( maxNumItems > StartIndex )
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   EF           MOV     A,R7
   \   000035   C3           CLR     C
   \   000036   98           SUBB    A,R0
   \   000037   4003         JC      $+5
   \   000039   02....       LJMP    ??ZDO_ProcessMgmtRtgReq_0 & 0xFFFF
   1632            {
   1633              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C3           CLR     C
   \   00003E   9F           SUBB    A,R7
   \   00003F   FE           MOV     R6,A
   1634          
   1635              // limit the size of the list
   1636              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   000040   C3           CLR     C
   \   000041   940B         SUBB    A,#0xb
   \   000043   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1637              {
   1638                numItems = ZDO_MAX_RTG_ITEMS;
   \   000045   7E0A         MOV     R6,#0xa
   1639              }
   1640          
   1641              // Allocate the memory to build the table
   1642              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000047                ; Setup parameters for call to function osal_mem_alloc
   \   000047   EE           MOV     A,R6
   \   000048   75F007       MOV     B,#0x7
   \   00004B   A4           MUL     AB
   \   00004C   FA           MOV     R2,A
   \   00004D   ABF0         MOV     R3,B
   \   00004F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000052   8A..         MOV     ?V0,R2
   \   000054   8B..         MOV     ?V1,R3
   \   000056   8A..         MOV     ?V6,R2
   \   000058   8B..         MOV     ?V7,R3
   1643          
   1644              if ( pBuf != NULL )
   \   00005A   EA           MOV     A,R2
   \   00005B   45..         ORL     A,?V7
   \   00005D   6079         JZ      ??ZDO_ProcessMgmtRtgReq_2
   1645              {
   1646                // Convert buffer to list
   1647                pList = (rtgItem_t *)pBuf;
   1648          
   1649                // Loop through items and build list
   1650                for ( x = 0; x < numItems; x++ )
   \   00005F   75..00       MOV     ?V4,#0x0
   \   000062   801A         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1651                {
   1652                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1653          
   1654                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1655                  switch( pList->status )
   1656                  {
   1657                    case RT_ACTIVE:
   1658                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1659                      break;
   1660          
   1661                    case RT_DISC:
   1662                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1663                      break;
   1664          
   1665                    case RT_LINK_FAIL:
   1666                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   1667                      break;
   1668          
   1669                    case RT_INIT:
   1670                    case RT_REPAIR:
   1671                    default:
   1672                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000064   85..82       MOV     DPL,?V0
   \   000067   85..83       MOV     DPH,?V1
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000071   F0           MOVX    @DPTR,A
   1673                      break;
   1674                  }
   1675          
   1676                  // Increment pointer to next record
   1677                  pList++;
   \   000072   E5..         MOV     A,?V0
   \   000074   2407         ADD     A,#0x7
   \   000076   F5..         MOV     ?V0,A
   \   000078   5002         JNC     ??ZDO_ProcessMgmtRtgReq_6
   \   00007A   05..         INC     ?V1
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   00007C   05..         INC     ?V4
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   00007E   E5..         MOV     A,?V4
   \   000080   C3           CLR     C
   \   000081   9E           SUBB    A,R6
   \   000082   5056         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   000084                ; Setup parameters for call to function NLME_GetRequest
   \   000084   AC..         MOV     R4,?V0
   \   000086   AD..         MOV     R5,?V1
   \   000088   E5..         MOV     A,?V4
   \   00008A   2F           ADD     A,R7
   \   00008B   FA           MOV     R2,A
   \   00008C   E4           CLR     A
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   FB           MOV     R3,A
   \   000090   798B         MOV     R1,#-0x75
   \   000092   12....       LCALL   `??NLME_GetRequest::?relay`; Banked call to: NLME_GetRequest
   \   000095   85..82       MOV     DPL,?V0
   \   000098   85..83       MOV     DPH,?V1
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   14           DEC     A
   \   0000A2   6008         JZ      ??ZDO_ProcessMgmtRtgReq_7
   \   0000A4   14           DEC     A
   \   0000A5   6013         JZ      ??ZDO_ProcessMgmtRtgReq_8
   \   0000A7   14           DEC     A
   \   0000A8   601F         JZ      ??ZDO_ProcessMgmtRtgReq_9
   \   0000AA   80B8         SJMP    ??ZDO_ProcessMgmtRtgReq_4
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   0000AC   85..82       MOV     DPL,?V0
   \   0000AF   85..83       MOV     DPH,?V1
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   E4           CLR     A
   \   0000B8   80B7         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000BA   85..82       MOV     DPL,?V0
   \   0000BD   85..83       MOV     DPH,?V1
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   7401         MOV     A,#0x1
   \   0000C7   80A8         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   0000C9   85..82       MOV     DPL,?V0
   \   0000CC   85..83       MOV     DPH,?V1
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   A3           INC     DPTR
   \   0000D4   7402         MOV     A,#0x2
   \   0000D6   8099         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   1678                }
   1679              }
   1680              else
   1681              {
   1682                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000D8   7E00         MOV     R6,#0x0
   1683              }
   1684            }
   1685          
   1686            // Send response
   1687            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1688                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000DA                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000DA   75..00       MOV     ?V0,#0x0
   \   0000DD   78..         MOV     R0,#?V0
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E2   78..         MOV     R0,#?V6
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E7   EE           MOV     A,R6
   \   0000E8   F5..         MOV     ?V0,A
   \   0000EA   78..         MOV     R0,#?V0
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EF   EF           MOV     A,R7
   \   0000F0   F5..         MOV     ?V0,A
   \   0000F2   78..         MOV     R0,#?V0
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F7   7405         MOV     A,#0x5
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   FD           MOV     R5,A
   \   0000FE   7C00         MOV     R4,#0x0
   \   000100   E5..         MOV     A,?V2
   \   000102   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   000105   35..         ADDC    A,?V3
   \   000107   FB           MOV     R3,A
   \   000108   E5..         MOV     A,?V2
   \   00010A   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   00010D   35..         ADDC    A,?V3
   \   00010F   F583         MOV     DPH,A
   \   000111   E0           MOVX    A,@DPTR
   \   000112   F9           MOV     R1,A
   \   000113   12....       LCALL   `??ZDP_MgmtRtgRsp::?relay`; Banked call to: ZDP_MgmtRtgRsp
   \   000116   7405         MOV     A,#0x5
   \   000118   12....       LCALL   ?DEALLOC_XSTACK8
   1689          
   1690            if ( pBuf != NULL )
   \   00011B   E5..         MOV     A,?V6
   \   00011D   45..         ORL     A,?V7
   \   00011F   6007         JZ      ??ZDO_ProcessMgmtRtgReq_10
   1691            {
   1692              osal_mem_free( pBuf );
   \   000121                ; Setup parameters for call to function osal_mem_free
   \   000121   AA..         MOV     R2,?V6
   \   000123   AB..         MOV     R3,?V7
   \   000125   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1693            }
   1694          }
   \                     ??ZDO_ProcessMgmtRtgReq_10:
   \   000128   7401         MOV     A,#0x1
   \   00012A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012D   02....       LJMP    ??Subroutine207_0 & 0xFFFF
   1695          
   1696          /*********************************************************************
   1697           * @fn          ZDO_ProcessMgmtBindReq
   1698           *
   1699           * @brief       This function finishes the processing of the Management
   1700           *              Bind Request and generates the response.
   1701           *
   1702           *   Note:      This function will limit the number of items returned
   1703           *              to ZDO_MAX_BIND_ITEMS items.
   1704           *
   1705           * @param       inMsg - incoming message (request)
   1706           *
   1707           * @return      none
   1708           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1709          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1710          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V4,R2
   \   00000C   8B..         MOV     ?V5,R3
   1711          #if defined ( REFLECTOR )
   1712            byte x;
   1713            uint16 maxNumItems;
   1714            uint16 numItems;
   1715            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV     ?V8,#0x0
   \   000011   75..00       MOV     ?V9,#0x0
   1716            apsBindingItem_t *pList;
   1717            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000017   35..         ADDC    A,?V5
   \   000019   F583         MOV     DPH,A
   \   00001B   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   00001E   F5..         MOV     ?V2,A
   1718            uint8 status;
   1719          
   1720            // Get the number of table items
   1721            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \   000020                ; Setup parameters for call to function APSME_GetRequest
   \   000020   AC..         MOV     R4,?XSP + 0
   \   000022   AD..         MOV     R5,?XSP + 1
   \   000024   7A00         MOV     R2,#0x0
   \   000026   7B00         MOV     R3,#0x0
   \   000028   79A3         MOV     R1,#-0x5d
   \   00002A   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1722          
   1723            if ( maxNumItems > StartIndex )
   \   00002D   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_504:
   \   000030   C3           CLR     C
   \   000031   E5..         MOV     A,?V2
   \   000033   9A           SUBB    A,R2
   \   000034   E4           CLR     A
   \   000035   9B           SUBB    A,R3
   \   000036   507A         JNC     ??ZDO_ProcessMgmtBindReq_0
   1724            {
   1725              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   A8..         MOV     R0,?V2
   \   000040   E0           MOVX    A,@DPTR
   \   000041   C3           CLR     C
   \   000042   98           SUBB    A,R0
   \   000043   FE           MOV     R6,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   9400         SUBB    A,#0x0
   \   000048   FF           MOV     R7,A
   1726            }
   1727            else
   1728            {
   1729              numItems = 0;
   1730            }
   1731          
   1732            // limit the size of the list
   1733            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   000049   C3           CLR     C
   \   00004A   EE           MOV     A,R6
   \   00004B   9404         SUBB    A,#0x4
   \   00004D   EF           MOV     A,R7
   \   00004E   9400         SUBB    A,#0x0
   \   000050   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1734            {
   1735              numItems = ZDO_MAX_BIND_ITEMS;
   \   000052   7E03         MOV     R6,#0x3
   \   000054   7F00         MOV     R7,#0x0
   \   000056   8004         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1736            }
   1737          
   1738            // Allocate the memory to build the table
   1739            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000058   EE           MOV     A,R6
   \   000059   4F           ORL     A,R7
   \   00005A   6056         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   00005C                ; Setup parameters for call to function osal_mem_alloc
   \   00005C   EE           MOV     A,R6
   \   00005D   FA           MOV     R2,A
   \   00005E   EF           MOV     A,R7
   \   00005F   FB           MOV     R3,A
   \   000060   EA           MOV     A,R2
   \   000061   75F015       MOV     B,#0x15
   \   000064   A4           MUL     AB
   \   000065   FA           MOV     R2,A
   \   000066   A8F0         MOV     R0,B
   \   000068   75F015       MOV     B,#0x15
   \   00006B   EB           MOV     A,R3
   \   00006C   A4           MUL     AB
   \   00006D   28           ADD     A,R0
   \   00006E   FB           MOV     R3,A
   \   00006F   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000072   8A..         MOV     ?V0,R2
   \   000074   8B..         MOV     ?V1,R3
   \   000076   8A..         MOV     ?V8,R2
   \   000078   8B..         MOV     ?V9,R3
   \   00007A   EA           MOV     A,R2
   \   00007B   45..         ORL     A,?V9
   \   00007D   6033         JZ      ??ZDO_ProcessMgmtBindReq_0
   1740            {
   1741              status = ZSuccess;
   \   00007F   75..00       MOV     ?V3,#0x0
   1742          
   1743              // Convert buffer to list
   1744              pList = (apsBindingItem_t *)pBuf;
   1745          
   1746              // Loop through items and build list
   1747              for ( x = 0; x < numItems; x++ )
   \   000082   75..00       MOV     ?V6,#0x0
   \   000085   801F         SJMP    ??ZDO_ProcessMgmtBindReq_3
   1748              {
   1749                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   000087                ; Setup parameters for call to function APSME_GetRequest
   \   000087   AC..         MOV     R4,?V0
   \   000089   AD..         MOV     R5,?V1
   \   00008B   A8..         MOV     R0,?V2
   \   00008D   E5..         MOV     A,?V6
   \   00008F   28           ADD     A,R0
   \   000090   FA           MOV     R2,A
   \   000091   E4           CLR     A
   \   000092   3400         ADDC    A,#0x0
   \   000094   FB           MOV     R3,A
   \   000095   79A2         MOV     R1,#-0x5e
   \   000097   12....       LCALL   `??APSME_GetRequest::?relay`; Banked call to: APSME_GetRequest
   1750                pList++;
   \   00009A   E5..         MOV     A,?V0
   \   00009C   2415         ADD     A,#0x15
   \   00009E   F5..         MOV     ?V0,A
   \   0000A0   5002         JNC     ??ZDO_ProcessMgmtBindReq_5
   \   0000A2   05..         INC     ?V1
   1751              }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000A4   05..         INC     ?V6
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   0000A6   C3           CLR     C
   \   0000A7   E5..         MOV     A,?V6
   \   0000A9   9E           SUBB    A,R6
   \   0000AA   E4           CLR     A
   \   0000AB   9F           SUBB    A,R7
   \   0000AC   40D9         JC      ??ZDO_ProcessMgmtBindReq_4
   \   0000AE   EE           MOV     A,R6
   \   0000AF   F9           MOV     R1,A
   \   0000B0   8005         SJMP    ??ZDO_ProcessMgmtBindReq_6
   1752          
   1753            }
   1754            else
   1755            {
   1756              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000B2   75..8B       MOV     ?V3,#-0x75
   1757              numItems = 0;
   \   0000B5   7900         MOV     R1,#0x0
   1758            }
   1759          
   1760            // Send response
   1761            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1762                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_6:
   \   0000B7                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000B7   75..00       MOV     ?V0,#0x0
   \   0000BA   78..         MOV     R0,#?V0
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BF   78..         MOV     R0,#?V8
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   E9           MOV     A,R1
   \   0000C5   F5..         MOV     ?V0,A
   \   0000C7   78..         MOV     R0,#?V0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CC   E5..         MOV     A,?V2
   \   0000CE   F5..         MOV     ?V0,A
   \   0000D0   78..         MOV     R0,#?V0
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D5   7405         MOV     A,#0x5
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   FD           MOV     R5,A
   \   0000DC   AC..         MOV     R4,?V3
   \   0000DE   E5..         MOV     A,?V4
   \   0000E0   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   0000E3   35..         ADDC    A,?V5
   \   0000E5   FB           MOV     R3,A
   \   0000E6   E5..         MOV     A,?V4
   \   0000E8   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   0000EB   35..         ADDC    A,?V5
   \   0000ED   F583         MOV     DPH,A
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   F9           MOV     R1,A
   \   0000F1   12....       LCALL   `??ZDP_MgmtBindRsp::?relay`; Banked call to: ZDP_MgmtBindRsp
   \   0000F4   7405         MOV     A,#0x5
   \   0000F6   12....       LCALL   ?DEALLOC_XSTACK8
   1763          
   1764            if ( pBuf )
   \   0000F9   E5..         MOV     A,?V8
   \   0000FB   45..         ORL     A,?V9
   \   0000FD   6007         JZ      ??ZDO_ProcessMgmtBindReq_7
   1765            {
   1766              osal_mem_free( pBuf );
   \   0000FF                ; Setup parameters for call to function osal_mem_free
   \   0000FF   AA..         MOV     R2,?V8
   \   000101   AB..         MOV     R3,?V9
   \   000103   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1767            }
   1768          #else
   1769            (void)inMsg;
   1770          #endif
   1771          }
   \                     ??ZDO_ProcessMgmtBindReq_7:
   \   000106   7402         MOV     A,#0x2
   \   000108                REQUIRE ?Subroutine8
   \   000108                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine226_0
   \   000003                ; // Fall through to label ??Subroutine226_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1772          
   1773          /*********************************************************************
   1774           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1775           *
   1776           * @brief       This function finishes the processing of the Management
   1777           *              Direct Join Request and generates the response.
   1778           *
   1779           * @param       inMsg - incoming message (request)
   1780           *
   1781           * @return      none
   1782           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1783          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1784          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1785            uint8 *deviceAddr;
   1786            uint8 capInfo;
   1787            uint8 stat;
   1788          
   1789            // Parse the message
   1790            deviceAddr = inMsg->asdu;
   1791            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1792          
   1793            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \   00000E   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000011   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   12....       LCALL   `??NLME_DirectJoinRequest::?relay`; Banked call to: NLME_DirectJoinRequest
   \   000021   E9           MOV     A,R1
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   F0           MOVX    @DPTR,A
   1794          
   1795            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000029                ; Setup parameters for call to function ZDP_SendData
   \   000029   75..00       MOV     ?V0,#0x0
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?XSTACK_DISP100_8
   \   000036   88..         MOV     ?V0,R0
   \   000038   89..         MOV     ?V1,R1
   \   00003A   78..         MOV     R0,#?V0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   75..35       MOV     ?V0,#0x35
   \   000042   75..80       MOV     ?V1,#-0x80
   \   000045   78..         MOV     R0,#?V0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   00004D   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000050   7405         MOV     A,#0x5
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
   1796          }
   \   000055                REQUIRE ?Subroutine10
   \   000055                ; // Fall through to label ?Subroutine10

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine209_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine242_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine243_0
   \   000002                ; // Fall through to label ??Subroutine243_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   12....       LCALL   ??Subroutine242_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000003                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET
   1797          
   1798          /*********************************************************************
   1799           * @fn          ZDO_ProcessMgmtLeaveReq
   1800           *
   1801           * @brief       This function processes a Management Leave Request
   1802           *              and generates the response.
   1803           *
   1804           * @param       inMsg - incoming message (request)
   1805           *
   1806           * @return      none
   1807           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1808          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1809          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine124 & 0xFFFF
   1810            NLME_LeaveReq_t req;
   1811            ZStatus_t       status;
   1812            uint8           option;
   1813            uint8 *msg = inMsg->asdu;
   \                     ??CrossCallReturnLabel_386:
   \   00000D   35..         ADDC    A,?V1
   \   00000F   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   000012   FF           MOV     R7,A
   1814          
   1815            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1816                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \   000013                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000013   EE           MOV     A,R6
   \   000014   FA           MOV     R2,A
   \   000015   EF           MOV     A,R7
   \   000016   FB           MOV     R3,A
   \   000017   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   00001A   E9           MOV     A,R1
   \   00001B   6017         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001D                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001D   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000020   8A..         MOV     ?V2,R2
   \   000022   8B..         MOV     ?V3,R3
   \   000024   AC..         MOV     R4,?V2
   \   000026   AD..         MOV     R5,?V3
   \   000028                ; Setup parameters for call to function sAddrExtCmp
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   EF           MOV     A,R7
   \   00002B   FB           MOV     R3,A
   \   00002C   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002F   E9           MOV     A,R1
   \   000030   6401         XRL     A,#0x1
   \   000032   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1817            {
   1818              // Remove this device
   1819              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1820            }
   1821            else
   1822            {
   1823              // Remove child device
   1824              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   EE           MOV     A,R6
   \   000044   F0           MOVX    @DPTR,A
   \   000045   A3           INC     DPTR
   \   000046   EF           MOV     A,R7
   1825            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000047   12....       LCALL   ?Subroutine25 & 0xFFFF
   1826          
   1827            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_27:
   \   00004A   F8           MOV     R0,A
   1828            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   00004B   A2E6         MOV     C,0xE0 /* A   */.6
   \   00004D   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1829            {
   1830              req.removeChildren = TRUE;
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
   1831            }
   1832          
   1833            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000057   E8           MOV     A,R0
   \   000058   A2E7         MOV     C,0xE0 /* A   */.7
   \   00005A   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1834            {
   1835               req.rejoin = TRUE;
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   7401         MOV     A,#0x1
   \   000063   F0           MOVX    @DPTR,A
   1836            }
   1837          
   1838            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000064   7405         MOV     A,#0x5
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
   1839          
   1840            status = NLME_LeaveReq( &req );
   \   00006B                ; Setup parameters for call to function NLME_LeaveReq
   \   00006B   04           INC     A
   \   00006C   12....       LCALL   ?XSTACK_DISP101_8
   \   00006F   12....       LCALL   `??NLME_LeaveReq::?relay`; Banked call to: NLME_LeaveReq
   \   000072   E9           MOV     A,R1
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   F0           MOVX    @DPTR,A
   1841          
   1842            if ( ZG_BUILD_ENDDEVICE_TYPE )
   1843            {
   1844              // Stop polling and get ready to reset
   1845              NLME_SetPollRate( 0 );
   \   00007A                ; Setup parameters for call to function NLME_SetPollRate
   \   00007A   7A00         MOV     R2,#0x0
   \   00007C   7B00         MOV     R3,#0x0
   \   00007E   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1846            }
   1847          
   1848            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   000081                ; Setup parameters for call to function ZDP_SendData
   \   000081   75..00       MOV     ?V2,#0x0
   \   000084   78..         MOV     R0,#?V2
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000089   7401         MOV     A,#0x1
   \   00008B   12....       LCALL   ?XSTACK_DISP100_8
   \   00008E   88..         MOV     ?V2,R0
   \   000090   89..         MOV     ?V3,R1
   \   000092   78..         MOV     R0,#?V2
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000097   75..34       MOV     ?V2,#0x34
   \   00009A   75..80       MOV     ?V3,#-0x80
   \   00009D   78..         MOV     R0,#?V2
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   0000A5   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000A8   7405         MOV     A,#0x5
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   1849          }
   \   0000AD   7406         MOV     A,#0x6
   \   0000AF   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine159 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
   1850          
   1851          
   1852          /*********************************************************************
   1853           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1854           *
   1855           * @brief       This function processes a Management Permit Join Request
   1856           *              and generates the response.
   1857           *
   1858           * @param       inMsg - incoming message (request)
   1859           *
   1860           * @return      none
   1861           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1862          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1863          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine75 & 0xFFFF
   1864            uint8 stat;
   1865            uint8 duration;
   1866            uint8 tcsig;
   1867          
   1868            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   \                     ??CrossCallReturnLabel_121:
   \   00000D   F5..         MOV     ?V1,A
   1869            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0,A
   1870          
   1871            // Set the network layer permit join duration
   1872            stat = (byte) NLME_PermitJoiningRequest( duration );
   \   000013                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000013   A9..         MOV     R1,?V1
   \   000015   12....       LCALL   `??NLME_PermitJoiningRequest::?relay`; Banked call to: NLME_PermitJoiningRequest
   \   000018   E9           MOV     A,R1
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   F0           MOVX    @DPTR,A
   1873          
   1874            // Handle the Trust Center Significance
   1875            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \   000020   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000023   E0           MOVX    A,@DPTR
   \   000024   700B         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1876            {
   1877              if ( tcsig == TRUE )
   \   000026   7401         MOV     A,#0x1
   \   000028   65..         XRL     A,?V0
   \   00002A   7005         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1878              {
   1879                ZDSecMgrPermitJoining( duration );
   \   00002C                ; Setup parameters for call to function ZDSecMgrPermitJoining
   \   00002C   A9..         MOV     R1,?V1
   \   00002E   12....       LCALL   `??ZDSecMgrPermitJoining::?relay`; Banked call to: ZDSecMgrPermitJoining
   1880              }
   1881            }
   1882          
   1883            // Send a response if unicast
   1884            if ( !inMsg->wasBroadcast )
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   000031   EE           MOV     A,R6
   \   000032   240B         ADD     A,#0xb
   \   000034   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_545:
   \   000037   702C         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_1
   1885            {
   1886              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000039                ; Setup parameters for call to function ZDP_SendData
   \   000039   75..00       MOV     ?V0,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000041   7401         MOV     A,#0x1
   \   000043   12....       LCALL   ?XSTACK_DISP100_8
   \   000046   88..         MOV     ?V0,R0
   \   000048   89..         MOV     ?V1,R1
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   75..36       MOV     ?V0,#0x36
   \   000052   75..80       MOV     ?V1,#-0x80
   \   000055   78..         MOV     R0,#?V0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   12....       LCALL   ?Subroutine126 & 0xFFFF
   1887            }
   \                     ??CrossCallReturnLabel_407:
   \   00005D   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000060   7405         MOV     A,#0x5
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   1888          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_1:
   \   000065   02....       LJMP    ?Subroutine10 & 0xFFFF
   1889          
   1890          /*
   1891           * This function stub allows the next higher layer to be notified of
   1892           * a permit joining timeout.
   1893           */
   1894          /*********************************************************************
   1895           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1896           *
   1897           * @brief       This function stub allows the next higher layer to be
   1898           *              notified of a permit joining timeout. Currently, this
   1899           *              directly bypasses the APS layer.
   1900           *
   1901           * @param       none
   1902           *
   1903           * @return      none
   1904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1905          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1906          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1907            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1908            // Currently, only the ZDSecMgr needs to be notified
   1909            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7003         JNZ     ??NLME_PermitJoiningTimeout_0
   1910            {
   1911              ZDSecMgrPermitJoiningTimeout();
   \   00000A                ; Setup parameters for call to function ZDSecMgrPermitJoiningTimeout
   \   00000A   12....       LCALL   `??ZDSecMgrPermitJoiningTimeout::?relay`; Banked call to: ZDSecMgrPermitJoiningTimeout
   1912            }
   1913            #endif
   1914          }
   \                     ??NLME_PermitJoiningTimeout_0:
   \   00000D   02....       LJMP    ?Subroutine0 & 0xFFFF
   1915          
   1916          /*********************************************************************
   1917           * @fn          ZDO_ProcessUserDescReq
   1918           *
   1919           * @brief       This function finishes the processing of the User
   1920           *              Descriptor Request and generates the response.
   1921           *
   1922           * @param       inMsg - incoming message (request)
   1923           *
   1924           * @return      none
   1925           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1926          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1927          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1928            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000011   F5..         MOV     ?V0,A
   \   000013   E4           CLR     A
   \   000014   39           ADDC    A,R1
   \   000015   F5..         MOV     ?V1,A
   1929            UserDescriptorFormat_t userDesc;
   1930          
   1931            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1932                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000017   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   65..         XRL     A,?V0
   \   00001D   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000023   7052         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000025                ; Setup parameters for call to function osal_nv_read
   \   000025   A8..         MOV     R0,?XSP + 0
   \   000027   A9..         MOV     R1,?XSP + 1
   \   000029   88..         MOV     ?V2,R0
   \   00002B   89..         MOV     ?V3,R1
   \   00002D   78..         MOV     R0,#?V2
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   75..11       MOV     ?V2,#0x11
   \   000035   75..00       MOV     ?V3,#0x0
   \   000038   78..         MOV     R0,#?V2
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV     R4,#0x0
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7A81         MOV     R2,#-0x7f
   \   000043   7B00         MOV     R3,#0x0
   \   000045   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000048   7404         MOV     A,#0x4
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   E9           MOV     A,R1
   \   00004E   7027         JNZ     ??ZDO_ProcessUserDescReq_1
   1933            {
   1934              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   000050                ; Setup parameters for call to function ZDP_UserDescRsp
   \   000050   75..00       MOV     ?V2,#0x0
   \   000053   78..         MOV     R0,#?V2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   7401         MOV     A,#0x1
   \   00005A   12....       LCALL   ?XSTACK_DISP100_8
   \   00005D   88..         MOV     ?V2,R0
   \   00005F   89..         MOV     ?V3,R1
   \   000061   78..         MOV     R0,#?V2
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   AC..         MOV     R4,?V0
   \   000068   AD..         MOV     R5,?V1
   \   00006A   12....       LCALL   ?Subroutine125 & 0xFFFF
   1935            }
   \                     ??CrossCallReturnLabel_202:
   \   00006D   12....       LCALL   `??ZDP_UserDescRsp::?relay`; Banked call to: ZDP_UserDescRsp
   \   000070   7403         MOV     A,#0x3
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   \   000075   8021         SJMP    ??ZDO_ProcessUserDescReq_2
   1936            else
   1937            {
   1938              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1939                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000077                ; Setup parameters for call to function ZDP_GenericRsp
   \   000077   75..11       MOV     ?V2,#0x11
   \   00007A   75..80       MOV     ?V3,#-0x80
   \   00007D   78..         MOV     R0,#?V2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   78..         MOV     R0,#?V0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   12....       LCALL   ?Subroutine130 & 0xFFFF
   1940            }
   \                     ??CrossCallReturnLabel_554:
   \   00008A   FD           MOV     R5,A
   \   00008B   7C84         MOV     R4,#-0x7c
   \   00008D   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000090   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000093   7404         MOV     A,#0x4
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   1941          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   000098   7411         MOV     A,#0x11
   \   00009A   02....       LJMP    ?Subroutine4 & 0xFFFF
   1942          
   1943          /*********************************************************************
   1944           * @fn          ZDO_ProcessUserDescSet
   1945           *
   1946           * @brief       This function finishes the processing of the User
   1947           *              Descriptor Set and generates the response.
   1948           *
   1949           * @param       inMsg - incoming message (request)
   1950           *
   1951           * @return      none
   1952           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1953          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1954          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine75 & 0xFFFF
   1955            uint8 *msg;
   1956            uint16 aoi;
   1957            UserDescriptorFormat_t userDesc;
   1958            uint8 outMsg[3];
   1959            uint8 status;
   1960          
   1961            msg = inMsg->asdu;
   1962            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_122:
   \   00000D   FC           MOV     R4,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   \   000011   E4           CLR     A
   \   000012   CA           XCH     A,R2
   \   000013   FB           MOV     R3,A
   \   000014   EC           MOV     A,R4
   \   000015   2A           ADD     A,R2
   \   000016   F5..         MOV     ?V0,A
   \   000018   E4           CLR     A
   \   000019   3B           ADDC    A,R3
   \   00001A   F5..         MOV     ?V1,A
   1963          
   1964            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   00001C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   65..         XRL     A,?V0
   \   000022   7004         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   65..         XRL     A,?V1
   \                     ??ZDO_ProcessUserDescSet_0:
   \   000028   6003         JZ      $+5
   \   00002A   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1965            {
   1966              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   9410         SUBB    A,#0x10
   \   000036   500F         JNC     ??ZDO_ProcessUserDescSet_2
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   8008         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   7410         MOV     A,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   E0           MOVX    A,@DPTR
   \   000051   C0E0         PUSH    A
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   D0E0         POP     A
   \   00005A   12....       LCALL   ?Subroutine43 & 0xFFFF
   1967              msg ++;  // increment one for the length field
   1968          
   1969              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_64:
   \   00005D   A982         MOV     R1,DPL
   \   00005F   AA83         MOV     R2,DPH
   \   000061   89..         MOV     ?V4,R1
   \   000063   8A..         MOV     ?V5,R2
   \   000065   75..00       MOV     ?V6,#0x0
   \   000068   78..         MOV     R0,#?V4
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006D   7407         MOV     A,#0x7
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   E0           MOVX    A,@DPTR
   \   000073   FC           MOV     R4,A
   \   000074   7D00         MOV     R5,#0x0
   \   000076   7408         MOV     A,#0x8
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   AA82         MOV     R2,DPL
   \   00007D   AB83         MOV     R3,DPH
   \   00007F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000082   7403         MOV     A,#0x3
   \   000084   12....       LCALL   ?DEALLOC_XSTACK8
   1970              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000087                ; Setup parameters for call to function osal_nv_write
   \   000087   7404         MOV     A,#0x4
   \   000089   12....       LCALL   ?XSTACK_DISP100_8
   \   00008C   88..         MOV     ?V2,R0
   \   00008E   89..         MOV     ?V3,R1
   \   000090   78..         MOV     R0,#?V2
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   75..11       MOV     ?V2,#0x11
   \   000098   75..00       MOV     ?V3,#0x0
   \   00009B   78..         MOV     R0,#?V2
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A0   7C00         MOV     R4,#0x0
   \   0000A2   7D00         MOV     R5,#0x0
   \   0000A4   7A81         MOV     R2,#-0x7f
   \   0000A6   7B00         MOV     R3,#0x0
   \   0000A8   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000AB   7404         MOV     A,#0x4
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   1971              if ( userDesc.len != 0 )
   \   0000B0   7404         MOV     A,#0x4
   \   0000B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000B9   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1972              {
   1973                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   D2E4         SETB    0xE0 /* A   */.4
   \   0000BE   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1974              }
   1975              else
   1976              {
   1977                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   C2E4         CLR     0xE0 /* A   */.4
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000C3   F0           MOVX    @DPTR,A
   1978              }
   1979          
   1980              status = ZDP_SUCCESS;
   \   0000C4   85..82       MOV     DPL,?XSP + 0
   \   0000C7   85..83       MOV     DPH,?XSP + 1
   \   0000CA   E4           CLR     A
   \   0000CB   8008         SJMP    ??ZDO_ProcessUserDescSet_6
   1981            }
   1982            else
   1983            {
   1984              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000CD   85..82       MOV     DPL,?XSP + 0
   \   0000D0   85..83       MOV     DPH,?XSP + 1
   \   0000D3   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000D5   F0           MOVX    @DPTR,A
   1985            }
   1986          
   1987            outMsg[0] = status;
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   C0E0         PUSH    A
   \   0000D9   7401         MOV     A,#0x1
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   D0E0         POP     A
   \   0000E0   F0           MOVX    @DPTR,A
   1988            outMsg[1] = LO_UINT16( aoi );
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   E5..         MOV     A,?V0
   \   0000E8   F0           MOVX    @DPTR,A
   1989            outMsg[2] = LO_UINT16( aoi );
   \   0000E9   7403         MOV     A,#0x3
   \   0000EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EE   E5..         MOV     A,?V0
   \   0000F0   F0           MOVX    @DPTR,A
   1990          
   1991            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1992                         inMsg->SecurityUse );
   \   0000F1                ; Setup parameters for call to function ZDP_SendData
   \   0000F1   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   0000F4   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   0000F7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FA   7402         MOV     A,#0x2
   \   0000FC   12....       LCALL   ?XSTACK_DISP100_8
   \   0000FF   88..         MOV     ?V0,R0
   \   000101   89..         MOV     ?V1,R1
   \   000103   78..         MOV     R0,#?V0
   \   000105   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000108   75..14       MOV     ?V0,#0x14
   \   00010B   75..80       MOV     ?V1,#-0x80
   \   00010E   78..         MOV     R0,#?V0
   \   000110   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000113   7903         MOV     R1,#0x3
   \   000115   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   000118   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   00011B   7405         MOV     A,#0x5
   \   00011D   12....       LCALL   ?DEALLOC_XSTACK8
   1993          }
   \   000120   7415         MOV     A,#0x15
   \   000122   02....       LJMP    ?Subroutine9 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine163:
   \   000000   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine196:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   1994          
   1995          /*********************************************************************
   1996           * @fn          ZDO_ProcessDeviceAnnce
   1997           *
   1998           * @brief       This function processes a device annouce message.
   1999           *
   2000           * @param       inMsg - incoming message
   2001           *
   2002           * @return      none
   2003           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2004          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   2005          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2006            ZDO_DeviceAnnce_t Annce;
   2007            AddrMgrEntry_t addrEntry;
   2008            uint8 parentExt[Z_EXTADDR_LEN];
   2009          
   2010            // Parse incoming message
   2011            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000E   AC..         MOV     R4,?XSP + 0
   \   000010   AD..         MOV     R5,?XSP + 1
   \   000012   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   2012          
   2013            if ( ZSTACK_END_DEVICE_BUILD )
   \   000015   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000018   E0           MOVX    A,@DPTR
   \   000019   6402         XRL     A,#0x2
   \   00001B   702F         JNZ     ??ZDO_ProcessDeviceAnnce_0
   2014            {
   2015              // Make sure the message didn't come from myself - end device only
   2016              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   \   00001D                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001D   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   000020                ; Setup parameters for call to function sAddrExtCmp
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   AC82         MOV     R4,DPL
   \   000027   AD83         MOV     R5,DPH
   \   000029   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00002C   E9           MOV     A,R1
   \   00002D   601D         JZ      ??ZDO_ProcessDeviceAnnce_0
   \   00002F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00002F   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000032   8A..         MOV     ?V0,R2
   \   000034   8B..         MOV     ?V1,R3
   \   000036   A8..         MOV     R0,?V0
   \   000038   A9..         MOV     R1,?V1
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   E0           MOVX    A,@DPTR
   \   000041   68           XRL     A,R0
   \   000042   7003         JNZ     ??ZDO_ProcessDeviceAnnce_1
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   000047   7003         JNZ     $+5
   \   000049   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   2017              {
   2018                return;
   2019              }
   2020            }
   2021          
   2022          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2023            // Clean up the neighbor table
   2024            nwkNeighborRemoveAllStranded();
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   00004C                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   00004C   12....       LCALL   `??nwkNeighborRemoveAllStranded::?relay`; Banked call to: nwkNeighborRemoveAllStranded
   2025          
   2026            // If address conflict is detected, no need to update the address manager
   2027            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   00004F                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   00004F   7402         MOV     A,#0x2
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_507:
   \   000057   12....       LCALL   `??NLME_CheckNewAddrSet::?relay`; Banked call to: NLME_CheckNewAddrSet
   \   00005A   E9           MOV     A,R1
   \   00005B   6401         XRL     A,#0x1
   \   00005D   7003         JNZ     $+5
   \   00005F   02....       LJMP    ??ZDO_ProcessDeviceAnnce_2 & 0xFFFF
   2028            {
   2029              return;
   2030            }
   2031          #endif
   2032          
   2033          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2034            // Check for parent's address
   2035            NLME_GetCoordExtAddr( parentExt );
   \   000062                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000062   7418         MOV     A,#0x18
   \   000064   12....       LCALL   ?XSTACK_DISP101_8
   \   000067   12....       LCALL   `??NLME_GetCoordExtAddr::?relay`; Banked call to: NLME_GetCoordExtAddr
   2036            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   00006A                ; Setup parameters for call to function sAddrExtCmp
   \   00006A   7402         MOV     A,#0x2
   \   00006C   12....       LCALL   ?XSTACK_DISP0_8
   \   00006F   AC82         MOV     R4,DPL
   \   000071   AD83         MOV     R5,DPH
   \   000073   7418         MOV     A,#0x18
   \   000075   12....       LCALL   ?XSTACK_DISP101_8
   \   000078   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00007B   E9           MOV     A,R1
   \   00007C   6032         JZ      ??ZDO_ProcessDeviceAnnce_3
   2037            {
   2038              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   00007E                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00007E   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   000081   8A..         MOV     ?V0,R2
   \   000083   8B..         MOV     ?V1,R3
   \   000085   A8..         MOV     R0,?V0
   \   000087   A9..         MOV     R1,?V1
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   68           XRL     A,R0
   \   000091   7003         JNZ     ??ZDO_ProcessDeviceAnnce_4
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   000096   6018         JZ      ??ZDO_ProcessDeviceAnnce_3
   2039              {
   2040                // Set the Parent's MAC's new short address
   2041                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   000098   85..82       MOV     DPL,?XSP + 0
   \   00009B   85..83       MOV     DPH,?XSP + 1
   \   00009E   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   0000A1   90....       MOV     DPTR,#_NIB + 23
   \   0000A4   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   2042                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_373:
   \   0000A7                ; Setup parameters for call to function ZMacSetReq
   \   0000A7   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   0000A9   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   0000AB   794B         MOV     R1,#0x4b
   \   0000AD   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   2043              }
   2044            }
   2045          
   2046            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000B0   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   6007         JZ      ??ZDO_ProcessDeviceAnnce_5
   \   0000B6   6401         XRL     A,#0x1
   \   0000B8   6003         JZ      $+5
   \   0000BA   02....       LJMP    ??ZDO_ProcessDeviceAnnce_6 & 0xFFFF
   2047            {
   2048              // If the device annce comes from a end device child that has moved
   2049              // to another parent, remove it from associated device list
   2050          
   2051              // If the dev annce is coming from other device's children,
   2052              // (The dev annce from its own children shall be unicast to itself,
   2053              // So check the mac destination address)
   2054              // Remove it from the associated device list. If it is not
   2055              // a child, no action will be taken in AssocRemove() anyway.
   2056              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000BD                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000BD   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000C0   8A..         MOV     ?V0,R2
   \   0000C2   8B..         MOV     ?V1,R3
   \   0000C4   A8..         MOV     R0,?V0
   \   0000C6   A9..         MOV     R1,?V1
   \   0000C8   EE           MOV     A,R6
   \   0000C9   2411         ADD     A,#0x11
   \   0000CB   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_546:
   \   0000CE   68           XRL     A,R0
   \   0000CF   7003         JNZ     ??ZDO_ProcessDeviceAnnce_7
   \   0000D1   A3           INC     DPTR
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   0000D4   605C         JZ      ??ZDO_ProcessDeviceAnnce_8
   2057              {
   2058                associated_devices_t *dev_ptr;
   2059          
   2060                // If it's an end device child
   2061                dev_ptr = AssocGetWithExt( Annce.extAddr );
   \   0000D6                ; Setup parameters for call to function AssocGetWithExt
   \   0000D6   7402         MOV     A,#0x2
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   AA82         MOV     R2,DPL
   \   0000DD   AB83         MOV     R3,DPH
   \   0000DF   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   0000E2   8A..         MOV     ?V0,R2
   \   0000E4   8B..         MOV     ?V1,R3
   \   0000E6   A8..         MOV     R0,?V0
   \   0000E8   A9..         MOV     R1,?V1
   2062                if ( dev_ptr )
   \   0000EA   E8           MOV     A,R0
   \   0000EB   49           ORL     A,R1
   \   0000EC   6026         JZ      ??ZDO_ProcessDeviceAnnce_9
   2063                {
   2064                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2065                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   0000EE   8882         MOV     DPL,R0
   \   0000F0   8983         MOV     DPH,R1
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   6401         XRL     A,#0x1
   \   0000F9   600D         JZ      ??ZDO_ProcessDeviceAnnce_10
   \   0000FB   8882         MOV     DPL,R0
   \   0000FD   8983         MOV     DPH,R1
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   A3           INC     DPTR
   \   000102   A3           INC     DPTR
   \   000103   E0           MOVX    A,@DPTR
   \   000104   6402         XRL     A,#0x2
   \   000106   700C         JNZ     ??ZDO_ProcessDeviceAnnce_9
   2066                  {
   2067                    AssocRemove( Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_10:
   \   000108                ; Setup parameters for call to function AssocRemove
   \   000108   7402         MOV     A,#0x2
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   AA82         MOV     R2,DPL
   \   00010F   AB83         MOV     R3,DPH
   \   000111   12....       LCALL   `??AssocRemove::?relay`; Banked call to: AssocRemove
   2068                  }
   2069                }
   2070          
   2071          #if defined ( ZIGBEE_CHILD_AGING )
   2072                // Remove the address from the SrcMatch table,
   2073                // just in case the device was aged out by Child Management Table process
   2074                if ( ( pNwkNotMyChildListDelete != NULL ) &&
   2075                     ( zgChildAgingEnable == TRUE ) )
   \                     ??ZDO_ProcessDeviceAnnce_9:
   \   000114   90....       MOV     DPTR,#pNwkNotMyChildListDelete
   \   000117   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   00011A   6016         JZ      ??ZDO_ProcessDeviceAnnce_8
   \   00011C   90....       MOV     DPTR,#zgChildAgingEnable
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   6401         XRL     A,#0x1
   \   000122   700E         JNZ     ??ZDO_ProcessDeviceAnnce_8
   2076                {
   2077                  pNwkNotMyChildListDelete( Annce.nwkAddr );
   \   000124                ; Setup parameters for indirect call
   \   000124   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   2078                }
   2079          #endif // ZIGBEE_CHILD_AGING
   2080              }
   \                     ??CrossCallReturnLabel_505:
   \   000127   90....       MOV     DPTR,#pNwkNotMyChildListDelete + 1
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   F583         MOV     DPH,A
   \   00012D   8882         MOV     DPL,R0
   \   00012F   12....       LCALL   ?CALL_IND
   2081          
   2082              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_8:
   \   000132                ; Setup parameters for call to function NLME_GetShortAddr
   \   000132   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000135   8A..         MOV     ?V0,R2
   \   000137   8B..         MOV     ?V1,R3
   \   000139   A8..         MOV     R0,?V0
   \   00013B   A9..         MOV     R1,?V1
   \   00013D   85..82       MOV     DPL,?XSP + 0
   \   000140   85..83       MOV     DPH,?XSP + 1
   \   000143   E0           MOVX    A,@DPTR
   \   000144   68           XRL     A,R0
   \   000145   7003         JNZ     ??ZDO_ProcessDeviceAnnce_11
   \   000147   A3           INC     DPTR
   \   000148   E0           MOVX    A,@DPTR
   \   000149   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_11:
   \   00014A   6011         JZ      ??ZDO_ProcessDeviceAnnce_6
   2083              {
   2084                // If an associated device is found with matched extended Address,
   2085                // update its short address
   2086                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   \   00014C                ; Setup parameters for call to function AssocChangeNwkAddr
   \   00014C   7402         MOV     A,#0x2
   \   00014E   12....       LCALL   ?XSTACK_DISP0_8
   \   000151   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_508:
   \   000154   12....       LCALL   `??AssocChangeNwkAddr::?relay`; Banked call to: AssocChangeNwkAddr
   \   000157   E9           MOV     A,R1
   \   000158   6003         JZ      ??ZDO_ProcessDeviceAnnce_6
   2087                {
   2088                  // Set event to save NV
   2089                  ZDApp_NVUpdate();
   \   00015A                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00015A   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2090                }
   2091              }
   2092            }
   2093          
   2094            // Update the neighbor table
   2095            nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   00015D                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   00015D   7402         MOV     A,#0x2
   \   00015F   12....       LCALL   ?XSTACK_DISP0_8
   \   000162   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   000165   12....       LCALL   `??nwkNeighborUpdateNwkAddr::?relay`; Banked call to: nwkNeighborUpdateNwkAddr
   2096          
   2097            // Assume that the device has moved, remove existing routing entries
   2098            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \   000168                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   000168   7900         MOV     R1,#0x0
   \   00016A   12....       LCALL   ??Subroutine240_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_506:
   \   00016D   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2099          
   2100          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   2101          
   2102            // Fill in the extended address in address manager if we don't have it already.
   2103            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000170   740B         MOV     A,#0xb
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   E4           CLR     A
   \   000176   12....       LCALL   ?Subroutine28 & 0xFFFF
   2104            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_31:
   \   000179   F8           MOV     R0,A
   \   00017A   A3           INC     DPTR
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   F9           MOV     R1,A
   \   00017D   740C         MOV     A,#0xc
   \   00017F   12....       LCALL   ?XSTACK_DISP0_8
   \   000182   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   2105            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_374:
   \   000185                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000185   740B         MOV     A,#0xb
   \   000187   12....       LCALL   ?XSTACK_DISP101_8
   \   00018A   12....       LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
   \   00018D   E9           MOV     A,R1
   \   00018E   603F         JZ      ??ZDO_ProcessDeviceAnnce_12
   2106            {
   2107              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   000190                ; Setup parameters for call to function osal_memset
   \   000190   7C08         MOV     R4,#0x8
   \   000192   7D00         MOV     R5,#0x0
   \   000194   7900         MOV     R1,#0x0
   \   000196   7418         MOV     A,#0x18
   \   000198   12....       LCALL   ?XSTACK_DISP101_8
   \   00019B   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2108              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   00019E                ; Setup parameters for call to function sAddrExtCmp
   \   00019E   740E         MOV     A,#0xe
   \   0001A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A3   AC82         MOV     R4,DPL
   \   0001A5   AD83         MOV     R5,DPH
   \   0001A7   7418         MOV     A,#0x18
   \   0001A9   12....       LCALL   ?XSTACK_DISP101_8
   \   0001AC   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   0001AF   E9           MOV     A,R1
   \   0001B0   601D         JZ      ??ZDO_ProcessDeviceAnnce_12
   2109              {
   2110                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   0001B2                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0001B2   7402         MOV     A,#0x2
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   AC82         MOV     R4,DPL
   \   0001B9   AD83         MOV     R5,DPH
   \   0001BB   740E         MOV     A,#0xe
   \   0001BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C0   AA82         MOV     R2,DPL
   \   0001C2   AB83         MOV     R3,DPH
   \   0001C4   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2111                AddrMgrEntryUpdate( &addrEntry );
   \   0001C7                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0001C7   740B         MOV     A,#0xb
   \   0001C9   12....       LCALL   ?XSTACK_DISP101_8
   \   0001CC   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2112              }
   2113            }
   2114          
   2115            // Update the short address in address manager if it's been changed
   2116            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_12:
   \   0001CF                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0001CF   7402         MOV     A,#0x2
   \   0001D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D4   AC82         MOV     R4,DPL
   \   0001D6   AD83         MOV     R5,DPH
   \   0001D8   740E         MOV     A,#0xe
   \   0001DA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DD   AA82         MOV     R2,DPL
   \   0001DF   AB83         MOV     R3,DPH
   \   0001E1   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   2117            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   0001E4                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   0001E4   740B         MOV     A,#0xb
   \   0001E6   12....       LCALL   ?XSTACK_DISP101_8
   \   0001E9   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   0001EC   E9           MOV     A,R1
   \   0001ED   6030         JZ      ??ZDO_ProcessDeviceAnnce_2
   2118            {
   2119              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   0001EF   740C         MOV     A,#0xc
   \   0001F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F4   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   0001F7   85..82       MOV     DPL,?XSP + 0
   \   0001FA   85..83       MOV     DPH,?XSP + 1
   \   0001FD   E0           MOVX    A,@DPTR
   \   0001FE   68           XRL     A,R0
   \   0001FF   7003         JNZ     ??ZDO_ProcessDeviceAnnce_13
   \   000201   A3           INC     DPTR
   \   000202   E0           MOVX    A,@DPTR
   \   000203   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_13:
   \   000204   6019         JZ      ??ZDO_ProcessDeviceAnnce_2
   2120              {
   2121                addrEntry.nwkAddr = Annce.nwkAddr;
   \   000206   85..82       MOV     DPL,?XSP + 0
   \   000209   85..83       MOV     DPH,?XSP + 1
   \   00020C   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   00020F   740C         MOV     A,#0xc
   \   000211   12....       LCALL   ?XSTACK_DISP0_8
   \   000214   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   2122                AddrMgrEntryUpdate( &addrEntry );
   \                     ??CrossCallReturnLabel_375:
   \   000217                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000217   740B         MOV     A,#0xb
   \   000219   12....       LCALL   ?XSTACK_DISP101_8
   \   00021C   12....       LCALL   `??AddrMgrEntryUpdate::?relay`; Banked call to: AddrMgrEntryUpdate
   2123              }
   2124            }
   2125          }
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   00021F   7420         MOV     A,#0x20
   \   000221   02....       LJMP    ??Subroutine209_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004                REQUIRE ??Subroutine240_0
   \   000004                ; // Fall through to label ??Subroutine240_0
   2126          
   2127          /*********************************************************************
   2128           * @fn          ZDO_BuildSimpleDescBuf
   2129           *
   2130           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2131           *
   2132           * @param       buf  - pointer to a byte array big enough for data.
   2133           * @param       desc - SimpleDescriptionFormat_t *
   2134           *
   2135           * @return      none
   2136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2137          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2138          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2139            byte cnt;
   2140            uint16 *ptr;
   2141          
   2142            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ??Subroutine235_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   00000C   F0           MOVX    @DPTR,A
   2143            *buf++ = HI_UINT16( desc->AppProfId );
   \   00000D   8C82         MOV     DPL,R4
   \   00000F   8D83         MOV     DPH,R5
   \   000011   A3           INC     DPTR
   \   000012   A882         MOV     R0,DPL
   \   000014   A983         MOV     R1,DPH
   \   000016   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   000019   12....       LCALL   ?Subroutine33 & 0xFFFF
   2144            *buf++ = LO_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_43:
   \   00001C   F0           MOVX    @DPTR,A
   2145            *buf++ = HI_UINT16( desc->AppDeviceId );
   \   00001D   EC           MOV     A,R4
   \   00001E   2403         ADD     A,#0x3
   \   000020   F8           MOV     R0,A
   \   000021   E4           CLR     A
   \   000022   3D           ADDC    A,R5
   \   000023   F9           MOV     R1,A
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ?Subroutine33 & 0xFFFF
   2146            *buf++ = LO_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_44:
   \   000030   12....       LCALL   ?Subroutine44 & 0xFFFF
   2147          
   2148            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_67:
   \   000033   E0           MOVX    A,@DPTR
   \   000034   C4           SWAP    A
   \   000035   54F0         ANL     A,#0xf0
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine44 & 0xFFFF
   2149          
   2150            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_68:
   \   000041   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   EA           MOV     A,R2
   \   00004C   2407         ADD     A,#0x7
   \   00004E   FA           MOV     R2,A
   \   00004F   5001         JNC     ??ZDO_BuildSimpleDescBuf_0
   \   000051   0B           INC     R3
   2151            ptr = desc->pAppInClusterList;
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000052   8C82         MOV     DPL,R4
   \   000054   8D83         MOV     DPH,R5
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   2152            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_422:
   \   000060   7E00         MOV     R6,#0x0
   \   000062   800E         SJMP    ??ZDO_BuildSimpleDescBuf_1
   2153            {
   2154              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_2:
   \   000064   12....       LCALL   ?Subroutine19 & 0xFFFF
   2155              *buf++ = LO_UINT16( *ptr );
   2156            }
   \                     ??CrossCallReturnLabel_18:
   \   000067   5001         JNC     ??ZDO_BuildSimpleDescBuf_3
   \   000069   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_3:
   \   00006A   E8           MOV     A,R0
   \   00006B   2402         ADD     A,#0x2
   \   00006D   F8           MOV     R0,A
   \   00006E   5001         JNC     ??ZDO_BuildSimpleDescBuf_4
   \   000070   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_4:
   \   000071   0E           INC     R6
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000072   8C82         MOV     DPL,R4
   \   000074   8D83         MOV     DPH,R5
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FF           MOV     R7,A
   \   00007E   EE           MOV     A,R6
   \   00007F   C3           CLR     C
   \   000080   9F           SUBB    A,R7
   \   000081   40E1         JC      ??ZDO_BuildSimpleDescBuf_2
   2157          
   2158            *buf++ = desc->AppNumOutClusters;
   \   000083   8C82         MOV     DPL,R4
   \   000085   8D83         MOV     DPH,R5
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   000092   F0           MOVX    @DPTR,A
   \   000093   A3           INC     DPTR
   \   000094   AA82         MOV     R2,DPL
   \   000096   AB83         MOV     R3,DPH
   2159            ptr = desc->pAppOutClusterList;
   \   000098   8C82         MOV     DPL,R4
   \   00009A   8D83         MOV     DPH,R5
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   2160            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_423:
   \   0000A9   7E00         MOV     R6,#0x0
   \   0000AB   800E         SJMP    ??ZDO_BuildSimpleDescBuf_5
   2161            {
   2162              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_6:
   \   0000AD   12....       LCALL   ?Subroutine19 & 0xFFFF
   2163              *buf++ = LO_UINT16( *ptr );
   2164            }
   \                     ??CrossCallReturnLabel_19:
   \   0000B0   5001         JNC     ??ZDO_BuildSimpleDescBuf_7
   \   0000B2   0B           INC     R3
   \                     ??ZDO_BuildSimpleDescBuf_7:
   \   0000B3   E8           MOV     A,R0
   \   0000B4   2402         ADD     A,#0x2
   \   0000B6   F8           MOV     R0,A
   \   0000B7   5001         JNC     ??ZDO_BuildSimpleDescBuf_8
   \   0000B9   09           INC     R1
   \                     ??ZDO_BuildSimpleDescBuf_8:
   \   0000BA   0E           INC     R6
   \                     ??ZDO_BuildSimpleDescBuf_5:
   \   0000BB   8C82         MOV     DPL,R4
   \   0000BD   8D83         MOV     DPH,R5
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   FF           MOV     R7,A
   \   0000CA   EE           MOV     A,R6
   \   0000CB   C3           CLR     C
   \   0000CC   9F           SUBB    A,R7
   \   0000CD   40DE         JC      ??ZDO_BuildSimpleDescBuf_6
   2165          }
   \   0000CF   02....       LJMP    ??Subroutine210_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine235_0
   \   000001                ; // Fall through to label ??Subroutine235_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine235_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   12....       LCALL   ?Subroutine155 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   EA           MOV     A,R2
   \   00000F   2402         ADD     A,#0x2
   \   000011   FA           MOV     R2,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine155:
   \   000000   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   2166          
   2167          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2168          /*********************************************************************
   2169           * @fn      ZDO_MatchEndDeviceBind()
   2170           *
   2171           * @brief
   2172           *
   2173           *   Called to match end device binding requests
   2174           *
   2175           * @param  bindReq  - binding request information
   2176           * @param  SecurityUse - Security enable/disable
   2177           *
   2178           * @return  none
   2179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2180          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   \                     ZDO_MatchEndDeviceBind:
   2181          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2182            zAddrType_t dstAddr;
   2183            uint8 sendRsp = FALSE;
   \   00000E   75..00       MOV     ?V0,#0x0
   2184            uint8 status;
   2185          
   2186            // Is this the first request?
   2187            if ( matchED == NULL )
   \   000011   90....       MOV     DPTR,#matchED
   \   000014   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000017   7050         JNZ     ??ZDO_MatchEndDeviceBind_0
   2188            {
   2189              // Create match info structure
   2190              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   7A37         MOV     R2,#0x37
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000020   90....       MOV     DPTR,#matchED
   \   000023   EA           MOV     A,R2
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   EB           MOV     A,R3
   \   000027   12....       LCALL   ?Subroutine38 & 0xFFFF
   2191              if ( matchED )
   \                     ??CrossCallReturnLabel_53:
   \   00002A   6019         JZ      ??ZDO_MatchEndDeviceBind_1
   2192              {
   2193                // Clear the structure
   2194                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   \   00002C                ; Setup parameters for call to function osal_memset
   \   00002C   7C37         MOV     R4,#0x37
   \   00002E   7D00         MOV     R5,#0x0
   \   000030   7900         MOV     R1,#0x0
   \   000032   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2195          
   2196                // Copy the first request's information
   2197                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   \   000035                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000035   EE           MOV     A,R6
   \   000036   FC           MOV     R4,A
   \   000037   EF           MOV     A,R7
   \   000038   FD           MOV     R5,A
   \   000039   90....       MOV     DPTR,#matchED
   \   00003C   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   2198                {
   2199                  status = ZDP_NO_ENTRY;
   2200                  sendRsp = TRUE;
   2201                }
   2202              }
   \                     ??CrossCallReturnLabel_490:
   \   00003F   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   000042   E9           MOV     A,R1
   \   000043   700B         JNZ     ??ZDO_MatchEndDeviceBind_2
   2203              else
   2204              {
   2205                status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_1:
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   7488         MOV     A,#-0x78
   \   00004D   02....       LJMP    ??ZDO_MatchEndDeviceBind_3 & 0xFFFF
   2206                sendRsp = TRUE;
   2207              }
   2208          
   2209              if ( !sendRsp )
   2210              {
   2211                // Set into the correct state
   2212                matchED->state = ZDMATCH_WAIT_REQ;
   \                     ??ZDO_MatchEndDeviceBind_2:
   \   000050   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   000053   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000056   7401         MOV     A,#0x1
   \   000058   F0           MOVX    @DPTR,A
   2213          
   2214                // Setup the timeout
   2215                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   000059                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   000059   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   00005B   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   00005D   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   000060   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   2216              }
   2217            }
   \                     ??CrossCallReturnLabel_491:
   \   000063   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   000066   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   2218            else
   2219            {
   2220                matchED->state = ZDMATCH_SENDING_BINDS;
   \                     ??ZDO_MatchEndDeviceBind_0:
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   C8           XCH     A,R0
   \   00006B   12....       LCALL   ?Subroutine150 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00006E   7402         MOV     A,#0x2
   \   000070   F0           MOVX    @DPTR,A
   2221          
   2222                // Copy the 2nd request's information
   2223                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   \   000071                ; Setup parameters for call to function ZDO_CopyMatchInfo
   \   000071   EE           MOV     A,R6
   \   000072   FC           MOV     R4,A
   \   000073   EF           MOV     A,R7
   \   000074   FD           MOV     R5,A
   \   000075   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000078   12....       LCALL   `??ZDO_CopyMatchInfo::?relay`; Banked call to: ZDO_CopyMatchInfo
   \   00007B   E9           MOV     A,R1
   \   00007C   700C         JNZ     ??ZDO_MatchEndDeviceBind_5
   2224                {
   2225                  status = ZDP_NO_ENTRY;
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   7488         MOV     A,#-0x78
   \   000086   F0           MOVX    @DPTR,A
   2226                  sendRsp = TRUE;
   \   000087   75..01       MOV     ?V0,#0x1
   2227                }
   2228          
   2229                // Make a source match for ed1
   2230                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2231                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2232                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_5:
   \   00008A                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   00008A   75....       MOV     ?V2,#ZDOBuildBuf & 0xff
   \   00008D   75....       MOV     ?V3,#(ZDOBuildBuf >> 8) & 0xff
   \   000090   78..         MOV     R0,#?V2
   \   000092   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000095   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000098   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00009B   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_570:
   \   00009E   2428         ADD     A,#0x28
   \   0000A0   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   0000A3   FC           MOV     R4,A
   \   0000A4   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000A7   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_571:
   \   0000AA   2414         ADD     A,#0x14
   \   0000AC   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0000AF   F9           MOV     R1,A
   \   0000B0   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B8   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   0000BB   12....       LCALL   ?Subroutine23 & 0xFFFF
   2233                if ( matchED->ed1numMatched )
   \                     ??CrossCallReturnLabel_473:
   \   0000BE   2431         ADD     A,#0x31
   \   0000C0   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0000C3   6043         JZ      ??ZDO_MatchEndDeviceBind_6
   \   0000C5                ; Setup parameters for call to function osal_mem_alloc
   \   0000C5   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   0000C8   FA           MOV     R2,A
   \   0000C9   E4           CLR     A
   \   0000CA   33           RLC     A
   \   0000CB   FB           MOV     R3,A
   2234                {
   2235                  // Save the match list
   2236                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000CC   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000CF   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_559:
   \   0000D2   CC           XCH     A,R4
   \   0000D3   2432         ADD     A,#0x32
   \   0000D5   12....       LCALL   ?Subroutine47 & 0xFFFF
   2237                  if ( matchED->ed1Matched )
   \                     ??CrossCallReturnLabel_470:
   \   0000D8   6022         JZ      ??ZDO_MatchEndDeviceBind_7
   2238                  {
   2239                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   \   0000DA                ; Setup parameters for call to function osal_memcpy
   \   0000DA   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   0000DD   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   0000E0   75..00       MOV     ?V6,#0x0
   \   0000E3   78..         MOV     R0,#?V4
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000E8   12....       LCALL   ?Subroutine58 & 0xFFFF
   2240                  }
   \                     ??CrossCallReturnLabel_88:
   \   0000EB   FC           MOV     R4,A
   \   0000EC   E4           CLR     A
   \   0000ED   33           RLC     A
   \   0000EE   FD           MOV     R5,A
   \   0000EF   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000F2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F5   7403         MOV     A,#0x3
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   800C         SJMP    ??ZDO_MatchEndDeviceBind_6
   2241                  else
   2242                  {
   2243                    // Allocation error, stop
   2244                    status = ZDP_NO_ENTRY;
   \                     ??ZDO_MatchEndDeviceBind_7:
   \   0000FC   85..82       MOV     DPL,?XSP + 0
   \   0000FF   85..83       MOV     DPH,?XSP + 1
   \   000102   7488         MOV     A,#-0x78
   \   000104   F0           MOVX    @DPTR,A
   2245                    sendRsp = TRUE;
   \   000105   75..01       MOV     ?V0,#0x1
   2246                  }
   2247                }
   2248          
   2249                // Make a source match for ed2
   2250                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2251                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2252                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   \                     ??ZDO_MatchEndDeviceBind_6:
   \   000108                ; Setup parameters for call to function ZDO_CompareClusterLists
   \   000108   78..         MOV     R0,#?V2
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000110   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000113   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_572:
   \   000116   2411         ADD     A,#0x11
   \   000118   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   00011B   FC           MOV     R4,A
   \   00011C   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00011F   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_573:
   \   000122   242B         ADD     A,#0x2b
   \   000124   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000127   F9           MOV     R1,A
   \   000128   12....       LCALL   `??ZDO_CompareClusterLists::?relay`; Banked call to: ZDO_CompareClusterLists
   \   00012B   7404         MOV     A,#0x4
   \   00012D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000130   E9           MOV     A,R1
   \   000131   F8           MOV     R0,A
   \   000132   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_574:
   \   000135   2434         ADD     A,#0x34
   \   000137   12....       LCALL   ?Subroutine23 & 0xFFFF
   2253                if ( matchED->ed2numMatched )
   \                     ??CrossCallReturnLabel_474:
   \   00013A   2434         ADD     A,#0x34
   \   00013C   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   00013F   6035         JZ      ??ZDO_MatchEndDeviceBind_8
   \   000141                ; Setup parameters for call to function osal_mem_alloc
   \   000141   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000144   FA           MOV     R2,A
   \   000145   E4           CLR     A
   \   000146   33           RLC     A
   \   000147   FB           MOV     R3,A
   2254                {
   2255                  // Save the match list
   2256                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000148   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00014B   12....       LCALL   ?Subroutine179 & 0xFFFF
   \                     ??CrossCallReturnLabel_560:
   \   00014E   CC           XCH     A,R4
   \   00014F   2435         ADD     A,#0x35
   \   000151   12....       LCALL   ?Subroutine47 & 0xFFFF
   2257                  if ( matchED->ed2Matched )
   \                     ??CrossCallReturnLabel_471:
   \   000154   6042         JZ      ??ZDO_MatchEndDeviceBind_9
   2258                  {
   2259                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   \   000156                ; Setup parameters for call to function osal_memcpy
   \   000156   75....       MOV     ?V4,#ZDOBuildBuf & 0xff
   \   000159   75....       MOV     ?V5,#(ZDOBuildBuf >> 8) & 0xff
   \   00015C   75..00       MOV     ?V6,#0x0
   \   00015F   78..         MOV     R0,#?V4
   \   000161   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000164   12....       LCALL   ?Subroutine59 & 0xFFFF
   2260                  }
   \                     ??CrossCallReturnLabel_91:
   \   000167   FC           MOV     R4,A
   \   000168   E4           CLR     A
   \   000169   33           RLC     A
   \   00016A   FD           MOV     R5,A
   \   00016B   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00016E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000171   7403         MOV     A,#0x3
   \   000173   12....       LCALL   ?DEALLOC_XSTACK8
   2261                  else
   2262                  {
   2263                    // Allocation error, stop
   2264                    status = ZDP_NO_ENTRY;
   2265                    sendRsp = TRUE;
   2266                  }
   2267                }
   2268          
   2269                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   \                     ??ZDO_MatchEndDeviceBind_8:
   \   000176   E5..         MOV     A,?V0
   \   000178   A2E0         MOV     C,0xE0 /* A   */.0
   \   00017A   4025         JC      ??ZDO_MatchEndDeviceBind_10
   \   00017C   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   00017F   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000182   7008         JNZ     ??ZDO_MatchEndDeviceBind_11
   \   000184   90....       MOV     DPTR,#matchED
   \   000187   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00018A   6015         JZ      ??ZDO_MatchEndDeviceBind_10
   2270                {
   2271                  // Do the first unbind/bind state
   2272                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   \                     ??ZDO_MatchEndDeviceBind_11:
   \   00018C                ; Setup parameters for call to function ZDMatchSendState
   \   00018C   7B00         MOV     R3,#0x0
   \   00018E   7A00         MOV     R2,#0x0
   \   000190   7900         MOV     R1,#0x0
   \   000192   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2273                }
   2274                else
   2275                {
   2276                  status = ZDP_NO_MATCH;
   2277                  sendRsp = TRUE;
   2278                }
   2279            }
   2280          
   2281            if ( sendRsp )
   \   000195   02....       LJMP    ??ZDO_MatchEndDeviceBind_4 & 0xFFFF
   \                     ??ZDO_MatchEndDeviceBind_9:
   \   000198   85..82       MOV     DPL,?XSP + 0
   \   00019B   85..83       MOV     DPH,?XSP + 1
   \   00019E   7488         MOV     A,#-0x78
   \   0001A0   F0           MOVX    @DPTR,A
   \                     ??ZDO_MatchEndDeviceBind_10:
   \   0001A1   85..82       MOV     DPL,?XSP + 0
   \   0001A4   85..83       MOV     DPH,?XSP + 1
   \   0001A7   7486         MOV     A,#-0x7a
   \                     ??ZDO_MatchEndDeviceBind_3:
   \   0001A9   F0           MOVX    @DPTR,A
   2282            {
   2283              // send response to this requester
   2284              dstAddr.addrMode = Addr16Bit;
   \   0001AA   7409         MOV     A,#0x9
   \   0001AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AF   7402         MOV     A,#0x2
   \   0001B1   12....       LCALL   ?Subroutine54 & 0xFFFF
   2285              dstAddr.addr.shortAddr = bindReq->srcAddr;
   \                     ??CrossCallReturnLabel_83:
   \   0001B4   F8           MOV     R0,A
   \   0001B5   A3           INC     DPTR
   \   0001B6   E0           MOVX    A,@DPTR
   \   0001B7   F9           MOV     R1,A
   \   0001B8   7401         MOV     A,#0x1
   \   0001BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BD   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   2286              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   \                     ??CrossCallReturnLabel_376:
   \   0001C0                ; Setup parameters for call to function ZDP_SendData
   \   0001C0   8E82         MOV     DPL,R6
   \   0001C2   8F83         MOV     DPH,R7
   \   0001C4   A3           INC     DPTR
   \   0001C5   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   0001C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CB   7401         MOV     A,#0x1
   \   0001CD   12....       LCALL   ?XSTACK_DISP100_8
   \   0001D0   88..         MOV     ?V0,R0
   \   0001D2   89..         MOV     ?V1,R1
   \   0001D4   78..         MOV     R0,#?V0
   \   0001D6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D9   75..20       MOV     ?V0,#0x20
   \   0001DC   75..80       MOV     ?V1,#-0x80
   \   0001DF   78..         MOV     R0,#?V0
   \   0001E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E4   7901         MOV     R1,#0x1
   \   0001E6   7406         MOV     A,#0x6
   \   0001E8   12....       LCALL   ?XSTACK_DISP102_8
   \   0001EB   EE           MOV     A,R6
   \   0001EC   FA           MOV     R2,A
   \   0001ED   EF           MOV     A,R7
   \   0001EE   FB           MOV     R3,A
   \   0001EF   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0001F2   7405         MOV     A,#0x5
   \   0001F4   12....       LCALL   ?DEALLOC_XSTACK8
   2287          
   2288              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   0001F7   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   0001FA   7042         JNZ     ??ZDO_MatchEndDeviceBind_12
   2289              {
   2290                // send response to first requester
   2291                dstAddr.addrMode = Addr16Bit;
   \   0001FC   7409         MOV     A,#0x9
   \   0001FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000201   7402         MOV     A,#0x2
   \   000203   F0           MOVX    @DPTR,A
   2292                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \   000204   12....       LCALL   ?Subroutine76 & 0xFFFF
   2293                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2294              }
   \                     ??CrossCallReturnLabel_123:
   \   000207   12....       LCALL   ?XSTACK_DISP0_8
   \   00020A   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00020D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000210   7401         MOV     A,#0x1
   \   000212   12....       LCALL   ?XSTACK_DISP100_8
   \   000215   88..         MOV     ?V0,R0
   \   000217   89..         MOV     ?V1,R1
   \   000219   78..         MOV     R0,#?V0
   \   00021B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00021E   75..20       MOV     ?V0,#0x20
   \   000221   75..80       MOV     ?V1,#-0x80
   \   000224   78..         MOV     R0,#?V0
   \   000226   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000229   7901         MOV     R1,#0x1
   \   00022B   7406         MOV     A,#0x6
   \   00022D   12....       LCALL   ?XSTACK_DISP102_8
   \   000230   90....       MOV     DPTR,#matchED
   \   000233   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   000236   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000239   7405         MOV     A,#0x5
   \   00023B   12....       LCALL   ?DEALLOC_XSTACK8
   2295          
   2296              // Process ended - release memory used
   2297              ZDO_RemoveMatchMemory();
   \                     ??ZDO_MatchEndDeviceBind_12:
   \   00023E                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   00023E   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2298            }
   2299          }
   \                     ??ZDO_MatchEndDeviceBind_4:
   \   000241   740A         MOV     A,#0xa
   \   000243   02....       LJMP    ?Subroutine9 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine150:
   \   000000   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine193:
   \   000000   242E         ADD     A,#0x2e
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine236_0
   \   000003                ; // Fall through to label ??Subroutine236_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine236_0:
   \   000000   12....       LCALL   ??Subroutine246_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   000003   2431         ADD     A,#0x31
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3C           ADDC    A,R4
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine237_0
   \   000006                ; // Fall through to label ??Subroutine237_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine237_0:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine238_0
   \   000006                ; // Fall through to label ??Subroutine238_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine238_0:
   \   000000   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   000003   C8           XCH     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine153:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine239_0
   \   000001                ; // Fall through to label ??Subroutine239_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine239_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   90....       MOV     DPTR,#matchED
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   000003   2412         ADD     A,#0x12
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   000003   2429         ADD     A,#0x29
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   000003   2435         ADD     A,#0x35
   \   000005   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_516:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   000003   242C         ADD     A,#0x2c
   \   000005   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_515:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   000003   2432         ADD     A,#0x32
   \   000005   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_514:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine166:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   38           ADDC    A,R0
   \   000004                REQUIRE ??Subroutine242_0
   \   000004                ; // Fall through to label ??Subroutine242_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_583:
   \   000003   2415         ADD     A,#0x15
   \   000005   12....       LCALL   ?Subroutine166 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2417         ADD     A,#0x17
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   3400         ADDC    A,#0x0
   \   00000B   FB           MOV     R3,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine171:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine246_0
   \   000003                ; // Fall through to label ??Subroutine246_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   000003   12....       LCALL   ?Subroutine193 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   6402         XRL     A,#0x2
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine169 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine199 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   00000B   7401         MOV     A,#0x1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine168:
   \   000000   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   000003   2434         ADD     A,#0x34
   \   000005   F582         MOV     DPL,A
   \   000007   E4           CLR     A
   \   000008   38           ADDC    A,R0
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine168 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000006   25E0         ADD     A,0xE0 /* A   */
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   000003   25E0         ADD     A,0xE0 /* A   */
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine167:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000006   2431         ADD     A,#0x31
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   38           ADDC    A,R0
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ??Subroutine239_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   49           ORL     A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine153 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   000006   F583         MOV     DPH,A
   \   000008   8882         MOV     DPL,R0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0,A
   \   00000E   78..         MOV     R0,#?V0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine179:
   \   000000   EA           MOV     A,R2
   \   000001   F8           MOV     R0,A
   \   000002   EB           MOV     A,R3
   \   000003   F9           MOV     R1,A
   \   000004   90....       MOV     DPTR,#matchED
   \   000007                REQUIRE ??Subroutine250_0
   \   000007                ; // Fall through to label ??Subroutine250_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003                REQUIRE ??Subroutine252_0
   \   000003                ; // Fall through to label ??Subroutine252_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine198:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   2300          
   2301          /*********************************************************************
   2302           * @fn      ZDO_RemoveMatchMemory()
   2303           *
   2304           * @brief   Called to clear the memory used for the end device bind.
   2305           *
   2306           * @param  none
   2307           *
   2308           * @return  none
   2309           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2310          static void ZDO_RemoveMatchMemory( void )
   \                     ZDO_RemoveMatchMemory:
   2311          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2312            if ( matchED != NULL )
   \   000004   90....       MOV     DPTR,#matchED
   \   000007   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   00000A   6075         JZ      ??ZDO_RemoveMatchMemory_0
   2313            {
   2314              if ( matchED->ed2Matched != NULL )
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   C8           XCH     A,R0
   \   00000E   2435         ADD     A,#0x35
   \   000010   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000013   6006         JZ      ??ZDO_RemoveMatchMemory_1
   2315              {
   2316                osal_mem_free( matchED->ed2Matched );
   \   000015                ; Setup parameters for call to function osal_mem_free
   \   000015   12....       LCALL   ?Subroutine73 & 0xFFFF
   2317              }
   \                     ??CrossCallReturnLabel_119:
   \   000018   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2318              if ( matchED->ed1Matched != NULL )
   \                     ??ZDO_RemoveMatchMemory_1:
   \   00001B   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_575:
   \   00001E   2432         ADD     A,#0x32
   \   000020   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   000023   6006         JZ      ??ZDO_RemoveMatchMemory_2
   2319              {
   2320                osal_mem_free( matchED->ed1Matched );
   \   000025                ; Setup parameters for call to function osal_mem_free
   \   000025   12....       LCALL   ?Subroutine71 & 0xFFFF
   2321              }
   \                     ??CrossCallReturnLabel_115:
   \   000028   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2322              if ( matchED->ed1.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_2:
   \   00002B   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_576:
   \   00002E   2412         ADD     A,#0x12
   \   000030   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   000033   6009         JZ      ??ZDO_RemoveMatchMemory_3
   2323              {
   2324                osal_mem_free( matchED->ed1.inClusters );
   \   000035                ; Setup parameters for call to function osal_mem_free
   \   000035   12....       LCALL   ?Subroutine86 & 0xFFFF
   2325              }
   \                     ??CrossCallReturnLabel_141:
   \   000038   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   00003B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2326              if ( matchED->ed1.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_3:
   \   00003E   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   000041   2415         ADD     A,#0x15
   \   000043   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   000046   6006         JZ      ??ZDO_RemoveMatchMemory_4
   2327              {
   2328                osal_mem_free( matchED->ed1.outClusters );
   \   000048                ; Setup parameters for call to function osal_mem_free
   \   000048   12....       LCALL   ?Subroutine70 & 0xFFFF
   2329              }
   \                     ??CrossCallReturnLabel_113:
   \   00004B   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2330              if ( matchED->ed2.inClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_4:
   \   00004E   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_578:
   \   000051   2429         ADD     A,#0x29
   \   000053   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000056   6009         JZ      ??ZDO_RemoveMatchMemory_5
   2331              {
   2332                osal_mem_free( matchED->ed2.inClusters );
   \   000058                ; Setup parameters for call to function osal_mem_free
   \   000058   12....       LCALL   ?Subroutine85 & 0xFFFF
   2333              }
   \                     ??CrossCallReturnLabel_139:
   \   00005B   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   00005E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2334              if ( matchED->ed2.outClusters != NULL )
   \                     ??ZDO_RemoveMatchMemory_5:
   \   000061   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_579:
   \   000064   242C         ADD     A,#0x2c
   \   000066   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000069   6006         JZ      ??ZDO_RemoveMatchMemory_6
   2335              {
   2336                osal_mem_free( matchED->ed2.outClusters );
   \   00006B                ; Setup parameters for call to function osal_mem_free
   \   00006B   12....       LCALL   ?Subroutine72 & 0xFFFF
   2337              }
   \                     ??CrossCallReturnLabel_117:
   \   00006E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2338          
   2339              osal_mem_free( matchED );
   \                     ??ZDO_RemoveMatchMemory_6:
   \   000071                ; Setup parameters for call to function osal_mem_free
   \   000071   90....       MOV     DPTR,#matchED
   \   000074   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   000077   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2340              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \   00007A   90....       MOV     DPTR,#matchED
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   F0           MOVX    @DPTR,A
   2341            }
   2342          }
   \                     ??ZDO_RemoveMatchMemory_0:
   \   000081                REQUIRE ?Subroutine0
   \   000081                ; // Fall through to label ?Subroutine0
   2343          
   2344          /*********************************************************************
   2345           * @fn      ZDO_CopyMatchInfo()
   2346           *
   2347           * @brief   Called to copy memory used for the end device bind.
   2348           *
   2349           * @param  srcReq - source information
   2350           * @param  dstReq - destination location
   2351           *
   2352           * @return  TRUE if copy was successful.
   2353           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2354          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   \                     ZDO_CopyMatchInfo:
   2355          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   2356            uint8 allOK = TRUE;
   \   00000D   75..01       MOV     ?V2,#0x1
   2357          
   2358            // Copy bind information into the match info structure
   2359            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   \   000010                ; Setup parameters for call to function osal_memcpy
   \   000010   8C..         MOV     ?V4,R4
   \   000012   8D..         MOV     ?V5,R5
   \   000014   75..00       MOV     ?V6,#0x0
   \   000017   78..         MOV     R0,#?V4
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001C   7C17         MOV     R4,#0x17
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000023   7403         MOV     A,#0x3
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   2360          
   2361            // Initialize the destination cluster pointers
   2362            destReq->inClusters = NULL;
   \   000028   12....       LCALL   ?Subroutine18 & 0xFFFF
   2363            destReq->outClusters = NULL;
   2364          
   2365            // Copy input cluster IDs
   2366            if ( srcReq->numInClusters )
   \                     ??CrossCallReturnLabel_16:
   \   00002B   E5..         MOV     A,?V0
   \   00002D   2411         ADD     A,#0x11
   \   00002F   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_622:
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6037         JZ      ??ZDO_CopyMatchInfo_0
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   12....       LCALL   ??Subroutine266_0 & 0xFFFF
   2367            {
   2368              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   \                     ??CrossCallReturnLabel_670:
   \   000038   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003B   8A..         MOV     ?V4,R2
   \   00003D   8B..         MOV     ?V5,R3
   \   00003F   A8..         MOV     R0,?V4
   \   000041   A9..         MOV     R1,?V5
   \   000043   12....       LCALL   ?Subroutine21 & 0xFFFF
   2369              if ( destReq->inClusters )
   \                     ??CrossCallReturnLabel_517:
   \   000046   6021         JZ      ??ZDO_CopyMatchInfo_1
   2370              {
   2371                // Copy the clusters
   2372                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2373                                (srcReq->numInClusters * sizeof ( uint16 )) );
   \   000048                ; Setup parameters for call to function osal_memcpy
   \   000048   E5..         MOV     A,?V0
   \   00004A   2412         ADD     A,#0x12
   \   00004C   12....       LCALL   ?Subroutine107 & 0xFFFF
   2374              }
   \                     ??CrossCallReturnLabel_166:
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000052   E5..         MOV     A,?V0
   \   000054   2411         ADD     A,#0x11
   \   000056   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000059   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   00005C   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   00005F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000062   7403         MOV     A,#0x3
   \   000064   12....       LCALL   ?DEALLOC_XSTACK8
   \   000067   8003         SJMP    ??ZDO_CopyMatchInfo_0
   2375              else
   2376              {
   2377                allOK = FALSE;
   \                     ??ZDO_CopyMatchInfo_1:
   \   000069   75..00       MOV     ?V2,#0x0
   2378              }
   2379            }
   2380          
   2381            // Copy output cluster IDs
   2382            if ( srcReq->numOutClusters )
   \                     ??ZDO_CopyMatchInfo_0:
   \   00006C   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   6035         JZ      ??ZDO_CopyMatchInfo_2
   \   000072                ; Setup parameters for call to function osal_mem_alloc
   \   000072   12....       LCALL   ??Subroutine266_0 & 0xFFFF
   2383            {
   2384              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   \                     ??CrossCallReturnLabel_671:
   \   000075   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000078   8A..         MOV     ?V4,R2
   \   00007A   8B..         MOV     ?V5,R3
   \   00007C   A8..         MOV     R0,?V4
   \   00007E   A9..         MOV     R1,?V5
   \   000080   EE           MOV     A,R6
   \   000081   2415         ADD     A,#0x15
   \   000083   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   2385              if ( destReq->outClusters )
   \                     ??CrossCallReturnLabel_518:
   \   000086   6055         JZ      ??ZDO_CopyMatchInfo_3
   2386              {
   2387                // Copy the clusters
   2388                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2389                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   \   000088                ; Setup parameters for call to function osal_memcpy
   \   000088   E5..         MOV     A,?V0
   \   00008A   2415         ADD     A,#0x15
   \   00008C   12....       LCALL   ?Subroutine107 & 0xFFFF
   2390              }
   \                     ??CrossCallReturnLabel_167:
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000092   E5..         MOV     A,?V0
   \   000094   2414         ADD     A,#0x14
   \   000096   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000099   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00009C   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   00009F   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000A2   7403         MOV     A,#0x3
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   2391              else
   2392              {
   2393                allOK = FALSE;
   2394              }
   2395            }
   2396          
   2397            if ( allOK == FALSE )
   \                     ??ZDO_CopyMatchInfo_2:
   \   0000A7   E5..         MOV     A,?V2
   \   0000A9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000AB   402B         JC      ??ZDO_CopyMatchInfo_4
   2398            {
   2399              if ( destReq->inClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_5:
   \   0000AD   EE           MOV     A,R6
   \   0000AE   2412         ADD     A,#0x12
   \   0000B0   F582         MOV     DPL,A
   \   0000B2   E4           CLR     A
   \   0000B3   3F           ADDC    A,R7
   \   0000B4   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   0000B7   6009         JZ      ??ZDO_CopyMatchInfo_6
   2400              {
   2401                osal_mem_free( destReq->inClusters );
   \   0000B9                ; Setup parameters for call to function osal_mem_free
   \   0000B9   12....       LCALL   ?Subroutine147 & 0xFFFF
   2402              }
   \                     ??CrossCallReturnLabel_353:
   \   0000BC   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   0000BF   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2403              if ( destReq->outClusters != NULL )
   \                     ??ZDO_CopyMatchInfo_6:
   \   0000C2   EE           MOV     A,R6
   \   0000C3   2415         ADD     A,#0x15
   \   0000C5   F582         MOV     DPL,A
   \   0000C7   E4           CLR     A
   \   0000C8   3F           ADDC    A,R7
   \   0000C9   12....       LCALL   ??Subroutine233_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   0000CC   600A         JZ      ??ZDO_CopyMatchInfo_4
   2404              {
   2405                osal_mem_free( destReq->outClusters );
   \   0000CE                ; Setup parameters for call to function osal_mem_free
   \   0000CE   EE           MOV     A,R6
   \   0000CF   12....       LCALL   ?Subroutine145 & 0xFFFF
   2406              }
   2407            }
   \                     ??CrossCallReturnLabel_234:
   \   0000D2   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_499:
   \   0000D5   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2408          
   2409            return ( allOK );
   \                     ??ZDO_CopyMatchInfo_4:
   \   0000D8   A9..         MOV     R1,?V2
   \   0000DA   02....       LJMP    ??Subroutine213_0 & 0xFFFF
   \                     ??ZDO_CopyMatchInfo_3:
   \   0000DD   75..00       MOV     ?V2,#0x0
   \   0000E0   80CB         SJMP    ??ZDO_CopyMatchInfo_5
   2410          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   12....       LCALL   ?Subroutine202 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000003   25E0         ADD     A,0xE0 /* A   */
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   33           RLC     A
   \   000008   FD           MOV     R5,A
   \   000009   EE           MOV     A,R6
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   12....       LCALL   ?Subroutine190 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000003   F5..         MOV     ?V4,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V5,A
   \   000009   78..         MOV     R0,#?V4
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   EE           MOV     A,R6
   \   000001   2412         ADD     A,#0x12
   \   000003                REQUIRE ??Subroutine244_0
   \   000003                ; // Fall through to label ??Subroutine244_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine244_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine245_0
   \   000006                ; // Fall through to label ??Subroutine245_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine245_0:
   \   000000   12....       LCALL   ?Subroutine161 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   EE           MOV     A,R6
   \   000001   12....       LCALL   ?Subroutine191 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ?Subroutine158 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   00000A   E4           CLR     A
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine259_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003                REQUIRE ??Subroutine260_0
   \   000003                ; // Fall through to label ??Subroutine260_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine260_0:
   \   000000   35..         ADDC    A,?V1
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   E5..         MOV     A,?V0
   \   000002   12....       LCALL   ??Subroutine261_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_635:
   \   000005   35..         ADDC    A,?V1
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2411          
   2412          /*********************************************************************
   2413           * @fn      ZDMatchSendState()
   2414           *
   2415           * @brief   State machine for the End device match message algorithm.
   2416           *
   2417           * @param  reason - state of algoritm
   2418           * @param  status - initial message status
   2419           * @param  TransSeq - next transaction sequence number
   2420           *
   2421           * @return  FALSE if error and we are not currently matching, TRUE
   2422           *          if success.
   2423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2424          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   \                     ZDMatchSendState:
   2425          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V3,R1
   \   00000C   8A..         MOV     ?V6,R2
   \   00000E   8B..         MOV     ?V7,R3
   2426            uint8 *dstIEEEAddr = NULL;
   \   000010   75..00       MOV     ?V4,#0x0
   \   000013   75..00       MOV     ?V5,#0x0
   2427            uint8 dstEP = 0xFF;
   \   000016   75..FF       MOV     ?V2,#-0x1
   2428            zAddrType_t dstAddr;
   2429            zAddrType_t destinationAddr;
   2430            uint16 msgType;
   2431            uint16 clusterID = 0xFFFF;
   \   000019   75..FF       MOV     ?V8,#-0x1
   \   00001C   75..FF       MOV     ?V9,#-0x1
   2432            ZDEndDeviceBind_t *ed = NULL;
   \   00001F   75..00       MOV     ?V0,#0x0
   \   000022   75..00       MOV     ?V1,#0x0
   2433            uint8 rspStatus = ZDP_SUCCESS;
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   E4           CLR     A
   \   00002C   12....       LCALL   ?Subroutine38 & 0xFFFF
   2434          
   2435            if ( matchED == NULL )
   \                     ??CrossCallReturnLabel_54:
   \   00002F   6017         JZ      ??ZDMatchSendState_0
   2436            {
   2437              return ( FALSE );
   2438            }
   2439          
   2440            // Check sequence number
   2441            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   \   000031   7403         MOV     A,#0x3
   \   000033   65..         XRL     A,?V3
   \   000035   6006         JZ      ??ZDMatchSendState_1
   \   000037   7402         MOV     A,#0x2
   \   000039   65..         XRL     A,?V3
   \   00003B   7010         JNZ     ??ZDMatchSendState_2
   2442            {
   2443              if ( TransSeq != matchED->transSeq )
   \                     ??ZDMatchSendState_1:
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C8           XCH     A,R0
   \   00003F   2430         ADD     A,#0x30
   \   000041   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000044   65..         XRL     A,?V7
   \   000046   6005         JZ      ??ZDMatchSendState_2
   2444              {
   2445                return( FALSE ); // ignore the message
   \                     ??ZDMatchSendState_0:
   \   000048   7900         MOV     R1,#0x0
   \   00004A   02....       LJMP    ??ZDMatchSendState_3 & 0xFFFF
   2446              }
   2447            }
   2448          
   2449            // turn off timer
   2450            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   \                     ??ZDMatchSendState_2:
   \   00004D                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   00004D   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   00004F   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   000051   7A00         MOV     R2,#0x0
   \   000053   7B00         MOV     R3,#0x0
   \   000055   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   2451          
   2452            if ( reason == ZDMATCH_REASON_TIMEOUT )
   \   000058   7401         MOV     A,#0x1
   \   00005A   65..         XRL     A,?V3
   \   00005C   700A         JNZ     ??ZDMatchSendState_4
   2453            {
   2454              rspStatus = ZDP_TIMEOUT;    // The process will stop
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   7485         MOV     A,#-0x7b
   \   000066   803D         SJMP    ??ZDMatchSendState_5
   2455            }
   2456          
   2457            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   \                     ??ZDMatchSendState_4:
   \   000068   E5..         MOV     A,?V3
   \   00006A   6006         JZ      ??ZDMatchSendState_6
   \   00006C   7403         MOV     A,#0x3
   \   00006E   65..         XRL     A,?V3
   \   000070   7019         JNZ     ??ZDMatchSendState_7
   2458            {
   2459              matchED->sending = ZDMATCH_SENDING_UNBIND;
   \                     ??ZDMatchSendState_6:
   \   000072   90....       MOV     DPTR,#matchED
   \   000075   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000078   F0           MOVX    @DPTR,A
   2460          
   2461              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   \   000079   7403         MOV     A,#0x3
   \   00007B   65..         XRL     A,?V3
   \   00007D   7029         JNZ     ??ZDMatchSendState_8
   \   00007F   E5..         MOV     A,?V6
   \   000081   6029         JZ      ??ZDMatchSendState_9
   2462              {
   2463                rspStatus = status;
   \   000083   85..82       MOV     DPL,?XSP + 0
   \   000086   85..83       MOV     DPH,?XSP + 1
   \   000089   801A         SJMP    ??ZDMatchSendState_5
   2464              }
   2465            }
   2466            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   \                     ??ZDMatchSendState_7:
   \   00008B   7402         MOV     A,#0x2
   \   00008D   65..         XRL     A,?V3
   \   00008F   701B         JNZ     ??ZDMatchSendState_9
   2467            {
   2468              if ( status == ZDP_SUCCESS )
   \   000091   E5..         MOV     A,?V6
   \   000093   90....       MOV     DPTR,#matchED
   \   000096   7005         JNZ     ??ZDMatchSendState_10
   2469              {
   2470                matchED->sending = ZDMATCH_SENDING_UNBIND;
   \   000098   12....       LCALL   ?Subroutine82 & 0xFFFF
   2471              }
   \                     ??CrossCallReturnLabel_135:
   \   00009B   8008         SJMP    ??ZDMatchSendState_5
   2472              else
   2473              {
   2474                matchED->sending = ZDMATCH_SENDING_BIND;
   \                     ??ZDMatchSendState_10:
   \   00009D   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   2475              }
   2476            }
   \                     ??CrossCallReturnLabel_567:
   \   0000A0   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   0000A3   7402         MOV     A,#0x2
   \                     ??ZDMatchSendState_5:
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   8004         SJMP    ??ZDMatchSendState_9
   2477          
   2478            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   \                     ??ZDMatchSendState_8:
   \   0000A8   E5..         MOV     A,?V3
   \   0000AA   601E         JZ      ??ZDMatchSendState_11
   \                     ??ZDMatchSendState_9:
   \   0000AC   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   0000AF   7019         JNZ     ??ZDMatchSendState_11
   2479            {
   2480              // Move to the next cluster ID
   2481              if ( matchED->ed1numMatched )
   \   0000B1   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   0000B4   6005         JZ      ??ZDMatchSendState_12
   2482              {
   2483                matchED->ed1numMatched--;
   \   0000B6   12....       LCALL   ??Subroutine236_0 & 0xFFFF
   2484              }
   \                     ??CrossCallReturnLabel_467:
   \   0000B9   800A         SJMP    ??ZDMatchSendState_13
   2485              else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_12:
   \   0000BB   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000BE   600A         JZ      ??ZDMatchSendState_11
   2486              {
   2487                matchED->ed2numMatched--;
   \   0000C0   12....       LCALL   ?Subroutine92 & 0xFFFF
   2488              }
   2489            }
   \                     ??CrossCallReturnLabel_580:
   \   0000C3   2434         ADD     A,#0x34
   \                     ??ZDMatchSendState_13:
   \   0000C5   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   0000C8   14           DEC     A
   \   0000C9   F0           MOVX    @DPTR,A
   2490          
   2491            // What message do we send now
   2492            if ( matchED->ed1numMatched )
   \                     ??ZDMatchSendState_11:
   \   0000CA   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000CD   6018         JZ      ??ZDMatchSendState_14
   2493            {
   2494              ed = &(matchED->ed1);
   \   0000CF   12....       LCALL   ??Subroutine251_0 & 0xFFFF
   2495              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   \                     ??CrossCallReturnLabel_561:
   \   0000D2   12....       LCALL   ?Subroutine58 & 0xFFFF
   2496              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2497              dstEP = matchED->ed2.endpoint;
   2498            }
   \                     ??CrossCallReturnLabel_89:
   \   0000D5   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   0000D8   CA           XCH     A,R2
   \   0000D9   2432         ADD     A,#0x32
   \   0000DB   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000DE   241D         ADD     A,#0x1d
   \   0000E0   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   0000E3   2425         ADD     A,#0x25
   \   0000E5   8026         SJMP    ??ZDMatchSendState_15
   2499            else if ( matchED->ed2numMatched )
   \                     ??ZDMatchSendState_14:
   \   0000E7   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   0000EA   6026         JZ      ??ZDMatchSendState_16
   2500            {
   2501              ed = &(matchED->ed2);
   \   0000EC   90....       MOV     DPTR,#matchED
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   2417         ADD     A,#0x17
   \   0000F2   F5..         MOV     ?V0,A
   \   0000F4   A3           INC     DPTR
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   3400         ADDC    A,#0x0
   \   0000F8   F5..         MOV     ?V1,A
   2502              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   \   0000FA   12....       LCALL   ?Subroutine59 & 0xFFFF
   2503              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2504              dstEP = matchED->ed1.endpoint;
   2505            }
   \                     ??CrossCallReturnLabel_92:
   \   0000FD   12....       LCALL   ?Subroutine201 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   000100   CA           XCH     A,R2
   \   000101   2435         ADD     A,#0x35
   \   000103   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000106   2406         ADD     A,#0x6
   \   000108   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00010B   240E         ADD     A,#0xe
   \                     ??ZDMatchSendState_15:
   \   00010D   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000110   F5..         MOV     ?V2,A
   2506          
   2507            dstAddr.addrMode = Addr16Bit;
   \                     ??ZDMatchSendState_16:
   \   000112   7409         MOV     A,#0x9
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   7402         MOV     A,#0x2
   \   000119   12....       LCALL   ?Subroutine28 & 0xFFFF
   2508          
   2509            // Send the next message
   2510            if ( (rspStatus == ZDP_SUCCESS) && ed )
   \                     ??CrossCallReturnLabel_32:
   \   00011C   6003         JZ      $+5
   \   00011E   02....       LJMP    ??ZDMatchSendState_17 & 0xFFFF
   \   000121   E5..         MOV     A,?V0
   \   000123   45..         ORL     A,?V1
   \   000125   7003         JNZ     $+5
   \   000127   02....       LJMP    ??ZDMatchSendState_17 & 0xFFFF
   2511            {
   2512              // Send unbind/bind message to source
   2513              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   \   00012A   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00012D   7004         JNZ     ??ZDMatchSendState_18
   2514              {
   2515                msgType = Unbind_req;
   \   00012F   7E22         MOV     R6,#0x22
   \   000131   8002         SJMP    ??ZDMatchSendState_19
   2516              }
   2517              else
   2518              {
   2519                msgType = Bind_req;
   \                     ??ZDMatchSendState_18:
   \   000133   7E21         MOV     R6,#0x21
   2520              }
   2521          
   2522              dstAddr.addr.shortAddr = ed->srcAddr;
   \                     ??ZDMatchSendState_19:
   \   000135   85..82       MOV     DPL,?V0
   \   000138   85..83       MOV     DPH,?V1
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   12....       LCALL   ??Subroutine232_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_424:
   \   000140   7401         MOV     A,#0x1
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   2523          
   2524              // Save off the transaction sequence number
   2525              matchED->transSeq = ZDP_TransID;
   \                     ??CrossCallReturnLabel_377:
   \   000148   90....       MOV     DPTR,#ZDP_TransID
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   C0E0         PUSH    A
   \   00014E   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_581:
   \   000151   2430         ADD     A,#0x30
   \   000153   F582         MOV     DPL,A
   \   000155   E4           CLR     A
   \   000156   38           ADDC    A,R0
   \   000157   F583         MOV     DPH,A
   \   000159   D0E0         POP     A
   \   00015B   F0           MOVX    @DPTR,A
   2526          
   2527              destinationAddr.addrMode = Addr64Bit;
   \   00015C   7412         MOV     A,#0x12
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   7403         MOV     A,#0x3
   \   000163   F0           MOVX    @DPTR,A
   2528              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   \   000164                ; Setup parameters for call to function sAddrExtCpy
   \   000164   AC..         MOV     R4,?V4
   \   000166   AD..         MOV     R5,?V5
   \   000168   740A         MOV     A,#0xa
   \   00016A   12....       LCALL   ?XSTACK_DISP101_8
   \   00016D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2529          
   2530              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2531                  &destinationAddr, dstEP, ed->SecurityUse );
   \   000170                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   000170   85..82       MOV     DPL,?V0
   \   000173   85..83       MOV     DPH,?V1
   \   000176   A3           INC     DPTR
   \   000177   E0           MOVX    A,@DPTR
   \   000178   F5..         MOV     ?V4,A
   \   00017A   78..         MOV     R0,#?V4
   \   00017C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00017F   78..         MOV     R0,#?V2
   \   000181   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000184   740C         MOV     A,#0xc
   \   000186   12....       LCALL   ?XSTACK_DISP100_8
   \   000189   88..         MOV     ?V4,R0
   \   00018B   89..         MOV     ?V5,R1
   \   00018D   78..         MOV     R0,#?V4
   \   00018F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000192   78..         MOV     R0,#?V8
   \   000194   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000197   E5..         MOV     A,?V0
   \   000199   2406         ADD     A,#0x6
   \   00019B   F5..         MOV     ?V4,A
   \   00019D   E4           CLR     A
   \   00019E   35..         ADDC    A,?V1
   \   0001A0   F5..         MOV     ?V5,A
   \   0001A2   78..         MOV     R0,#?V4
   \   0001A4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A7   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   0001AA   F9           MOV     R1,A
   \   0001AB   7409         MOV     A,#0x9
   \   0001AD   12....       LCALL   ?XSTACK_DISP102_8
   \   0001B0   EE           MOV     A,R6
   \   0001B1   FA           MOV     R2,A
   \   0001B2   7B00         MOV     R3,#0x0
   \   0001B4   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   0001B7   7408         MOV     A,#0x8
   \   0001B9   12....       LCALL   ?DEALLOC_XSTACK8
   2532          
   2533              // Set timeout for response
   2534              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   \   0001BC                ; Setup parameters for call to function APS_SetEndDeviceBindTimeout
   \   0001BC   7C..         MOV     R4,#`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` & 0xff
   \   0001BE   7D..         MOV     R5,#(`??ZDO_EndDeviceBindMatchTimeoutCB::?relay` >> 8) & 0xff
   \   0001C0   90....       MOV     DPTR,#AIB_MaxBindingTime
   \   0001C3   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   2535            }
   \                     ??CrossCallReturnLabel_500:
   \   0001C6   12....       LCALL   `??APS_SetEndDeviceBindTimeout::?relay`; Banked call to: APS_SetEndDeviceBindTimeout
   \   0001C9   02....       LJMP    ??ZDMatchSendState_20 & 0xFFFF
   2536            else
   2537            {
   2538              // Send the response messages to requesting devices
   2539              // send response to first requester
   2540              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   \                     ??ZDMatchSendState_17:
   \   0001CC   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   0001CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D2   12....       LCALL   ?Subroutine15 & 0xFFFF
   2541              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   \                     ??CrossCallReturnLabel_9:
   \   0001D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001D8   7401         MOV     A,#0x1
   \   0001DA   12....       LCALL   ?XSTACK_DISP100_8
   \   0001DD   88..         MOV     ?V0,R0
   \   0001DF   89..         MOV     ?V1,R1
   \   0001E1   78..         MOV     R0,#?V0
   \   0001E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E6   75..20       MOV     ?V0,#0x20
   \   0001E9   75..80       MOV     ?V1,#-0x80
   \   0001EC   78..         MOV     R0,#?V0
   \   0001EE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001F1   7901         MOV     R1,#0x1
   \   0001F3   7406         MOV     A,#0x6
   \   0001F5   12....       LCALL   ?XSTACK_DISP102_8
   \   0001F8   90....       MOV     DPTR,#matchED
   \   0001FB   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_501:
   \   0001FE   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000201   7405         MOV     A,#0x5
   \   000203   12....       LCALL   ?DEALLOC_XSTACK8
   2542          
   2543              // send response to second requester
   2544              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   \   000206   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000209   704E         JNZ     ??ZDMatchSendState_21
   2545              {
   2546                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   \   00020B   12....       LCALL   ?Subroutine92 & 0xFFFF
   2547                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2548              }
   \                     ??CrossCallReturnLabel_582:
   \   00020E   2419         ADD     A,#0x19
   \   000210   F582         MOV     DPL,A
   \   000212   E4           CLR     A
   \   000213   38           ADDC    A,R0
   \   000214   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000217   7401         MOV     A,#0x1
   \   000219   12....       LCALL   ?XSTACK_DISP0_8
   \   00021C   E8           MOV     A,R0
   \   00021D   F0           MOVX    @DPTR,A
   \   00021E   A3           INC     DPTR
   \   00021F   12....       LCALL   ??Subroutine238_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000222   2418         ADD     A,#0x18
   \   000224   F582         MOV     DPL,A
   \   000226   E4           CLR     A
   \   000227   38           ADDC    A,R0
   \   000228   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   00022B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00022E   7401         MOV     A,#0x1
   \   000230   12....       LCALL   ?XSTACK_DISP100_8
   \   000233   88..         MOV     ?V0,R0
   \   000235   89..         MOV     ?V1,R1
   \   000237   78..         MOV     R0,#?V0
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023C   75..20       MOV     ?V0,#0x20
   \   00023F   75..80       MOV     ?V1,#-0x80
   \   000242   78..         MOV     R0,#?V0
   \   000244   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000247   7901         MOV     R1,#0x1
   \   000249   7406         MOV     A,#0x6
   \   00024B   12....       LCALL   ?XSTACK_DISP102_8
   \   00024E   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000251   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000254   7405         MOV     A,#0x5
   \   000256   12....       LCALL   ?DEALLOC_XSTACK8
   2549          
   2550              // Process ended - release memory used
   2551              ZDO_RemoveMatchMemory();
   \                     ??ZDMatchSendState_21:
   \   000259                ; Setup parameters for call to function ZDO_RemoveMatchMemory
   \   000259   12....       LCALL   `??ZDO_RemoveMatchMemory::?relay`; Banked call to: ZDO_RemoveMatchMemory
   2552            }
   2553          
   2554            return ( TRUE );
   \                     ??ZDMatchSendState_20:
   \   00025C   7901         MOV     R1,#0x1
   \                     ??ZDMatchSendState_3:
   \   00025E   7413         MOV     A,#0x13
   \   000260   02....       LJMP    ?Subroutine8 & 0xFFFF
   2555          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   F5..         MOV     ?V4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V5,A
   \   000008   12....       LCALL   ?Subroutine171 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   90....       MOV     DPTR,#matchED
   \   000003   12....       LCALL   ?Subroutine170 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   6401         XRL     A,#0x1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine170:
   \   000000   12....       LCALL   ?Subroutine200 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   000003   12....       LCALL   ?Subroutine205 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine205:
   \   000000   242F         ADD     A,#0x2f
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   38           ADDC    A,R0
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine167 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000003   90....       MOV     DPTR,#matchED
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3A           ADDC    A,R2
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   28           ADD     A,R0
   \   000008   F8           MOV     R0,A
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   39           ADDC    A,R1
   \   00000C   F9           MOV     R1,A
   \   00000D   E8           MOV     A,R0
   \   00000E   24FE         ADD     A,#-0x2
   \   000010   F582         MOV     DPL,A
   \   000012   E9           MOV     A,R1
   \   000013   34FF         ADDC    A,#-0x1
   \   000015   F583         MOV     DPH,A
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V8,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V9,A
   \   00001E   90....       MOV     DPTR,#matchED
   \   000021   E0           MOVX    A,@DPTR
   \   000022   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine251_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine201:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   90....       MOV     DPTR,#matchED
   \   000007                REQUIRE ??Subroutine257_0
   \   000007                ; // Fall through to label ??Subroutine257_0
   2556          
   2557          /*********************************************************************
   2558           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2559           *
   2560           * @brief   End device bind timeout.
   2561           *
   2562           * @param  none
   2563           *
   2564           * @return  none
   2565           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2566          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   \                     ZDO_EndDeviceBindMatchTimeoutCB:
   2567          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2568            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   \   000004                ; Setup parameters for call to function ZDMatchSendState
   \   000004   7B00         MOV     R3,#0x0
   \   000006   7A85         MOV     R2,#-0x7b
   \   000008   7901         MOV     R1,#0x1
   \   00000A   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   2569          }
   \   00000D   02....       LJMP    ?Subroutine0 & 0xFFFF
   2570          #endif // ZG_BUILD_COORDINATOR_TYPE
   2571          
   2572          /*********************************************************************
   2573           * ZDO MESSAGE PARSING API FUNCTIONS
   2574           */
   2575          
   2576          /*********************************************************************
   2577           * @fn          ZDO_ParseEndDeviceBindReq
   2578           *
   2579           * @brief       This function parses the End_Device_Bind_req message.
   2580           *
   2581           *     NOTE:  The clusters lists in bindReq are allocated in this
   2582           *            function and must be freed by that calling function.
   2583           *
   2584           * @param       inMsg  - incoming message (request)
   2585           * @param       bindReq - pointer to place to parse message to
   2586           *
   2587           * @return      none
   2588           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine220_0
   \   000006                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2589          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2590          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2591            uint8 *msg;
   2592          
   2593            // Parse the message
   2594            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   00000D   3B           ADDC    A,R3
   \   00000E   F583         MOV     DPH,A
   \   000010   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000013   12....       LCALL   ?Subroutine39 & 0xFFFF
   2595            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_55:
   \   000016   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   2596            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_378:
   \   00001E   EA           MOV     A,R2
   \   00001F   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   000022   3B           ADDC    A,R3
   \   000023   F583         MOV     DPH,A
   \   000025   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000028   F0           MOVX    @DPTR,A
   2597            msg = inMsg->asdu;
   \   000029   12....       LCALL   ?Subroutine95 & 0xFFFF
   2598          
   2599            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_562:
   \   00002C   85..82       MOV     DPL,?V0
   \   00002F   F583         MOV     DPH,A
   \   000031   12....       LCALL   ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2600            msg += 2;
   \                     ??CrossCallReturnLabel_364:
   \   00003F   E5..         MOV     A,?V0
   \   000041   2402         ADD     A,#0x2
   \   000043   F5..         MOV     ?V0,A
   \   000045   5002         JNC     ??ZDO_ParseEndDeviceBindReq_0
   \   000047   05..         INC     ?V1
   2601          
   2602            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   000049                ; Setup parameters for call to function sAddrExtCpy
   \   000049   FC           MOV     R4,A
   \   00004A   AD..         MOV     R5,?V1
   \   00004C   EE           MOV     A,R6
   \   00004D   2406         ADD     A,#0x6
   \   00004F   FA           MOV     R2,A
   \   000050   E4           CLR     A
   \   000051   3F           ADDC    A,R7
   \   000052   FB           MOV     R3,A
   \   000053   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2603            msg += Z_EXTADDR_LEN;
   2604          
   2605            bindReq->endpoint = *msg++;
   \   000056   85..82       MOV     DPL,?V0
   \   000059   85..83       MOV     DPH,?V1
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   C0E0         PUSH    A
   \   000067   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00006A   F583         MOV     DPH,A
   \   00006C   D0E0         POP     A
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   E5..         MOV     A,?V0
   \   000071   2409         ADD     A,#0x9
   \   000073   F5..         MOV     ?V0,A
   \   000075   5002         JNC     ??ZDO_ParseEndDeviceBindReq_1
   \   000077   05..         INC     ?V1
   2606            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   000079   F582         MOV     DPL,A
   \   00007B   85..83       MOV     DPH,?V1
   \   00007E   12....       LCALL   ??Subroutine262_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   000081   F8           MOV     R0,A
   \   000082   EE           MOV     A,R6
   \   000083   240F         ADD     A,#0xf
   \   000085   12....       LCALL   ?Subroutine53 & 0xFFFF
   2607            msg += 2;
   2608          
   2609            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_379:
   \   000088   12....       LCALL   ?Subroutine18 & 0xFFFF
   2610            bindReq->outClusters = NULL;
   2611          
   2612            if ((bindReq->numInClusters = *msg++) &&
   2613                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_17:
   \   00008B   85..82       MOV     DPL,?V0
   \   00008E   85..83       MOV     DPH,?V1
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   E0           MOVX    A,@DPTR
   \   000094   FA           MOV     R2,A
   \   000095   EE           MOV     A,R6
   \   000096   2411         ADD     A,#0x11
   \   000098   F582         MOV     DPL,A
   \   00009A   E4           CLR     A
   \   00009B   3F           ADDC    A,R7
   \   00009C   F583         MOV     DPH,A
   \   00009E   EA           MOV     A,R2
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   E5..         MOV     A,?V0
   \   0000A2   2403         ADD     A,#0x3
   \   0000A4   F5..         MOV     ?V0,A
   \   0000A6   5002         JNC     ??ZDO_ParseEndDeviceBindReq_2
   \   0000A8   05..         INC     ?V1
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   0000AA   EA           MOV     A,R2
   \   0000AB   6028         JZ      ??ZDO_ParseEndDeviceBindReq_3
   \   0000AD   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_674:
   \   0000B0   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B3   8A..         MOV     ?V2,R2
   \   0000B5   8B..         MOV     ?V3,R3
   \   0000B7   A8..         MOV     R0,?V2
   \   0000B9   A9..         MOV     R1,?V3
   \   0000BB   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   0000BE   6015         JZ      ??ZDO_ParseEndDeviceBindReq_3
   2614            {
   2615              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000C0                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000C0   EE           MOV     A,R6
   \   0000C1   2412         ADD     A,#0x12
   \   0000C3   12....       LCALL   ?Subroutine100 & 0xFFFF
   2616            }
   \                     ??CrossCallReturnLabel_156:
   \   0000C6   2411         ADD     A,#0x11
   \   0000C8   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_547:
   \   0000CB   F9           MOV     R1,A
   \   0000CC   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   0000CF   8A..         MOV     ?V0,R2
   \   0000D1   8B..         MOV     ?V1,R3
   \   0000D3   8007         SJMP    ??ZDO_ParseEndDeviceBindReq_4
   2617            else
   2618            {
   2619              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   0000D5   EE           MOV     A,R6
   \   0000D6   2411         ADD     A,#0x11
   \   0000D8   12....       LCALL   ??Subroutine248_0 & 0xFFFF
   2620            }
   \                     ??CrossCallReturnLabel_537:
   \   0000DB   F0           MOVX    @DPTR,A
   2621          
   2622            if ((bindReq->numOutClusters = *msg++) &&
   2623                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_4:
   \   0000DC   85..82       MOV     DPL,?V0
   \   0000DF   85..83       MOV     DPH,?V1
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   FA           MOV     R2,A
   \   0000E4   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   0000E7   EA           MOV     A,R2
   \   0000E8   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   0000EB   8582..       MOV     ?V0,DPL
   \   0000EE   8583..       MOV     ?V1,DPH
   \   0000F1   602D         JZ      ??ZDO_ParseEndDeviceBindReq_5
   \   0000F3   EE           MOV     A,R6
   \   0000F4   2414         ADD     A,#0x14
   \   0000F6   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_548:
   \   0000F9   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_675:
   \   0000FC   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000FF   8A..         MOV     ?V2,R2
   \   000101   8B..         MOV     ?V3,R3
   \   000103   A8..         MOV     R0,?V2
   \   000105   A9..         MOV     R1,?V3
   \   000107   EE           MOV     A,R6
   \   000108   2415         ADD     A,#0x15
   \   00010A   12....       LCALL   ??Subroutine244_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   00010D   6011         JZ      ??ZDO_ParseEndDeviceBindReq_5
   2624            {
   2625              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   00010F                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   00010F   EE           MOV     A,R6
   \   000110   2415         ADD     A,#0x15
   \   000112   12....       LCALL   ?Subroutine100 & 0xFFFF
   2626            }
   \                     ??CrossCallReturnLabel_157:
   \   000115   2414         ADD     A,#0x14
   \   000117   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_549:
   \   00011A   F9           MOV     R1,A
   \   00011B   12....       LCALL   `??ZDO_ConvertOTAClusters::?relay`; Banked call to: ZDO_ConvertOTAClusters
   \   00011E   8004         SJMP    ??ZDO_ParseEndDeviceBindReq_6
   2627            else
   2628            {
   2629              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_5:
   \   000120   12....       LCALL   ?Subroutine131 & 0xFFFF
   2630            }
   \                     ??CrossCallReturnLabel_540:
   \   000123   F0           MOVX    @DPTR,A
   2631          }
   \                     ??ZDO_ParseEndDeviceBindReq_6:
   \   000124   02....       LJMP    ??Subroutine208_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_557:
   \   000009   FD           MOV     R5,A
   \   00000A   AA..         MOV     R2,?V0
   \   00000C   AB..         MOV     R3,?V1
   \   00000E   EE           MOV     A,R6
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003                REQUIRE ??Subroutine251_0
   \   000003                ; // Fall through to label ??Subroutine251_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine262_0:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine172:
   \   000000   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_652:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine160:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine204:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine265_0
   \   000001                ; // Fall through to label ??Subroutine265_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   12....       LCALL   ?Subroutine162 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   FA           MOV     R2,A
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                ; Setup parameters for call to function osal_mem_alloc
   \   000001                REQUIRE ??Subroutine266_0
   \   000001                ; // Fall through to label ??Subroutine266_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine185:
   \   000000   12....       LCALL   ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_665:
   \   000003   3B           ADDC    A,R3
   \   000004   F583         MOV     DPH,A
   \   000006   22           RET
   2632          
   2633          /*********************************************************************
   2634           * @fn          ZDO_ParseBindUnbindReq
   2635           *
   2636           * @brief       This function parses the Bind_req or Unbind_req message.
   2637           *
   2638           * @param       inMsg  - incoming message (request)
   2639           * @param       pReq - place to put parsed information
   2640           *
   2641           * @return      none
   2642           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2643          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2644          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2645            uint8 *msg;
   2646          
   2647            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine95 & 0xFFFF
   2648            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_563:
   \   00000C                ; Setup parameters for call to function sAddrExtCpy
   \   00000C   AC..         MOV     R4,?V0
   \   00000E   FD           MOV     R5,A
   \   00000F   EE           MOV     A,R6
   \   000010   FA           MOV     R2,A
   \   000011   EF           MOV     A,R7
   \   000012   FB           MOV     R3,A
   \   000013   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2649            msg += Z_EXTADDR_LEN;
   2650            pReq->srcEndpoint = *msg++;
   \   000016   85..82       MOV     DPL,?V0
   \   000019   85..83       MOV     DPH,?V1
   \   00001C   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00001F   E5..         MOV     A,?V0
   \   000021   2409         ADD     A,#0x9
   \   000023   F5..         MOV     ?V0,A
   \   000025   5002         JNC     ??ZDO_ParseBindUnbindReq_0
   \   000027   05..         INC     ?V1
   2651            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   000029   F582         MOV     DPL,A
   \   00002B   85..83       MOV     DPH,?V1
   \   00002E   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E9           MOV     A,R1
   \   000034   12....       LCALL   ?Subroutine41 & 0xFFFF
   2652            msg += 2;
   2653            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_61:
   \   000037   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   00003A   E5..         MOV     A,?V0
   \   00003C   2403         ADD     A,#0x3
   \   00003E   F5..         MOV     ?V0,A
   \   000040   5002         JNC     ??ZDO_ParseBindUnbindReq_1
   \   000042   05..         INC     ?V1
   2654            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000044   7403         MOV     A,#0x3
   \   000046   68           XRL     A,R0
   \   000047   7022         JNZ     ??ZDO_ParseBindUnbindReq_2
   2655            {
   2656              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   000049                ; Setup parameters for call to function sAddrExtCpy
   \   000049   AC..         MOV     R4,?V0
   \   00004B   AD..         MOV     R5,?V1
   \   00004D   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000050   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2657              msg += Z_EXTADDR_LEN;
   2658              pReq->dstEndpoint = *msg;
   \   000053   85..82       MOV     DPL,?V0
   \   000056   85..83       MOV     DPH,?V1
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   C0E0         PUSH    A
   \   000064   12....       LCALL   ?Subroutine139 & 0xFFFF
   2659            }
   \                     ??CrossCallReturnLabel_531:
   \   000067   D0E0         POP     A
   \   000069   8013         SJMP    ??ZDO_ParseBindUnbindReq_3
   2660            else
   2661            {
   2662              // copy group address
   2663              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_2:
   \   00006B   85..82       MOV     DPL,?V0
   \   00006E   85..83       MOV     DPH,?V1
   \   000071   12....       LCALL   ?Subroutine97 & 0xFFFF
   2664            }
   \                     ??CrossCallReturnLabel_152:
   \   000074   F582         MOV     DPL,A
   \   000076   E4           CLR     A
   \   000077   3F           ADDC    A,R7
   \   000078   F583         MOV     DPH,A
   \   00007A   E8           MOV     A,R0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_3:
   \   00007E   F0           MOVX    @DPTR,A
   2665          }
   \   00007F   02....       LJMP    ??Subroutine210_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine184 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000004   F583         MOV     DPH,A
   \   000006   E8           MOV     A,R0
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   000003   F8           MOV     R0,A
   \   000004   EE           MOV     A,R6
   \   000005   240B         ADD     A,#0xb
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   22           RET
   2666          
   2667          /*********************************************************************
   2668           * @fn      ZDO_ParseAddrRsp
   2669           *
   2670           * @brief   Turns the inMsg (incoming message) into the out parsed
   2671           *          structure.
   2672           *
   2673           * @param   inMsg - incoming message
   2674           *
   2675           * @return  pointer to parsed structures.  This structure was
   2676           *          allocated using osal_mem_alloc, so it must be freed
   2677           *          by the calling function [osal_mem_free()].
   2678           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2679          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2680          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2681            ZDO_NwkIEEEAddrResp_t *rsp;
   2682            uint8 *msg;
   2683            byte cnt = 0;
   \   000009   75..00       MOV     ?V2,#0x0
   2684          
   2685            // Calculate the number of items in the list
   2686            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   00000C   EE           MOV     A,R6
   \   00000D   2410         ADD     A,#0x10
   \   00000F   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_550:
   \   000012   C3           CLR     C
   \   000013   940C         SUBB    A,#0xc
   \   000015   400F         JC      ??ZDO_ParseAddrRsp_0
   2687            {
   2688              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   000017   12....       LCALL   ?Subroutine123 & 0xFFFF
   2689            }
   \                     ??CrossCallReturnLabel_199:
   \   00001A   F583         MOV     DPH,A
   \   00001C   12....       LCALL   ??Subroutine252_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   00001F   240B         ADD     A,#0xb
   \   000021   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000024   F5..         MOV     ?V2,A
   2690            else
   2691            {
   2692              cnt = 0;
   2693            }
   2694          
   2695            // Make buffer
   2696            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000026                ; Setup parameters for call to function osal_mem_alloc
   \   000026   A8..         MOV     R0,?V2
   \   000028   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   00002B   E8           MOV     A,R0
   \   00002C   240D         ADD     A,#0xd
   \   00002E   FA           MOV     R2,A
   \   00002F   E4           CLR     A
   \   000030   39           ADDC    A,R1
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000035   8A..         MOV     ?V0,R2
   \   000037   8B..         MOV     ?V1,R3
   2697          
   2698            if ( rsp )
   \   000039   EA           MOV     A,R2
   \   00003A   45..         ORL     A,?V1
   \   00003C   7003         JNZ     $+5
   \   00003E   02....       LJMP    ??ZDO_ParseAddrRsp_1 & 0xFFFF
   2699            {
   2700              msg = inMsg->asdu;
   \   000041   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000044   12....       LCALL   ??Subroutine263_0 & 0xFFFF
   2701          
   2702              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_657:
   \   000047   F8           MOV     R0,A
   \   000048   8A82         MOV     DPL,R2
   \   00004A   8B83         MOV     DPH,R3
   \   00004C   12....       LCALL   ?Subroutine45 & 0xFFFF
   2703              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_69:
   \   00004F   707C         JNZ     ??ZDO_ParseAddrRsp_1
   2704              {
   2705                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000051                ; Setup parameters for call to function sAddrExtCpy
   \   000051   EE           MOV     A,R6
   \   000052   FC           MOV     R4,A
   \   000053   EF           MOV     A,R7
   \   000054   FD           MOV     R5,A
   \   000055   EA           MOV     A,R2
   \   000056   2403         ADD     A,#0x3
   \   000058   FA           MOV     R2,A
   \   000059   E4           CLR     A
   \   00005A   35..         ADDC    A,?V1
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2706                msg += Z_EXTADDR_LEN;
   \   000060   EE           MOV     A,R6
   \   000061   2408         ADD     A,#0x8
   \   000063   FE           MOV     R6,A
   \   000064   5001         JNC     ??ZDO_ParseAddrRsp_2
   \   000066   0F           INC     R7
   2707                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   000067   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   00006A   85..82       MOV     DPL,?V0
   \   00006D   85..83       MOV     DPH,?V1
   \   000070   A3           INC     DPTR
   \   000071   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2708          
   2709                msg += 2;
   2710                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_365:
   \   000074   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_631:
   \   000077   E4           CLR     A
   \   000078   F0           MOVX    @DPTR,A
   2711          
   2712                // StartIndex field is only present if NumAssocDev field is non-zero.
   2713                if ( cnt > 0 )
   \   000079   E5..         MOV     A,?V2
   \   00007B   6050         JZ      ??ZDO_ParseAddrRsp_1
   2714                {
   2715                  uint16 *pList = &(rsp->devList[0]);
   \   00007D   E5..         MOV     A,?V0
   \   00007F   240D         ADD     A,#0xd
   \   000081   F8           MOV     R0,A
   \   000082   E4           CLR     A
   \   000083   35..         ADDC    A,?V1
   \   000085   F9           MOV     R1,A
   2716                  byte n = cnt;
   2717          
   2718                  rsp->numAssocDevs = *msg++;
   \   000086   8E82         MOV     DPL,R6
   \   000088   8F83         MOV     DPH,R7
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   C0E0         PUSH    A
   \   00008F   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000092   D0E0         POP     A
   \   000094   12....       LCALL   ?Subroutine22 & 0xFFFF
   2719                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_22:
   \   000097   C0E0         PUSH    A
   \   000099   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00009C   D0E0         POP     A
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   EE           MOV     A,R6
   \   0000A0   2404         ADD     A,#0x4
   \   0000A2   FE           MOV     R6,A
   \   0000A3   5001         JNC     ??ZDO_ParseAddrRsp_3
   \   0000A5   0F           INC     R7
   \                     ??ZDO_ParseAddrRsp_3:
   \   0000A6   85....       MOV     ?V3,?V2
   2720          
   2721                  while ( n != 0 )
   2722                  {
   2723                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_4:
   \   0000A9   8E82         MOV     DPL,R6
   \   0000AB   8F83         MOV     DPH,R7
   \   0000AD   12....       LCALL   ??Subroutine250_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_556:
   \   0000B0   FB           MOV     R3,A
   \   0000B1   EC           MOV     A,R4
   \   0000B2   8882         MOV     DPL,R0
   \   0000B4   8983         MOV     DPH,R1
   \   0000B6   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   0000B9   E8           MOV     A,R0
   \   0000BA   2402         ADD     A,#0x2
   \   0000BC   F8           MOV     R0,A
   \   0000BD   5001         JNC     ??ZDO_ParseAddrRsp_5
   \   0000BF   09           INC     R1
   2724                    msg += sizeof( uint16 );
   \                     ??ZDO_ParseAddrRsp_5:
   \   0000C0   EE           MOV     A,R6
   \   0000C1   2402         ADD     A,#0x2
   \   0000C3   FE           MOV     R6,A
   \   0000C4   5001         JNC     ??ZDO_ParseAddrRsp_6
   \   0000C6   0F           INC     R7
   2725                    n--;
   2726                  }
   \                     ??ZDO_ParseAddrRsp_6:
   \   0000C7   15..         DEC     ?V3
   \   0000C9   E5..         MOV     A,?V3
   \   0000CB   70DC         JNZ     ??ZDO_ParseAddrRsp_4
   2727                }
   2728              }
   2729            }
   2730          
   2731            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000CD   AA..         MOV     R2,?V0
   \   0000CF   AB..         MOV     R3,?V1
   \   0000D1   80..         SJMP    ??Subroutine253_0
   2732          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   E5..         MOV     A,?V0
   \   000002   240B         ADD     A,#0xb
   \   000004                REQUIRE ??Subroutine259_0
   \   000004                ; // Fall through to label ??Subroutine259_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine262_0
   \   000004                ; // Fall through to label ??Subroutine262_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine164 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine164:
   \   000000   12....       LCALL   ?Subroutine197 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine263_0:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FE           MOV     R6,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FF           MOV     R7,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET
   2733          
   2734          /*********************************************************************
   2735           * @fn          ZDO_ParseNodeDescRsp
   2736           *
   2737           * @brief       This function parses the Node_Desc_rsp message.
   2738           *
   2739           * @param       inMsg - incoming message
   2740           * @param       pNDRsp - place to parse the message into
   2741           *
   2742           * @return      none
   2743           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2744          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2745          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2746            uint8 *msg;
   2747          
   2748            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine11 & 0xFFFF
   2749          
   2750            pNDRsp->status = *msg++;
   2751            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2752          
   2753            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2754            {
   2755              msg += 2;
   2756              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   00000D   E8           MOV     A,R0
   \   00000E   12....       LCALL   ??Subroutine255_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000011   39           ADDC    A,R1
   \   000012   FB           MOV     R3,A
   \   000013   EC           MOV     A,R4
   \   000014   2403         ADD     A,#0x3
   \   000016   FE           MOV     R6,A
   \   000017   E4           CLR     A
   \   000018   3D           ADDC    A,R5
   \   000019   FF           MOV     R7,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   5407         ANL     A,#0x7
   \   000021   F5..         MOV     ?V0,A
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   E0           MOVX    A,@DPTR
   \   000028   54F8         ANL     A,#0xf8
   \   00002A   45..         ORL     A,?V0
   \   00002C   12....       LCALL   ?Subroutine49 & 0xFFFF
   2757          
   2758              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_76:
   \   00002F   A2E3         MOV     C,0xE0 /* A   */.3
   \   000031   E4           CLR     A
   \   000032   33           RLC     A
   \   000033   F5..         MOV     ?V0,A
   \   000035   E0           MOVX    A,@DPTR
   \   000036   A2E3         MOV     C,0xE0 /* A   */.3
   \   000038   8F83         MOV     DPH,R7
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   92E3         MOV     0xE0 /* A   */.3,C
   \   00003F   12....       LCALL   ?Subroutine49 & 0xFFFF
   2759              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_77:
   \   000042   A2E4         MOV     C,0xE0 /* A   */.4
   \   000044   E4           CLR     A
   \   000045   33           RLC     A
   \   000046   F5..         MOV     ?V1,A
   \   000048   E0           MOVX    A,@DPTR
   \   000049   A2E4         MOV     C,0xE0 /* A   */.4
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   92E4         MOV     0xE0 /* A   */.4,C
   \   000052   F0           MOVX    @DPTR,A
   2760          
   2761              msg++;  // Reserved bits.
   2762              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   000053   E8           MOV     A,R0
   \   000054   2403         ADD     A,#0x3
   \   000056   0A           INC     R2
   \   000057   E4           CLR     A
   \   000058   39           ADDC    A,R1
   \   000059   FB           MOV     R3,A
   \   00005A   EC           MOV     A,R4
   \   00005B   2404         ADD     A,#0x4
   \   00005D   0E           INC     R6
   \   00005E   E4           CLR     A
   \   00005F   3D           ADDC    A,R5
   \   000060   FF           MOV     R7,A
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   E0           MOVX    A,@DPTR
   \   000066   54F8         ANL     A,#0xf8
   \   000068   F5..         MOV     ?V2,A
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   5407         ANL     A,#0x7
   \   000071   45..         ORL     A,?V2
   \   000073   F5..         MOV     ?V2,A
   \   000075   12....       LCALL   ?Subroutine49 & 0xFFFF
   2763              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_78:
   \   000078   5407         ANL     A,#0x7
   \   00007A   FA           MOV     R2,A
   \   00007B   74F8         MOV     A,#-0x8
   \   00007D   55..         ANL     A,?V2
   \   00007F   4A           ORL     A,R2
   \   000080   8E82         MOV     DPL,R6
   \   000082   8F83         MOV     DPH,R7
   \   000084   12....       LCALL   ?Subroutine42 & 0xFFFF
   2764              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_62:
   \   000087   8C82         MOV     DPL,R4
   \   000089   8D83         MOV     DPH,R5
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   12....       LCALL   ?Subroutine43 & 0xFFFF
   2765              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_65:
   \   000093   A3           INC     DPTR
   \   000094   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_679:
   \   000097   12....       LCALL   ?Subroutine36 & 0xFFFF
   2766              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_49:
   \   00009A   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00009D   12....       LCALL   ?Subroutine36 & 0xFFFF
   2767              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_50:
   \   0000A0   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_680:
   \   0000A3   12....       LCALL   ?Subroutine31 & 0xFFFF
   2768              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_39:
   \   0000A6   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0000A9   12....       LCALL   ?Subroutine31 & 0xFFFF
   2769              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_40:
   \   0000AC   A3           INC     DPTR
   \   0000AD   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   E8           MOV     A,R0
   \   0000BB   240A         ADD     A,#0xa
   \   0000BD   F8           MOV     R0,A
   \   0000BE   5001         JNC     ??ZDO_ParseNodeDescRsp_1
   \   0000C0   09           INC     R1
   2770              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseNodeDescRsp_1:
   \   0000C1   8882         MOV     DPL,R0
   \   0000C3   8983         MOV     DPH,R1
   \   0000C5   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_611:
   \   0000C8   FB           MOV     R3,A
   \   0000C9   EE           MOV     A,R6
   \   0000CA   FA           MOV     R2,A
   \   0000CB   EC           MOV     A,R4
   \   0000CC   240B         ADD     A,#0xb
   \   0000CE   F582         MOV     DPL,A
   \   0000D0   E4           CLR     A
   \   0000D1   3D           ADDC    A,R5
   \   0000D2   F583         MOV     DPH,A
   \   0000D4   12....       LCALL   ?Subroutine51 & 0xFFFF
   2771              msg += 2;
   2772              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_337:
   \   0000D7   8882         MOV     DPL,R0
   \   0000D9   8983         MOV     DPH,R1
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   C0E0         PUSH    A
   \   0000E0   EC           MOV     A,R4
   \   0000E1   240D         ADD     A,#0xd
   \   0000E3   F582         MOV     DPL,A
   \   0000E5   E4           CLR     A
   \   0000E6   3D           ADDC    A,R5
   \   0000E7   F583         MOV     DPH,A
   \   0000E9   D0E0         POP     A
   \   0000EB   12....       LCALL   ?Subroutine43 & 0xFFFF
   2773              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   2774              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   2775            }
   \                     ??CrossCallReturnLabel_66:
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   C0E0         PUSH    A
   \   0000F1   EC           MOV     A,R4
   \   0000F2   12....       LCALL   ??Subroutine254_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   0000F5   3D           ADDC    A,R5
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   D0E0         POP     A
   \   0000FA   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0000FD   C0E0         PUSH    A
   \   0000FF   EC           MOV     A,R4
   \   000100   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000103   3D           ADDC    A,R5
   \   000104   F583         MOV     DPH,A
   \   000106   D0E0         POP     A
   \   000108   F0           MOVX    @DPTR,A
   2776          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   000109   02....       LJMP    ??Subroutine208_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine163 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine156:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   12....       LCALL   ?Subroutine196 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine156 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000003   12....       LCALL   ?Subroutine174 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   8882         MOV     DPL,R0
   \   00000D   8983         MOV     DPH,R1
   \   00000F   A3           INC     DPTR
   \   000010   A882         MOV     R0,DPL
   \   000012   A983         MOV     R1,DPH
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FB           MOV     R3,A
   \   000019   EE           MOV     A,R6
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   EB           MOV     A,R3
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8C82         MOV     DPL,R4
   \   000025   8D83         MOV     DPH,R5
   \   000027   E0           MOVX    A,@DPTR
   \   000028   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine186:
   \   000000   12....       LCALL   ?Subroutine204 & 0xFFFF
   \                     ??CrossCallReturnLabel_666:
   \   000003   3B           ADDC    A,R3
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine267_0
   \   000001                ; // Fall through to label ??Subroutine267_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine267_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET
   2777          
   2778          /*********************************************************************
   2779           * @fn          ZDO_ParsePowerDescRsp
   2780           *
   2781           * @brief       This function parses the Power_Desc_rsp message.
   2782           *
   2783           * @param       inMsg  - incoming message
   2784           * @param       pNPRsp - place to parse the message into
   2785           *
   2786           * @return      none
   2787           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2788          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2789          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2790            uint8 *msg;
   2791          
   2792            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000008   12....       LCALL   ?Subroutine101 & 0xFFFF
   2793            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_158:
   \   00000B   12....       LCALL   ??Subroutine267_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_676:
   \   00000E   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000011   AA82         MOV     R2,DPL
   \   000013   AB83         MOV     R3,DPH
   2794            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000015   12....       LCALL   ??Subroutine256_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   000018   F9           MOV     R1,A
   \   000019   EE           MOV     A,R6
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   A3           INC     DPTR
   \   00001F   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2795          
   2796            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_366:
   \   000022   8C82         MOV     DPL,R4
   \   000024   8D83         MOV     DPH,R5
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6003         JZ      $+5
   \   000029   02....       LJMP    ??ZDO_ParsePowerDescRsp_0 & 0xFFFF
   2797            {
   2798              msg += 2;
   2799              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   00002C   EA           MOV     A,R2
   \   00002D   2402         ADD     A,#0x2
   \   00002F   F8           MOV     R0,A
   \   000030   E4           CLR     A
   \   000031   3B           ADDC    A,R3
   \   000032   F9           MOV     R1,A
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
   \   000037   EC           MOV     A,R4
   \   000038   2403         ADD     A,#0x3
   \   00003A   E4           CLR     A
   \   00003B   3D           ADDC    A,R5
   \   00003C   0C           INC     R4
   \   00003D   0C           INC     R4
   \   00003E   0C           INC     R4
   \   00003F   FD           MOV     R5,A
   \   000040   8C82         MOV     DPL,R4
   \   000042   8D83         MOV     DPH,R5
   \   000044   E0           MOVX    A,@DPTR
   \   000045   540F         ANL     A,#0xf
   \   000047   F5..         MOV     ?V2,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V3,A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   E0           MOVX    A,@DPTR
   \   000052   C4           SWAP    A
   \   000053   540F         ANL     A,#0xf
   \   000055   F5..         MOV     ?V0,A
   \   000057   75..00       MOV     ?V1,#0x0
   \   00005A   7404         MOV     A,#0x4
   \   00005C   78..         MOV     R0,#?V0
   \   00005E   12....       LCALL   ?S_SHL
   \   000061   E5..         MOV     A,?V2
   \   000063   45..         ORL     A,?V0
   \   000065   A9..         MOV     R1,?V3
   \   000067   8C82         MOV     DPL,R4
   \   000069   8D83         MOV     DPH,R5
   \   00006B   12....       LCALL   ?Subroutine32 & 0xFFFF
   2800              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_41:
   \   00006E   E5..         MOV     A,?V0
   \   000070   48           ORL     A,R0
   \   000071   F5..         MOV     ?V0,A
   \   000073   8C82         MOV     DPL,R4
   \   000075   8D83         MOV     DPH,R5
   \   000077   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2801              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_367:
   \   00007A   EA           MOV     A,R2
   \   00007B   2403         ADD     A,#0x3
   \   00007D   E4           CLR     A
   \   00007E   3B           ADDC    A,R3
   \   00007F   0E           INC     R6
   \   000080   FF           MOV     R7,A
   \   000081   E5..         MOV     A,?V0
   \   000083   F5..         MOV     ?V2,A
   \   000085   E9           MOV     A,R1
   \   000086   540F         ANL     A,#0xf
   \   000088   F5..         MOV     ?V3,A
   \   00008A   8E82         MOV     DPL,R6
   \   00008C   8F83         MOV     DPH,R7
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   C4           SWAP    A
   \   000090   540F         ANL     A,#0xf
   \   000092   F5..         MOV     ?V0,A
   \   000094   740C         MOV     A,#0xc
   \   000096   78..         MOV     R0,#?V0
   \   000098   12....       LCALL   ?S_SHL
   \   00009B   E5..         MOV     A,?V3
   \   00009D   45..         ORL     A,?V1
   \   00009F   F9           MOV     R1,A
   \   0000A0   8C82         MOV     DPL,R4
   \   0000A2   8D83         MOV     DPH,R5
   \   0000A4   E5..         MOV     A,?V2
   \   0000A6   12....       LCALL   ?Subroutine32 & 0xFFFF
   2802              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2803            }
   \                     ??CrossCallReturnLabel_42:
   \   0000A9   EA           MOV     A,R2
   \   0000AA   2404         ADD     A,#0x4
   \   0000AC   8C82         MOV     DPL,R4
   \   0000AE   8D83         MOV     DPH,R5
   \   0000B0   A3           INC     DPTR
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   54F0         ANL     A,#0xf0
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5   E8           MOV     A,R0
   \   0000B6   F9           MOV     R1,A
   \   0000B7   8C82         MOV     DPL,R4
   \   0000B9   8D83         MOV     DPH,R5
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   49           ORL     A,R1
   \   0000BE   F0           MOVX    @DPTR,A
   2804          }
   \                     ??ZDO_ParsePowerDescRsp_0:
   \   0000BF   02....       LJMP    ??Subroutine208_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   540F         ANL     A,#0xf
   \   00000A   F8           MOV     R0,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   000003   22           RET
   2805          
   2806          /*********************************************************************
   2807           * @fn          ZDO_ParseSimpleDescRsp
   2808           *
   2809           * @brief       This function parse the Simple_Desc_rsp message.
   2810           *
   2811           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2812           *         in the SimpleDescriptionFormat_t structure are allocated
   2813           *         and the calling function needs to free [osal_msg_free()]
   2814           *         these buffers.
   2815           *
   2816           * @param       inMsg  - incoming message
   2817           * @param       pSimpleDescRsp - place to parse the message into
   2818           *
   2819           * @return      none
   2820           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2821          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2822          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2823            uint8 *msg;
   2824          
   2825            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine11 & 0xFFFF
   2826            pSimpleDescRsp->status = *msg++;
   2827            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2828            msg += sizeof ( uint16 );
   2829            msg++; // Skip past the length field.
   2830          
   2831            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7011         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2832            {
   2833              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV     A,R4
   \   00000B   2403         ADD     A,#0x3
   \   00000D   FC           MOV     R4,A
   \   00000E   5001         JNC     ??ZDO_ParseSimpleDescRsp_1
   \   000010   0D           INC     R5
   \                     ??ZDO_ParseSimpleDescRsp_1:
   \   000011   E8           MOV     A,R0
   \   000012   2403         ADD     A,#0x3
   \   000014   FA           MOV     R2,A
   \   000015   E4           CLR     A
   \   000016   39           ADDC    A,R1
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??ZDO_ParseSimpleDescBuf::?relay`; Banked call to: ZDO_ParseSimpleDescBuf
   2834            }
   2835          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001B   02....       LJMP    ?Subroutine2 & 0xFFFF
   2836          
   2837          /*********************************************************************
   2838           * @fn          ZDO_ParseEPListRsp
   2839           *
   2840           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2841           *
   2842           * @param       inMsg  - incoming message
   2843           *
   2844           * @return      none
   2845           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine213_0
   \   000004                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2846          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2847          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   2848            ZDO_ActiveEndpointRsp_t *pRsp;
   2849            uint8 *msg;
   2850            uint8 Status;
   2851            uint8 cnt;
   2852          
   2853            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V0,A
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   2854            Status = *msg++;
   \   00000D   85..82       MOV     DPL,?V0
   \   000010   F583         MOV     DPH,A
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V3,A
   \   000015   A3           INC     DPTR
   \   000016   8582..       MOV     ?V0,DPL
   \   000019   8583..       MOV     ?V1,DPH
   2855            cnt = msg[2];
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V2,A
   2856          
   2857            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_658:
   \   000024   3400         ADDC    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV     ?V4,R2
   \   00002C   8B..         MOV     ?V5,R3
   \   00002E   AE..         MOV     R6,?V4
   \   000030   AF..         MOV     R7,?V5
   2858            if ( pRsp )
   \   000032   EE           MOV     A,R6
   \   000033   4F           ORL     A,R7
   \   000034   6037         JZ      ??ZDO_ParseEPListRsp_0
   2859            {
   2860              pRsp->status = Status;
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   E5..         MOV     A,?V3
   \   00003C   F0           MOVX    @DPTR,A
   2861              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   00003D   85..82       MOV     DPL,?V0
   \   000040   85..83       MOV     DPH,?V1
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FA           MOV     R2,A
   \   000045   12....       LCALL   ?Subroutine24 & 0xFFFF
   2862              msg += sizeof( uint16 );
   2863              pRsp->cnt = cnt;
   2864              msg++; // pass cnt
   2865              osal_memcpy( pRsp->epList, msg, cnt );
   \                     ??CrossCallReturnLabel_25:
   \   000048                ; Setup parameters for call to function osal_memcpy
   \   000048   85..82       MOV     DPL,?V0
   \   00004B   85..83       MOV     DPH,?V1
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A982         MOV     R1,DPL
   \   000053   AA83         MOV     R2,DPH
   \   000055   89..         MOV     ?V4,R1
   \   000057   8A..         MOV     ?V5,R2
   \   000059   88..         MOV     ?V6,R0
   \   00005B   78..         MOV     R0,#?V4
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000060   12....       LCALL   ?Subroutine194 & 0xFFFF
   2866            }
   \                     ??CrossCallReturnLabel_662:
   \   000063   3F           ADDC    A,R7
   \   000064   FB           MOV     R3,A
   \   000065   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
   2867          
   2868            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   00006D   02....       LJMP    ?Subroutine6 & 0xFFFF
   2869          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine194:
   \   000000   AC..         MOV     R4,?V2
   \   000002   7D00         MOV     R5,#0x0
   \   000004   EE           MOV     A,R6
   \   000005                REQUIRE ??Subroutine264_0
   \   000005                ; // Fall through to label ??Subroutine264_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine264_0:
   \   000000   2404         ADD     A,#0x4
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_691:
   \   000003   EA           MOV     A,R2
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   A3           INC     DPTR
   \   000009   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   00000C   A3           INC     DPTR
   \   00000D   E5..         MOV     A,?V2
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine157:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine198 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   12....       LCALL   ?Subroutine185 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   000003   22           RET
   2870          
   2871          /*********************************************************************
   2872           * @fn          ZDO_ParseServerDiscRsp
   2873           *
   2874           * @brief       Parse the Server_Discovery_rsp message.
   2875           *
   2876           * @param       inMsg - incoming message.
   2877           * @param       pRsp - place to put the parsed information.
   2878           *
   2879           * @return      none
   2880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2881          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2882          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2883            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F9           MOV     R1,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   12....       LCALL   ??Subroutine257_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   000013   F583         MOV     DPH,A
   \   000015   8A82         MOV     DPL,R2
   \   000017   12....       LCALL   ??Subroutine267_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_677:
   \   00001A   12....       LCALL   ?Subroutine40 & 0xFFFF
   2884            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_59:
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ??Subroutine268_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_681:
   \   00002C   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   2885          }
   \                     ??CrossCallReturnLabel_368:
   \   00002F   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine268_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   EA           MOV     A,R2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   A3           INC     DPTR
   \   000009   22           RET
   2886          
   2887          /*********************************************************************
   2888           * @fn          ZDO_ParseMgmtLqiRsp
   2889           *
   2890           * @brief       This function parses the incoming Management
   2891           *              LQI response
   2892           *
   2893           * @param       inMsg - incoming message
   2894           *
   2895           * @return      a pointer to parsed response structure (NULL if not allocated).
   2896           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2897           *          by the calling function [osal_mem_free()].
   2898           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   AA..         MOV     R2,?V2
   \   000002   AB..         MOV     R3,?V3
   \   000004                REQUIRE ??Subroutine207_0
   \   000004                ; // Fall through to label ??Subroutine207_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   FC           MOV     R4,A
   \   000001   EF           MOV     A,R7
   \   000002   FD           MOV     R5,A
   \   000003   E5..         MOV     A,?V0
   \   000005                REQUIRE ??Subroutine255_0
   \   000005                ; // Fall through to label ??Subroutine255_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2899          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2900          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2901            ZDO_MgmtLqiRsp_t *pRsp;
   2902            uint8 status;
   2903            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V5,#0x0
   2904            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V4,#0x0
   2905            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V6,#0x0
   2906            uint8 *msg;
   2907          
   2908            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine57 & 0xFFFF
   2909          
   2910            status = *msg++;
   \                     ??CrossCallReturnLabel_653:
   \   000011   F5..         MOV     ?V7,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2911            if ( status == ZSuccess )
   \   000018   7017         JNZ     ??ZDO_ParseMgmtLqiRsp_0
   2912            {
   2913              neighborLqiEntries = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V6,A
   2914              startIndex = *msg++;
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V5,A
   2915              neighborLqiCount = *msg++;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V4,A
   \   00002A   EE           MOV     A,R6
   \   00002B   2403         ADD     A,#0x3
   \   00002D   FE           MOV     R6,A
   \   00002E   5001         JNC     ??ZDO_ParseMgmtLqiRsp_0
   \   000030   0F           INC     R7
   2916            }
   2917          
   2918            // Allocate a buffer big enough to handle the list.
   2919            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2920                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( ZDP_MgmtLqiItem_t )) );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   E5..         MOV     A,?V4
   \   000033   75F01A       MOV     B,#0x1a
   \   000036   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000039   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00003C   8A..         MOV     ?V2,R2
   \   00003E   8B..         MOV     ?V3,R3
   2921            if ( pRsp )
   \   000040   EA           MOV     A,R2
   \   000041   45..         ORL     A,?V3
   \   000043   7003         JNZ     $+5
   \   000045   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_1 & 0xFFFF
   2922            {
   2923              uint8 x;
   2924              ZDP_MgmtLqiItem_t *pList = pRsp->list;
   \   000048   12....       LCALL   ?Subroutine152 & 0xFFFF
   2925              pRsp->status = status;
   \                     ??CrossCallReturnLabel_256:
   \   00004B   12....       LCALL   ?Subroutine12 & 0xFFFF
   2926              pRsp->neighborLqiEntries = neighborLqiEntries;
   2927              pRsp->startIndex = startIndex;
   2928              pRsp->neighborLqiCount = neighborLqiCount;
   2929          
   2930              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_2:
   \   00004E   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_2 & 0xFFFF
   2931              {
   2932                uint8 tmp;
   2933          
   2934                pList->panID = 0; // This isn't in the record, why is it in the structure?
   \                     ??ZDO_ParseMgmtLqiRsp_3:
   \   000051   85..82       MOV     DPL,?V0
   \   000054   85..83       MOV     DPH,?V1
   \   000057   E4           CLR     A
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   \   00005A   F0           MOVX    @DPTR,A
   2935                osal_cpyExtAddr(pList->extPanID, msg);   //Copy extended PAN ID
   \   00005B                ; Setup parameters for call to function sAddrExtCpy
   \   00005B   EE           MOV     A,R6
   \   00005C   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   00005F   35..         ADDC    A,?V1
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2936                msg += Z_EXTADDR_LEN;
   \   000065   EE           MOV     A,R6
   \   000066   2408         ADD     A,#0x8
   \   000068   FE           MOV     R6,A
   \   000069   5001         JNC     ??ZDO_ParseMgmtLqiRsp_4
   \   00006B   0F           INC     R7
   2937          
   2938                osal_cpyExtAddr(pList->extAddr, msg);   //Copy extended address
   \                     ??ZDO_ParseMgmtLqiRsp_4:
   \   00006C                ; Setup parameters for call to function sAddrExtCpy
   \   00006C   FC           MOV     R4,A
   \   00006D   EF           MOV     A,R7
   \   00006E   FD           MOV     R5,A
   \   00006F   E5..         MOV     A,?V0
   \   000071   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   000074   35..         ADDC    A,?V1
   \   000076   FB           MOV     R3,A
   \   000077   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2939                msg += Z_EXTADDR_LEN;
   \   00007A   EE           MOV     A,R6
   \   00007B   2408         ADD     A,#0x8
   \   00007D   FE           MOV     R6,A
   \   00007E   5001         JNC     ??ZDO_ParseMgmtLqiRsp_5
   \   000080   0F           INC     R7
   2940          
   2941                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtLqiRsp_5:
   \   000081   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_641:
   \   000084   F8           MOV     R0,A
   \   000085   E5..         MOV     A,?V0
   \   000087   2412         ADD     A,#0x12
   \   000089   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   00008C   E8           MOV     A,R0
   \   00008D   12....       LCALL   ?Subroutine34 & 0xFFFF
   2942                msg += 2;
   2943          
   2944                tmp = *msg++;
   \                     ??CrossCallReturnLabel_45:
   \   000090   F8           MOV     R0,A
   2945                pList->devType = tmp & 0x03;
   \   000091   7403         MOV     A,#0x3
   \   000093   58           ANL     A,R0
   \   000094   C0E0         PUSH    A
   \   000096   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000099   D0E0         POP     A
   \   00009B   F0           MOVX    @DPTR,A
   2946                pList->rxOnIdle = (tmp >> 2) & 0x03;
   \   00009C   E8           MOV     A,R0
   \   00009D   13           RRC     A
   \   00009E   13           RRC     A
   \   00009F   543F         ANL     A,#0x3f
   \   0000A1   5403         ANL     A,#0x3
   \   0000A3   C0E0         PUSH    A
   \   0000A5   E5..         MOV     A,?V0
   \   0000A7   2415         ADD     A,#0x15
   \   0000A9   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   0000AC   D0E0         POP     A
   \   0000AE   F0           MOVX    @DPTR,A
   2947                pList->relation = (tmp >> 4) & 0x07;
   \   0000AF   E8           MOV     A,R0
   \   0000B0   C4           SWAP    A
   \   0000B1   540F         ANL     A,#0xf
   \   0000B3   5407         ANL     A,#0x7
   \   0000B5   C0E0         PUSH    A
   \   0000B7   E5..         MOV     A,?V0
   \   0000B9   2416         ADD     A,#0x16
   \   0000BB   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   0000BE   D0E0         POP     A
   \   0000C0   12....       LCALL   ?Subroutine22 & 0xFFFF
   2948          
   2949                pList->permit = (*msg++) & 0x03;
   \                     ??CrossCallReturnLabel_23:
   \   0000C3   5403         ANL     A,#0x3
   \   0000C5   C0E0         PUSH    A
   \   0000C7   E5..         MOV     A,?V0
   \   0000C9   2417         ADD     A,#0x17
   \   0000CB   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   0000CE   D0E0         POP     A
   \   0000D0   12....       LCALL   ?Subroutine164 & 0xFFFF
   2950          
   2951                pList->depth = *msg++;
   \                     ??CrossCallReturnLabel_278:
   \   0000D3   A3           INC     DPTR
   \   0000D4   E0           MOVX    A,@DPTR
   \   0000D5   C0E0         PUSH    A
   \   0000D7   E5..         MOV     A,?V0
   \   0000D9   2418         ADD     A,#0x18
   \   0000DB   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   0000DE   D0E0         POP     A
   \   0000E0   12....       LCALL   ?Subroutine37 & 0xFFFF
   2952          
   2953                pList->lqi = *msg++;
   \                     ??CrossCallReturnLabel_52:
   \   0000E3   C0E0         PUSH    A
   \   0000E5   E5..         MOV     A,?V0
   \   0000E7   2419         ADD     A,#0x19
   \   0000E9   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   0000EC   D0E0         POP     A
   \   0000EE   F0           MOVX    @DPTR,A
   \   0000EF   EE           MOV     A,R6
   \   0000F0   2406         ADD     A,#0x6
   \   0000F2   FE           MOV     R6,A
   \   0000F3   5001         JNC     ??ZDO_ParseMgmtLqiRsp_6
   \   0000F5   0F           INC     R7
   2954                pList++;
   \                     ??ZDO_ParseMgmtLqiRsp_6:
   \   0000F6   E5..         MOV     A,?V0
   \   0000F8   241A         ADD     A,#0x1a
   \   0000FA   F5..         MOV     ?V0,A
   \   0000FC   5002         JNC     ??ZDO_ParseMgmtLqiRsp_7
   \   0000FE   05..         INC     ?V1
   2955              }
   \                     ??ZDO_ParseMgmtLqiRsp_7:
   \   000100   05..         INC     ?V5
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   000102   E5..         MOV     A,?V5
   \   000104   C3           CLR     C
   \   000105   95..         SUBB    A,?V4
   \   000107   5003         JNC     $+5
   \   000109   02....       LJMP    ??ZDO_ParseMgmtLqiRsp_3 & 0xFFFF
   2956            }
   2957          
   2958            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00010C   02....       LJMP    ?Subroutine3 & 0xFFFF
   2959          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine152:
   \   000000   EA           MOV     A,R2
   \   000001   2404         ADD     A,#0x4
   \   000003   F5..         MOV     ?V0,A
   \   000005   E4           CLR     A
   \   000006   35..         ADDC    A,?V3
   \   000008   F5..         MOV     ?V1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine186 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   000003                REQUIRE ??Subroutine263_0
   \   000003                ; // Fall through to label ??Subroutine263_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine151:
   \   000000   A4           MUL     AB
   \   000001   A9F0         MOV     R1,B
   \   000003   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_661:
   \   000006   39           ADDC    A,R1
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E5..         MOV     A,?V7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V6
   \   00000A   12....       LCALL   ?Subroutine160 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   00000D   A3           INC     DPTR
   \   00000E   E5..         MOV     A,?V5
   \   000010   12....       LCALL   ?Subroutine154 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000013   E5..         MOV     A,?V4
   \   000015   F0           MOVX    @DPTR,A
   \   000016   75..00       MOV     ?V5,#0x0
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine157 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   2960          
   2961          /*********************************************************************
   2962           * @fn          ZDO_ParseMgmNwkDiscRsp
   2963           *
   2964           * @brief       This function parses the incoming Management
   2965           *              Network Discover response.
   2966           *
   2967           * @param       inMsg - incoming message
   2968           *
   2969           * @return      pointer to parsed response.  This structure was
   2970           *          allocated using osal_mem_alloc, so it must be freed
   2971           *          by the calling function [osal_mem_free()].
   2972           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2973          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2974          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2975            ZDO_MgmNwkDiscRsp_t *pRsp;
   2976            uint8 status;
   2977            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   2978            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0,#0x0
   2979            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   2980            uint8 *msg;
   2981          
   2982            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine57 & 0xFFFF
   2983            status = *msg++;
   \                     ??CrossCallReturnLabel_654:
   \   000011   F5..         MOV     ?V5,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2984          
   2985            if ( status == ZSuccess )
   \   000018   7017         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2986            {
   2987              networkCount = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V1,A
   2988              startIndex = *msg++;
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0,A
   2989              networkListCount = *msg++;
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V4,A
   \   00002A   EE           MOV     A,R6
   \   00002B   2403         ADD     A,#0x3
   \   00002D   FE           MOV     R6,A
   \   00002E   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_0
   \   000030   0F           INC     R7
   2990            }
   2991          
   2992            // Allocate a buffer big enough to handle the list.
   2993            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2994                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000031                ; Setup parameters for call to function osal_mem_alloc
   \   000031   85....       MOV     ?V2,?V4
   \   000034   75..00       MOV     ?V3,#0x0
   \   000037   7404         MOV     A,#0x4
   \   000039   78..         MOV     R0,#?V2
   \   00003B   12....       LCALL   ?S_SHL
   \   00003E   E5..         MOV     A,?V2
   \   000040   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_659:
   \   000043   35..         ADDC    A,?V3
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000049   8A..         MOV     ?V2,R2
   \   00004B   8B..         MOV     ?V3,R3
   2995            if ( pRsp )
   \   00004D   EA           MOV     A,R2
   \   00004E   45..         ORL     A,?V3
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2996            {
   2997              uint8 x;
   2998              mgmtNwkDiscItem_t *pList;
   2999          
   3000              pRsp->status = status;
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   E5..         MOV     A,?V5
   \   00005B   F0           MOVX    @DPTR,A
   3001              pRsp->networkCount = networkCount;
   \   00005C   A3           INC     DPTR
   \   00005D   E5..         MOV     A,?V1
   \   00005F   12....       LCALL   ?Subroutine39 & 0xFFFF
   3002              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_56:
   \   000062   E5..         MOV     A,?V0
   \   000064   12....       LCALL   ?Subroutine29 & 0xFFFF
   3003              pRsp->networkListCount = networkListCount;
   \                     ??CrossCallReturnLabel_35:
   \   000067   E5..         MOV     A,?V4
   \   000069   F0           MOVX    @DPTR,A
   3004              pList = pRsp->list;
   \   00006A   12....       LCALL   ?Subroutine152 & 0xFFFF
   3005          
   3006              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_257:
   \   00006D   75..00       MOV     ?V5,#0x0
   \   000070   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_2 & 0xFFFF
   3007              {
   3008                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000073                ; Setup parameters for call to function sAddrExtCpy
   \   000073   EE           MOV     A,R6
   \   000074   FC           MOV     R4,A
   \   000075   EF           MOV     A,R7
   \   000076   FD           MOV     R5,A
   \   000077   AA..         MOV     R2,?V0
   \   000079   AB..         MOV     R3,?V1
   \   00007B   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3009                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   00007E   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   E9           MOV     A,R1
   \   000085   12....       LCALL   ?Subroutine25 & 0xFFFF
   3010                msg += Z_EXTADDR_LEN;
   3011          
   3012                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_28:
   \   000088   85..82       MOV     DPL,?V0
   \   00008B   85..83       MOV     DPH,?V1
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   F0           MOVX    @DPTR,A
   3013                pList->stackProfile = (*msg) & 0x0F;
   \   000099   EE           MOV     A,R6
   \   00009A   2409         ADD     A,#0x9
   \   00009C   F8           MOV     R0,A
   \   00009D   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   0000A0   C0E0         PUSH    A
   \   0000A2   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_633:
   \   0000A5   D0E0         POP     A
   \   0000A7   12....       LCALL   ?Subroutine50 & 0xFFFF
   3014                pList->version = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_79:
   \   0000AA   C0E0         PUSH    A
   \   0000AC   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   0000AF   D0E0         POP     A
   \   0000B1   F0           MOVX    @DPTR,A
   3015                pList->beaconOrder = (*msg) & 0x0F;
   \   0000B2   EE           MOV     A,R6
   \   0000B3   240A         ADD     A,#0xa
   \   0000B5   08           INC     R0
   \   0000B6   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   0000B9   C0E0         PUSH    A
   \   0000BB   E5..         MOV     A,?V0
   \   0000BD   240D         ADD     A,#0xd
   \   0000BF   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   0000C2   D0E0         POP     A
   \   0000C4   12....       LCALL   ?Subroutine50 & 0xFFFF
   3016                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   \                     ??CrossCallReturnLabel_80:
   \   0000C7   C0E0         PUSH    A
   \   0000C9   E5..         MOV     A,?V0
   \   0000CB   240E         ADD     A,#0xe
   \   0000CD   12....       LCALL   ??Subroutine259_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   0000D0   D0E0         POP     A
   \   0000D2   F0           MOVX    @DPTR,A
   3017                pList->permitJoining = *msg++;
   \   0000D3   EE           MOV     A,R6
   \   0000D4   240B         ADD     A,#0xb
   \   0000D6   12....       LCALL   ??Subroutine249_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_551:
   \   0000D9   C0E0         PUSH    A
   \   0000DB   E5..         MOV     A,?V0
   \   0000DD   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   0000E0   12....       LCALL   ??Subroutine260_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   0000E3   D0E0         POP     A
   \   0000E5   F0           MOVX    @DPTR,A
   \   0000E6   EE           MOV     A,R6
   \   0000E7   240C         ADD     A,#0xc
   \   0000E9   FE           MOV     R6,A
   \   0000EA   5001         JNC     ??ZDO_ParseMgmNwkDiscRsp_4
   \   0000EC   0F           INC     R7
   3018                pList++;
   \                     ??ZDO_ParseMgmNwkDiscRsp_4:
   \   0000ED   E5..         MOV     A,?V0
   \   0000EF   2410         ADD     A,#0x10
   \   0000F1   F5..         MOV     ?V0,A
   \   0000F3   5002         JNC     ??ZDO_ParseMgmNwkDiscRsp_5
   \   0000F5   05..         INC     ?V1
   3019              }
   \                     ??ZDO_ParseMgmNwkDiscRsp_5:
   \   0000F7   05..         INC     ?V5
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000F9   E5..         MOV     A,?V5
   \   0000FB   C3           CLR     C
   \   0000FC   95..         SUBB    A,?V4
   \   0000FE   5003         JNC     $+5
   \   000100   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_3 & 0xFFFF
   3020            }
   3021          
   3022            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   000103   02....       LJMP    ?Subroutine3 & 0xFFFF
   3023          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   E4           CLR     A
   \   000001   3F           ADDC    A,R7
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   540F         ANL     A,#0xf
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine195 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000003   C4           SWAP    A
   \   000004   540F         ANL     A,#0xf
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine172 & 0xFFFF
   \                     ??CrossCallReturnLabel_644:
   \   000007   85..82       MOV     DPL,?V0
   \   00000A   85..83       MOV     DPH,?V1
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   22           RET
   3024          
   3025          /*********************************************************************
   3026           * @fn          ZDO_ParseMgmtRtgRsp
   3027           *
   3028           * @brief       This function parses the incoming Management
   3029           *              Routing response.
   3030           *
   3031           * @param       inMsg - incoming message
   3032           *
   3033           * @return      a pointer to parsed response structure (NULL if not allocated).
   3034           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3035           *          by the calling function [osal_mem_free()].
   3036           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3037          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   3038          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3039            ZDO_MgmtRtgRsp_t *pRsp;
   3040            uint8 status;
   3041            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   3042            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V1,#0x0
   3043            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0,#0x0
   3044            uint8 *msg;
   3045          
   3046            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine57 & 0xFFFF
   3047          
   3048            status = *msg++;
   \                     ??CrossCallReturnLabel_655:
   \   000011   F5..         MOV     ?V3,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   3049            if ( status == ZSuccess )
   \   000018   7015         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   3050            {
   3051              rtgCount = *msg++;
   \   00001A   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   3052              startIndex = *msg++;
   \                     ??CrossCallReturnLabel_338:
   \   00001D   F5..         MOV     ?V1,A
   3053              rtgListCount = *msg++;
   \   00001F   8E82         MOV     DPL,R6
   \   000021   8F83         MOV     DPH,R7
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0,A
   \   000028   EE           MOV     A,R6
   \   000029   2403         ADD     A,#0x3
   \   00002B   FE           MOV     R6,A
   \   00002C   5001         JNC     ??ZDO_ParseMgmtRtgRsp_0
   \   00002E   0F           INC     R7
   3054            }
   3055          
   3056            // Allocate a buffer big enough to handle the list
   3057            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   3058                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   00002F                ; Setup parameters for call to function osal_mem_alloc
   \   00002F   E5..         MOV     A,?V0
   \   000031   75F007       MOV     B,#0x7
   \   000034   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   000037   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   3059            if ( pRsp )
   \   00003A   EA           MOV     A,R2
   \   00003B   4B           ORL     A,R3
   \   00003C   606D         JZ      ??ZDO_ParseMgmtRtgRsp_1
   3060            {
   3061              uint8 x;
   3062              rtgItem_t *pList = pRsp->list;
   \   00003E   EA           MOV     A,R2
   \   00003F   2404         ADD     A,#0x4
   \   000041   F8           MOV     R0,A
   \   000042   E4           CLR     A
   \   000043   3B           ADDC    A,R3
   \   000044   F9           MOV     R1,A
   3063              pRsp->status = status;
   \   000045   8A82         MOV     DPL,R2
   \   000047   8B83         MOV     DPH,R3
   \   000049   E5..         MOV     A,?V3
   \   00004B   F0           MOVX    @DPTR,A
   3064              pRsp->rtgCount = rtgCount;
   \   00004C   A3           INC     DPTR
   \   00004D   E5..         MOV     A,?V2
   \   00004F   12....       LCALL   ?Subroutine39 & 0xFFFF
   3065              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_57:
   \   000052   E5..         MOV     A,?V1
   \   000054   12....       LCALL   ?Subroutine29 & 0xFFFF
   3066              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_36:
   \   000057   E5..         MOV     A,?V0
   \   000059   F0           MOVX    @DPTR,A
   3067          
   3068              for ( x = 0; x < rtgListCount; x++ )
   \   00005A   75..00       MOV     ?V1,#0x0
   \   00005D   8045         SJMP    ??ZDO_ParseMgmtRtgRsp_2
   3069              {
   3070                uint8 statOpt;
   3071          
   3072                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   00005F   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   ED           MOV     A,R5
   \   000065   12....       LCALL   ?Subroutine54 & 0xFFFF
   3073                msg += 2;
   3074                statOpt = *msg++;
   \                     ??CrossCallReturnLabel_84:
   \   000068   FC           MOV     R4,A
   \   000069   EE           MOV     A,R6
   \   00006A   2403         ADD     A,#0x3
   \   00006C   FE           MOV     R6,A
   \   00006D   5001         JNC     ??ZDO_ParseMgmtRtgRsp_4
   \   00006F   0F           INC     R7
   3075                pList->status = (statOpt & 0x07);
   \                     ??ZDO_ParseMgmtRtgRsp_4:
   \   000070   7407         MOV     A,#0x7
   \   000072   5C           ANL     A,R4
   \   000073   8882         MOV     DPL,R0
   \   000075   8983         MOV     DPH,R1
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   F0           MOVX    @DPTR,A
   3076                pList->options = ((statOpt >> 3) & 0x07);
   \   00007D   EC           MOV     A,R4
   \   00007E   13           RRC     A
   \   00007F   13           RRC     A
   \   000080   13           RRC     A
   \   000081   541F         ANL     A,#0x1f
   \   000083   5407         ANL     A,#0x7
   \   000085   8882         MOV     DPL,R0
   \   000087   8983         MOV     DPH,R1
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   F0           MOVX    @DPTR,A
   3077                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \   000090   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   12....       LCALL   ??Subroutine269_0 & 0xFFFF
   3078                msg += 2;
   \                     ??CrossCallReturnLabel_686:
   \   000098   5001         JNC     ??ZDO_ParseMgmtRtgRsp_5
   \   00009A   0F           INC     R7
   3079                pList++;
   \                     ??ZDO_ParseMgmtRtgRsp_5:
   \   00009B   E8           MOV     A,R0
   \   00009C   2407         ADD     A,#0x7
   \   00009E   F8           MOV     R0,A
   \   00009F   5001         JNC     ??ZDO_ParseMgmtRtgRsp_6
   \   0000A1   09           INC     R1
   3080              }
   \                     ??ZDO_ParseMgmtRtgRsp_6:
   \   0000A2   05..         INC     ?V1
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   0000A4   E5..         MOV     A,?V1
   \   0000A6   C3           CLR     C
   \   0000A7   95..         SUBB    A,?V0
   \   0000A9   40B4         JC      ??ZDO_ParseMgmtRtgRsp_3
   3081            }
   3082          
   3083            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   0000AB   02....       LJMP    ??Subroutine253_0 & 0xFFFF
   3084          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FD           MOV     R5,A
   \   00000A   E5..         MOV     A,?V2
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine269_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   ED           MOV     A,R5
   \   000003   F0           MOVX    @DPTR,A
   \   000004   EE           MOV     A,R6
   \   000005   2402         ADD     A,#0x2
   \   000007   FE           MOV     R6,A
   \   000008   22           RET
   3085          
   3086          /*********************************************************************
   3087           * @fn          ZDO_ParseMgmtBindRsp
   3088           *
   3089           * @brief       This function parses the incoming Management
   3090           *              Binding response.
   3091           *
   3092           * @param       inMsg - pointer to message to parse
   3093           *
   3094           * @return      a pointer to parsed response structure (NULL if not allocated).
   3095           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3096           *          by the calling function [osal_mem_free()].
   3097           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3098          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   3099          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3100            ZDO_MgmtBindRsp_t *pRsp;
   3101            uint8 status;
   3102            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V6,#0x0
   3103            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V5,#0x0
   3104            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V4,#0x0
   3105            uint8 *msg;
   3106          
   3107            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000011   12....       LCALL   ?Subroutine94 & 0xFFFF
   3108          
   3109            status = *msg++;
   \                     ??CrossCallReturnLabel_342:
   \   000014   85..82       MOV     DPL,?V2
   \   000017   F583         MOV     DPH,A
   \   000019   12....       LCALL   ?Subroutine99 & 0xFFFF
   3110            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_155:
   \   00001C   701C         JNZ     ??ZDO_ParseMgmtBindRsp_0
   3111            {
   3112              bindingCount = *msg++;
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V6,A
   3113              startIndex = *msg++;
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V5,A
   3114              bindingListCount = *msg++;
   \   000025   85..82       MOV     DPL,?V2
   \   000028   85..83       MOV     DPH,?V3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V4,A
   \   000030   E5..         MOV     A,?V2
   \   000032   2403         ADD     A,#0x3
   \   000034   F5..         MOV     ?V2,A
   \   000036   5002         JNC     ??ZDO_ParseMgmtBindRsp_0
   \   000038   05..         INC     ?V3
   3115            }
   3116          
   3117            // Allocate a buffer big enough to handle the list
   3118            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   3119                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   00003A                ; Setup parameters for call to function osal_mem_alloc
   \   00003A   E5..         MOV     A,?V4
   \   00003C   75F015       MOV     B,#0x15
   \   00003F   12....       LCALL   ?Subroutine151 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   000042   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000045   8A..         MOV     ?V0,R2
   \   000047   8B..         MOV     ?V1,R3
   3120            if ( pRsp )
   \   000049   EA           MOV     A,R2
   \   00004A   45..         ORL     A,?V1
   \   00004C   7003         JNZ     $+5
   \   00004E   02....       LJMP    ??ZDO_ParseMgmtBindRsp_1 & 0xFFFF
   3121            {
   3122              uint8 x;
   3123              apsBindingItem_t *pList = pRsp->list;
   \   000051   EA           MOV     A,R2
   \   000052   2404         ADD     A,#0x4
   \   000054   FE           MOV     R6,A
   \   000055   E4           CLR     A
   \   000056   35..         ADDC    A,?V1
   \   000058   FF           MOV     R7,A
   3124              pRsp->status = status;
   \   000059   12....       LCALL   ?Subroutine12 & 0xFFFF
   3125              pRsp->bindingCount = bindingCount;
   3126              pRsp->startIndex = startIndex;
   3127              pRsp->bindingListCount = bindingListCount;
   3128          
   3129              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_3:
   \   00005C   801F         SJMP    ??ZDO_ParseMgmtBindRsp_2
   3130              {
   3131                osal_cpyExtAddr( pList->srcAddr, msg );
   3132                msg += Z_EXTADDR_LEN;
   3133                pList->srcEP = *msg++;
   3134          
   3135                // Get the Cluster ID
   3136          
   3137                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   3138                msg += 2;
   3139                pList->dstAddr.addrMode = *msg++;
   3140                if ( pList->dstAddr.addrMode == Addr64Bit )
   3141                {
   3142                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   3143                  msg += Z_EXTADDR_LEN;
   3144                  pList->dstEP = *msg++;
   3145                }
   3146                else
   3147                {
   3148                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_3:
   \   00005E   85..82       MOV     DPL,?V2
   \   000061   85..83       MOV     DPH,?V3
   \   000064   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000067   12....       LCALL   ?Subroutine53 & 0xFFFF
   3149                  msg += 2;
   \                     ??CrossCallReturnLabel_380:
   \   00006A   E5..         MOV     A,?V2
   \   00006C   2402         ADD     A,#0x2
   \   00006E   F5..         MOV     ?V2,A
   \   000070   5002         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   000072   05..         INC     ?V3
   3150                }
   3151          
   3152                pList++;
   \                     ??ZDO_ParseMgmtBindRsp_4:
   \   000074   EE           MOV     A,R6
   \   000075   2415         ADD     A,#0x15
   \   000077   FE           MOV     R6,A
   \   000078   5001         JNC     ??ZDO_ParseMgmtBindRsp_5
   \   00007A   0F           INC     R7
   \                     ??ZDO_ParseMgmtBindRsp_5:
   \   00007B   05..         INC     ?V5
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00007D   E5..         MOV     A,?V5
   \   00007F   C3           CLR     C
   \   000080   95..         SUBB    A,?V4
   \   000082   5072         JNC     ??ZDO_ParseMgmtBindRsp_1
   \   000084                ; Setup parameters for call to function sAddrExtCpy
   \   000084   AC..         MOV     R4,?V2
   \   000086   AD..         MOV     R5,?V3
   \   000088   EE           MOV     A,R6
   \   000089   FA           MOV     R2,A
   \   00008A   EF           MOV     A,R7
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00008F   85..82       MOV     DPL,?V2
   \   000092   85..83       MOV     DPH,?V3
   \   000095   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000098   E5..         MOV     A,?V2
   \   00009A   2409         ADD     A,#0x9
   \   00009C   F5..         MOV     ?V2,A
   \   00009E   5002         JNC     ??ZDO_ParseMgmtBindRsp_6
   \   0000A0   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_6:
   \   0000A2   F582         MOV     DPL,A
   \   0000A4   85..83       MOV     DPH,?V3
   \   0000A7   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000AA   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_369:
   \   0000AD   85..82       MOV     DPL,?V2
   \   0000B0   85..83       MOV     DPH,?V3
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0000B9   E5..         MOV     A,?V2
   \   0000BB   2403         ADD     A,#0x3
   \   0000BD   F5..         MOV     ?V2,A
   \   0000BF   5002         JNC     ??ZDO_ParseMgmtBindRsp_7
   \   0000C1   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_7:
   \   0000C3   7403         MOV     A,#0x3
   \   0000C5   68           XRL     A,R0
   \   0000C6   7096         JNZ     ??ZDO_ParseMgmtBindRsp_3
   \   0000C8                ; Setup parameters for call to function sAddrExtCpy
   \   0000C8   AC..         MOV     R4,?V2
   \   0000CA   AD..         MOV     R5,?V3
   \   0000CC   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   0000CF   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000D2   85..82       MOV     DPL,?V2
   \   0000D5   85..83       MOV     DPH,?V3
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   A3           INC     DPTR
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   C0E0         PUSH    A
   \   0000E3   12....       LCALL   ?Subroutine139 & 0xFFFF
   3153              }
   3154            }
   \                     ??CrossCallReturnLabel_532:
   \   0000E6   D0E0         POP     A
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   E5..         MOV     A,?V2
   \   0000EB   2409         ADD     A,#0x9
   \   0000ED   F5..         MOV     ?V2,A
   \   0000EF   5083         JNC     ??ZDO_ParseMgmtBindRsp_4
   \   0000F1   05..         INC     ?V3
   \                     ??ZDO_ParseMgmtBindRsp_8:
   \   0000F3   02....       LJMP    ??ZDO_ParseMgmtBindRsp_4 & 0xFFFF
   3155          
   3156            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   0000F6   AA..         MOV     R2,?V0
   \   0000F8   AB..         MOV     R3,?V1
   \   0000FA   02....       LJMP    ??Subroutine226_0 & 0xFFFF
   3157          }
   3158          
   3159          /*********************************************************************
   3160           * @fn          ZDO_ParseUserDescRsp
   3161           *
   3162           * @brief       This function parses the incoming User
   3163           *              Descriptor Response.
   3164           *
   3165           * @param       inMsg - incoming response message
   3166           *
   3167           * @return      a pointer to parsed response structure (NULL if not allocated).
   3168           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3169           *          by the calling function [osal_mem_free()].
   3170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3171          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   3173            ZDO_UserDescRsp_t *pRsp;
   3174            uint8 *msg;
   3175            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V2,#0x0
   3176          
   3177            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   00000B   12....       LCALL   ??Subroutine231_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   00000E   88..         MOV     ?V0,R0
   \   000010   89..         MOV     ?V1,R1
   3178          
   3179            if ( msg[0] == ZSuccess )
   \   000012   8882         MOV     DPL,R0
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   3180            {
   3181              descLen = msg[3];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V2,A
   3182            }
   3183          
   3184            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   E5..         MOV     A,?V2
   \   000021   12....       LCALL   ??Subroutine264_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_660:
   \   000024   3400         ADDC    A,#0x0
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002A   8A..         MOV     ?V4,R2
   \   00002C   8B..         MOV     ?V5,R3
   \   00002E   AE..         MOV     R6,?V4
   \   000030   AF..         MOV     R7,?V5
   3185            if ( pRsp )
   \   000032   EE           MOV     A,R6
   \   000033   4F           ORL     A,R7
   \   000034   603B         JZ      ??ZDO_ParseUserDescRsp_1
   3186            {
   3187              pRsp->status = msg[0];
   \   000036   85..82       MOV     DPL,?V0
   \   000039   85..83       MOV     DPH,?V1
   \   00003C   12....       LCALL   ?Subroutine178 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   00003F   12....       LCALL   ?Subroutine55 & 0xFFFF
   3188              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_85:
   \   000042   E0           MOVX    A,@DPTR
   \   000043   FA           MOV     R2,A
   \   000044   85..82       MOV     DPL,?V0
   \   000047   85..83       MOV     DPH,?V1
   \   00004A   A3           INC     DPTR
   \   00004B   12....       LCALL   ?Subroutine24 & 0xFFFF
   3189              pRsp->length = descLen;
   3190              if ( descLen )
   \                     ??CrossCallReturnLabel_26:
   \   00004E   6021         JZ      ??ZDO_ParseUserDescRsp_1
   3191              {
   3192                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000050                ; Setup parameters for call to function osal_memcpy
   \   000050   E5..         MOV     A,?V0
   \   000052   2404         ADD     A,#0x4
   \   000054   5002         JNC     ??ZDO_ParseUserDescRsp_2
   \   000056   05..         INC     ?V1
   \                     ??ZDO_ParseUserDescRsp_2:
   \   000058   F5..         MOV     ?V4,A
   \   00005A   85....       MOV     ?V5,?V1
   \   00005D   88..         MOV     ?V6,R0
   \   00005F   78..         MOV     R0,#?V4
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000064   12....       LCALL   ?Subroutine194 & 0xFFFF
   3193              }
   3194            }
   \                     ??CrossCallReturnLabel_663:
   \   000067   3F           ADDC    A,R7
   \   000068   FB           MOV     R3,A
   \   000069   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00006C   7403         MOV     A,#0x3
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   3195          
   3196            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000071   02....       LJMP    ?Subroutine6 & 0xFFFF
   3197          }
   3198          
   3199          /*********************************************************************
   3200           * @fn          ZDO_ParseSimpleDescBuf
   3201           *
   3202           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3203           *
   3204           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3205           * @param       desc - SimpleDescriptionFormat_t *
   3206           *
   3207           *              This routine allocates storage for the cluster IDs because
   3208           *              they are 16-bit and need to be aligned to be properly processed.
   3209           *              This routine returns non-zero if an allocation fails.
   3210           *
   3211           *              NOTE: This means that the caller or user of the input structure
   3212           *                    is responsible for freeing the memory
   3213           *
   3214           * @return      0: success
   3215           *              1: failure due to malloc failure.
   3216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3217          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   3219            uint8 num, i;
   3220          
   3221            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ??Subroutine267_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_678:
   \   000014   12....       LCALL   ?Subroutine45 & 0xFFFF
   3222            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_70:
   \   000017   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_682:
   \   00001A   12....       LCALL   ?Subroutine52 & 0xFFFF
   3223            buf += 2;
   \                     ??CrossCallReturnLabel_81:
   \   00001D   5001         JNC     ??ZDO_ParseSimpleDescBuf_0
   \   00001F   0F           INC     R7
   3224            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_683:
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ?Subroutine34 & 0xFFFF
   3225            buf += 2;
   3226            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_46:
   \   00002C   C4           SWAP    A
   \   00002D   540F         ANL     A,#0xf
   3227          
   3228            desc->Reserved = 0;
   \   00002F   8C82         MOV     DPL,R4
   \   000031   8D83         MOV     DPH,R5
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   12....       LCALL   ?Subroutine22 & 0xFFFF
   3229            buf++;
   3230          
   3231            // move in input cluster list (if any). allocate aligned memory.
   3232            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_24:
   \   00003B   F5..         MOV     ?V4,A
   \   00003D   EE           MOV     A,R6
   \   00003E   2404         ADD     A,#0x4
   \   000040   FE           MOV     R6,A
   \   000041   5001         JNC     ??ZDO_ParseSimpleDescBuf_1
   \   000043   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000044   8C82         MOV     DPL,R4
   \   000046   8D83         MOV     DPH,R5
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E5..         MOV     A,?V4
   \   000050   F0           MOVX    @DPTR,A
   3233            if ( num )
   \   000051   6039         JZ      ??ZDO_ParseSimpleDescBuf_2
   3234            {
   3235              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000053                ; Setup parameters for call to function osal_mem_alloc
   \   000053   12....       LCALL   ??Subroutine266_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_672:
   \   000056   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000059   E5..         MOV     A,?V0
   \   00005B   2407         ADD     A,#0x7
   \   00005D   F8           MOV     R0,A
   \   00005E   E4           CLR     A
   \   00005F   35..         ADDC    A,?V1
   \   000061   F9           MOV     R1,A
   \   000062   88..         MOV     ?V2,R0
   \   000064   89..         MOV     ?V3,R1
   \   000066   EA           MOV     A,R2
   \   000067   F8           MOV     R0,A
   \   000068   EB           MOV     A,R3
   \   000069   F9           MOV     R1,A
   \   00006A   85..82       MOV     DPL,?V2
   \   00006D   85..83       MOV     DPH,?V3
   \   000070   12....       LCALL   ??Subroutine237_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   000073   7003         JNZ     $+5
   \   000075   02....       LJMP    ??ZDO_ParseSimpleDescBuf_3 & 0xFFFF
   3236              {
   3237                // malloc failed. we're done.
   3238                return 1;
   3239              }
   3240              for (i=0; i<num; ++i)
   \   000078   7A00         MOV     R2,#0x0
   \   00007A   800A         SJMP    ??ZDO_ParseSimpleDescBuf_4
   3241              {
   3242                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   00007C   12....       LCALL   ?Subroutine63 & 0xFFFF
   3243                buf += 2;
   3244              }
   \                     ??CrossCallReturnLabel_97:
   \   00007F   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_684:
   \   000082   5001         JNC     ??ZDO_ParseSimpleDescBuf_6
   \   000084   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000085   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   000086   EA           MOV     A,R2
   \   000087   C3           CLR     C
   \   000088   95..         SUBB    A,?V4
   \   00008A   40F0         JC      ??ZDO_ParseSimpleDescBuf_5
   3245            }
   3246          
   3247            // move in output cluster list (if any). allocate aligned memory.
   3248            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   00008C   8E82         MOV     DPL,R6
   \   00008E   8F83         MOV     DPH,R7
   \   000090   E0           MOVX    A,@DPTR
   \   000091   F5..         MOV     ?V2,A
   \   000093   A3           INC     DPTR
   \   000094   AE82         MOV     R6,DPL
   \   000096   AF83         MOV     R7,DPH
   \   000098   85..82       MOV     DPL,?V0
   \   00009B   85..83       MOV     DPH,?V1
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   F0           MOVX    @DPTR,A
   3249            if (num)
   \   0000A8   6070         JZ      ??ZDO_ParseSimpleDescBuf_7
   3250            {
   3251              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000AA                ; Setup parameters for call to function osal_mem_alloc
   \   0000AA   12....       LCALL   ??Subroutine266_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_673:
   \   0000AD   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000B0   8A..         MOV     ?V4,R2
   \   0000B2   8B..         MOV     ?V5,R3
   \   0000B4   A8..         MOV     R0,?V4
   \   0000B6   A9..         MOV     R1,?V5
   \   0000B8   85..82       MOV     DPL,?V0
   \   0000BB   85..83       MOV     DPH,?V1
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   12....       LCALL   ??Subroutine245_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   0000CB   7036         JNZ     ??ZDO_ParseSimpleDescBuf_8
   3252              {
   3253                // malloc failed. free input cluster list memory if there is any
   3254                if ( desc->pAppInClusterList != NULL )
   \   0000CD   85..82       MOV     DPL,?V0
   \   0000D0   85..83       MOV     DPH,?V1
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   12....       LCALL   ??Subroutine234_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   0000DD   6020         JZ      ??ZDO_ParseSimpleDescBuf_3
   3255                {
   3256                  osal_mem_free(desc->pAppInClusterList);
   \   0000DF   E5..         MOV     A,?V0
   \   0000E1   2407         ADD     A,#0x7
   \   0000E3   F5..         MOV     ?V2,A
   \   0000E5   E4           CLR     A
   \   0000E6   35..         ADDC    A,?V1
   \   0000E8   F5..         MOV     ?V3,A
   \   0000EA                ; Setup parameters for call to function osal_mem_free
   \   0000EA   85..82       MOV     DPL,?V2
   \   0000ED   F583         MOV     DPH,A
   \   0000EF   12....       LCALL   ??Subroutine241_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_502:
   \   0000F2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   3257          
   3258                  desc->pAppInClusterList = NULL;
   \   0000F5   85..82       MOV     DPL,?V2
   \   0000F8   85..83       MOV     DPH,?V3
   \   0000FB   E4           CLR     A
   \   0000FC   F0           MOVX    @DPTR,A
   \   0000FD   A3           INC     DPTR
   \   0000FE   F0           MOVX    @DPTR,A
   3259                }
   3260                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   0000FF   7901         MOV     R1,#0x1
   \   000101   8019         SJMP    ??ZDO_ParseSimpleDescBuf_9
   3261              }
   3262              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_8:
   \   000103   7A00         MOV     R2,#0x0
   \   000105   800D         SJMP    ??ZDO_ParseSimpleDescBuf_10
   3263              {
   3264                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_11:
   \   000107   12....       LCALL   ?Subroutine63 & 0xFFFF
   3265                buf += 2;
   3266              }
   \                     ??CrossCallReturnLabel_98:
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   A3           INC     DPTR
   \   00010D   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_685:
   \   000110   5001         JNC     ??ZDO_ParseSimpleDescBuf_12
   \   000112   0F           INC     R7
   \                     ??ZDO_ParseSimpleDescBuf_12:
   \   000113   0A           INC     R2
   \                     ??ZDO_ParseSimpleDescBuf_10:
   \   000114   EA           MOV     A,R2
   \   000115   C3           CLR     C
   \   000116   95..         SUBB    A,?V2
   \   000118   40ED         JC      ??ZDO_ParseSimpleDescBuf_11
   3267            }
   3268            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_7:
   \   00011A   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_9:
   \   00011C   02....       LJMP    ??Subroutine253_0 & 0xFFFF
   3269          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002                REQUIRE ??Subroutine268_0
   \   000002                ; // Fall through to label ??Subroutine268_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   12....       LCALL   ?Subroutine176 & 0xFFFF
   \                     ??CrossCallReturnLabel_692:
   \   000009   EC           MOV     A,R4
   \   00000A   28           ADD     A,R0
   \   00000B   E4           CLR     A
   \   00000C   39           ADDC    A,R1
   \   00000D   FD           MOV     R5,A
   \   00000E   EA           MOV     A,R2
   \   00000F   25E0         ADD     A,0xE0 /* A   */
   \   000011   F8           MOV     R0,A
   \   000012   E4           CLR     A
   \   000013   33           RLC     A
   \   000014   F9           MOV     R1,A
   \   000015   85..82       MOV     DPL,?V0
   \   000018   85..83       MOV     DPH,?V1
   \   00001B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FB           MOV     R3,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   39           ADDC    A,R1
   \   00000D   8B82         MOV     DPL,R3
   \   00000F   F583         MOV     DPH,A
   \   000011   EC           MOV     A,R4
   \   000012                REQUIRE ??Subroutine269_0
   \   000012                ; // Fall through to label ??Subroutine269_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   000003   EE           MOV     A,R6
   \   000004   2402         ADD     A,#0x2
   \   000006   FE           MOV     R6,A
   \   000007   22           RET
   3270          
   3271          /*********************************************************************
   3272           * @fn          ZDO_ParseDeviceAnnce
   3273           *
   3274           * @brief       Parse a Device Announce message.
   3275           *
   3276           * @param       inMsg - Incoming message
   3277           * @param       pAnnce - place to put the parsed information
   3278           *
   3279           * @return      none
   3280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3281          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3283            uint8 *msg;
   3284          
   3285            // Parse incoming message
   3286            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   00000C   12....       LCALL   ?Subroutine81 & 0xFFFF
   3287            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_133:
   \   00000F   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_642:
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   12....       LCALL   ?Subroutine52 & 0xFFFF
   3288            msg += 2;
   \                     ??CrossCallReturnLabel_82:
   \   000019   5001         JNC     ??ZDO_ParseDeviceAnnce_0
   \   00001B   0F           INC     R7
   3289            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??ZDO_ParseDeviceAnnce_0:
   \   00001C                ; Setup parameters for call to function sAddrExtCpy
   \   00001C   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   00001F   35..         ADDC    A,?V1
   \   000021   FB           MOV     R3,A
   \   000022   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   3290            msg += Z_EXTADDR_LEN;
   3291            pAnnce->capabilities = *msg;
   \   000025   8E82         MOV     DPL,R6
   \   000027   8F83         MOV     DPH,R7
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   F0           MOVX    @DPTR,A
   3292          }
   \   000034   02....       LJMP    ??Subroutine210_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ?Subroutine173 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine173:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   85..82       MOV     DPL,?V0
   \   000009   85..83       MOV     DPH,?V1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   22           RET
   3293          
   3294          /*********************************************************************
   3295           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3296           *
   3297           * @brief       This function handles parsing of the incoming Management
   3298           *              Network Update notify.
   3299           *
   3300           * @param       inMsg - incoming message (request)
   3301           *
   3302           * @return      a pointer to parsed response structure (NULL if not allocated).
   3303           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3304           *          by the calling function [osal_mem_free()].
   3305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3306          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3307          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   3308            uint8 status;
   3309            uint32 scannedChannels = 0;
   \   000005   75..00       MOV     ?V4,#0x0
   \   000008   75..00       MOV     ?V5,#0x0
   \   00000B   75..00       MOV     ?V6,#0x0
   \   00000E   75..00       MOV     ?V7,#0x0
   3310            uint16 totalTransmissions = 0;
   \   000011   75..00       MOV     ?V0,#0x0
   \   000014   75..00       MOV     ?V1,#0x0
   3311            uint16 transmissionFailures = 0;
   \   000017   75..00       MOV     ?V2,#0x0
   \   00001A   75..00       MOV     ?V3,#0x0
   3312            uint8 listCount = 0;
   \   00001D   75..00       MOV     ?V11,#0x0
   3313            uint8 *msg = inMsg->asdu;
   \   000020   12....       LCALL   ?Subroutine57 & 0xFFFF
   3314            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3315          
   3316            status = *msg++;
   \                     ??CrossCallReturnLabel_656:
   \   000023   F5..         MOV     ?V10,A
   \   000025   A3           INC     DPTR
   \   000026   AE82         MOV     R6,DPL
   \   000028   AF83         MOV     R7,DPH
   3317            if ( status == ZSuccess )
   \   00002A   7041         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   3318            {
   3319              scannedChannels = osal_build_uint32( msg, 4 );
   \   00002C                ; Setup parameters for call to function osal_build_uint32
   \   00002C   7904         MOV     R1,#0x4
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000035   8A..         MOV     ?V4,R2
   \   000037   8B..         MOV     ?V5,R3
   \   000039   8C..         MOV     ?V6,R4
   \   00003B   8D..         MOV     ?V7,R5
   3320              msg += 4;
   \   00003D   EE           MOV     A,R6
   \   00003E   2404         ADD     A,#0x4
   \   000040   FE           MOV     R6,A
   \   000041   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_1
   \   000043   0F           INC     R7
   3321              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   000044   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_688:
   \   000047   F5..         MOV     ?V0,A
   \   000049   E4           CLR     A
   \   00004A   39           ADDC    A,R1
   \   00004B   F5..         MOV     ?V1,A
   3322              msg += 2;
   \   00004D   EE           MOV     A,R6
   \   00004E   2402         ADD     A,#0x2
   \   000050   FE           MOV     R6,A
   \   000051   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_2
   \   000053   0F           INC     R7
   3323              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_2:
   \   000054   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_689:
   \   000057   F5..         MOV     ?V2,A
   \   000059   E4           CLR     A
   \   00005A   39           ADDC    A,R1
   \   00005B   F5..         MOV     ?V3,A
   3324              msg += 2;
   3325              listCount = *msg++;
   \   00005D   8E82         MOV     DPL,R6
   \   00005F   8F83         MOV     DPH,R7
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   F5..         MOV     ?V11,A
   \   000066   EE           MOV     A,R6
   \   000067   2403         ADD     A,#0x3
   \   000069   FE           MOV     R6,A
   \   00006A   5001         JNC     ??ZDO_ParseMgmtNwkUpdateNotify_0
   \   00006C   0F           INC     R7
   3326            }
   3327          
   3328            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   00006D                ; Setup parameters for call to function osal_mem_alloc
   \   00006D   E5..         MOV     A,?V11
   \   00006F   12....       LCALL   ??Subroutine258_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   000072   3400         ADDC    A,#0x0
   \   000074   FB           MOV     R3,A
   \   000075   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000078   8A..         MOV     ?V8,R2
   \   00007A   8B..         MOV     ?V9,R3
   3329          
   3330            if ( pRsp )
   \   00007C   EA           MOV     A,R2
   \   00007D   45..         ORL     A,?V9
   \   00007F   604D         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_3
   3331            {
   3332              pRsp->status = status;
   \   000081   8A82         MOV     DPL,R2
   \   000083   8B83         MOV     DPH,R3
   \   000085   E5..         MOV     A,?V10
   \   000087   F0           MOVX    @DPTR,A
   3333              pRsp->scannedChannels = scannedChannels;
   \   000088   A3           INC     DPTR
   \   000089   78..         MOV     R0,#?V4
   \   00008B   12....       LCALL   ?L_MOV_TO_X
   3334              pRsp->totalTransmissions = totalTransmissions;
   \   00008E   8A82         MOV     DPL,R2
   \   000090   8B83         MOV     DPH,R3
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E5..         MOV     A,?V0
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   E5..         MOV     A,?V1
   \   00009D   12....       LCALL   ?Subroutine16 & 0xFFFF
   3335              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_11:
   \   0000A0   E5..         MOV     A,?V2
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   E5..         MOV     A,?V3
   \   0000A6   12....       LCALL   ?Subroutine16 & 0xFFFF
   3336              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_12:
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   E5..         MOV     A,?V11
   \   0000AD   F0           MOVX    @DPTR,A
   3337          
   3338              // Allocate a buffer big enough to handle the list.
   3339              if ( listCount > 0 )
   \   0000AE   601E         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_3
   3340              {
   3341                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0000B0                ; Setup parameters for call to function osal_memcpy
   \   0000B0   8E..         MOV     ?V0,R6
   \   0000B2   8F..         MOV     ?V1,R7
   \   0000B4   75..00       MOV     ?V2,#0x0
   \   0000B7   78..         MOV     R0,#?V0
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BC   AC..         MOV     R4,?V11
   \   0000BE   7D00         MOV     R5,#0x0
   \   0000C0   12....       LCALL   ?Subroutine187 & 0xFFFF
   3342              }
   3343            }
   \                     ??CrossCallReturnLabel_619:
   \   0000C3   35..         ADDC    A,?V9
   \   0000C5   FB           MOV     R3,A
   \   0000C6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000C9   7403         MOV     A,#0x3
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   3344          
   3345            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_3:
   \   0000CE   AA..         MOV     R2,?V8
   \   0000D0   AB..         MOV     R3,?V9
   \   0000D2   02....       LJMP    ?Subroutine7 & 0xFFFF
   3346          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine270_0
   \   000004                ; // Fall through to label ??Subroutine270_0
   3347          
   3348          /*********************************************************************
   3349           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3350           *
   3351           * @brief       This function handles parsing the incoming Management
   3352           *              Network Update request and starts the request (if needed).
   3353           *
   3354           * @param       inMsg - incoming message (request)
   3355           * @param       pReq - pointer to place to parse message to
   3356           *
   3357           * @return      none
   3358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3359          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3360          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0,R4
   \   000007   8D..         MOV     ?V1,R5
   3361            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   00000C   12....       LCALL   ?Subroutine93 & 0xFFFF
   3362          
   3363            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_151:
   \   00000F   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000012   EA           MOV     A,R2
   \   000013   F8           MOV     R0,A
   \   000014   EB           MOV     A,R3
   \   000015   F9           MOV     R1,A
   \   000016   EC           MOV     A,R4
   \   000017   FA           MOV     R2,A
   \   000018   ED           MOV     A,R5
   \   000019   FB           MOV     R3,A
   \   00001A   85..82       MOV     DPL,?V0
   \   00001D   85..83       MOV     DPH,?V1
   \   000020   12....       LCALL   ?XSTORE_R0123
   3364            msg += 4;
   3365            pReq->scanDuration = *msg++;
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F8           MOV     R0,A
   \   00002D   85..82       MOV     DPL,?V0
   \   000030   85..83       MOV     DPH,?V1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
   3366          
   3367            if ( pReq->scanDuration <= 0x05 )
   \   000038   C3           CLR     C
   \   000039   9406         SUBB    A,#0x6
   \   00003B   5009         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3368            {
   3369              // Request is to scan over channelMask
   3370              pReq->scanCount = *msg;
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   12....       LCALL   ?Subroutine173 & 0xFFFF
   3371            }
   \                     ??CrossCallReturnLabel_288:
   \   000044   8040         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3372            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000046   85..82       MOV     DPL,?V0
   \   000049   85..83       MOV     DPH,?V1
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   64FE         XRL     A,#0xfe
   \   000053   600E         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   000055   85..82       MOV     DPL,?V0
   \   000058   85..83       MOV     DPH,?V1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F4           CPL     A
   \   000061   7024         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3373            {
   3374              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3375              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   EE           MOV     A,R6
   \   00006C   2406         ADD     A,#0x6
   \   00006E   FE           MOV     R6,A
   \   00006F   5001         JNC     ??ZDO_ParseMgmtNwkUpdateReq_4
   \   000071   0F           INC     R7
   3376          
   3377              if ( pReq->scanDuration == 0xFF )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_4:
   \   000072   85..82       MOV     DPL,?V0
   \   000075   85..83       MOV     DPH,?V1
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F4           CPL     A
   \   00007E   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3378              {
   3379                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000080   12....       LCALL   ?Subroutine68 & 0xFFFF
   3380              }
   3381            }
   \                     ??CrossCallReturnLabel_109:
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000086   F0           MOVX    @DPTR,A
   3382          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000087   02....       LJMP    ??Subroutine210_0 & 0xFFFF
   3383          
   3384          /*********************************************************************
   3385           * @fn          ZDO_ParseEndDeviceTimeoutRsp
   3386           *
   3387           * @brief       Parse the End_Device_Timeout_rsp message.
   3388           *
   3389           * @param       inMsg - incoming message.
   3390           * @param       pRsp - place to put the parsed information.
   3391           *
   3392           * @return      none
   3393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3394          void ZDO_ParseEndDeviceTimeoutRsp( zdoIncomingMsg_t *inMsg, uint16 *pRsp )
   \                     ZDO_ParseEndDeviceTimeoutRsp:
   3395          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3396            *pRsp = inMsg->asdu[0];
   \   000004   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000007   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   8D83         MOV     DPH,R5
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   3397          }
   \   000012   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdpExternalStateTaskID>`:
   \   000000   FFFF         DW -1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zdoSendStateChangeMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdoSendStateChangeMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateNwkStatus::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CompareClusterLists::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CompareClusterLists

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AnyClusterMatches::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessNodeDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessPowerDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessSimpleDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessActiveEPReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConvertOTAClusters::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMatchDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateAddrManager::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessServerDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessEndDeviceTimeoutReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessEndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLqiReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_FinishProcessingMgmtNwkDiscReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_FinishProcessingMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtRtgReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtDirectJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtLeaveReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessMgmtPermitJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NLME_PermitJoiningTimeout::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ProcessDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_BuildSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_MatchEndDeviceBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_MatchEndDeviceBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RemoveMatchMemory::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveMatchMemory

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_CopyMatchInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_CopyMatchInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDMatchSendState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDMatchSendState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_EndDeviceBindMatchTimeoutCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceBindMatchTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseBindUnbindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseAddrRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseNodeDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParsePowerDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEPListRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseServerDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtLqiRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmNwkDiscRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtRtgRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtBindRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseUserDescRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseSimpleDescBuf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseDeviceAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateNotify::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseMgmtNwkUpdateReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ParseEndDeviceTimeoutRsp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceTimeoutRsp
   3398          
   3399          /*********************************************************************
   3400          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   NLME_PermitJoiningTimeout
        2      0   -> ZDSecMgrPermitJoiningTimeout
      1     70   ZDMatchSendState
        0     37   -> APS_SetEndDeviceBindTimeout
        0     37   -> ZDO_RemoveMatchMemory
        0     45   -> ZDP_BindUnbindReq
        0     42   -> ZDP_SendData
        0     37   -> sAddrExtCpy
      0     43   ZDO_AnyClusterMatches
      1     10   ZDO_BuildSimpleDescBuf
      0     45   ZDO_CompareClusterLists
      0     39   ZDO_ConvertOTAClusters
      0     43   ZDO_CopyMatchInfo
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      2      0   ZDO_EndDeviceBindMatchTimeoutCB
        2      0   -> ZDMatchSendState
      1     17   ZDO_EndDeviceTimeoutCB
        0     17   -> ZDP_SendData
        0     12   -> osal_mem_free
      1     20   ZDO_FinishProcessingMgmtNwkDiscReq
        0     15   -> NLME_GetProtocolVersion
        0     15   -> NLME_NwkDiscTerm
        0     20   -> ZDP_MgmtNwkDiscRsp
        0     15   -> ZMacGetReq
        0     15   -> nwk_getNwkDescList
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     15   -> sAddrExtCpy
      2      0   ZDO_Init
        2      0   -> APS_ReflectorInit
        2      0   -> NLME_CoordinatorInit
        2      0   -> NLME_DeviceJoiningInit
        2      0   -> sAddrExtCpy
      1     30   ZDO_MatchEndDeviceBind
        0     25   -> APS_SetEndDeviceBindTimeout
        0     25   -> ZDMatchSendState
        0     29   -> ZDO_CompareClusterLists
        0     25   -> ZDO_CopyMatchInfo
        0     25   -> ZDO_RemoveMatchMemory
        0     30   -> ZDP_SendData
        0     25   -> osal_mem_alloc
        0     28   -> osal_memcpy
        0     25   -> osal_memset
      1     14   ZDO_ParseAddrRsp
        0     14   -> osal_mem_alloc
        0     14   -> sAddrExtCpy
      1     10   ZDO_ParseBindUnbindReq
        0     10   -> sAddrExtCpy
      1     52   ZDO_ParseDeviceAnnce
        0     10   -> sAddrExtCpy
      1     18   ZDO_ParseEPListRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      1     12   ZDO_ParseEndDeviceBindReq
        0     12   -> ZDO_ConvertOTAClusters
        0     12   -> osal_mem_alloc
        0     12   -> sAddrExtCpy
      2      0   ZDO_ParseEndDeviceTimeoutRsp
      1     16   ZDO_ParseMgmNwkDiscRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     18   ZDO_ParseMgmtBindRsp
        0     18   -> osal_mem_alloc
        0     18   -> sAddrExtCpy
      1     16   ZDO_ParseMgmtLqiRsp
        0     16   -> osal_mem_alloc
        0     16   -> sAddrExtCpy
      1     25   ZDO_ParseMgmtNwkUpdateNotify
        0     22   -> osal_build_uint32
        0     22   -> osal_mem_alloc
        0     25   -> osal_memcpy
      1     10   ZDO_ParseMgmtNwkUpdateReq
        0     10   -> osal_build_uint32
      1     14   ZDO_ParseMgmtRtgRsp
        0     14   -> osal_mem_alloc
      2     12   ZDO_ParseNodeDescRsp
      1     12   ZDO_ParsePowerDescRsp
      1      9   ZDO_ParseServerDiscRsp
      1     23   ZDO_ParseSimpleDescBuf
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      1      9   ZDO_ParseSimpleDescRsp
        0      9   -> ZDO_ParseSimpleDescBuf
      1     18   ZDO_ParseUserDescRsp
        0     15   -> osal_mem_alloc
        0     18   -> osal_memcpy
      0     21   ZDO_ProcessActiveEPReq
        0     14   -> NLME_GetShortAddr
        0     21   -> ZDP_EPRsp
        0     14   -> afEndPoints
        0     14   -> afNumEndPoints
      1     32   ZDO_ProcessBindUnbindReq
        0     28   -> APSME_BindRequest
        0     27   -> APSME_LookupNwkAddr
        0     28   -> APSME_UnBindRequest
        0     27   -> NLME_GetExtAddr
        0     27   -> ZDApp_GetEmptyPendingBindReq
        0     27   -> ZDApp_NVUpdate
        0     27   -> ZDP_NwkAddrReq
        0     32   -> ZDP_SendData
        0     27   -> bindAddrIndexGet
        0     30   -> osal_memcpy
        0     31   -> osal_start_timerEx
        0     27   -> sAddrExtCmp
        0     27   -> sAddrExtCpy
      0     42   ZDO_ProcessDeviceAnnce
        0     42   -> AddrMgrEntryLookupExt
        0     42   -> AddrMgrEntryLookupNwk
        0     42   -> AddrMgrEntryUpdate
        0     42   -> AddrMgrExtAddrSet
        0     42   -> AssocChangeNwkAddr
        0     42   -> AssocGetWithExt
        0     42   -> AssocRemove
        0     42   -> NLME_CheckNewAddrSet
        0     42   -> NLME_GetCoordExtAddr
        0     42   -> NLME_GetCoordShortAddr
        0     42   -> NLME_GetExtAddr
        0     42   -> NLME_GetShortAddr
        0     42   -> RTG_RemoveRtgEntry
        0     42   -> ZDApp_NVUpdate
        0     42   -> ZDO_ParseDeviceAnnce
        0     42   -> ZMacSetReq
        0     42   -> nwkNeighborRemoveAllStranded
        0     42   -> nwkNeighborUpdateNwkAddr
        0     42   -> osal_memset
        0     42   -> sAddrExtCmp
      0     18   ZDO_ProcessEndDeviceTimeoutReq
        0     13   -> AssocGetWithExt
        0     13   -> ZDApp_NVUpdate
        0     18   -> ZDP_SendData
      1     36   ZDO_ProcessMatchDescReq
        0     29   -> NLME_IsAddressBroadcast
        0     31   -> ZDO_AnyClusterMatches
        0     29   -> ZDO_ConvertOTAClusters
        0     36   -> ZDP_EPRsp
        0     29   -> osal_mem_alloc
        0     29   -> osal_mem_free
        0     32   -> osal_memcpy
        0     29   -> osal_msg_allocate
        0     29   -> osal_msg_send
      0     25   ZDO_ProcessMgmtBindReq
        0     20   -> APSME_GetRequest
        0     25   -> ZDP_MgmtBindRsp
        0     20   -> osal_mem_alloc
        0     20   -> osal_mem_free
      1     16   ZDO_ProcessMgmtDirectJoinReq
        0     11   -> NLME_DirectJoinRequest
        0     16   -> ZDP_SendData
      1     23   ZDO_ProcessMgmtLeaveReq
        0     18   -> AddrMgrExtAddrValid
        0     18   -> NLME_GetExtAddr
        0     18   -> NLME_LeaveReq
        0     18   -> NLME_SetPollRate
        0     23   -> ZDP_SendData
        0     18   -> sAddrExtCmp
      1     64   ZDO_ProcessMgmtLqiReq
        0     59   -> AddrMgrEntryLookupNwk
        0     59   -> AssocCount
        0     59   -> AssocFindDevice
        0     59   -> NLME_GetRequest
        0     64   -> ZDP_MgmtLqiRsp
        0     59   -> osal_mem_alloc
        0     59   -> osal_mem_free
        0     59   -> osal_memset
        0     59   -> sAddrExtCpy
      1     17   ZDO_ProcessMgmtNwkDiscReq
        0     17   -> NLME_NwkDiscReq2
        0     17   -> NLME_NwkDiscTerm
        0     17   -> osal_build_uint32
      1     16   ZDO_ProcessMgmtPermitJoinReq
        0     11   -> NLME_PermitJoiningRequest
        0     16   -> ZDP_SendData
        0     11   -> ZDSecMgrPermitJoining
      0     22   ZDO_ProcessMgmtRtgReq
        0     17   -> NLME_GetRequest
        0     22   -> ZDP_MgmtRtgRsp
        0     17   -> osal_mem_alloc
        0     17   -> osal_mem_free
      0     14   ZDO_ProcessNodeDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_NodeDescMsg
      0     14   ZDO_ProcessPowerDescReq
        0     14   -> ZDP_GenericRsp
        0     12   -> ZDP_PowerDescMsg
      0     14   ZDO_ProcessServerDiscReq
        0     14   -> ZDP_ServerDiscRsp
      0     12   ZDO_ProcessSimpleDescReq
        0     12   -> ZDP_SimpleDescMsg
        0     12   -> afFindSimpleDesc
        0     12   -> osal_mem_free
      0     33   ZDO_ProcessUserDescReq
        0     33   -> ZDP_GenericRsp
        0     32   -> ZDP_UserDescRsp
        0     33   -> osal_nv_read
      1     41   ZDO_ProcessUserDescSet
        0     41   -> ZDP_SendData
        0     39   -> osal_memcpy
        0     40   -> osal_nv_write
      2     37   ZDO_RemoveMatchMemory
        2      0   -> osal_mem_free
      0     31   ZDO_StartDevice
        0     24   -> NLME_NetworkDiscoveryRequest
        0     31   -> NLME_NetworkFormationRequest
        0     24   -> NLME_OrphanJoinRequest
        0     24   -> NLME_StartRouterRequest
        0     24   -> nwk_ScanJoiningOrphan
        0     28   -> osal_start_timerEx
      2     13   ZDO_UpdateAddrManager
        2     13   -> AddrMgrEntryUpdate
        2     13   -> AddrMgrExtAddrSet
      0      9   ZDO_UpdateNwkStatus
        0      9   -> NLME_GetExtAddr
        0      9   -> NLME_GetShortAddr
        0      9   -> zdoSendStateChangeMsg
      1     19   zdoSendStateChangeMsg
        0     10   -> osal_msg_allocate
        0     10   -> osal_msg_find
        0     10   -> osal_msg_send
        0     10   -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for zdpExternalStateTaskID>
       7  ??Subroutine206_0
       5  ??Subroutine207_0
       5  ??Subroutine208_0
       3  ??Subroutine209_0
       5  ??Subroutine210_0
       5  ??Subroutine211_0
       6  ??Subroutine212_0
       5  ??Subroutine213_0
       2  ??Subroutine214_0
       6  ??Subroutine215_0
       4  ??Subroutine216_0
       7  ??Subroutine217_0
       2  ??Subroutine218_0
       9  ??Subroutine219_0
       1  ??Subroutine220_0
       4  ??Subroutine221_0
       5  ??Subroutine222_0
       6  ??Subroutine223_0
       1  ??Subroutine224_0
       4  ??Subroutine225_0
       5  ??Subroutine226_0
       1  ??Subroutine227_0
       5  ??Subroutine228_0
       8  ??Subroutine229_0
      10  ??Subroutine230_0
       2  ??Subroutine231_0
       4  ??Subroutine232_0
       2  ??Subroutine233_0
       5  ??Subroutine234_0
       6  ??Subroutine235_0
       6  ??Subroutine236_0
       6  ??Subroutine237_0
       5  ??Subroutine238_0
       9  ??Subroutine239_0
       6  ??Subroutine240_0
       4  ??Subroutine241_0
       2  ??Subroutine242_0
       5  ??Subroutine243_0
       6  ??Subroutine244_0
       6  ??Subroutine245_0
       4  ??Subroutine246_0
       4  ??Subroutine247_0
       8  ??Subroutine248_0
       8  ??Subroutine249_0
       5  ??Subroutine250_0
       8  ??Subroutine251_0
       4  ??Subroutine252_0
       5  ??Subroutine253_0
       6  ??Subroutine254_0
       5  ??Subroutine255_0
       5  ??Subroutine256_0
       5  ??Subroutine257_0
       5  ??Subroutine258_0
       3  ??Subroutine259_0
       5  ??Subroutine260_0
       6  ??Subroutine261_0
       4  ??Subroutine262_0
      13  ??Subroutine263_0
       5  ??Subroutine264_0
       6  ??Subroutine265_0
       7  ??Subroutine266_0
       6  ??Subroutine267_0
      10  ??Subroutine268_0
       9  ??Subroutine269_0
       8  ??Subroutine270_0
       7  ?Subroutine0
       2  ?Subroutine1
       5  ?Subroutine10
      16  ?Subroutine100
       8  ?Subroutine101
       4  ?Subroutine102
       7  ?Subroutine103
       4  ?Subroutine104
       4  ?Subroutine105
       9  ?Subroutine106
      12  ?Subroutine107
       5  ?Subroutine108
      13  ?Subroutine109
      41  ?Subroutine11
       7  ?Subroutine110
       1  ?Subroutine111
       4  ?Subroutine112
       2  ?Subroutine113
      11  ?Subroutine114
      16  ?Subroutine115
      13  ?Subroutine116
      14  ?Subroutine117
       2  ?Subroutine118
       4  ?Subroutine119
      26  ?Subroutine12
       4  ?Subroutine120
       6  ?Subroutine121
       9  ?Subroutine122
       4  ?Subroutine123
       4  ?Subroutine124
       4  ?Subroutine125
       2  ?Subroutine126
       1  ?Subroutine127
      11  ?Subroutine128
      10  ?Subroutine129
      20  ?Subroutine13
       3  ?Subroutine130
       3  ?Subroutine131
      27  ?Subroutine132
       9  ?Subroutine133
      21  ?Subroutine134
       6  ?Subroutine135
       5  ?Subroutine136
       5  ?Subroutine137
       1  ?Subroutine138
       1  ?Subroutine139
      16  ?Subroutine14
      12  ?Subroutine140
       6  ?Subroutine141
      10  ?Subroutine142
       4  ?Subroutine143
       8  ?Subroutine144
       4  ?Subroutine145
       8  ?Subroutine146
       1  ?Subroutine147
       4  ?Subroutine148
      10  ?Subroutine149
      17  ?Subroutine15
       4  ?Subroutine150
       9  ?Subroutine151
      11  ?Subroutine152
       1  ?Subroutine153
       9  ?Subroutine154
       9  ?Subroutine155
      13  ?Subroutine156
       8  ?Subroutine157
       6  ?Subroutine158
       6  ?Subroutine159
       8  ?Subroutine16
       7  ?Subroutine160
       1  ?Subroutine161
       9  ?Subroutine162
       4  ?Subroutine163
       4  ?Subroutine164
      20  ?Subroutine165
       4  ?Subroutine166
      16  ?Subroutine167
      13  ?Subroutine168
       9  ?Subroutine169
      13  ?Subroutine17
       7  ?Subroutine170
       3  ?Subroutine171
       6  ?Subroutine172
      18  ?Subroutine173
       3  ?Subroutine174
       5  ?Subroutine175
       7  ?Subroutine176
       8  ?Subroutine177
       6  ?Subroutine178
       7  ?Subroutine179
      15  ?Subroutine18
       1  ?Subroutine180
      19  ?Subroutine181
      11  ?Subroutine182
       5  ?Subroutine183
       6  ?Subroutine184
       7  ?Subroutine185
       5  ?Subroutine186
       1  ?Subroutine187
       9  ?Subroutine188
       1  ?Subroutine189
      19  ?Subroutine19
       3  ?Subroutine190
       9  ?Subroutine191
      10  ?Subroutine192
       9  ?Subroutine193
       5  ?Subroutine194
       7  ?Subroutine195
       9  ?Subroutine196
       9  ?Subroutine197
       7  ?Subroutine198
       6  ?Subroutine199
       5  ?Subroutine2
      18  ?Subroutine20
       6  ?Subroutine200
       7  ?Subroutine201
       9  ?Subroutine202
      10  ?Subroutine203
       1  ?Subroutine204
       9  ?Subroutine205
       3  ?Subroutine21
       5  ?Subroutine22
       6  ?Subroutine23
      17  ?Subroutine24
       8  ?Subroutine25
      18  ?Subroutine26
      18  ?Subroutine27
       9  ?Subroutine28
       4  ?Subroutine29
       4  ?Subroutine3
       9  ?Subroutine30
       8  ?Subroutine31
      12  ?Subroutine32
       6  ?Subroutine33
       5  ?Subroutine34
       5  ?Subroutine35
       4  ?Subroutine36
       5  ?Subroutine37
       7  ?Subroutine38
       5  ?Subroutine39
       3  ?Subroutine4
       8  ?Subroutine40
       6  ?Subroutine41
       6  ?Subroutine42
       4  ?Subroutine43
      13  ?Subroutine44
       8  ?Subroutine45
       8  ?Subroutine46
       6  ?Subroutine47
      10  ?Subroutine48
       7  ?Subroutine49
       3  ?Subroutine5
       7  ?Subroutine50
       1  ?Subroutine51
       8  ?Subroutine52
       6  ?Subroutine53
       6  ?Subroutine54
       4  ?Subroutine55
       4  ?Subroutine56
       3  ?Subroutine57
       6  ?Subroutine58
       9  ?Subroutine59
       4  ?Subroutine6
      17  ?Subroutine60
      35  ?Subroutine61
       6  ?Subroutine62
      28  ?Subroutine63
       4  ?Subroutine64
      14  ?Subroutine65
      38  ?Subroutine66
      17  ?Subroutine67
      21  ?Subroutine68
       4  ?Subroutine69
       5  ?Subroutine7
       9  ?Subroutine70
       9  ?Subroutine71
       9  ?Subroutine72
       9  ?Subroutine73
       4  ?Subroutine74
      11  ?Subroutine75
      14  ?Subroutine76
       7  ?Subroutine77
       7  ?Subroutine78
      10  ?Subroutine79
       3  ?Subroutine8
      10  ?Subroutine80
       7  ?Subroutine81
       6  ?Subroutine82
      21  ?Subroutine83
       2  ?Subroutine84
      12  ?Subroutine85
      12  ?Subroutine86
      12  ?Subroutine87
       5  ?Subroutine88
      13  ?Subroutine89
       5  ?Subroutine9
      17  ?Subroutine90
       3  ?Subroutine91
       3  ?Subroutine92
      14  ?Subroutine93
       2  ?Subroutine94
       3  ?Subroutine95
       1  ?Subroutine96
       8  ?Subroutine97
       4  ?Subroutine98
      11  ?Subroutine99
      16  NLME_PermitJoiningTimeout
       6  NLME_PermitJoiningTimeout::?relay
     611  ZDMatchSendState
       6  ZDMatchSendState::?relay
      52  ZDOBuildBuf
      75  ZDO_AnyClusterMatches
       6  ZDO_AnyClusterMatches::?relay
     210  ZDO_BuildSimpleDescBuf
       6  ZDO_BuildSimpleDescBuf::?relay
     109  ZDO_CompareClusterLists
       6  ZDO_CompareClusterLists::?relay
      63  ZDO_ConvertOTAClusters
       6  ZDO_ConvertOTAClusters::?relay
     226  ZDO_CopyMatchInfo
       6  ZDO_CopyMatchInfo::?relay
       2  ZDO_EDBind
      16  ZDO_EndDeviceBindMatchTimeoutCB
       6  ZDO_EndDeviceBindMatchTimeoutCB::?relay
     222  ZDO_EndDeviceTimeoutCB
       6  ZDO_EndDeviceTimeoutCB::?relay
     401  ZDO_FinishProcessingMgmtNwkDiscReq
       6  ZDO_FinishProcessingMgmtNwkDiscReq::?relay
      34  ZDO_Init
       6  ZDO_Init::?relay
     582  ZDO_MatchEndDeviceBind
       6  ZDO_MatchEndDeviceBind::?relay
     211  ZDO_ParseAddrRsp
       6  ZDO_ParseAddrRsp::?relay
     130  ZDO_ParseBindUnbindReq
       6  ZDO_ParseBindUnbindReq::?relay
      55  ZDO_ParseDeviceAnnce
       6  ZDO_ParseDeviceAnnce::?relay
     112  ZDO_ParseEPListRsp
       6  ZDO_ParseEPListRsp::?relay
     295  ZDO_ParseEndDeviceBindReq
       6  ZDO_ParseEndDeviceBindReq::?relay
      21  ZDO_ParseEndDeviceTimeoutRsp
       6  ZDO_ParseEndDeviceTimeoutRsp::?relay
     262  ZDO_ParseMgmNwkDiscRsp
       6  ZDO_ParseMgmNwkDiscRsp::?relay
     253  ZDO_ParseMgmtBindRsp
       6  ZDO_ParseMgmtBindRsp::?relay
     271  ZDO_ParseMgmtLqiRsp
       6  ZDO_ParseMgmtLqiRsp::?relay
     213  ZDO_ParseMgmtNwkUpdateNotify
       6  ZDO_ParseMgmtNwkUpdateNotify::?relay
     138  ZDO_ParseMgmtNwkUpdateReq
       6  ZDO_ParseMgmtNwkUpdateReq::?relay
     174  ZDO_ParseMgmtRtgRsp
       6  ZDO_ParseMgmtRtgRsp::?relay
     268  ZDO_ParseNodeDescRsp
       6  ZDO_ParseNodeDescRsp::?relay
     194  ZDO_ParsePowerDescRsp
       6  ZDO_ParsePowerDescRsp::?relay
      50  ZDO_ParseServerDiscRsp
       6  ZDO_ParseServerDiscRsp::?relay
     287  ZDO_ParseSimpleDescBuf
       6  ZDO_ParseSimpleDescBuf::?relay
      30  ZDO_ParseSimpleDescRsp
       6  ZDO_ParseSimpleDescRsp::?relay
     116  ZDO_ParseUserDescRsp
       6  ZDO_ParseUserDescRsp::?relay
     117  ZDO_ProcessActiveEPReq
       6  ZDO_ProcessActiveEPReq::?relay
     455  ZDO_ProcessBindUnbindReq
       6  ZDO_ProcessBindUnbindReq::?relay
     548  ZDO_ProcessDeviceAnnce
       6  ZDO_ProcessDeviceAnnce::?relay
     249  ZDO_ProcessEndDeviceTimeoutReq
       6  ZDO_ProcessEndDeviceTimeoutReq::?relay
    1023  ZDO_ProcessMatchDescReq
       6  ZDO_ProcessMatchDescReq::?relay
     264  ZDO_ProcessMgmtBindReq
       6  ZDO_ProcessMgmtBindReq::?relay
      85  ZDO_ProcessMgmtDirectJoinReq
       6  ZDO_ProcessMgmtDirectJoinReq::?relay
     178  ZDO_ProcessMgmtLeaveReq
       6  ZDO_ProcessMgmtLeaveReq::?relay
     630  ZDO_ProcessMgmtLqiReq
       6  ZDO_ProcessMgmtLqiReq::?relay
     126  ZDO_ProcessMgmtNwkDiscReq
       6  ZDO_ProcessMgmtNwkDiscReq::?relay
     104  ZDO_ProcessMgmtPermitJoinReq
       6  ZDO_ProcessMgmtPermitJoinReq::?relay
     304  ZDO_ProcessMgmtRtgReq
       6  ZDO_ProcessMgmtRtgReq::?relay
      71  ZDO_ProcessNodeDescReq
       6  ZDO_ProcessNodeDescReq::?relay
      71  ZDO_ProcessPowerDescReq
       6  ZDO_ProcessPowerDescReq::?relay
      63  ZDO_ProcessServerDiscReq
       6  ZDO_ProcessServerDiscReq::?relay
     166  ZDO_ProcessSimpleDescReq
       6  ZDO_ProcessSimpleDescReq::?relay
     157  ZDO_ProcessUserDescReq
       6  ZDO_ProcessUserDescReq::?relay
     293  ZDO_ProcessUserDescSet
       6  ZDO_ProcessUserDescSet::?relay
     129  ZDO_RemoveMatchMemory
       6  ZDO_RemoveMatchMemory::?relay
     314  ZDO_StartDevice
       6  ZDO_StartDevice::?relay
      49  ZDO_UpdateAddrManager
       6  ZDO_UpdateAddrManager::?relay
     109  ZDO_UpdateNwkStatus
       6  ZDO_UpdateNwkStatus::?relay
       4  __Constant_3e8
       4  apsChannelMask
       1  discRetries
       2  matchED
       1  scanCnt
      73  zdoSendStateChangeMsg
       6  zdoSendStateChangeMsg::?relay
       2  zdpExternalStateTaskID

 
 13 307 bytes in segment BANKED_CODE
    318 bytes in segment BANK_RELAYS
      2 bytes in segment XDATA_I
      2 bytes in segment XDATA_ID
      4 bytes in segment XDATA_ROM_C
     62 bytes in segment XDATA_Z
 
 13 627 bytes of CODE  memory
      0 bytes of CONST memory (+ 4 bytes shared)
     64 bytes of XDATA memory

Errors: none
Warnings: none
