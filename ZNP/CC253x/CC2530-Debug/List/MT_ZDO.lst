###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Nov/2018  13:52:12
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Components\mt\MT_ZDO.c
#    Command line       =  
#        -f "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -f "D:\1.embedded\kit\cc2530\Reference\Z-Stack
#        Mesh 1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Components\mt\MT_ZDO.c" -D FEATURE_SYSTEM_STATS -D POWER_SAVING
#        -lC "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
#        Pe001,Pa010 -o "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --no_code_motion
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\MT_ZDO.lst
#    Object file        =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\MT_ZDO.r51
#
###############################################################################

D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh 1.0.0\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2014-05-16 18:14:48 -0700 (Fri, 16 May 2014) $
      4            Revision:       $Revision: 38577 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef MT_ZDO_FUNC
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "MT.h"
     49          #include "MT_ZDO.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          #include "OnBoard.h"
     56          #include "aps_groups.h"
     57          
     58          #if defined ( MT_ZDO_EXTENSIONS )
     59            #include "rtg.h"
     60          #endif
     61          #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
     62            #include "ZDSecMgr.h"
     63          #endif
     64          
     65          #include "nwk_util.h"
     66          
     67          /**************************************************************************************************
     68           * CONSTANTS
     69           **************************************************************************************************/
     70          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     71          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     72          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     73          #define MT_ZDO_BEACON_IND_LEN             21
     74          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     75          #define MT_ZDO_JOIN_CNF_LEN               5
     76          
     77          // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
     78          // sizeof(zdoConcentratorInd_t) is not usable.
     79          #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
     80          
     81          #define MTZDO_RESPONSE_BUFFER_LEN   100
     82          
     83          #define MTZDO_MAX_MATCH_CLUSTERS    16
     84          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     85          
     86          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     87          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     88          
     89          #define MT_ZDO_STATUS_LEN   1
     90          
     91          #if defined ( MT_ZDO_EXTENSIONS )
     92          typedef struct
     93          {
     94            uint16            ami;
     95            uint16            keyNvId;   // index to the Link Key table in NV
     96            ZDSecMgr_Authentication_Option authenticateOption;
     97          } ZDSecMgrEntry_t;
     98          #endif  // MT_ZDO_EXTENSIONS
     99          
    100          /**************************************************************************************************
    101           * GLOBAL VARIABLES
    102           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 *pBeaconIndBuf = NULL;
   \                     pBeaconIndBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /**************************************************************************************************
    107           * LOCAL VARIABLES
    108           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          bool ignoreIndication = FALSE;
   \                     ignoreIndication:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    110          
    111          /**************************************************************************************************
    112           * LOCAL FUNCTIONS
    113           **************************************************************************************************/
    114          #if defined (MT_ZDO_FUNC)
    115          void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    116          void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    117          void MT_ZdoNodeDescRequest(uint8 *pBuf);
    118          void MT_ZdoPowerDescRequest(uint8 *pBuf);
    119          void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    120          void MT_ZdoActiveEpRequest(uint8 *pBuf);
    121          void MT_ZdoMatchDescRequest(uint8 *pBuf);
    122          void MT_ZdoComplexDescRequest(uint8 *pBuf);
    123          void MT_ZdoUserDescRequest(uint8 *pBuf);
    124          void MT_ZdoEndDevAnnce(uint8 *pBuf);
    125          void MT_ZdoUserDescSet(uint8 *pBuf);
    126          void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    127          #if defined ( ZIGBEE_CHILD_AGING )
    128          void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf);
    129          #endif // ZIGBEE_CHILD_AGING
    130          void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    131          void MT_ZdoBindRequest(uint8 *pBuf);
    132          void MT_ZdoUnbindRequest(uint8 *pBuf);
    133          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    134          #if defined ( MT_SYS_KEY_MANAGEMENT )
    135          void MT_ZdoSetLinkKey(uint8 *pBuf);
    136          void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    137          void MT_ZdoGetLinkKey(uint8 *pBuf);
    138          #endif /* MT_SYS_KEY_MANAGEMENT */
    139          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    140          void MT_ZdoJoinReq(uint8 *pBuf);
    141          /* Call back function */
    142          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    143          void *MT_ZdoBeaconIndCB ( void *pStr );
    144          void *MT_ZdoJoinCnfCB ( void *pStr );
    145          #if defined (MT_ZDO_MGMT)
    146          void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    147          void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    148          void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    149          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    150          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    151          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    152          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    153          #endif /* MT_ZDO_MGMT */
    154          void MT_ZdoSendData( uint8 *pBuf );
    155          void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
    156          void MT_ZdoStartupFromApp(uint8 *pBuf);
    157          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    158          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    159          #endif /* MT_ZDO_FUNC */
    160          
    161          #if defined (MT_ZDO_CB_FUNC)
    162          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    163          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    164          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    165          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    166          void* MT_ZdoSrcRtgCB( void *pStr );
    167          static void *MT_ZdoConcentratorIndCB(void *pStr);
    168          static void *MT_ZdoLeaveInd(void *vPtr);
    169          void *MT_ZdoTcDeviceInd( void *params );
    170          void *MT_ZdoPermitJoinInd( void *duration );
    171          #endif /* MT_ZDO_CB_FUNC */
    172          
    173          #if defined ( MT_ZDO_EXTENSIONS )
    174          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf );
    175          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf );
    176          void MT_ZdoSecAddLinkKey( uint8 *pBuf );
    177          void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
    178          void MT_ZdoSecDeviceRemove( uint8 *pBuf );
    179          void MT_ZdoExtRouteDisc( uint8 *pBuf );
    180          void MT_ZdoExtRouteCheck( uint8 *pBuf );
    181          static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
    182          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
    183          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
    184          static void MT_ZdoExtFindGroup( uint8 *pBuf );
    185          static void MT_ZdoExtAddGroup( uint8 *pBuf );
    186          static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
    187          static void MT_ZdoExtRxIdle( uint8 *pBuf );
    188          static void MT_ZdoExtNwkInfo( uint8 *pBuf );
    189          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf );
    190          static void MT_ZdoExtSetParams( uint8 *pBuf );
    191          extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    192          #endif // MT_ZDO_EXTENSIONS
    193          
    194          #if defined (MT_ZDO_FUNC)
    195          /***************************************************************************************************
    196           * @fn      MT_ZdoInit
    197           *
    198           * @brief   MT ZDO initialization
    199           *
    200           * @param   none
    201           *
    202           * @return  none
    203           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    205          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    206          #ifdef MT_ZDO_CB_FUNC
    207            /* Register with ZDO for indication callbacks */
    208            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000004   7A..         MOV     R2,#`??MT_ZdoSrcRtgCB::?relay` & 0xff
   \   000006   7B..         MOV     R3,#(`??MT_ZdoSrcRtgCB::?relay` >> 8) & 0xff
   \   000008   7900         MOV     R1,#0x0
   \   00000A   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    209            ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
   \   00000D                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00000D   7A..         MOV     R2,#`??MT_ZdoConcentratorIndCB::?relay` & 0xff
   \   00000F   7B..         MOV     R3,#(`??MT_ZdoConcentratorIndCB::?relay` >> 8) & 0xff
   \   000011   7901         MOV     R1,#0x1
   \   000013   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    210            ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
   \   000016                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000016   7A..         MOV     R2,#`??MT_ZdoLeaveInd::?relay` & 0xff
   \   000018   7B..         MOV     R3,#(`??MT_ZdoLeaveInd::?relay` >> 8) & 0xff
   \   00001A   7906         MOV     R1,#0x6
   \   00001C   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    211            ZDO_RegisterForZdoCB(ZDO_PERMIT_JOIN_CBID, &MT_ZdoPermitJoinInd);
   \   00001F                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00001F   7A..         MOV     R2,#`??MT_ZdoPermitJoinInd::?relay` & 0xff
   \   000021   7B..         MOV     R3,#(`??MT_ZdoPermitJoinInd::?relay` >> 8) & 0xff
   \   000023   7907         MOV     R1,#0x7
   \   000025   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    212            ZDO_RegisterForZdoCB(ZDO_TC_DEVICE_CBID, &MT_ZdoTcDeviceInd);
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000028   7A..         MOV     R2,#`??MT_ZdoTcDeviceInd::?relay` & 0xff
   \   00002A   7B..         MOV     R3,#(`??MT_ZdoTcDeviceInd::?relay` >> 8) & 0xff
   \   00002C   7908         MOV     R1,#0x8
   \   00002E   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
    213          #endif
    214          }
   \   000031                REQUIRE ?Subroutine0
   \   000031                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    215          
    216          /***************************************************************************************************
    217           * @fn      MT_ZdoCommandProcessing
    218           *
    219           * @brief
    220           *
    221           *   Process all the ZDO commands that are issued by test tool
    222           *
    223           * @param   pBuf - pointer to the msg buffer
    224           *
    225           *          | LEN  | CMD0  | CMD1  |  DATA  |
    226           *          |  1   |   1   |   1   |  0-255 |
    227           *
    228           * @return  status
    229           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    230          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    231          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   F9           MOV     R1,A
    232            uint8 status = MT_RPC_SUCCESS;
   \   00000E   7E00         MOV     R6,#0x0
    233          
    234            switch (pBuf[MT_RPC_POS_CMD1])
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7003         JNZ     $+5
   \   000019   02....       LJMP    ??MT_ZdoCommandProcessing_0 & 0xFFFF
   \   00001C   14           DEC     A
   \   00001D   7003         JNZ     $+5
   \   00001F   02....       LJMP    ??MT_ZdoCommandProcessing_1 & 0xFFFF
   \   000022   14           DEC     A
   \   000023   7003         JNZ     $+5
   \   000025   02....       LJMP    ??MT_ZdoCommandProcessing_2 & 0xFFFF
   \   000028   14           DEC     A
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??MT_ZdoCommandProcessing_3 & 0xFFFF
   \   00002E   14           DEC     A
   \   00002F   7003         JNZ     $+5
   \   000031   02....       LJMP    ??MT_ZdoCommandProcessing_4 & 0xFFFF
   \   000034   14           DEC     A
   \   000035   7003         JNZ     $+5
   \   000037   02....       LJMP    ??MT_ZdoCommandProcessing_5 & 0xFFFF
   \   00003A   14           DEC     A
   \   00003B   7003         JNZ     $+5
   \   00003D   02....       LJMP    ??MT_ZdoCommandProcessing_6 & 0xFFFF
   \   000040   14           DEC     A
   \   000041   7003         JNZ     $+5
   \   000043   02....       LJMP    ??MT_ZdoCommandProcessing_7 & 0xFFFF
   \   000046   14           DEC     A
   \   000047   7003         JNZ     $+5
   \   000049   02....       LJMP    ??MT_ZdoCommandProcessing_8 & 0xFFFF
   \   00004C   24FE         ADD     A,#-0x2
   \   00004E   7003         JNZ     $+5
   \   000050   02....       LJMP    ??MT_ZdoCommandProcessing_9 & 0xFFFF
   \   000053   14           DEC     A
   \   000054   7003         JNZ     $+5
   \   000056   02....       LJMP    ??MT_ZdoCommandProcessing_10 & 0xFFFF
   \   000059   14           DEC     A
   \   00005A   7003         JNZ     $+5
   \   00005C   02....       LJMP    ??MT_ZdoCommandProcessing_11 & 0xFFFF
   \   00005F   14           DEC     A
   \   000060   7003         JNZ     $+5
   \   000062   02....       LJMP    ??MT_ZdoCommandProcessing_12 & 0xFFFF
   \   000065   24ED         ADD     A,#-0x13
   \   000067   7003         JNZ     $+5
   \   000069   02....       LJMP    ??MT_ZdoCommandProcessing_13 & 0xFFFF
   \   00006C   14           DEC     A
   \   00006D   7003         JNZ     $+5
   \   00006F   02....       LJMP    ??MT_ZdoCommandProcessing_14 & 0xFFFF
   \   000072   14           DEC     A
   \   000073   7003         JNZ     $+5
   \   000075   02....       LJMP    ??MT_ZdoCommandProcessing_15 & 0xFFFF
   \   000078   24FC         ADD     A,#-0x4
   \   00007A   7003         JNZ     $+5
   \   00007C   02....       LJMP    ??MT_ZdoCommandProcessing_16 & 0xFFFF
   \   00007F   14           DEC     A
   \   000080   7003         JNZ     $+5
   \   000082   02....       LJMP    ??MT_ZdoCommandProcessing_17 & 0xFFFF
   \   000085   14           DEC     A
   \   000086   7003         JNZ     $+5
   \   000088   02....       LJMP    ??MT_ZdoCommandProcessing_18 & 0xFFFF
   \   00008B   14           DEC     A
   \   00008C   7003         JNZ     $+5
   \   00008E   02....       LJMP    ??MT_ZdoCommandProcessing_19 & 0xFFFF
   \   000091   24F9         ADD     A,#-0x7
   \   000093   7003         JNZ     $+5
   \   000095   02....       LJMP    ??MT_ZdoCommandProcessing_20 & 0xFFFF
   \   000098   14           DEC     A
   \   000099   7003         JNZ     $+5
   \   00009B   02....       LJMP    ??MT_ZdoCommandProcessing_21 & 0xFFFF
   \   00009E   14           DEC     A
   \   00009F   7003         JNZ     $+5
   \   0000A1   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
   \   0000A4   14           DEC     A
   \   0000A5   7003         JNZ     $+5
   \   0000A7   02....       LJMP    ??MT_ZdoCommandProcessing_23 & 0xFFFF
   \   0000AA   14           DEC     A
   \   0000AB   7003         JNZ     $+5
   \   0000AD   02....       LJMP    ??MT_ZdoCommandProcessing_24 & 0xFFFF
   \   0000B0   14           DEC     A
   \   0000B1   7003         JNZ     $+5
   \   0000B3   02....       LJMP    ??MT_ZdoCommandProcessing_25 & 0xFFFF
   \   0000B6   14           DEC     A
   \   0000B7   7003         JNZ     $+5
   \   0000B9   02....       LJMP    ??MT_ZdoCommandProcessing_26 & 0xFFFF
   \   0000BC   14           DEC     A
   \   0000BD   7003         JNZ     $+5
   \   0000BF   02....       LJMP    ??MT_ZdoCommandProcessing_27 & 0xFFFF
   \   0000C2   24F9         ADD     A,#-0x7
   \   0000C4   7003         JNZ     $+5
   \   0000C6   02....       LJMP    ??MT_ZdoCommandProcessing_28 & 0xFFFF
   \   0000C9   14           DEC     A
   \   0000CA   7003         JNZ     $+5
   \   0000CC   02....       LJMP    ??MT_ZdoCommandProcessing_29 & 0xFFFF
   \   0000CF   14           DEC     A
   \   0000D0   7003         JNZ     $+5
   \   0000D2   02....       LJMP    ??MT_ZdoCommandProcessing_30 & 0xFFFF
   \   0000D5   24FE         ADD     A,#-0x2
   \   0000D7   7003         JNZ     $+5
   \   0000D9   02....       LJMP    ??MT_ZdoCommandProcessing_31 & 0xFFFF
   \   0000DC   14           DEC     A
   \   0000DD   7003         JNZ     $+5
   \   0000DF   02....       LJMP    ??MT_ZdoCommandProcessing_32 & 0xFFFF
   \   0000E2   14           DEC     A
   \   0000E3   7003         JNZ     $+5
   \   0000E5   02....       LJMP    ??MT_ZdoCommandProcessing_33 & 0xFFFF
   \   0000E8   14           DEC     A
   \   0000E9   7003         JNZ     $+5
   \   0000EB   02....       LJMP    ??MT_ZdoCommandProcessing_34 & 0xFFFF
   \   0000EE   14           DEC     A
   \   0000EF   7003         JNZ     $+5
   \   0000F1   02....       LJMP    ??MT_ZdoCommandProcessing_35 & 0xFFFF
   \   0000F4   14           DEC     A
   \   0000F5   7003         JNZ     $+5
   \   0000F7   02....       LJMP    ??MT_ZdoCommandProcessing_36 & 0xFFFF
   \   0000FA   14           DEC     A
   \   0000FB   7003         JNZ     $+5
   \   0000FD   02....       LJMP    ??MT_ZdoCommandProcessing_37 & 0xFFFF
   \   000100   14           DEC     A
   \   000101   7003         JNZ     $+5
   \   000103   02....       LJMP    ??MT_ZdoCommandProcessing_38 & 0xFFFF
   \   000106   14           DEC     A
   \   000107   7003         JNZ     $+5
   \   000109   02....       LJMP    ??MT_ZdoCommandProcessing_39 & 0xFFFF
   \   00010C   14           DEC     A
   \   00010D   7003         JNZ     $+5
   \   00010F   02....       LJMP    ??MT_ZdoCommandProcessing_40 & 0xFFFF
   \   000112   14           DEC     A
   \   000113   7003         JNZ     $+5
   \   000115   02....       LJMP    ??MT_ZdoCommandProcessing_41 & 0xFFFF
   \   000118   14           DEC     A
   \   000119   7003         JNZ     $+5
   \   00011B   02....       LJMP    ??MT_ZdoCommandProcessing_42 & 0xFFFF
   \   00011E   14           DEC     A
   \   00011F   7003         JNZ     $+5
   \   000121   02....       LJMP    ??MT_ZdoCommandProcessing_43 & 0xFFFF
   \   000124   14           DEC     A
   \   000125   7003         JNZ     $+5
   \   000127   02....       LJMP    ??MT_ZdoCommandProcessing_44 & 0xFFFF
   \   00012A   14           DEC     A
   \   00012B   7003         JNZ     $+5
   \   00012D   02....       LJMP    ??MT_ZdoCommandProcessing_45 & 0xFFFF
   \   000130   14           DEC     A
   \   000131   7003         JNZ     $+5
   \   000133   02....       LJMP    ??MT_ZdoCommandProcessing_46 & 0xFFFF
   \   000136   14           DEC     A
   \   000137   7003         JNZ     $+5
   \   000139   02....       LJMP    ??MT_ZdoCommandProcessing_47 & 0xFFFF
   \   00013C   14           DEC     A
   \   00013D   7003         JNZ     $+5
   \   00013F   02....       LJMP    ??MT_ZdoCommandProcessing_48 & 0xFFFF
   \   000142   02....       LJMP    ??MT_ZdoCommandProcessing_49 & 0xFFFF
    235            {
    236          #if defined ( ZDO_NWKADDR_REQUEST )
    237              case MT_ZDO_NWK_ADDR_REQ:
    238                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   000145                ; Setup parameters for call to function MT_ZdoNWKAddressRequest
   \   000145   12....       LCALL   `??MT_ZdoNWKAddressRequest::?relay`; Banked call to: MT_ZdoNWKAddressRequest
    239                break;
   \   000148   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    240          #endif
    241          
    242          #if defined ( ZDO_IEEEADDR_REQUEST )
    243              case MT_ZDO_IEEE_ADDR_REQ:
    244                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   00014B                ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
   \   00014B   12....       LCALL   `??MT_ZdoIEEEAddrRequest::?relay`; Banked call to: MT_ZdoIEEEAddrRequest
    245                break;
   \   00014E   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    246          #endif
    247          
    248          #if defined ( ZDO_NODEDESC_REQUEST )
    249              case MT_ZDO_NODE_DESC_REQ:
    250                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   000151                ; Setup parameters for call to function MT_ZdoNodeDescRequest
   \   000151   12....       LCALL   `??MT_ZdoNodeDescRequest::?relay`; Banked call to: MT_ZdoNodeDescRequest
    251                break;
   \   000154   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    252          #endif
    253          
    254          #if defined ( ZDO_POWERDESC_REQUEST )
    255              case MT_ZDO_POWER_DESC_REQ:
    256                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   000157                ; Setup parameters for call to function MT_ZdoPowerDescRequest
   \   000157   12....       LCALL   `??MT_ZdoPowerDescRequest::?relay`; Banked call to: MT_ZdoPowerDescRequest
    257                break;
   \   00015A   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    258          #endif
    259          
    260          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    261              case MT_ZDO_SIMPLE_DESC_REQ:
    262                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   00015D                ; Setup parameters for call to function MT_ZdoSimpleDescRequest
   \   00015D   12....       LCALL   `??MT_ZdoSimpleDescRequest::?relay`; Banked call to: MT_ZdoSimpleDescRequest
    263                break;
   \   000160   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    264          #endif
    265          
    266          #if defined ( ZDO_ACTIVEEP_REQUEST )
    267              case MT_ZDO_ACTIVE_EP_REQ:
    268                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   000163                ; Setup parameters for call to function MT_ZdoActiveEpRequest
   \   000163   12....       LCALL   `??MT_ZdoActiveEpRequest::?relay`; Banked call to: MT_ZdoActiveEpRequest
    269                break;
   \   000166   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    270          #endif
    271          
    272          #if defined ( ZDO_MATCH_REQUEST )
    273              case MT_ZDO_MATCH_DESC_REQ:
    274                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   000169                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   000169   12....       LCALL   `??MT_ZdoMatchDescRequest::?relay`; Banked call to: MT_ZdoMatchDescRequest
    275                break;
   \   00016C   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    276          #endif
    277          
    278          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    279              case MT_ZDO_COMPLEX_DESC_REQ:
    280                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   00016F                ; Setup parameters for call to function MT_ZdoComplexDescRequest
   \   00016F   12....       LCALL   `??MT_ZdoComplexDescRequest::?relay`; Banked call to: MT_ZdoComplexDescRequest
    281                break;
   \   000172   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    282          #endif
    283          
    284          #if defined ( ZDO_USERDESC_REQUEST )
    285              case MT_ZDO_USER_DESC_REQ:
    286                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   000175                ; Setup parameters for call to function MT_ZdoUserDescRequest
   \   000175   12....       LCALL   `??MT_ZdoUserDescRequest::?relay`; Banked call to: MT_ZdoUserDescRequest
    287                break;
   \   000178   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    288          #endif
    289          
    290          #if defined ( ZDO_ENDDEVICE_ANNCE )
    291              case MT_ZDO_END_DEV_ANNCE:
    292                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   00017B                ; Setup parameters for call to function MT_ZdoEndDevAnnce
   \   00017B   12....       LCALL   `??MT_ZdoEndDevAnnce::?relay`; Banked call to: MT_ZdoEndDevAnnce
    293                break;
   \   00017E   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    294          #endif
    295          
    296          #if defined ( ZDO_USERDESCSET_REQUEST )
    297              case MT_ZDO_USER_DESC_SET:
    298                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   000181                ; Setup parameters for call to function MT_ZdoUserDescSet
   \   000181   12....       LCALL   `??MT_ZdoUserDescSet::?relay`; Banked call to: MT_ZdoUserDescSet
    299                break;
   \   000184   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    300          #endif
    301          
    302          #if defined ( ZDO_SERVERDISC_REQUEST )
    303              case MT_ZDO_SERVICE_DISC_REQ:
    304                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   000187                ; Setup parameters for call to function MT_ZdoServiceDiscRequest
   \   000187   12....       LCALL   `??MT_ZdoServiceDiscRequest::?relay`; Banked call to: MT_ZdoServiceDiscRequest
    305                break;
   \   00018A   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    306          #endif
    307          
    308          #if defined ( ZIGBEE_CHILD_AGING )
    309          #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
    310              case MT_ZDO_END_DEVICE_TIMEOUT_REQ:
    311                MT_ZdoEndDeviceTimeoutRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   00018D                ; Setup parameters for call to function MT_ZdoEndDeviceTimeoutRequest
   \   00018D   12....       LCALL   `??MT_ZdoEndDeviceTimeoutRequest::?relay`; Banked call to: MT_ZdoEndDeviceTimeoutRequest
    312                break;
   \   000190   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    313          #endif
    314          #endif // ZIGBEE_CHILD_AGING
    315          
    316          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    317              case MT_ZDO_END_DEV_BIND_REQ:
    318                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   000193                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   000193   12....       LCALL   `??MT_ZdoEndDevBindRequest::?relay`; Banked call to: MT_ZdoEndDevBindRequest
    319                break;
   \   000196   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    320          #endif
    321          
    322          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    323              case MT_ZDO_BIND_REQ:
    324                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   000199                ; Setup parameters for call to function MT_ZdoBindRequest
   \   000199   12....       LCALL   `??MT_ZdoBindRequest::?relay`; Banked call to: MT_ZdoBindRequest
    325                break;
   \   00019C   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    326          #endif
    327          
    328          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    329              case MT_ZDO_UNBIND_REQ:
    330                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   00019F                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   00019F   12....       LCALL   `??MT_ZdoUnbindRequest::?relay`; Banked call to: MT_ZdoUnbindRequest
    331                break;
   \   0001A2   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    332          #endif
    333          
    334          #if defined ( MT_SYS_KEY_MANAGEMENT )
    335              case MT_ZDO_SET_LINK_KEY:
    336                MT_ZdoSetLinkKey(pBuf);
    337                break;
    338          
    339              case MT_ZDO_REMOVE_LINK_KEY:
    340                MT_ZdoRemoveLinkKey(pBuf);
    341                break;
    342          
    343              case MT_ZDO_GET_LINK_KEY:
    344                MT_ZdoGetLinkKey(pBuf);
    345                break;
    346          #endif // MT_SYS_KEY_MANAGEMENT
    347          
    348          #if defined ( ZDO_MANUAL_JOIN )
    349              case MT_ZDO_NWK_DISCOVERY_REQ:
    350                MT_ZdoNetworkDiscoveryReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   0001A5                ; Setup parameters for call to function MT_ZdoNetworkDiscoveryReq
   \   0001A5   12....       LCALL   `??MT_ZdoNetworkDiscoveryReq::?relay`; Banked call to: MT_ZdoNetworkDiscoveryReq
    351                break;
   \   0001A8   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    352          
    353              case MT_ZDO_JOIN_REQ:
    354                MT_ZdoJoinReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_17:
   \   0001AB                ; Setup parameters for call to function MT_ZdoJoinReq
   \   0001AB   12....       LCALL   `??MT_ZdoJoinReq::?relay`; Banked call to: MT_ZdoJoinReq
    355                break;
   \   0001AE   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    356          #endif
    357          
    358          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    359              case MT_ZDO_MGMT_NWKDISC_REQ:
    360                MT_ZdoMgmtNwkDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_20:
   \   0001B1                ; Setup parameters for call to function MT_ZdoMgmtNwkDiscRequest
   \   0001B1   12....       LCALL   `??MT_ZdoMgmtNwkDiscRequest::?relay`; Banked call to: MT_ZdoMgmtNwkDiscRequest
    361                break;
   \   0001B4   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    362          #endif
    363          
    364          #if defined ( ZDO_MGMT_LQI_REQUEST )
    365              case MT_ZDO_MGMT_LQI_REQ:
    366                MT_ZdoMgmtLqiRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_21:
   \   0001B7                ; Setup parameters for call to function MT_ZdoMgmtLqiRequest
   \   0001B7   12....       LCALL   `??MT_ZdoMgmtLqiRequest::?relay`; Banked call to: MT_ZdoMgmtLqiRequest
    367                break;
   \   0001BA   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    368          #endif
    369          
    370          #if defined ( ZDO_MGMT_RTG_REQUEST )
    371              case MT_ZDO_MGMT_RTG_REQ:
    372                MT_ZdoMgmtRtgRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_22:
   \   0001BD                ; Setup parameters for call to function MT_ZdoMgmtRtgRequest
   \   0001BD   12....       LCALL   `??MT_ZdoMgmtRtgRequest::?relay`; Banked call to: MT_ZdoMgmtRtgRequest
    373                break;
   \   0001C0   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    374          #endif
    375          
    376          #if defined ( ZDO_MGMT_BIND_REQUEST )
    377              case MT_ZDO_MGMT_BIND_REQ:
    378                MT_ZdoMgmtBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_23:
   \   0001C3                ; Setup parameters for call to function MT_ZdoMgmtBindRequest
   \   0001C3   12....       LCALL   `??MT_ZdoMgmtBindRequest::?relay`; Banked call to: MT_ZdoMgmtBindRequest
    379                break;
   \   0001C6   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    380          #endif
    381          
    382          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    383              case MT_ZDO_MGMT_LEAVE_REQ:
    384                MT_ZdoMgmtLeaveRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_24:
   \   0001C9                ; Setup parameters for call to function MT_ZdoMgmtLeaveRequest
   \   0001C9   12....       LCALL   `??MT_ZdoMgmtLeaveRequest::?relay`; Banked call to: MT_ZdoMgmtLeaveRequest
    385                break;
   \   0001CC   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    386          #endif
    387          
    388          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    389              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    390                MT_ZdoMgmtDirectJoinRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_25:
   \   0001CF                ; Setup parameters for call to function MT_ZdoMgmtDirectJoinRequest
   \   0001CF   12....       LCALL   `??MT_ZdoMgmtDirectJoinRequest::?relay`; Banked call to: MT_ZdoMgmtDirectJoinRequest
    391                break;
   \   0001D2   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    392          #endif
    393          
    394          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    395              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    396                MT_ZdoMgmtPermitJoinRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_26:
   \   0001D5                ; Setup parameters for call to function MT_ZdoMgmtPermitJoinRequest
   \   0001D5   12....       LCALL   `??MT_ZdoMgmtPermitJoinRequest::?relay`; Banked call to: MT_ZdoMgmtPermitJoinRequest
    397                break;
   \   0001D8   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    398          #endif
    399          
    400          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    401              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    402                MT_ZdoMgmtNwkUpdateRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_27:
   \   0001DB                ; Setup parameters for call to function MT_ZdoMgmtNwkUpdateRequest
   \   0001DB   12....       LCALL   `??MT_ZdoMgmtNwkUpdateRequest::?relay`; Banked call to: MT_ZdoMgmtNwkUpdateRequest
    403                break;
   \   0001DE   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    404          #endif
    405          
    406          #if defined ( ZDO_NETWORKSTART_REQUEST )
    407              case MT_ZDO_STARTUP_FROM_APP:
    408                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_30:
   \   0001E1                ; Setup parameters for call to function MT_ZdoStartupFromApp
   \   0001E1   12....       LCALL   `??MT_ZdoStartupFromApp::?relay`; Banked call to: MT_ZdoStartupFromApp
    409                break;
   \   0001E4   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    410          #endif
    411          
    412              case MT_ZDO_SEND_DATA:
    413                MT_ZdoSendData( pBuf );
   \                     ??MT_ZdoCommandProcessing_18:
   \   0001E7                ; Setup parameters for call to function MT_ZdoSendData
   \   0001E7   12....       LCALL   `??MT_ZdoSendData::?relay`; Banked call to: MT_ZdoSendData
    414                break;
   \   0001EA   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    415          
    416              case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
    417                MT_ZdoNwkAddrOfInterestReq( pBuf );
   \                     ??MT_ZdoCommandProcessing_19:
   \   0001ED                ; Setup parameters for call to function MT_ZdoNwkAddrOfInterestReq
   \   0001ED   12....       LCALL   `??MT_ZdoNwkAddrOfInterestReq::?relay`; Banked call to: MT_ZdoNwkAddrOfInterestReq
    418                break;
   \   0001F0   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    419          
    420              case MT_ZDO_MSG_CB_REGISTER:
    421                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_28:
   \   0001F3                ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
   \   0001F3   12....       LCALL   `??MT_ZdoRegisterForZDOMsg::?relay`; Banked call to: MT_ZdoRegisterForZDOMsg
    422                break;
   \   0001F6   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    423          
    424              case MT_ZDO_MSG_CB_REMOVE:
    425                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_29:
   \   0001F9                ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
   \   0001F9   12....       LCALL   `??MT_ZdoRemoveRegisteredCB::?relay`; Banked call to: MT_ZdoRemoveRegisteredCB
    426                break;
   \   0001FC   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    427          
    428          #if defined ( MT_ZDO_EXTENSIONS )
    429              case MT_ZDO_EXT_UPDATE_NWK_KEY:
    430                MT_ZdoSecUpdateNwkKey( pBuf );
   \                     ??MT_ZdoCommandProcessing_43:
   \   0001FF   E8           MOV     A,R0
   \   000200   2403         ADD     A,#0x3
   \   000202   5001         JNC     ??MT_ZdoCommandProcessing_51
   \   000204   09           INC     R1
   \                     ??MT_ZdoCommandProcessing_51:
   \   000205   FA           MOV     R2,A
   \   000206   E9           MOV     A,R1
   \   000207   FB           MOV     R3,A
   \   000208                ; Setup parameters for call to function ZDSecMgrUpdateNwkKey
   \   000208   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   00020B   F9           MOV     R1,A
   \   00020C   EC           MOV     A,R4
   \   00020D   2E           ADD     A,R6
   \   00020E   E4           CLR     A
   \   00020F   39           ADDC    A,R1
   \   000210   FD           MOV     R5,A
   \   000211   8A82         MOV     DPL,R2
   \   000213   8B83         MOV     DPH,R3
   \   000215   A3           INC     DPTR
   \   000216   A3           INC     DPTR
   \   000217   E0           MOVX    A,@DPTR
   \   000218   F9           MOV     R1,A
   \   000219   EA           MOV     A,R2
   \   00021A   2403         ADD     A,#0x3
   \   00021C   FA           MOV     R2,A
   \   00021D   5001         JNC     ??MT_ZdoCommandProcessing_52
   \   00021F   0B           INC     R3
   \                     ??MT_ZdoCommandProcessing_52:
   \   000220   12....       LCALL   `??ZDSecMgrUpdateNwkKey::?relay`; Banked call to: ZDSecMgrUpdateNwkKey
   \   000223   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000226   7A4E         MOV     R2,#0x4e
   \   000228   02....       LJMP    ??MT_ZdoCommandProcessing_53 & 0xFFFF
    431                break;
    432          
    433              case MT_ZDO_EXT_SWITCH_NWK_KEY:
    434                MT_ZdoSecSwitchNwkKey( pBuf );
   \                     ??MT_ZdoCommandProcessing_44:
   \   00022B   E8           MOV     A,R0
   \   00022C   2403         ADD     A,#0x3
   \   00022E   F8           MOV     R0,A
   \   00022F   5001         JNC     ??MT_ZdoCommandProcessing_54
   \   000231   09           INC     R1
   \                     ??MT_ZdoCommandProcessing_54:
   \   000232                ; Setup parameters for call to function ZDSecMgrSwitchNwkKey
   \   000232   8882         MOV     DPL,R0
   \   000234   8983         MOV     DPH,R1
   \   000236   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   F9           MOV     R1,A
   \   00023B   12....       LCALL   `??ZDSecMgrSwitchNwkKey::?relay`; Banked call to: ZDSecMgrSwitchNwkKey
   \   00023E   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000241   7A4F         MOV     R2,#0x4f
   \   000243   02....       LJMP    ??MT_ZdoCommandProcessing_53 & 0xFFFF
    435                break;
    436          
    437              case MT_ZDO_SEC_ADD_LINK_KEY:
    438                MT_ZdoSecAddLinkKey( pBuf );
   \                     ??MT_ZdoCommandProcessing_31:
   \   000246   E8           MOV     A,R0
   \   000247   2403         ADD     A,#0x3
   \   000249   FC           MOV     R4,A
   \   00024A   E4           CLR     A
   \   00024B   39           ADDC    A,R1
   \   00024C   FD           MOV     R5,A
   \   00024D   8C82         MOV     DPL,R4
   \   00024F   8D83         MOV     DPH,R5
   \   000251   E0           MOVX    A,@DPTR
   \   000252   FA           MOV     R2,A
   \   000253   A3           INC     DPTR
   \   000254   E0           MOVX    A,@DPTR
   \   000255   F9           MOV     R1,A
   \   000256   EA           MOV     A,R2
   \   000257   2E           ADD     A,R6
   \   000258   E4           CLR     A
   \   000259   39           ADDC    A,R1
   \   00025A   FB           MOV     R3,A
   \   00025B   EC           MOV     A,R4
   \   00025C   2402         ADD     A,#0x2
   \   00025E   FC           MOV     R4,A
   \   00025F   5001         JNC     ??MT_ZdoCommandProcessing_55
   \   000261   0D           INC     R5
   \                     ??MT_ZdoCommandProcessing_55:
   \   000262                ; Setup parameters for call to function ZDSecMgrAddLinkKey
   \   000262   2408         ADD     A,#0x8
   \   000264   F5..         MOV     ?V0,A
   \   000266   E4           CLR     A
   \   000267   3D           ADDC    A,R5
   \   000268   F5..         MOV     ?V1,A
   \   00026A   78..         MOV     R0,#?V0
   \   00026C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00026F   12....       LCALL   `??ZDSecMgrAddLinkKey::?relay`; Banked call to: ZDSecMgrAddLinkKey
   \   000272   7402         MOV     A,#0x2
   \   000274   12....       LCALL   ?DEALLOC_XSTACK8
   \   000277   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   00027A   7A42         MOV     R2,#0x42
   \   00027C   02....       LJMP    ??MT_ZdoCommandProcessing_53 & 0xFFFF
    439                break;
    440          
    441              case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
    442                MT_ZdoSecEntryLookupExt( pBuf );
   \                     ??MT_ZdoCommandProcessing_32:
   \   00027F   7401         MOV     A,#0x1
   \   000281   12....       LCALL   ?XSTACK_DISP0_8
   \   000284   E4           CLR     A
   \   000285   F0           MOVX    @DPTR,A
   \   000286   A3           INC     DPTR
   \   000287   F0           MOVX    @DPTR,A
   \   000288   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0}>`
   \   00028B   7403         MOV     A,#0x3
   \   00028D   12....       LCALL   ?XSTACK_DISP102_8
   \   000290   7406         MOV     A,#0x6
   \   000292   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   000295                ; Setup parameters for call to function ZDSecMgrEntryLookupExt
   \   000295   04           INC     A
   \   000296   12....       LCALL   ?XSTACK_DISP102_8
   \   000299   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00029C   12....       LCALL   `??ZDSecMgrEntryLookupExt::?relay`; Banked call to: ZDSecMgrEntryLookupExt
   \   00029F   7403         MOV     A,#0x3
   \   0002A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A4   E9           MOV     A,R1
   \   0002A5   F0           MOVX    @DPTR,A
   \   0002A6   7401         MOV     A,#0x1
   \   0002A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AB   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   0002AE   6064         JZ      ??MT_ZdoCommandProcessing_56
   \   0002B0   7401         MOV     A,#0x1
   \   0002B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B5   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   0002B8   C0E0         PUSH    A
   \   0002BA   7404         MOV     A,#0x4
   \   0002BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002BF   D0E0         POP     A
   \   0002C1   F0           MOVX    @DPTR,A
   \   0002C2   7401         MOV     A,#0x1
   \   0002C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C7   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0002CA   E0           MOVX    A,@DPTR
   \   0002CB   C0E0         PUSH    A
   \   0002CD   7405         MOV     A,#0x5
   \   0002CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D2   D0E0         POP     A
   \   0002D4   F0           MOVX    @DPTR,A
   \   0002D5   7401         MOV     A,#0x1
   \   0002D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DA   E0           MOVX    A,@DPTR
   \   0002DB   2402         ADD     A,#0x2
   \   0002DD   F8           MOV     R0,A
   \   0002DE   A3           INC     DPTR
   \   0002DF   E0           MOVX    A,@DPTR
   \   0002E0   3400         ADDC    A,#0x0
   \   0002E2   F9           MOV     R1,A
   \   0002E3   8882         MOV     DPL,R0
   \   0002E5   8983         MOV     DPH,R1
   \   0002E7   E0           MOVX    A,@DPTR
   \   0002E8   C0E0         PUSH    A
   \   0002EA   7406         MOV     A,#0x6
   \   0002EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EF   D0E0         POP     A
   \   0002F1   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   0002F4   C0E0         PUSH    A
   \   0002F6   7407         MOV     A,#0x7
   \   0002F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FB   D0E0         POP     A
   \   0002FD   F0           MOVX    @DPTR,A
   \   0002FE   7401         MOV     A,#0x1
   \   000300   12....       LCALL   ?XSTACK_DISP0_8
   \   000303   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000306   A3           INC     DPTR
   \   000307   A3           INC     DPTR
   \   000308   A3           INC     DPTR
   \   000309   E0           MOVX    A,@DPTR
   \   00030A   C0E0         PUSH    A
   \   00030C   7408         MOV     A,#0x8
   \   00030E   12....       LCALL   ?XSTACK_DISP0_8
   \   000311   D0E0         POP     A
   \   000313   F0           MOVX    @DPTR,A
   \                     ??MT_ZdoCommandProcessing_56:
   \   000314                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000314   7403         MOV     A,#0x3
   \   000316   12....       LCALL   ?XSTACK_DISP102_8
   \   000319   7B06         MOV     R3,#0x6
   \   00031B   7A43         MOV     R2,#0x43
   \   00031D   02....       LJMP    ??MT_ZdoCommandProcessing_53 & 0xFFFF
    443                break;
    444          
    445              case MT_ZDO_SEC_DEVICE_REMOVE:
    446                 MT_ZdoSecDeviceRemove( pBuf );
   \                     ??MT_ZdoCommandProcessing_33:
   \   000320                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000320   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000323   12....       LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   \   000326   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000329   7A44         MOV     R2,#0x44
   \   00032B   02....       LJMP    ??MT_ZdoCommandProcessing_53 & 0xFFFF
    447                 break;
    448          
    449              case MT_ZDO_EXT_ROUTE_DISC:
    450                 MT_ZdoExtRouteDisc( pBuf );
   \                     ??MT_ZdoCommandProcessing_34:
   \   00032E   E8           MOV     A,R0
   \   00032F   2403         ADD     A,#0x3
   \   000331   5001         JNC     ??MT_ZdoCommandProcessing_57
   \   000333   09           INC     R1
   \                     ??MT_ZdoCommandProcessing_57:
   \   000334   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000337   12....       LCALL   `??NLME_RouteDiscoveryRequest::?relay`; Banked call to: NLME_RouteDiscoveryRequest
   \   00033A   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00033D   7A45         MOV     R2,#0x45
   \   00033F   02....       LJMP    ??MT_ZdoCommandProcessing_53 & 0xFFFF
    451                 break;
    452          
    453              case MT_ZDO_EXT_ROUTE_CHECK:
    454                 MT_ZdoExtRouteCheck( pBuf );
   \                     ??MT_ZdoCommandProcessing_35:
   \   000342   E8           MOV     A,R0
   \   000343   2403         ADD     A,#0x3
   \   000345   5001         JNC     ??MT_ZdoCommandProcessing_58
   \   000347   09           INC     R1
   \                     ??MT_ZdoCommandProcessing_58:
   \   000348   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00034B   12....       LCALL   `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   00034E   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000351   7A46         MOV     R2,#0x46
   \   000353   02....       LJMP    ??MT_ZdoCommandProcessing_53 & 0xFFFF
    455                 break;
    456          
    457              case MT_ZDO_EXT_REMOVE_GROUP:
    458                MT_ZdoExtRemoveGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_36:
   \   000356   E8           MOV     A,R0
   \   000357   2404         ADD     A,#0x4
   \   000359   F582         MOV     DPL,A
   \   00035B   E4           CLR     A
   \   00035C   39           ADDC    A,R1
   \   00035D   F583         MOV     DPH,A
   \   00035F                ; Setup parameters for call to function aps_RemoveGroup
   \   00035F   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000362   A3           INC     DPTR
   \   000363   E0           MOVX    A,@DPTR
   \   000364   F9           MOV     R1,A
   \   000365   12....       LCALL   `??aps_RemoveGroup::?relay`; Banked call to: aps_RemoveGroup
   \   000368   E9           MOV     A,R1
   \   000369   85..82       MOV     DPL,?XSP + 0
   \   00036C   85..83       MOV     DPH,?XSP + 1
   \   00036F   6003         JZ      ??MT_ZdoCommandProcessing_59
   \   000371   E4           CLR     A
   \   000372   8002         SJMP    ??MT_ZdoCommandProcessing_60
   \                     ??MT_ZdoCommandProcessing_59:
   \   000374   7401         MOV     A,#0x1
   \                     ??MT_ZdoCommandProcessing_60:
   \   000376   F0           MOVX    @DPTR,A
   \   000377                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000377   8007         SJMP    ??MT_ZdoCommandProcessing_61
    459                break;
    460          
    461              case MT_ZDO_EXT_REMOVE_ALL_GROUP:
    462                MT_ZdoExtRemoveAllGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_37:
   \   000379   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00037C   F9           MOV     R1,A
   \   00037D   12....       LCALL   `??aps_RemoveAllGroup::?relay`; Banked call to: aps_RemoveAllGroup
   \   000380                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \                     ??MT_ZdoCommandProcessing_61:
   \   000380   AC..         MOV     R4,?XSP + 0
   \   000382   AD..         MOV     R5,?XSP + 1
   \   000384   7B01         MOV     R3,#0x1
   \   000386   7A47         MOV     R2,#0x47
   \   000388   02....       LJMP    ??MT_ZdoCommandProcessing_53 & 0xFFFF
    463                break;
    464          
    465              case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
    466                MT_ZdoExtFindAllGroupsEndpoint( pBuf );
   \                     ??MT_ZdoCommandProcessing_38:
   \   00038B                ; Setup parameters for call to function MT_ZdoExtFindAllGroupsEndpoint
   \   00038B   12....       LCALL   `??MT_ZdoExtFindAllGroupsEndpoint::?relay`; Banked call to: MT_ZdoExtFindAllGroupsEndpoint
    467                break;
   \   00038E   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    468          
    469              case MT_ZDO_EXT_FIND_GROUP:
    470                MT_ZdoExtFindGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_39:
   \   000391                ; Setup parameters for call to function MT_ZdoExtFindGroup
   \   000391   12....       LCALL   `??MT_ZdoExtFindGroup::?relay`; Banked call to: MT_ZdoExtFindGroup
    471                break;
   \   000394   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    472          
    473              case MT_ZDO_EXT_ADD_GROUP:
    474                MT_ZdoExtAddGroup( pBuf );
   \                     ??MT_ZdoCommandProcessing_40:
   \   000397                ; Setup parameters for call to function MT_ZdoExtAddGroup
   \   000397   12....       LCALL   `??MT_ZdoExtAddGroup::?relay`; Banked call to: MT_ZdoExtAddGroup
    475                break;
   \   00039A   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    476          
    477              case MT_ZDO_EXT_COUNT_ALL_GROUPS:
    478                MT_ZdoExtCountAllGroups( pBuf );
   \                     ??MT_ZdoCommandProcessing_41:
   \   00039D   85..82       MOV     DPL,?XSP + 0
   \   0003A0   85..83       MOV     DPH,?XSP + 1
   \   0003A3   E4           CLR     A
   \   0003A4   F0           MOVX    @DPTR,A
   \   0003A5                ; Setup parameters for call to function aps_CountAllGroups
   \   0003A5   12....       LCALL   `??aps_CountAllGroups::?relay`; Banked call to: aps_CountAllGroups
   \   0003A8   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   0003AB   7A4C         MOV     R2,#0x4c
   \   0003AD   02....       LJMP    ??MT_ZdoCommandProcessing_53 & 0xFFFF
    479                break;
    480          
    481              case MT_ZDO_EXT_RX_IDLE:
    482                MT_ZdoExtRxIdle( pBuf );
   \                     ??MT_ZdoCommandProcessing_42:
   \   0003B0   8882         MOV     DPL,R0
   \   0003B2   8983         MOV     DPH,R1
   \   0003B4   A3           INC     DPTR
   \   0003B5   A3           INC     DPTR
   \   0003B6   A3           INC     DPTR
   \   0003B7   E0           MOVX    A,@DPTR
   \   0003B8   FA           MOV     R2,A
   \   0003B9   8882         MOV     DPL,R0
   \   0003BB   8983         MOV     DPH,R1
   \   0003BD   A3           INC     DPTR
   \   0003BE   A3           INC     DPTR
   \   0003BF   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   0003C2   EA           MOV     A,R2
   \   0003C3   AA..         MOV     R2,?XSP + 0
   \   0003C5   AB..         MOV     R3,?XSP + 1
   \   0003C7   7952         MOV     R1,#0x52
   \   0003C9   6005         JZ      ??MT_ZdoCommandProcessing_62
   \   0003CB                ; Setup parameters for call to function ZMacSetReq
   \   0003CB   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0003CE   8003         SJMP    ??MT_ZdoCommandProcessing_63
   \                     ??MT_ZdoCommandProcessing_62:
   \   0003D0                ; Setup parameters for call to function ZMacGetReq
   \   0003D0   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \                     ??MT_ZdoCommandProcessing_63:
   \   0003D3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0003D3   AC..         MOV     R4,?XSP + 0
   \   0003D5   AD..         MOV     R5,?XSP + 1
   \   0003D7   7B01         MOV     R3,#0x1
   \   0003D9   7A4D         MOV     R2,#0x4d
   \   0003DB   02....       LJMP    ??MT_ZdoCommandProcessing_53 & 0xFFFF
    483                break;
    484                
    485              case MT_ZDO_EXT_NWK_INFO:
    486                MT_ZdoExtNwkInfo( pBuf );
   \                     ??MT_ZdoCommandProcessing_45:
   \   0003DE                ; Setup parameters for call to function MT_ZdoExtNwkInfo
   \   0003DE   12....       LCALL   `??MT_ZdoExtNwkInfo::?relay`; Banked call to: MT_ZdoExtNwkInfo
    487                break;
   \   0003E1   02....       LJMP    ??MT_ZdoCommandProcessing_50 & 0xFFFF
    488                
    489              case MT_ZDO_EXT_SEC_APS_REMOVE_REQ:
    490                MT_ZdoExtSecApsRemoveReq( pBuf );
   \                     ??MT_ZdoCommandProcessing_46:
   \   0003E4   85..82       MOV     DPL,?XSP + 0
   \   0003E7   85..83       MOV     DPH,?XSP + 1
   \   0003EA   E4           CLR     A
   \   0003EB   F0           MOVX    @DPTR,A
   \   0003EC   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   0003EF   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0003F2   E0           MOVX    A,@DPTR
   \   0003F3   703F         JNZ     ??MT_ZdoCommandProcessing_64
   \   0003F5   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0003F8   F9           MOV     R1,A
   \   0003F9   EC           MOV     A,R4
   \   0003FA   2E           ADD     A,R6
   \   0003FB   F5..         MOV     ?V0,A
   \   0003FD   E4           CLR     A
   \   0003FE   39           ADDC    A,R1
   \   0003FF   F5..         MOV     ?V1,A
   \   000401   EA           MOV     A,R2
   \   000402   2402         ADD     A,#0x2
   \   000404   FA           MOV     R2,A
   \   000405   5001         JNC     ??MT_ZdoCommandProcessing_65
   \   000407   0B           INC     R3
   \                     ??MT_ZdoCommandProcessing_65:
   \   000408                ; Setup parameters for call to function ZDSecMgrAPSRemove
   \   000408   78..         MOV     R0,#?V0
   \   00040A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00040D   EA           MOV     A,R2
   \   00040E   2402         ADD     A,#0x2
   \   000410   FC           MOV     R4,A
   \   000411   E4           CLR     A
   \   000412   3B           ADDC    A,R3
   \   000413   FD           MOV     R5,A
   \   000414   8A82         MOV     DPL,R2
   \   000416   8B83         MOV     DPH,R3
   \   000418   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   00041B   F9           MOV     R1,A
   \   00041C   E5..         MOV     A,?V0
   \   00041E   2E           ADD     A,R6
   \   00041F   FA           MOV     R2,A
   \   000420   E4           CLR     A
   \   000421   39           ADDC    A,R1
   \   000422   FB           MOV     R3,A
   \   000423   12....       LCALL   `??ZDSecMgrAPSRemove::?relay`; Banked call to: ZDSecMgrAPSRemove
   \   000426   7402         MOV     A,#0x2
   \   000428   12....       LCALL   ?DEALLOC_XSTACK8
   \   00042B   E9           MOV     A,R1
   \   00042C   85..82       MOV     DPL,?XSP + 0
   \   00042F   85..83       MOV     DPH,?XSP + 1
   \   000432   8008         SJMP    ??MT_ZdoCommandProcessing_66
   \                     ??MT_ZdoCommandProcessing_64:
   \   000434   85..82       MOV     DPL,?XSP + 0
   \   000437   85..83       MOV     DPH,?XSP + 1
   \   00043A   7412         MOV     A,#0x12
   \                     ??MT_ZdoCommandProcessing_66:
   \   00043C   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00043F   7A51         MOV     R2,#0x51
   \   000441   8023         SJMP    ??MT_ZdoCommandProcessing_53
    491                break;
    492                
    493              case MT_ZDO_FORCE_CONCENTRATOR_CHANGE:
    494                ZDApp_ForceConcentratorChange();
   \                     ??MT_ZdoCommandProcessing_47:
   \   000443                ; Setup parameters for call to function ZDApp_ForceConcentratorChange
   \   000443   12....       LCALL   `??ZDApp_ForceConcentratorChange::?relay`; Banked call to: ZDApp_ForceConcentratorChange
    495                break;
   \   000446   8027         SJMP    ??MT_ZdoCommandProcessing_50
    496                
    497              case MT_ZDO_EXT_SET_PARAMS:
    498                MT_ZdoExtSetParams( pBuf );
   \                     ??MT_ZdoCommandProcessing_48:
   \   000448   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00044B   F8           MOV     R0,A
   \   00044C   A2E7         MOV     C,0xE0 /* A   */.7
   \   00044E   500E         JNC     ??MT_ZdoCommandProcessing_67
   \   000450   747F         MOV     A,#0x7f
   \   000452   58           ANL     A,R0
   \   000453   90....       MOV     DPTR,#_NIB + 100
   \   000456   6004         JZ      ??MT_ZdoCommandProcessing_68
   \   000458   7401         MOV     A,#0x1
   \   00045A   8001         SJMP    ??MT_ZdoCommandProcessing_69
   \                     ??MT_ZdoCommandProcessing_68:
   \   00045C   E4           CLR     A
   \                     ??MT_ZdoCommandProcessing_69:
   \   00045D   F0           MOVX    @DPTR,A
   \                     ??MT_ZdoCommandProcessing_67:
   \   00045E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00045E   AC..         MOV     R4,?XSP + 0
   \   000460   AD..         MOV     R5,?XSP + 1
   \   000462   7B01         MOV     R3,#0x1
   \   000464   7A53         MOV     R2,#0x53
   \                     ??MT_ZdoCommandProcessing_53:
   \   000466   7965         MOV     R1,#0x65
   \   000468   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    499                break;
   \   00046B   8002         SJMP    ??MT_ZdoCommandProcessing_50
    500          #endif  // MT_ZDO_EXTENSIONS
    501          
    502              default:
    503                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_49:
   \   00046D   7E02         MOV     R6,#0x2
    504                break;
    505            }
    506          
    507            return status;
   \                     ??MT_ZdoCommandProcessing_50:
   \   00046F   EE           MOV     A,R6
   \   000470   F9           MOV     R1,A
   \   000471   7409         MOV     A,#0x9
   \   000473   02....       LJMP    ??Subroutine122_0 & 0xFFFF
    508          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    509          
    510          /***************************************************************************************************
    511           * @fn      MT_ZdoNwkAddrReq
    512           *
    513           * @brief   Handle a nwk address request.
    514           *
    515           * @param   pData  - MT message data
    516           *
    517           * @return  void
    518           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    519          void MT_ZdoNWKAddressRequest(uint8 *pBuf)
   \                     MT_ZdoNWKAddressRequest:
    520          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    521            uint8 cmdId;
    522            uint8 retValue;
    523            uint8 reqType;
    524            uint8 startIndex;
    525            uint8 *pExtAddr;
    526          
    527            /* parse header */
    528            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0,A
    529            pBuf += MT_RPC_FRAME_HDR_SZ;
    530          
    531            /* parse parameters */
    532            pExtAddr = pBuf;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   FE           MOV     R6,A
   \   000017   E4           CLR     A
   \   000018   3B           ADDC    A,R3
   \   000019   FF           MOV     R7,A
    533            pBuf += Z_EXTADDR_LEN;
   \   00001A   EE           MOV     A,R6
   \   00001B   2408         ADD     A,#0x8
   \   00001D   FA           MOV     R2,A
   \   00001E   E4           CLR     A
   \   00001F   3F           ADDC    A,R7
   \   000020   FB           MOV     R3,A
    534          
    535            /* Request type */
    536            reqType = *pBuf++;
    537          
    538            /* Start index */
    539            startIndex = *pBuf;
    540          
    541            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
   \   000021                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000021   7D00         MOV     R5,#0x0
   \   000023   8A82         MOV     DPL,R2
   \   000025   8B83         MOV     DPH,R3
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FC           MOV     R4,A
   \   00002A   8A82         MOV     DPL,R2
   \   00002C   8B83         MOV     DPH,R3
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   `??ZDP_NwkAddrReq::?relay`; Banked call to: ZDP_NwkAddrReq
   \   000037   12....       LCALL   ?Subroutine65 & 0xFFFF
    542          
    543            /* Build and send back the response */
    544            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_112:
   \   00003A   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    545            
    546          #if defined ( MT_ZDO_EXTENSIONS )
    547            {
    548              // Force a response message if the ext address matches a child of this device
    549              associated_devices_t *pAssoc;
    550              uint8 buf[21];
    551              uint8 *pBuf = buf;
    552              
    553              if ( (ZSTACK_ROUTER_BUILD)
    554                && (((pAssoc = AssocGetWithExt( pExtAddr )) != NULL)
    555                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \   00003D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000040   E0           MOVX    A,@DPTR
   \   000041   6007         JZ      ??MT_ZdoNWKAddressRequest_0
   \   000043   6401         XRL     A,#0x1
   \   000045   6003         JZ      $+5
   \   000047   02....       LJMP    ??MT_ZdoNWKAddressRequest_1 & 0xFFFF
   \                     ??MT_ZdoNWKAddressRequest_0:
   \   00004A                ; Setup parameters for call to function AssocGetWithExt
   \   00004A   EE           MOV     A,R6
   \   00004B   FA           MOV     R2,A
   \   00004C   EF           MOV     A,R7
   \   00004D   FB           MOV     R3,A
   \   00004E   12....       LCALL   `??AssocGetWithExt::?relay`; Banked call to: AssocGetWithExt
   \   000051   8A..         MOV     ?V0,R2
   \   000053   8B..         MOV     ?V1,R3
   \   000055   EA           MOV     A,R2
   \   000056   45..         ORL     A,?V1
   \   000058   7003         JNZ     $+5
   \   00005A   02....       LJMP    ??MT_ZdoNWKAddressRequest_1 & 0xFFFF
   \   00005D   8A82         MOV     DPL,R2
   \   00005F   8B83         MOV     DPH,R3
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   6401         XRL     A,#0x1
   \   000068   6003         JZ      $+5
   \   00006A   02....       LJMP    ??MT_ZdoNWKAddressRequest_1 & 0xFFFF
    556              {
    557                uint16 nwkAddr = NLME_GetShortAddr();
   \   00006D                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006D   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000070   8A..         MOV     ?V2,R2
   \   000072   A8..         MOV     R0,?V2
    558                
    559                *pBuf++ = LO_UINT16(nwkAddr);
   \   000074   7401         MOV     A,#0x1
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E8           MOV     A,R0
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   EB           MOV     A,R3
   \   00007C   FA           MOV     R2,A
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   EA           MOV     A,R2
   \   000083   F0           MOVX    @DPTR,A
    560                *pBuf++ = HI_UINT16(nwkAddr);
    561                *pBuf++ = 0;
   \   000084   7403         MOV     A,#0x3
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
    562                *pBuf++ = LO_UINT16(NWK_addr_rsp);
   \   00008B   7404         MOV     A,#0x4
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   E4           CLR     A
   \   000091   F0           MOVX    @DPTR,A
    563                *pBuf++ = HI_UINT16(NWK_addr_rsp);
   \   000092   7405         MOV     A,#0x5
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   7480         MOV     A,#-0x80
   \   000099   F0           MOVX    @DPTR,A
    564                *pBuf++ = 0;
   \   00009A   7406         MOV     A,#0x6
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   E4           CLR     A
   \   0000A0   F0           MOVX    @DPTR,A
    565                *pBuf++ = 0;
   \   0000A1   7407         MOV     A,#0x7
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   E4           CLR     A
   \   0000A7   F0           MOVX    @DPTR,A
    566                *pBuf++ = LO_UINT16(nwkAddr);
   \   0000A8   7408         MOV     A,#0x8
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   E8           MOV     A,R0
   \   0000AE   F0           MOVX    @DPTR,A
    567                *pBuf++ = HI_UINT16(nwkAddr);
   \   0000AF   7409         MOV     A,#0x9
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   EA           MOV     A,R2
   \   0000B5   F0           MOVX    @DPTR,A
    568              
    569                *pBuf++ = ZSuccess;
   \   0000B6   740A         MOV     A,#0xa
   \   0000B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BB   E4           CLR     A
   \   0000BC   F0           MOVX    @DPTR,A
    570          
    571                pBuf = osal_cpyExtAddr( pBuf, pExtAddr );
   \   0000BD                ; Setup parameters for call to function sAddrExtCpy
   \   0000BD   EE           MOV     A,R6
   \   0000BE   FC           MOV     R4,A
   \   0000BF   EF           MOV     A,R7
   \   0000C0   FD           MOV     R5,A
   \   0000C1   740B         MOV     A,#0xb
   \   0000C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C6   AA82         MOV     R2,DPL
   \   0000C8   AB83         MOV     R3,DPH
   \   0000CA   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    572          
    573                *pBuf++ = LO_UINT16( pAssoc->shortAddr );
   \   0000CD   85..82       MOV     DPL,?V0
   \   0000D0   85..83       MOV     DPH,?V1
   \   0000D3   12....       LCALL   ?Subroutine56 & 0xFFFF
    574                *pBuf++ = HI_UINT16( pAssoc->shortAddr );
   \                     ??CrossCallReturnLabel_82:
   \   0000D6   85..82       MOV     DPL,?V0
   \   0000D9   85..83       MOV     DPH,?V1
   \   0000DC   12....       LCALL   ?Subroutine46 & 0xFFFF
    575                *pBuf = 0;
   \                     ??CrossCallReturnLabel_63:
   \   0000DF   8A82         MOV     DPL,R2
   \   0000E1   8B83         MOV     DPH,R3
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   E4           CLR     A
   \   0000E6   F0           MOVX    @DPTR,A
    576          
    577                MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), 
    578                                            MT_ZDO_MSG_CB_INCOMING, 21, buf );
   \   0000E7                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000E7   04           INC     A
   \   0000E8   12....       LCALL   ?XSTACK_DISP102_8
   \   0000EB   7B15         MOV     R3,#0x15
   \   0000ED   7AFF         MOV     R2,#-0x1
   \   0000EF   7945         MOV     R1,#0x45
   \   0000F1   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    579              }
    580            }
    581          #endif  
    582          }
   \                     ??MT_ZdoNWKAddressRequest_1:
   \   0000F4   7416         MOV     A,#0x16
   \   0000F6                REQUIRE ?Subroutine2
   \   0000F6                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   7B01         MOV     R3,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   00000A   AA..         MOV     R2,?V0
   \   00000C   7965         MOV     R1,#0x65
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine136_0
   \   000001                ; // Fall through to label ??Subroutine136_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine136_0:
   \   000000   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
    583          
    584          /***************************************************************************************************
    585           * @fn      MT_ZdoIEEEAddrRequest
    586           *
    587           * @brief   Handle a IEEE address request.
    588           *
    589           * @param   pData  - MT message data
    590           *
    591           * @return  void
    592           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    593          void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
   \                     MT_ZdoIEEEAddrRequest:
    594          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    595            uint8 cmdId;
    596            uint8 retValue;
    597            uint16 shortAddr;
    598            uint8 reqType;
    599            uint8 startIndex;
    600          
    601            /* parse header */
    602            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine45 & 0xFFFF
    603            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_60:
   \   00000D   5001         JNC     ??MT_ZdoIEEEAddrRequest_0
   \   00000F   0B           INC     R3
    604          
    605            /* Dev address */
    606            shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
    607            pBuf += 2;
    608          
    609            /* request type */
    610            reqType = *pBuf++;
    611          
    612            /* start index */
    613            startIndex = *pBuf;
    614          
    615            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
   \                     ??MT_ZdoIEEEAddrRequest_0:
   \   000010                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000010   7D00         MOV     R5,#0x0
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FE           MOV     R6,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FB           MOV     R3,A
   \   000024   EE           MOV     A,R6
   \   000025   FA           MOV     R2,A
   \   000026   12....       LCALL   `??ZDP_IEEEAddrReq::?relay`; Banked call to: ZDP_IEEEAddrReq
   \   000029   12....       LCALL   ?Subroutine76 & 0xFFFF
    616          
    617            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_208:
   \   00002C   AA..         MOV     R2,?V0
   \   00002E   02....       LJMP    ??Subroutine132_0 & 0xFFFF
    618          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine112_0
   \   000007                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0,A
   \   000009   EA           MOV     A,R2
   \   00000A   2403         ADD     A,#0x3
   \   00000C   FA           MOV     R2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FC           MOV     R4,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine129_0
   \   000003                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   7965         MOV     R1,#0x65
   \   000002   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005                REQUIRE ??Subroutine133_0
   \   000005                ; // Fall through to label ??Subroutine133_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine128_0 & 0xFFFF
    619          
    620          /***************************************************************************************************
    621           * @fn      MT_ZdoNodeDescRequest
    622           *
    623           * @brief   Handle a Node Descriptor request.
    624           *
    625           * @param   pData  - MT message data
    626           *
    627           * @return  void
    628           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    629          void MT_ZdoNodeDescRequest (uint8 *pBuf)
   \                     MT_ZdoNodeDescRequest:
    630          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    631            uint8 cmdId;
    632            uint8 retValue;
    633            zAddrType_t destAddr;
    634            uint16 shortAddr;
    635          
    636            /* parse header */
    637            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    638            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_249:
   \   00000D   5001         JNC     ??MT_ZdoNodeDescRequest_0
   \   00000F   0B           INC     R3
    639          
    640            /* Destination address */
    641            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNodeDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
    642            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_212:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
    643            pBuf += 2;
   \                     ??CrossCallReturnLabel_99:
   \   00001E   5001         JNC     ??MT_ZdoNodeDescRequest_1
   \   000020   0B           INC     R3
    644          
    645            /* Network address of interest */
    646            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    647            pBuf += 2;
    648          
    649            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoNodeDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7902         MOV     R1,#0x2
   \   00002B   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00002E   FA           MOV     R2,A
   \   00002F   E4           CLR     A
   \   000030   CA           XCH     A,R2
   \   000031   FB           MOV     R3,A
   \   000032   EC           MOV     A,R4
   \   000033   2A           ADD     A,R2
   \   000034   E4           CLR     A
   \   000035   3B           ADDC    A,R3
   \   000036   FD           MOV     R5,A
   \   000037   E9           MOV     A,R1
   \   000038   02....       LJMP    ??Subroutine124_0 & 0xFFFF
    650          
    651            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    652          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003                REQUIRE ??Subroutine113_0
   \   000003                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   000003   F9           MOV     R1,A
   \   000004   EC           MOV     A,R4
   \   000005   F8           MOV     R0,A
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine114_0
   \   000004                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EA           MOV     A,R2
   \   000006   2402         ADD     A,#0x2
   \   000008   FA           MOV     R2,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine115_0
   \   000004                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine119_0
   \   000004                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FE           MOV     R6,A
   \   000004   EA           MOV     A,R2
   \   000005   2403         ADD     A,#0x3
   \   000007   FA           MOV     R2,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL   ?XSTACK_DISP101_8
   \   000003   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000006                REQUIRE ??Subroutine125_0
   \   000006                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine126_0
   \   000002                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   E9           MOV     A,R1
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A                REQUIRE ??Subroutine127_0
   \   00000A                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000003   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000006   740A         MOV     A,#0xa
   \   000008                REQUIRE ??Subroutine128_0
   \   000008                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000003   FA           MOV     R2,A
   \   000004   7965         MOV     R1,#0x65
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET
    653          
    654          /***************************************************************************************************
    655           * @fn      MT_ZdoPowerDescRequest
    656           *
    657           * @brief   Handle a Power Descriptor request.
    658           *
    659           * @param   pData  - MT message data
    660           *
    661           * @return  void
    662           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    663          void MT_ZdoPowerDescRequest(uint8 *pBuf)
   \                     MT_ZdoPowerDescRequest:
    664          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    665            uint8 cmdId;
    666            uint8 retValue;
    667            zAddrType_t destAddr;
    668            uint16 shortAddr;
    669          
    670            /* parse header */
    671            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    672            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_250:
   \   00000D   5001         JNC     ??MT_ZdoPowerDescRequest_0
   \   00000F   0B           INC     R3
    673          
    674            /* Dev address */
    675            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoPowerDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
    676            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_213:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
    677            pBuf += 2;
   \                     ??CrossCallReturnLabel_100:
   \   00001E   5001         JNC     ??MT_ZdoPowerDescRequest_1
   \   000020   0B           INC     R3
    678          
    679            /* Network address of interest */
    680            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    681            pBuf += 2;
    682          
    683            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoPowerDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7903         MOV     R1,#0x3
   \   00002B   02....       LJMP    ?Subroutine3 & 0xFFFF
    684          
    685            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    686          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000003                REQUIRE ??Subroutine124_0
   \   000003                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   CA           XCH     A,R2
   \   000006   FB           MOV     R3,A
   \   000007   EC           MOV     A,R4
   \   000008   2A           ADD     A,R2
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   FD           MOV     R5,A
   \   00000C   7402         MOV     A,#0x2
   \   00000E   22           RET
    687          
    688          /***************************************************************************************************
    689           * @fn      MT_ZdoSimpleDescRequest
    690           *
    691           * @brief   Handle a Simple Descriptor request.
    692           *
    693           * @param   pBuf  - MT message data
    694           *
    695           * @return  void
    696           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    697          void MT_ZdoSimpleDescRequest(uint8 *pBuf)
   \                     MT_ZdoSimpleDescRequest:
    698          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    699            uint8 cmdId;
    700            uint8 retValue;
    701            uint8 epInt;
    702            zAddrType_t destAddr;
    703            uint16 shortAddr;
    704          
    705            /* parse header */
    706            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    707            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_251:
   \   00000D   5001         JNC     ??MT_ZdoSimpleDescRequest_0
   \   00000F   0B           INC     R3
    708          
    709            /* Dev address */
    710            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSimpleDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
    711            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_214:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
    712            pBuf += 2;
   \                     ??CrossCallReturnLabel_101:
   \   00001E   5001         JNC     ??MT_ZdoSimpleDescRequest_1
   \   000020   0B           INC     R3
    713          
    714            /* Network address of interest */
    715            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    716            pBuf += 2;
    717          
    718            /* endpoint/interface */
    719            epInt = *pBuf++;
    720          
    721            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
   \                     ??MT_ZdoSimpleDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   8A82         MOV     DPL,R2
   \   00002B   8B83         MOV     DPH,R3
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000034   12....       LCALL   ?XSTACK_DISP101_8
   \   000037   12....       LCALL   `??ZDP_SimpleDescReq::?relay`; Banked call to: ZDP_SimpleDescReq
   \   00003A   02....       LJMP    ??Subroutine125_0 & 0xFFFF
    722          
    723            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    724          }
    725          
    726          /***************************************************************************************************
    727           * @fn      MT_ZdoActiveEpRequest
    728           *
    729           * @brief   Handle a Active EP request.
    730           *
    731           * @param   pBuf  - MT message data
    732           *
    733           * @return  void
    734           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    735          void MT_ZdoActiveEpRequest(uint8 *pBuf)
   \                     MT_ZdoActiveEpRequest:
    736          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    737            uint8 cmdId;
    738            uint8 retValue;
    739            zAddrType_t destAddr;
    740            uint16 shortAddr;
    741          
    742            /* parse header */
    743            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    744            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_252:
   \   00000D   5001         JNC     ??MT_ZdoActiveEpRequest_0
   \   00000F   0B           INC     R3
    745          
    746            /* Dev address */
    747            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoActiveEpRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
    748            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_215:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
    749            pBuf += 2;
   \                     ??CrossCallReturnLabel_102:
   \   00001E   5001         JNC     ??MT_ZdoActiveEpRequest_1
   \   000020   0B           INC     R3
    750          
    751            /* Network address of interest */
    752            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    753            pBuf += 2;
    754          
    755            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoActiveEpRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7905         MOV     R1,#0x5
   \   00002B   02....       LJMP    ?Subroutine3 & 0xFFFF
    756          
    757            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    758          }
    759          
    760          /***************************************************************************************************
    761           * @fn      MT_ZdoMatchDescRequest
    762           *
    763           * @brief   Handle a Match Descriptor request.
    764           *
    765           * @param   pBuf  - MT message data
    766           *
    767           * @return  void
    768           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    769          void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    770          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV     A,#-0x4a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    771            uint8 cmdId;
    772            uint8 retValue = 0;
   \   00000A   12....       LCALL   ?Subroutine11 & 0xFFFF
    773            uint8 i, numInClusters, numOutClusters;
    774            uint16 profileId;
    775            zAddrType_t destAddr;
    776            uint16 shortAddr;
    777            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    778          
    779            /* parse header */
    780            cmdId = pBuf[MT_RPC_POS_CMD1];
    781            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_247:
   \   00000D   5001         JNC     ??MT_ZdoMatchDescRequest_0
   \   00000F   0B           INC     R3
    782          
    783            /* Dev address */
    784            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
    785            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_216:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
    786            pBuf += 2;
   \                     ??CrossCallReturnLabel_103:
   \   00001E   5001         JNC     ??MT_ZdoMatchDescRequest_1
   \   000020   0B           INC     R3
    787          
    788            /* Network address of interest */
    789            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_1:
   \   000021   12....       LCALL   ?Subroutine36 & 0xFFFF
    790            pBuf += 2;
   \                     ??CrossCallReturnLabel_43:
   \   000024   EA           MOV     A,R2
   \   000025   2402         ADD     A,#0x2
   \   000027   FA           MOV     R2,A
   \   000028   5001         JNC     ??MT_ZdoMatchDescRequest_2
   \   00002A   0B           INC     R3
    791          
    792            /* Profile ID */
    793            profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMatchDescRequest_2:
   \   00002B   12....       LCALL   ?Subroutine13 & 0xFFFF
    794            pBuf += 2;
    795          
    796            /* NumInClusters */
    797            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_2:
   \   00002E   5001         JNC     ??MT_ZdoMatchDescRequest_3
   \   000030   0B           INC     R3
    798            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \                     ??MT_ZdoMatchDescRequest_3:
   \   000031   E5..         MOV     A,?V2
   \   000033   C3           CLR     C
   \   000034   9411         SUBB    A,#0x11
   \   000036   5019         JNC     ??MT_ZdoMatchDescRequest_4
    799            {
    800              /* IN clusters */
    801              for ( i = 0; i < numInClusters; i++ )
   \   000038   7F00         MOV     R7,#0x0
   \                     ??MT_ZdoMatchDescRequest_5:
   \   00003A   EF           MOV     A,R7
   \   00003B   C3           CLR     C
   \   00003C   95..         SUBB    A,?V2
   \   00003E   501A         JNC     ??MT_ZdoMatchDescRequest_6
    802              {
    803                inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000040   12....       LCALL   ?Subroutine19 & 0xFFFF
    804                pBuf += 2;
    805              }
   \                     ??CrossCallReturnLabel_14:
   \   000043   742A         MOV     A,#0x2a
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00004B   5001         JNC     ??MT_ZdoMatchDescRequest_7
   \   00004D   0B           INC     R3
   \                     ??MT_ZdoMatchDescRequest_7:
   \   00004E   0F           INC     R7
   \   00004F   80E9         SJMP    ??MT_ZdoMatchDescRequest_5
    806            }
    807            else
    808            {
    809              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_4:
   \   000051   85..82       MOV     DPL,?XSP + 0
   \   000054   85..83       MOV     DPH,?XSP + 1
   \   000057   7480         MOV     A,#-0x80
   \   000059   F0           MOVX    @DPTR,A
    810            }
    811          
    812            /* NumOutClusters */
    813            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_6:
   \   00005A   8A82         MOV     DPL,R2
   \   00005C   8B83         MOV     DPH,R3
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   F5..         MOV     ?V3,A
   \   000061   A3           INC     DPTR
   \   000062   AA82         MOV     R2,DPL
   \   000064   AB83         MOV     R3,DPH
    814            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   000066   C3           CLR     C
   \   000067   9411         SUBB    A,#0x11
   \   000069   5019         JNC     ??MT_ZdoMatchDescRequest_8
    815            {
    816              /* OUT Clusters */
    817              for ( i = 0; i < numOutClusters; i++ )
   \   00006B   7F00         MOV     R7,#0x0
   \                     ??MT_ZdoMatchDescRequest_9:
   \   00006D   EF           MOV     A,R7
   \   00006E   C3           CLR     C
   \   00006F   95..         SUBB    A,?V3
   \   000071   501B         JNC     ??MT_ZdoMatchDescRequest_10
    818              {
    819                outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000073   12....       LCALL   ?Subroutine19 & 0xFFFF
    820                pBuf += 2;
    821              }
   \                     ??CrossCallReturnLabel_15:
   \   000076   740A         MOV     A,#0xa
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00007E   5001         JNC     ??MT_ZdoMatchDescRequest_11
   \   000080   0B           INC     R3
   \                     ??MT_ZdoMatchDescRequest_11:
   \   000081   0F           INC     R7
   \   000082   80E9         SJMP    ??MT_ZdoMatchDescRequest_9
    822            }
    823            else
    824            {
    825              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_8:
   \   000084   85..82       MOV     DPL,?XSP + 0
   \   000087   85..83       MOV     DPH,?XSP + 1
   \   00008A   7480         MOV     A,#-0x80
   \   00008C   804D         SJMP    ??MT_ZdoMatchDescRequest_12
    826            }
    827          
    828            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_10:
   \   00008E   85..82       MOV     DPL,?XSP + 0
   \   000091   85..83       MOV     DPH,?XSP + 1
   \   000094   E0           MOVX    A,@DPTR
   \   000095   7045         JNZ     ??MT_ZdoMatchDescRequest_13
    829            {
    830              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    831                                                 inClusters, numOutClusters, outClusters, 0);
   \   000097                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000097   75..00       MOV     ?V4,#0x0
   \   00009A   78..         MOV     R0,#?V4
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009F   740B         MOV     A,#0xb
   \   0000A1   12....       LCALL   ?XSTACK_DISP100_8
   \   0000A4   88..         MOV     ?V4,R0
   \   0000A6   89..         MOV     ?V5,R1
   \   0000A8   78..         MOV     R0,#?V4
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AD   78..         MOV     R0,#?V3
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   742E         MOV     A,#0x2e
   \   0000B4   12....       LCALL   ?XSTACK_DISP100_8
   \   0000B7   88..         MOV     ?V4,R0
   \   0000B9   89..         MOV     ?V5,R1
   \   0000BB   78..         MOV     R0,#?V4
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   78..         MOV     R0,#?V0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C5   A9..         MOV     R1,?V2
   \   0000C7   7409         MOV     A,#0x9
   \   0000C9   12....       LCALL   ?XSTACK_DISP101_8
   \   0000CC   12....       LCALL   `??ZDP_MatchDescReq::?relay`; Banked call to: ZDP_MatchDescReq
   \   0000CF   7408         MOV     A,#0x8
   \   0000D1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D4   E9           MOV     A,R1
   \   0000D5   85..82       MOV     DPL,?XSP + 0
   \   0000D8   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoMatchDescRequest_12:
   \   0000DB   F0           MOVX    @DPTR,A
    832            }
    833          
    834            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_13:
   \   0000DC                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000DC   AC..         MOV     R4,?XSP + 0
   \   0000DE   AD..         MOV     R5,?XSP + 1
   \   0000E0   7B01         MOV     R3,#0x1
   \   0000E2   EE           MOV     A,R6
   \   0000E3   FA           MOV     R2,A
   \   0000E4   7965         MOV     R1,#0x65
   \   0000E6   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    835          }
   \   0000E9   744A         MOV     A,#0x4a
   \   0000EB   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000003   EF           MOV     A,R7
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   F8           MOV     R0,A
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   E5..         MOV     A,?V4
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E5..         MOV     A,?V5
   \   000010   F0           MOVX    @DPTR,A
   \   000011   EA           MOV     A,R2
   \   000012   2402         ADD     A,#0x2
   \   000014   FA           MOV     R2,A
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000003   E4           CLR     A
   \   000004   39           ADDC    A,R1
   \   000005   FD           MOV     R5,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V4,A
   \   000007   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   00000A   E5..         MOV     A,?V4
   \   00000C   28           ADD     A,R0
   \   00000D   E4           CLR     A
   \   00000E   39           ADDC    A,R1
   \   00000F   F5..         MOV     ?V5,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0,A
   \   000007   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   00000A   E5..         MOV     A,?V0
   \   00000C   28           ADD     A,R0
   \   00000D   E4           CLR     A
   \   00000E   39           ADDC    A,R1
   \   00000F   F5..         MOV     ?V1,A
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V2,A
   \   00001A   EA           MOV     A,R2
   \   00001B   2403         ADD     A,#0x3
   \   00001D   FA           MOV     R2,A
   \   00001E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine116_0
   \   000001                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   E4           CLR     A
   \   000003   C8           XCH     A,R0
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008                REQUIRE ??Subroutine118_0
   \   000008                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000009   EC           MOV     A,R4
   \   00000A   28           ADD     A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine142_0
   \   000003                ; // Fall through to label ??Subroutine142_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    836          
    837          /***************************************************************************************************
    838           * @fn      MT_ZdoComplexDescRequest
    839           *
    840           * @brief   Handle a Complex Descriptor request.
    841           *
    842           * @param   pBuf  - MT message data
    843           *
    844           * @return  void
    845           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    846          void MT_ZdoComplexDescRequest(uint8 *pBuf)
   \                     MT_ZdoComplexDescRequest:
    847          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    848            uint8 cmdId;
    849            uint8 retValue;
    850            zAddrType_t destAddr;
    851            uint16 shortAddr;
    852          
    853            /* parse header */
    854            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    855            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_253:
   \   00000D   5001         JNC     ??MT_ZdoComplexDescRequest_0
   \   00000F   0B           INC     R3
    856          
    857            /* Dev address */
    858            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoComplexDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
    859            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_217:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
    860            pBuf += 2;
   \                     ??CrossCallReturnLabel_104:
   \   00001E   5001         JNC     ??MT_ZdoComplexDescRequest_1
   \   000020   0B           INC     R3
    861          
    862            /* Network address of interest */
    863            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    864            pBuf += 2;
    865          
    866            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoComplexDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7910         MOV     R1,#0x10
   \   00002B   02....       LJMP    ?Subroutine3 & 0xFFFF
    867          
    868            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    869          }
    870          
    871          /***************************************************************************************************
    872           * @fn      MT_ZdoUserDescRequest
    873           *
    874           * @brief   Handle a User Descriptor request.
    875           *
    876           * @param   pBuf  - MT message data
    877           *
    878           * @return  void
    879           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    880          void MT_ZdoUserDescRequest(uint8 *pBuf)
   \                     MT_ZdoUserDescRequest:
    881          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    882            uint8 cmdId;
    883            uint8 retValue;
    884            zAddrType_t destAddr;
    885            uint16 shortAddr;
    886          
    887            /* parse header */
    888            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    889            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_254:
   \   00000D   5001         JNC     ??MT_ZdoUserDescRequest_0
   \   00000F   0B           INC     R3
    890          
    891            /* Dev address */
    892            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
    893            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_218:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
    894            pBuf += 2;
   \                     ??CrossCallReturnLabel_105:
   \   00001E   5001         JNC     ??MT_ZdoUserDescRequest_1
   \   000020   0B           INC     R3
    895          
    896            /* Network address of interest */
    897            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
    898            pBuf += 2;
    899          
    900            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
   \                     ??MT_ZdoUserDescRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   7911         MOV     R1,#0x11
   \   00002B   02....       LJMP    ?Subroutine3 & 0xFFFF
    901          
    902            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    903          }
    904          
    905          /***************************************************************************************************
    906           * @fn      MT_ZdoEndDevAnnce
    907           *
    908           * @brief   Handle a End Device Announce Descriptor request.
    909           *
    910           * @param   pBuf  - MT message data
    911           *
    912           * @return  void
    913           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    914          void MT_ZdoEndDevAnnce(uint8 *pBuf)
   \                     MT_ZdoEndDevAnnce:
    915          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine44 & 0xFFFF
    916            uint8 cmdId;
    917            uint8 retValue;
    918            uint16 shortAddr;
    919            uint8 *pIEEEAddr;
    920          
    921            /* parse header */
    922            cmdId = pBuf[MT_RPC_POS_CMD1];
    923            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_56:
   \   00000D   5001         JNC     ??MT_ZdoEndDevAnnce_0
   \   00000F   0D           INC     R5
    924          
    925            /* network address */
    926            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevAnnce_0:
   \   000010   12....       LCALL   ?Subroutine26 & 0xFFFF
    927            pBuf += 2;
   \                     ??CrossCallReturnLabel_26:
   \   000013   5001         JNC     ??MT_ZdoEndDevAnnce_1
   \   000015   0D           INC     R5
    928          
    929            /* extended address */
    930            pIEEEAddr = pBuf;
    931            pBuf += Z_EXTADDR_LEN;
    932          
    933            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
   \                     ??MT_ZdoEndDevAnnce_1:
   \   000016                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000016   88..         MOV     ?V0,R0
   \   000018   78..         MOV     R0,#?V0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001D   8C82         MOV     DPL,R4
   \   00001F   8D83         MOV     DPH,R5
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00002E   7401         MOV     A,#0x1
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   02....       LJMP    ?Subroutine8 & 0xFFFF
    934          
    935            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    936          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000007   E4           CLR     A
   \   000008   39           ADDC    A,R1
   \   000009   FB           MOV     R3,A
   \   00000A   EC           MOV     A,R4
   \   00000B   2402         ADD     A,#0x2
   \   00000D   FC           MOV     R4,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine117_0
   \   000001                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   000003   EA           MOV     A,R2
   \   000004   28           ADD     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   2403         ADD     A,#0x3
   \   00000F   FC           MOV     R4,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000003   FA           MOV     R2,A
   \   000004                REQUIRE ??Subroutine132_0
   \   000004                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00000A   22           RET
    937          
    938          /***************************************************************************************************
    939           * @fn      MT_ZdoUserDescSet
    940           *
    941           * @brief   Handle a User Descriptor Set.
    942           *
    943           * @param   pBuf  - MT message data
    944           *
    945           * @return  void
    946           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    947          void MT_ZdoUserDescSet(uint8 *pBuf)
   \                     MT_ZdoUserDescSet:
    948          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV     A,#-0x1b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    949            uint8 cmdId;
    950            uint8 retValue;
    951            zAddrType_t destAddr;
    952            uint16 shortAddr;
    953            UserDescriptorFormat_t userDesc;
    954          
    955            /* parse header */
    956            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine45 & 0xFFFF
    957            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_61:
   \   00000D   5001         JNC     ??MT_ZdoUserDescSet_0
   \   00000F   0B           INC     R3
    958          
    959            /* Dev address */
    960            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUserDescSet_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
    961            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_219:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
    962            pBuf += 2;
   \                     ??CrossCallReturnLabel_106:
   \   00001E   5001         JNC     ??MT_ZdoUserDescSet_1
   \   000020   0B           INC     R3
    963          
    964            /* Network address of interest */
    965            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUserDescSet_1:
   \   000021   12....       LCALL   ?Subroutine21 & 0xFFFF
    966            pBuf += 2;
    967          
    968            /* User descriptor */
    969            userDesc.len = *pBuf++;
   \                     ??CrossCallReturnLabel_18:
   \   000024   C0E0         PUSH    A
   \   000026   740A         MOV     A,#0xa
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   D0E0         POP     A
   \   00002D   12....       LCALL   ?Subroutine68 & 0xFFFF
    970            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
   \                     ??CrossCallReturnLabel_122:
   \   000030   89..         MOV     ?V4,R1
   \   000032   8A..         MOV     ?V5,R2
   \   000034   88..         MOV     ?V6,R0
   \   000036   78..         MOV     R0,#?V4
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003B   740D         MOV     A,#0xd
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E0           MOVX    A,@DPTR
   \   000041   FC           MOV     R4,A
   \   000042   7D00         MOV     R5,#0x0
   \   000044   740E         MOV     A,#0xe
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   AA82         MOV     R2,DPL
   \   00004B   AB83         MOV     R3,DPH
   \   00004D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?DEALLOC_XSTACK8
    971            pBuf += 16;
    972          
    973            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
   \   000055                ; Setup parameters for call to function ZDP_UserDescSet
   \   000055   740A         MOV     A,#0xa
   \   000057   12....       LCALL   ?XSTACK_DISP100_8
   \   00005A   88..         MOV     ?V2,R0
   \   00005C   89..         MOV     ?V3,R1
   \   00005E   78..         MOV     R0,#?V2
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   7900         MOV     R1,#0x0
   \   000065   EE           MOV     A,R6
   \   000066   FC           MOV     R4,A
   \   000067   EF           MOV     A,R7
   \   000068   FD           MOV     R5,A
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?XSTACK_DISP101_8
   \   00006E   12....       LCALL   `??ZDP_UserDescSet::?relay`; Banked call to: ZDP_UserDescSet
   \   000071   7402         MOV     A,#0x2
   \   000073   12....       LCALL   ?DEALLOC_XSTACK8
   \   000076   12....       LCALL   ?Subroutine65 & 0xFFFF
    974          
    975            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_113:
   \   000079   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    976          }
   \   00007C   741B         MOV     A,#0x1b
   \   00007E   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000003   FE           MOV     R6,A
   \   000004   E4           CLR     A
   \   000005   39           ADDC    A,R1
   \   000006   FF           MOV     R7,A
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine140_0
   \   000003                ; // Fall through to label ??Subroutine140_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine140_0:
   \   000000   7F07         MOV     R7,#0x7
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000003   A3           INC     DPTR
   \   000004   A982         MOV     R1,DPL
   \   000006   AA83         MOV     R2,DPH
   \   000008   22           RET
    977          
    978          /***************************************************************************************************
    979           * @fn      MT_ZdoServiceDiscRequest
    980           *
    981           * @brief   Handle a Server Discovery request.
    982           *
    983           * @param   pBuf  - MT message data
    984           *
    985           * @return  void
    986           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    987          void MT_ZdoServiceDiscRequest(uint8 *pBuf)
   \                     MT_ZdoServiceDiscRequest:
    988          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    989            uint8 cmdId;
    990            uint8 retValue;
    991            uint16 serviceMask;
    992          
    993            /* parse header */
    994            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
    995            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_255:
   \   00000D   5001         JNC     ??MT_ZdoServiceDiscRequest_0
   \   00000F   0B           INC     R3
    996          
    997            /* Service Mask */
    998            serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
    999            pBuf += 2;
   1000          
   1001            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
   \                     ??MT_ZdoServiceDiscRequest_0:
   \   000010                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   000010   7900         MOV     R1,#0x0
   \   000012   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000015   FB           MOV     R3,A
   \   000016   EC           MOV     A,R4
   \   000017   FA           MOV     R2,A
   \   000018   12....       LCALL   `??ZDP_ServerDiscReq::?relay`; Banked call to: ZDP_ServerDiscReq
   \   00001B   02....       LJMP    ?Subroutine8 & 0xFFFF
   1002          
   1003            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1004          }
   1005          
   1006          #if defined ( ZIGBEE_CHILD_AGING )
   1007          /***************************************************************************************************
   1008           * @fn      MT_ZdoEndDeviceTimeoutRequest
   1009           *
   1010           * @brief   Handle an End Device Timeout request.
   1011           *
   1012           * @param   pBuf  - MT message data
   1013           *
   1014           * @return  void
   1015           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1016          void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf)
   \                     MT_ZdoEndDeviceTimeoutRequest:
   1017          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine44 & 0xFFFF
   1018            uint8 cmdId;
   1019            uint8 retValue;
   1020            uint16 parentAddr;
   1021            uint16 reqTimeout;
   1022          
   1023            /* parse header */
   1024            cmdId = pBuf[MT_RPC_POS_CMD1];
   1025            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_57:
   \   00000D   5001         JNC     ??MT_ZdoEndDeviceTimeoutRequest_0
   \   00000F   0D           INC     R5
   1026          
   1027            /* Parent address */
   1028            parentAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDeviceTimeoutRequest_0:
   \   000010   12....       LCALL   ?Subroutine26 & 0xFFFF
   1029            pBuf += 2;
   \                     ??CrossCallReturnLabel_27:
   \   000013   5001         JNC     ??MT_ZdoEndDeviceTimeoutRequest_1
   \   000015   0D           INC     R5
   1030          
   1031            /* Requested Timeout */
   1032            reqTimeout = BUILD_UINT16( pBuf[0], pBuf[1] );
   1033            pBuf += 2;
   1034          
   1035            retValue = (uint8)ZDP_EndDeviceTimeoutReq( parentAddr, reqTimeout, 0 );
   \                     ??MT_ZdoEndDeviceTimeoutRequest_1:
   \   000016                ; Setup parameters for call to function ZDP_EndDeviceTimeoutReq
   \   000016   7900         MOV     R1,#0x0
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   00001F   FD           MOV     R5,A
   \   000020   AC..         MOV     R4,?V0
   \   000022   12....       LCALL   `??ZDP_EndDeviceTimeoutReq::?relay`; Banked call to: ZDP_EndDeviceTimeoutReq
   \   000025   E9           MOV     A,R1
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   12....       LCALL   ?Subroutine69 & 0xFFFF
   1036          
   1037            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_273:
   \   00002F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1038          }
   \   000032   7401         MOV     A,#0x1
   \   000034   02....       LJMP    ??Subroutine122_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
   1039          #endif // ZIGBEE_CHILD_AGING
   1040          
   1041          /***************************************************************************************************
   1042           * @fn      MT_ZdoEndDevBindRequest
   1043           *
   1044           * @brief   Handle a End Device Bind request.
   1045           *
   1046           * @param   pBuf  - MT message data
   1047           *
   1048           * @return  void
   1049           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1050          void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
   1051          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV     A,#-0x46
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1052            uint8 cmdId;
   1053            uint8 retValue = 0;
   \   00000A   12....       LCALL   ?Subroutine11 & 0xFFFF
   1054            uint8 i, epInt, numInClusters, numOutClusters;
   1055            zAddrType_t destAddr;
   1056            uint16 shortAddr;
   1057            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
   1058          
   1059            /* parse header */
   1060            cmdId = pBuf[MT_RPC_POS_CMD1];
   1061            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_248:
   \   00000D   5001         JNC     ??MT_ZdoEndDevBindRequest_0
   \   00000F   0B           INC     R3
   1062          
   1063            /* Dev address */
   1064            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
   1065            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_220:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
   1066            pBuf += 2;
   \                     ??CrossCallReturnLabel_107:
   \   00001E   5001         JNC     ??MT_ZdoEndDevBindRequest_1
   \   000020   0B           INC     R3
   1067          
   1068            /* Local coordinator of the binding */
   1069            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   000021   12....       LCALL   ?Subroutine36 & 0xFFFF
   1070            pBuf += 2;
   1071          
   1072            /* For now, skip past the extended address */
   1073            pBuf += Z_EXTADDR_LEN;
   1074          
   1075            /* Endpoint */
   1076            epInt = *pBuf++;
   \                     ??CrossCallReturnLabel_44:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   FF           MOV     R7,A
   \   000034   EA           MOV     A,R2
   \   000035   240B         ADD     A,#0xb
   \   000037   FA           MOV     R2,A
   \   000038   5001         JNC     ??MT_ZdoEndDevBindRequest_2
   \   00003A   0B           INC     R3
   1077          
   1078            /* Profile ID */
   1079            profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   00003B   12....       LCALL   ?Subroutine13 & 0xFFFF
   1080            pBuf += 2;
   1081          
   1082            /* NumInClusters */
   1083            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_3:
   \   00003E   5001         JNC     ??MT_ZdoEndDevBindRequest_3
   \   000040   0B           INC     R3
   1084            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   000041   E5..         MOV     A,?V2
   \   000043   C3           CLR     C
   \   000044   9410         SUBB    A,#0x10
   \   000046   501C         JNC     ??MT_ZdoEndDevBindRequest_4
   1085            {
   1086              for ( i = 0; i < numInClusters; i++ )
   \   000048   75..00       MOV     ?V3,#0x0
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   00004B   E5..         MOV     A,?V3
   \   00004D   C3           CLR     C
   \   00004E   95..         SUBB    A,?V2
   \   000050   501B         JNC     ??MT_ZdoEndDevBindRequest_6
   1087              {
   1088                inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000052   12....       LCALL   ?Subroutine16 & 0xFFFF
   1089                pBuf += 2;
   1090              }
   \                     ??CrossCallReturnLabel_9:
   \   000055   7428         MOV     A,#0x28
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00005D   5001         JNC     ??MT_ZdoEndDevBindRequest_7
   \   00005F   0B           INC     R3
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   000060   05..         INC     ?V3
   \   000062   80E7         SJMP    ??MT_ZdoEndDevBindRequest_5
   1091            }
   1092            else
   1093            {
   1094              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   7480         MOV     A,#-0x80
   \   00006C   F0           MOVX    @DPTR,A
   1095            }
   1096          
   1097            /* NumOutClusters */
   1098            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   8B83         MOV     DPH,R3
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F5..         MOV     ?V6,A
   \   000074   A3           INC     DPTR
   \   000075   AA82         MOV     R2,DPL
   \   000077   AB83         MOV     R3,DPH
   1099            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   000079   C3           CLR     C
   \   00007A   9410         SUBB    A,#0x10
   \   00007C   501C         JNC     ??MT_ZdoEndDevBindRequest_8
   1100            {
   1101              for ( i = 0; i < numOutClusters; i++ )
   \   00007E   75..00       MOV     ?V3,#0x0
   \                     ??MT_ZdoEndDevBindRequest_9:
   \   000081   E5..         MOV     A,?V3
   \   000083   C3           CLR     C
   \   000084   95..         SUBB    A,?V6
   \   000086   501C         JNC     ??MT_ZdoEndDevBindRequest_10
   1102              {
   1103                outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000088   12....       LCALL   ?Subroutine16 & 0xFFFF
   1104                pBuf += 2;
   1105              }
   \                     ??CrossCallReturnLabel_10:
   \   00008B   740A         MOV     A,#0xa
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000093   5001         JNC     ??MT_ZdoEndDevBindRequest_11
   \   000095   0B           INC     R3
   \                     ??MT_ZdoEndDevBindRequest_11:
   \   000096   05..         INC     ?V3
   \   000098   80E7         SJMP    ??MT_ZdoEndDevBindRequest_9
   1106            }
   1107            else
   1108            {
   1109              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_8:
   \   00009A   85..82       MOV     DPL,?XSP + 0
   \   00009D   85..83       MOV     DPH,?XSP + 1
   \   0000A0   7480         MOV     A,#-0x80
   \   0000A2   8056         SJMP    ??MT_ZdoEndDevBindRequest_12
   1110            }
   1111          
   1112            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_10:
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   704E         JNZ     ??MT_ZdoEndDevBindRequest_13
   1113            {
   1114              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
   1115                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   0000AD                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   0000AD   75..00       MOV     ?V3,#0x0
   \   0000B0   78..         MOV     R0,#?V3
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B5   740B         MOV     A,#0xb
   \   0000B7   12....       LCALL   ?XSTACK_DISP100_8
   \   0000BA   88..         MOV     ?V4,R0
   \   0000BC   89..         MOV     ?V5,R1
   \   0000BE   78..         MOV     R0,#?V4
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C3   E5..         MOV     A,?V6
   \   0000C5   F5..         MOV     ?V3,A
   \   0000C7   78..         MOV     R0,#?V3
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CC   742C         MOV     A,#0x2c
   \   0000CE   12....       LCALL   ?XSTACK_DISP100_8
   \   0000D1   88..         MOV     ?V4,R0
   \   0000D3   89..         MOV     ?V5,R1
   \   0000D5   78..         MOV     R0,#?V4
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   78..         MOV     R0,#?V2
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DF   78..         MOV     R0,#?V0
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   EF           MOV     A,R7
   \   0000E5   F9           MOV     R1,A
   \   0000E6   740A         MOV     A,#0xa
   \   0000E8   12....       LCALL   ?XSTACK_DISP101_8
   \   0000EB   12....       LCALL   `??ZDP_EndDeviceBindReq::?relay`; Banked call to: ZDP_EndDeviceBindReq
   \   0000EE   7409         MOV     A,#0x9
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F3   E9           MOV     A,R1
   \   0000F4   85..82       MOV     DPL,?XSP + 0
   \   0000F7   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoEndDevBindRequest_12:
   \   0000FA   F0           MOVX    @DPTR,A
   1116            }
   1117          
   1118            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_13:
   \   0000FB                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000FB   AC..         MOV     R4,?XSP + 0
   \   0000FD   AD..         MOV     R5,?XSP + 1
   \   0000FF   7B01         MOV     R3,#0x1
   \   000101   EE           MOV     A,R6
   \   000102   FA           MOV     R2,A
   \   000103   7965         MOV     R1,#0x65
   \   000105   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1119          }
   \   000108   7446         MOV     A,#0x46
   \   00010A   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   A8..         MOV     R0,?V3
   \   000005   E8           MOV     A,R0
   \   000006   28           ADD     A,R0
   \   000007   F8           MOV     R0,A
   \   000008   E4           CLR     A
   \   000009   33           RLC     A
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET
   1120          
   1121          /***************************************************************************************************
   1122           * @fn      MT_ZdoBindRequest
   1123           *
   1124           * @brief   Handle a Bind request.
   1125           *
   1126           * @param   pBuf  - MT message data
   1127           *
   1128           * @return  void
   1129           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1130          void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
   1131          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1132            uint8 cmdId;
   1133            uint8 retValue;
   1134            zAddrType_t destAddr, devAddr;
   1135            uint8 *pSrcAddr, *ptr;
   1136            uint8 srcEPInt, dstEPInt;
   1137            uint16 clusterID;
   1138          
   1139            /* parse header */
   1140            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   1141            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_288:
   \   000011   5001         JNC     ??MT_ZdoBindRequest_0
   \   000013   0F           INC     R7
   1142          
   1143            /* Dev address */
   1144            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoBindRequest_0:
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine52 & 0xFFFF
   1145            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_74:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine12 & 0xFFFF
   1146            pBuf += 2;
   1147          
   1148            /* SrcAddress */
   1149            pSrcAddr = pBuf;
   1150            pBuf += Z_EXTADDR_LEN;
   1151          
   1152            /* SrcEPInt */
   1153            srcEPInt = *pBuf++;
   1154          
   1155            /* ClusterID */
   1156            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   1157            pBuf += 2;
   1158          
   1159            /* Destination Address mode */
   1160            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_0:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E8           MOV     A,R0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   EE           MOV     A,R6
   \   000028   2403         ADD     A,#0x3
   \   00002A   FE           MOV     R6,A
   \   00002B   5001         JNC     ??MT_ZdoBindRequest_1
   \   00002D   0F           INC     R7
   1161          
   1162            /* Destination Address */
   1163            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoBindRequest_1:
   \   00002E   7403         MOV     A,#0x3
   \   000030   68           XRL     A,R0
   \   000031   700E         JNZ     ??MT_ZdoBindRequest_2
   1164            {
   1165              ptr = pBuf;
   1166              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   EE           MOV     A,R6
   \   000034   FC           MOV     R4,A
   \   000035   EF           MOV     A,R7
   \   000036   FD           MOV     R5,A
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP101_8
   \   00003C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003F   800D         SJMP    ??CrossCallReturnLabel_144
   1167            }
   1168            else
   1169            {
   1170              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoBindRequest_2:
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   1171            }
   \                     ??CrossCallReturnLabel_268:
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?Subroutine79 & 0xFFFF
   1172            /* The short address occupies LSB two bytes */
   1173            pBuf += Z_EXTADDR_LEN;
   1174          
   1175            /* DstEPInt */
   1176            dstEPInt = *pBuf;
   1177          
   1178            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??CrossCallReturnLabel_144:
   \   00004E                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004E   75..00       MOV     ?V6,#0x0
   \   000051   78..         MOV     R0,#?V6
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F5..         MOV     ?V6,A
   \   000065   78..         MOV     R0,#?V6
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   7403         MOV     A,#0x3
   \   00006C   12....       LCALL   ?XSTACK_DISP100_8
   \   00006F   88..         MOV     ?V6,R0
   \   000071   89..         MOV     ?V7,R1
   \   000073   78..         MOV     R0,#?V6
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   78..         MOV     R0,#?V4
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   78..         MOV     R0,#?V2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   A9..         MOV     R1,?V1
   \   000084   7412         MOV     A,#0x12
   \   000086   12....       LCALL   ?XSTACK_DISP102_8
   \   000089   7A21         MOV     R2,#0x21
   \   00008B   02....       LJMP    ?Subroutine6 & 0xFFFF
   1179          
   1180            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1181          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   00000A   740A         MOV     A,#0xa
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EE           MOV     A,R6
   \   000006   2402         ADD     A,#0x2
   \   000008   F5..         MOV     ?V2,A
   \   00000A   E4           CLR     A
   \   00000B   3F           ADDC    A,R7
   \   00000C   F5..         MOV     ?V3,A
   \   00000E   E5..         MOV     A,?V2
   \   000010   2408         ADD     A,#0x8
   \   000012   FE           MOV     R6,A
   \   000013   E4           CLR     A
   \   000014   35..         ADDC    A,?V3
   \   000016   FF           MOV     R7,A
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V1,A
   \   00001E   A3           INC     DPTR
   \   00001F   AE82         MOV     R6,DPL
   \   000021   AF83         MOV     R7,DPH
   \   000023   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000026   F5..         MOV     ?V4,A
   \   000028   E4           CLR     A
   \   000029   39           ADDC    A,R1
   \   00002A   F5..         MOV     ?V5,A
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   7409         MOV     A,#0x9
   \   000036   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   `??ZDP_BindUnbindReq::?relay`; Banked call to: ZDP_BindUnbindReq
   \   000005   7408         MOV     A,#0x8
   \   000007   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00000D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000010   7413         MOV     A,#0x13
   \   000012                REQUIRE ??Subroutine120_0
   \   000012                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0,A
   \   000009   EE           MOV     A,R6
   \   00000A   2403         ADD     A,#0x3
   \   00000C   FE           MOV     R6,A
   \   00000D   22           RET
   1182          
   1183          /***************************************************************************************************
   1184           * @fn      MT_ZdoUnbindRequest
   1185           *
   1186           * @brief   Handle a Unbind request.
   1187           *
   1188           * @param   pBuf  - MT message data
   1189           *
   1190           * @return  void
   1191           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1192          void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
   1193          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1194            uint8 cmdId;
   1195            uint8 retValue;
   1196            zAddrType_t destAddr, devAddr;
   1197            uint8 *pSrcAddr, *ptr;
   1198            uint8 srcEPInt, dstEPInt;
   1199            uint16 clusterID;
   1200          
   1201            /* parse header */
   1202            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   1203            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_289:
   \   000011   5001         JNC     ??MT_ZdoUnbindRequest_0
   \   000013   0F           INC     R7
   1204          
   1205            /* dev address */
   1206            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoUnbindRequest_0:
   \   000014   7412         MOV     A,#0x12
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine52 & 0xFFFF
   1207            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_75:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine12 & 0xFFFF
   1208            pBuf += 2;
   1209          
   1210            /* SrcAddress */
   1211            pSrcAddr = pBuf;
   1212            pBuf += Z_EXTADDR_LEN;
   1213          
   1214            /* SrcEPInt */
   1215            srcEPInt = *pBuf++;
   1216          
   1217            /* ClusterID */
   1218            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   1219            pBuf += 2;
   1220          
   1221            /* Destination Address mode */
   1222            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_1:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   E8           MOV     A,R0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   EE           MOV     A,R6
   \   000028   2403         ADD     A,#0x3
   \   00002A   FE           MOV     R6,A
   \   00002B   5001         JNC     ??MT_ZdoUnbindRequest_1
   \   00002D   0F           INC     R7
   1223          
   1224            /* Destination Address */
   1225            if ( devAddr.addrMode == Addr64Bit )
   \                     ??MT_ZdoUnbindRequest_1:
   \   00002E   7403         MOV     A,#0x3
   \   000030   68           XRL     A,R0
   \   000031   700E         JNZ     ??MT_ZdoUnbindRequest_2
   1226            {
   1227              ptr = pBuf;
   1228              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000033                ; Setup parameters for call to function sAddrExtCpy
   \   000033   EE           MOV     A,R6
   \   000034   FC           MOV     R4,A
   \   000035   EF           MOV     A,R7
   \   000036   FD           MOV     R5,A
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP101_8
   \   00003C   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   00003F   800D         SJMP    ??CrossCallReturnLabel_145
   1229            }
   1230            else
   1231            {
   1232              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUnbindRequest_2:
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   1233            }
   \                     ??CrossCallReturnLabel_269:
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   12....       LCALL   ?Subroutine79 & 0xFFFF
   1234            /* The short address occupies LSB two bytes */
   1235            pBuf += Z_EXTADDR_LEN;
   1236          
   1237            /* dstEPInt */
   1238            dstEPInt = *pBuf;
   1239          
   1240            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??CrossCallReturnLabel_145:
   \   00004E                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00004E   75..00       MOV     ?V6,#0x0
   \   000051   78..         MOV     R0,#?V6
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F5..         MOV     ?V6,A
   \   000065   78..         MOV     R0,#?V6
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   7403         MOV     A,#0x3
   \   00006C   12....       LCALL   ?XSTACK_DISP100_8
   \   00006F   88..         MOV     ?V6,R0
   \   000071   89..         MOV     ?V7,R1
   \   000073   78..         MOV     R0,#?V6
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   78..         MOV     R0,#?V4
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   78..         MOV     R0,#?V2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   A9..         MOV     R1,?V1
   \   000084   7412         MOV     A,#0x12
   \   000086   12....       LCALL   ?XSTACK_DISP102_8
   \   000089   7A22         MOV     R2,#0x22
   \   00008B   02....       LJMP    ?Subroutine6 & 0xFFFF
   1241          
   1242            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1243          }
   1244          
   1245          #if defined (MT_SYS_KEY_MANAGEMENT)
   1246          /***************************************************************************************************
   1247           * @fn      MT_ZdoSetLinkKey
   1248           *
   1249           * @brief   Set an application or trust center link key.
   1250           *
   1251           * @param   pBuf  - MT message data
   1252           *
   1253           * @return  void
   1254           ***************************************************************************************************/
   1255          void MT_ZdoSetLinkKey(uint8 *pBuf)
   1256          {
   1257            uint8 cmdId;
   1258            uint8 retValue;
   1259            uint8 *pExtAddr;
   1260            uint8 *pKey;
   1261            uint16 shortAddr;
   1262          
   1263            /* parse header */
   1264            cmdId = pBuf[MT_RPC_POS_CMD1];
   1265            pBuf += MT_RPC_FRAME_HDR_SZ;
   1266          
   1267            /* ShortAddr */
   1268            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1269            pBuf += 2;
   1270          
   1271            /* Extended Addr */
   1272            pExtAddr = pBuf;
   1273            pBuf += Z_EXTADDR_LEN;
   1274          
   1275            /* Key data */
   1276            pKey = pBuf;
   1277          
   1278            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1279          
   1280            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1281          }
   1282          
   1283          /***************************************************************************************************
   1284           * @fn      MT_ZdoRemoveLinkKey
   1285           *
   1286           * @brief   Remove an application or trust center link key.
   1287           *
   1288           * @param   pBuf  - MT message data
   1289           *
   1290           * @return  void
   1291           ***************************************************************************************************/
   1292          void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1293          {
   1294            uint8 cmdId;
   1295            uint8 retValue;
   1296            uint8 *pExtAddr;
   1297          
   1298            /* parse header */
   1299            cmdId = pBuf[MT_RPC_POS_CMD1];
   1300            pBuf += MT_RPC_FRAME_HDR_SZ;
   1301          
   1302            /* ShortAddr */
   1303            pExtAddr = pBuf;
   1304          
   1305            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1306          
   1307            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1308          }
   1309          
   1310          /***************************************************************************************************
   1311           * @fn      MT_ZdoGetLinkKey
   1312           *
   1313           * @brief   Get the application link key.
   1314           *
   1315           * @param   pBuf  - MT message data
   1316           *
   1317           * @return  void
   1318           ***************************************************************************************************/
   1319          void MT_ZdoGetLinkKey(uint8 *pBuf)
   1320          {
   1321            uint8 cmdId;
   1322            uint8 retValue;
   1323            uint8 *pExtAddr;
   1324            uint8 *retBuf = NULL;
   1325            uint8 len;
   1326            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1327            uint16 apsLinkKeyNvId;
   1328          
   1329            // parse header
   1330            cmdId = pBuf[MT_RPC_POS_CMD1];
   1331            pBuf += MT_RPC_FRAME_HDR_SZ;
   1332          
   1333            // Extended Address
   1334            pExtAddr = pBuf;
   1335          
   1336            // Fetch the key NV ID
   1337            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1338          
   1339            if (retValue == ZSuccess)
   1340            {
   1341              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1342              {
   1343                // retrieve key from NV
   1344                if (osal_nv_read( apsLinkKeyNvId, 0,
   1345                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1346                {
   1347                  retValue = ZNwkUnknownDevice;
   1348                }
   1349              }
   1350              else
   1351              {
   1352                retValue = ZNwkUnknownDevice;
   1353              }
   1354            }
   1355          
   1356            // Construct the response message
   1357            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1358            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1359            {
   1360              if (retValue == ZSuccess)
   1361              {
   1362                // Extended Address
   1363                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1364          
   1365                // Key data
   1366                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
   1367              }
   1368              else
   1369              {
   1370                // Failed case - set the rest fields to all FF
   1371                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
   1372              }
   1373          
   1374              retBuf[0] = retValue;  // Status
   1375          
   1376              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1377          
   1378              // clear retBuf because it contains key data and free allocated memory
   1379              osal_memset(retBuf, 0x00, len);
   1380          
   1381              osal_mem_free(retBuf);
   1382            }
   1383          
   1384            // clear copy of key in RAM
   1385            if (pApsLinkKey != NULL)
   1386            {
   1387              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1388          
   1389              osal_mem_free(pApsLinkKey);
   1390            }
   1391          
   1392            return;
   1393          }
   1394          #endif // MT_SYS_KEY_MANAGEMENT
   1395          
   1396          #if defined (MT_ZDO_MGMT)
   1397          /***************************************************************************************************
   1398           * @fn      MT_ZdoMgmtNwkDiscRequest
   1399           *
   1400           * @brief   Handle a Mgmt Nwk Discovery request.
   1401           *
   1402           * @param   pBuf  - MT message data
   1403           *
   1404           * @return  void
   1405           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1406          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtNwkDiscRequest:
   1407          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1408            uint8 cmdId;
   1409            uint8 retValue;
   1410            zAddrType_t destAddr;
   1411            uint32 scanChannels;
   1412            uint8 scanDuration, startIndex;
   1413          
   1414            /* parse header */
   1415            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   1416            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_256:
   \   00000D   5001         JNC     ??MT_ZdoMgmtNwkDiscRequest_0
   \   00000F   0B           INC     R3
   1417          
   1418            /* Dev address */
   1419            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMgmtNwkDiscRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
   1420            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_221:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
   1421            pBuf += 2;
   \                     ??CrossCallReturnLabel_108:
   \   00001E   5001         JNC     ??MT_ZdoMgmtNwkDiscRequest_1
   \   000020   0B           INC     R3
   1422          
   1423            /* Scan Channels */
   1424            scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1425            pBuf += 4;
   1426          
   1427            /* Scan Duration */
   1428            scanDuration = *pBuf++;
   1429          
   1430            /* Start Index */
   1431            startIndex = *pBuf;
   1432          
   1433            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   \                     ??MT_ZdoMgmtNwkDiscRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_MgmtNwkDiscReq
   \   000021   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000024   12....       LCALL   ?L_SHL
   \   000027   78..         MOV     R0,#?V0
   \   000029   79..         MOV     R1,#?V4
   \   00002B   12....       LCALL   ?L_ADD
   \   00002E   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000031   12....       LCALL   ?L_SHL
   \   000034   78..         MOV     R0,#?V0
   \   000036   79..         MOV     R1,#?V4
   \   000038   12....       LCALL   ?L_ADD
   \   00003B   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00003E   12....       LCALL   ?L_SHL
   \   000041   78..         MOV     R0,#?V0
   \   000043   79..         MOV     R1,#?V4
   \   000045   12....       LCALL   ?L_ADD
   \   000048   78..         MOV     R0,#?V0
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   8A82         MOV     DPL,R2
   \   000051   8B83         MOV     DPH,R3
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   7405         MOV     A,#0x5
   \   00005E   12....       LCALL   ?XSTACK_DISP101_8
   \   000061   12....       LCALL   `??ZDP_MgmtNwkDiscReq::?relay`; Banked call to: ZDP_MgmtNwkDiscReq
   \   000064   7404         MOV     A,#0x4
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   12....       LCALL   ?Subroutine75 & 0xFFFF
   1434          
   1435            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_136:
   \   00006C                REQUIRE ?Subroutine9
   \   00006C                ; // Fall through to label ?Subroutine9
   1436          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   FA           MOV     R2,A
   \   000001   7965         MOV     R1,#0x65
   \   000003   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000006   740A         MOV     A,#0xa
   \   000008   80..         SJMP    ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F5..         MOV     ?V4,A
   \   00000A   E4           CLR     A
   \   00000B   F5..         MOV     ?V6,A
   \   00000D   7418         MOV     A,#0x18
   \   00000F   78..         MOV     R0,#?V4
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V4,A
   \   000009   E4           CLR     A
   \   00000A   F5..         MOV     ?V5,A
   \   00000C   7410         MOV     A,#0x10
   \   00000E   78..         MOV     R0,#?V4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0,A
   \   000007   E4           CLR     A
   \   000008   F5..         MOV     ?V1,A
   \   00000A   F5..         MOV     ?V2,A
   \   00000C   F5..         MOV     ?V3,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V4,A
   \   000012   E4           CLR     A
   \   000013   F5..         MOV     ?V5,A
   \   000015   F5..         MOV     ?V6,A
   \   000017   F5..         MOV     ?V7,A
   \   000019   7408         MOV     A,#0x8
   \   00001B   78..         MOV     R0,#?V4
   \   00001D   22           RET
   1437          
   1438          /***************************************************************************************************
   1439           * @fn      MT_ZdoMgmtLqiRequest
   1440           *
   1441           * @brief   Handle a Mgmt Lqi request.
   1442           *
   1443           * @param   pBuf  - MT message data
   1444           *
   1445           * @return  void
   1446           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1447          void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtLqiRequest:
   1448          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1449            uint8 cmdId;
   1450            uint8 retValue;
   1451            zAddrType_t destAddr;
   1452            uint8 startIndex;
   1453          
   1454            /* parse header */
   1455            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   1456            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_257:
   \   00000D   5001         JNC     ??MT_ZdoMgmtLqiRequest_0
   \   00000F   0B           INC     R3
   1457          
   1458            /* Dev address */
   1459            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMgmtLqiRequest_0:
   \   000010   740A         MOV     A,#0xa
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine27 & 0xFFFF
   1460            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_28:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine18 & 0xFFFF
   1461            pBuf += 2;
   1462          
   1463            /* Start Index */
   1464            startIndex = *pBuf;
   1465          
   1466            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   \                     ??CrossCallReturnLabel_11:
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000021   7401         MOV     A,#0x1
   \   000023   12....       LCALL   ?XSTACK_DISP100_8
   \   000026   88..         MOV     ?V0,R0
   \   000028   89..         MOV     ?V1,R1
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   75..31       MOV     ?V0,#0x31
   \   000032   02....       LJMP    ?Subroutine1 & 0xFFFF
   1467          
   1468            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1469          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000006   F9           MOV     R1,A
   \   000007   EC           MOV     A,R4
   \   000008   F8           MOV     R0,A
   \   000009   7402         MOV     A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000006                ; Setup parameters for call to function ZDP_SendData
   \   000006                ; Setup parameters for call to function ZDP_SendData
   \   000006                ; Setup parameters for call to function ZDP_SendData
   \   000006   75..00       MOV     ?V0,#0x0
   \   000009   78..         MOV     R0,#?V0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine121_0
   \   000004                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75..00       MOV     ?V1,#0x0
   \   000003   78..         MOV     R0,#?V0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7901         MOV     R1,#0x1
   \   00000A   7407         MOV     A,#0x7
   \   00000C   12....       LCALL   ?XSTACK_DISP102_8
   \   00000F   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000011   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000013   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000016   7405         MOV     A,#0x5
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E9           MOV     A,R1
   \   000021   F0           MOVX    @DPTR,A
   \   000022                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000022                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000022                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000022   7401         MOV     A,#0x1
   \   000024   12....       LCALL   ?XSTACK_DISP102_8
   \   000027   7B01         MOV     R3,#0x1
   \   000029   EE           MOV     A,R6
   \   00002A   FA           MOV     R2,A
   \   00002B   7965         MOV     R1,#0x65
   \   00002D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000030   740B         MOV     A,#0xb
   \   000032                REQUIRE ??Subroutine122_0
   \   000032                ; // Fall through to label ??Subroutine122_0
   1470          
   1471          /***************************************************************************************************
   1472           * @fn      MT_ZdoMgmtRtgRequest
   1473           *
   1474           * @brief   Handle a Mgmt Rtg request.
   1475           *
   1476           * @param   pBuf  - MT message data
   1477           *
   1478           * @return  void
   1479           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1480          void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtRtgRequest:
   1481          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1482            uint8 cmdId;
   1483            uint8 retValue;
   1484            zAddrType_t destAddr;
   1485            uint8 startIndex;
   1486          
   1487            /* parse header */
   1488            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   1489            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_258:
   \   00000D   5001         JNC     ??MT_ZdoMgmtRtgRequest_0
   \   00000F   0B           INC     R3
   1490          
   1491            /* Dev Address */
   1492            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMgmtRtgRequest_0:
   \   000010   740A         MOV     A,#0xa
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine27 & 0xFFFF
   1493            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_29:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine18 & 0xFFFF
   1494            pBuf += 2;
   1495          
   1496            /* Start Index */
   1497            startIndex = *pBuf;
   1498          
   1499            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   \                     ??CrossCallReturnLabel_12:
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000021   7401         MOV     A,#0x1
   \   000023   12....       LCALL   ?XSTACK_DISP100_8
   \   000026   88..         MOV     ?V0,R0
   \   000028   89..         MOV     ?V1,R1
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   75..32       MOV     ?V0,#0x32
   \   000032   80..         SJMP    ?Subroutine1
   1500          
   1501            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1502          }
   1503          
   1504          /***************************************************************************************************
   1505           * @fn      MT_ZdoMgmtBindRequest
   1506           *
   1507           * @brief   Handle a Mgmt Bind request.
   1508           *
   1509           * @param   pBuf  - MT message data
   1510           *
   1511           * @return  void
   1512           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1513          void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtBindRequest:
   1514          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1515            uint8 cmdId;
   1516            uint8 retValue;
   1517            zAddrType_t destAddr;
   1518            uint8 startIndex;
   1519          
   1520            /* parse header */
   1521            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   1522            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_259:
   \   00000D   5001         JNC     ??MT_ZdoMgmtBindRequest_0
   \   00000F   0B           INC     R3
   1523          
   1524            /* Dev Address */
   1525            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMgmtBindRequest_0:
   \   000010   740A         MOV     A,#0xa
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine27 & 0xFFFF
   1526            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_30:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine18 & 0xFFFF
   1527            pBuf += 2;
   1528          
   1529            /* Start Index */
   1530            startIndex = *pBuf;
   1531          
   1532            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   \                     ??CrossCallReturnLabel_13:
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000021   7401         MOV     A,#0x1
   \   000023   12....       LCALL   ?XSTACK_DISP100_8
   \   000026   88..         MOV     ?V0,R0
   \   000028   89..         MOV     ?V1,R1
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   75..33       MOV     ?V0,#0x33
   \   000032                REQUIRE ?Subroutine1
   \   000032                ; // Fall through to label ?Subroutine1
   1533          
   1534            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1535          }
   1536          
   1537          /***************************************************************************************************
   1538           * @fn      MT_ZdoMgmtLeaveRequest
   1539           *
   1540           * @brief   Handle a Mgmt Leave request.
   1541           *
   1542           * @param   pBuf  - MT message data
   1543           *
   1544           * @return  void
   1545           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1546          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtLeaveRequest:
   1547          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine44 & 0xFFFF
   1548            uint8 cmdId;
   1549            uint8 retValue;
   1550            zAddrType_t destAddr;
   1551            uint8 *pIEEEAddr;
   1552            uint8 removeChildren;
   1553            uint8 rejoin;
   1554          
   1555            /* parse header */
   1556            cmdId = pBuf[MT_RPC_POS_CMD1];
   1557            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_58:
   \   00000D   5001         JNC     ??MT_ZdoMgmtLeaveRequest_0
   \   00000F   0D           INC     R5
   1558          
   1559            /* Destination Address */
   1560            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMgmtLeaveRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine22 & 0xFFFF
   1561            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_266:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine78 & 0xFFFF
   1562            pBuf += 2;
   \                     ??CrossCallReturnLabel_142:
   \   00001E   5001         JNC     ??MT_ZdoMgmtLeaveRequest_1
   \   000020   0D           INC     R5
   1563          
   1564            /* IEEE address */
   1565            pIEEEAddr = pBuf;
   1566            pBuf += Z_EXTADDR_LEN;
   1567          
   1568            /* Rejoin if bit0 is set */
   1569            rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
   1570          
   1571            /* Remove Children if bit1 is set */
   1572            removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
   1573          
   1574            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   \                     ??MT_ZdoMgmtLeaveRequest_1:
   \   000021   8C82         MOV     DPL,R4
   \   000023   8D83         MOV     DPH,R5
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   A2E1         MOV     C,0xE0 /* A   */.1
   \   000030   5004         JNC     ??MT_ZdoMgmtLeaveRequest_2
   \   000032   D2F0         SETB    B.0
   \   000034   8002         SJMP    ??MT_ZdoMgmtLeaveRequest_3
   \                     ??MT_ZdoMgmtLeaveRequest_2:
   \   000036   C2F0         CLR     B.0
   \                     ??MT_ZdoMgmtLeaveRequest_3:
   \   000038                ; Setup parameters for call to function ZDP_MgmtLeaveReq
   \   000038   75..00       MOV     ?V0,#0x0
   \   00003B   78..         MOV     R0,#?V0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000040   8C82         MOV     DPL,R4
   \   000042   8D83         MOV     DPH,R5
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00004F   E4           CLR     A
   \   000050   33           RLC     A
   \   000051   F5..         MOV     ?V0,A
   \   000053   78..         MOV     R0,#?V0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   A2F0         MOV     C,B.0
   \   00005A   E4           CLR     A
   \   00005B   33           RLC     A
   \   00005C   F9           MOV     R1,A
   \   00005D   7403         MOV     A,#0x3
   \   00005F   12....       LCALL   ?XSTACK_DISP101_8
   \   000062   12....       LCALL   `??ZDP_MgmtLeaveReq::?relay`; Banked call to: ZDP_MgmtLeaveReq
   \   000065   7402         MOV     A,#0x2
   \   000067   02....       LJMP    ??Subroutine126_0 & 0xFFFF
   1575          
   1576            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1577          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007                REQUIRE ??Subroutine123_0
   \   000007                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EC           MOV     A,R4
   \   000006   2402         ADD     A,#0x2
   \   000008   FC           MOV     R4,A
   \   000009   22           RET
   1578          
   1579          /***************************************************************************************************
   1580           * @fn      MT_ZdoMgmtDirectJoinRequest
   1581           *
   1582           * @brief   Handle a Mgmt Direct Join request.
   1583           *
   1584           * @param   pBuf  - MT message data
   1585           *
   1586           * @return  void
   1587           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1588          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtDirectJoinRequest:
   1589          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine44 & 0xFFFF
   1590            uint8 cmdId;
   1591            uint8 retValue;
   1592            zAddrType_t destAddr;
   1593            uint8 *deviceAddr;
   1594            uint8 capInfo;
   1595          
   1596            /* parse header */
   1597            cmdId = pBuf[MT_RPC_POS_CMD1];
   1598            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_59:
   \   00000D   5001         JNC     ??MT_ZdoMgmtDirectJoinRequest_0
   \   00000F   0D           INC     R5
   1599          
   1600            /* Destination Address */
   1601            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoMgmtDirectJoinRequest_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine22 & 0xFFFF
   1602            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_267:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine78 & 0xFFFF
   1603            pBuf += 2;
   \                     ??CrossCallReturnLabel_143:
   \   00001E   5001         JNC     ??MT_ZdoMgmtDirectJoinRequest_1
   \   000020   0D           INC     R5
   1604          
   1605            /* Device Address */
   1606            deviceAddr = pBuf;
   1607            pBuf += Z_EXTADDR_LEN;
   1608          
   1609            /* Capability information */
   1610            capInfo = *pBuf;
   1611          
   1612            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   \                     ??MT_ZdoMgmtDirectJoinRequest_1:
   \   000021                ; Setup parameters for call to function ZDP_MgmtDirectJoinReq
   \   000021   75..00       MOV     ?V0,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000029   8C82         MOV     DPL,R4
   \   00002B   8D83         MOV     DPH,R5
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F9           MOV     R1,A
   \   000037   7402         MOV     A,#0x2
   \   000039   12....       LCALL   ?XSTACK_DISP101_8
   \   00003C   12....       LCALL   `??ZDP_MgmtDirectJoinReq::?relay`; Banked call to: ZDP_MgmtDirectJoinReq
   \   00003F   80..         SJMP    ??Subroutine125_0
   1613          
   1614            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1615          }
   1616          
   1617          /***************************************************************************************************
   1618           * @fn      MT_ZdoMgmtPermitJoinRequest
   1619           *
   1620           * @brief   Handle a Mgmt Permit Join request.
   1621           *
   1622           * @param   pBuf  - MT message data
   1623           *
   1624           * @return  void
   1625           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1626          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtPermitJoinRequest:
   1627          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1628            uint8 cmdId;
   1629            uint8 dataLn;
   1630            uint8 retValue;
   1631            uint8 duration;
   1632            uint8 tcSignificance;
   1633            zAddrType_t destAddr;
   1634          
   1635            /* parse header */
   1636            dataLn = pBuf[MT_RPC_POS_LEN];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   1637            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000010   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   1638            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_262:
   \   000013   5001         JNC     ??MT_ZdoMgmtPermitJoinRequest_0
   \   000015   0B           INC     R3
   1639          
   1640            if ( 4 == dataLn )
   \                     ??MT_ZdoMgmtPermitJoinRequest_0:
   \   000016   7404         MOV     A,#0x4
   \   000018   68           XRL     A,R0
   \   000019   700A         JNZ     ??MT_ZdoMgmtPermitJoinRequest_1
   1641            {
   1642              /* addrMode was hardwired up to Z-Stack 2.6.0 */
   1643              destAddr.addrMode = afAddr16Bit; 
   \   00001B   7409         MOV     A,#0x9
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   7402         MOV     A,#0x2
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8015         SJMP    ??MT_ZdoMgmtPermitJoinRequest_2
   1644            }
   1645            else
   1646            {
   1647              /* addrMode is a parameter after Z-Stack 2.6.0 */
   1648              destAddr.addrMode = *pBuf++;
   \                     ??MT_ZdoMgmtPermitJoinRequest_1:
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   C0E0         PUSH    A
   \   00002C   7409         MOV     A,#0x9
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   D0E0         POP     A
   \   000033   12....       LCALL   ?Subroutine73 & 0xFFFF
   1649            }
   \                     ??CrossCallReturnLabel_132:
   \   000036   AA82         MOV     R2,DPL
   \   000038   AB83         MOV     R3,DPH
   1650            
   1651            /* Destination Address */
   1652            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMgmtPermitJoinRequest_2:
   \   00003A   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ?Subroutine66 & 0xFFFF
   1653            pBuf += 2;
   1654          
   1655            /* Duration */
   1656            duration = *pBuf++;
   \                     ??CrossCallReturnLabel_115:
   \   000043   F9           MOV     R1,A
   1657          
   1658            /* Trust center significance */
   1659            tcSignificance = *pBuf;
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FC           MOV     R4,A
   1660          
   1661            ignoreIndication = TRUE;
   \   00004D   90....       MOV     DPTR,#ignoreIndication
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
   1662            retValue = (uint8)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   \   000053                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   000053   7D00         MOV     R5,#0x0
   \   000055   12....       LCALL   ?XSTACK_DISP101_8
   \   000058   12....       LCALL   `??ZDP_MgmtPermitJoinReq::?relay`; Banked call to: ZDP_MgmtPermitJoinReq
   \   00005B   E9           MOV     A,R1
   \   00005C   85..82       MOV     DPL,?XSP + 0
   \   00005F   85..83       MOV     DPH,?XSP + 1
   \   000062   F0           MOVX    @DPTR,A
   1663            ignoreIndication = FALSE;
   \   000063   90....       MOV     DPTR,#ignoreIndication
   \   000066   E4           CLR     A
   \   000067   80..         SJMP    ??Subroutine127_0
   1664            
   1665            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1666          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   1667          
   1668          /***************************************************************************************************
   1669           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1670           *
   1671           * @brief   Handle a Mgmt Nwk Update request.
   1672           *
   1673           * @param   pBuf  - MT message data
   1674           *
   1675           * @return  void
   1676           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1677          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtNwkUpdateRequest:
   1678          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1679            uint8 cmdId;
   1680            uint8 retValue;
   1681            zAddrType_t destAddr;
   1682            uint32 channelMask;
   1683            uint8 scanDuration, scanCount;
   1684            uint16 nwkManagerAddr;
   1685          
   1686              /* parse header */
   1687            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FF           MOV     R7,A
   1688            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   FA           MOV     R2,A
   \   000016   5001         JNC     ??MT_ZdoMgmtNwkUpdateRequest_0
   \   000018   0B           INC     R3
   1689          
   1690            /* Destination address */
   1691            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMgmtNwkUpdateRequest_0:
   \   000019   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine66 & 0xFFFF
   1692            pBuf += 2;
   1693          
   1694            /* Destination address mode */
   1695            destAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_116:
   \   000022   C0E0         PUSH    A
   \   000024   7409         MOV     A,#0x9
   \   000026   12....       LCALL   ?XSTACK_DISP0_8
   \   000029   D0E0         POP     A
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   EA           MOV     A,R2
   \   00002D   2403         ADD     A,#0x3
   \   00002F   FA           MOV     R2,A
   \   000030   5001         JNC     ??MT_ZdoMgmtNwkUpdateRequest_1
   \   000032   0B           INC     R3
   1696          
   1697            channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??MT_ZdoMgmtNwkUpdateRequest_1:
   \   000033   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000036   12....       LCALL   ?L_SHL
   \   000039   78..         MOV     R0,#?V0
   \   00003B   79..         MOV     R1,#?V4
   \   00003D   12....       LCALL   ?L_ADD
   \   000040   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000043   12....       LCALL   ?L_SHL
   \   000046   78..         MOV     R0,#?V0
   \   000048   79..         MOV     R1,#?V4
   \   00004A   12....       LCALL   ?L_ADD
   \   00004D   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000050   12....       LCALL   ?L_SHL
   \   000053   78..         MOV     R0,#?V0
   \   000055   79..         MOV     R1,#?V4
   \   000057   12....       LCALL   ?L_ADD
   1698            pBuf += 4;
   1699          
   1700            /* Scan duration */
   1701            scanDuration = *pBuf++;
   \   00005A   8A82         MOV     DPL,R2
   \   00005C   8B83         MOV     DPH,R3
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FE           MOV     R6,A
   1702          
   1703            /* Scan count */
   1704            scanCount = *pBuf++;
   \   000064   8A82         MOV     DPL,R2
   \   000066   8B83         MOV     DPH,R3
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F5..         MOV     ?V4,A
   \   000070   EA           MOV     A,R2
   \   000071   2406         ADD     A,#0x6
   \   000073   FA           MOV     R2,A
   \   000074   5001         JNC     ??MT_ZdoMgmtNwkUpdateRequest_2
   \   000076   0B           INC     R3
   1705          
   1706            /* NWK manager address */
   1707            nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoMgmtNwkUpdateRequest_2:
   \   000077   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00007A   F8           MOV     R0,A
   \   00007B   E4           CLR     A
   \   00007C   C8           XCH     A,R0
   \   00007D   F9           MOV     R1,A
   \   00007E   EC           MOV     A,R4
   \   00007F   28           ADD     A,R0
   \   000080   F5..         MOV     ?V6,A
   \   000082   E4           CLR     A
   \   000083   39           ADDC    A,R1
   \   000084   F5..         MOV     ?V7,A
   1708          
   1709            /* Send the Management Network Update request */
   1710            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1711                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   \   000086                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   000086   78..         MOV     R0,#?V6
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   78..         MOV     R0,#?V0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000090   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000093   12....       LCALL   ?XSTACK_DISP101_8
   \   000096   12....       LCALL   `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
   \   000099   7406         MOV     A,#0x6
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   E9           MOV     A,R1
   \   00009F   85..82       MOV     DPL,?XSP + 0
   \   0000A2   85..83       MOV     DPH,?XSP + 1
   \   0000A5   F0           MOVX    @DPTR,A
   1712          
   1713            /*
   1714              Since we don't recevied our own broadcast messages, we should
   1715              send a unicast copy of the message to ourself.
   1716            */
   1717            if ( destAddr.addrMode == AddrBroadcast )
   \   0000A6   7409         MOV     A,#0x9
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   640F         XRL     A,#0xf
   \   0000AE   702B         JNZ     ??MT_ZdoMgmtNwkUpdateRequest_3
   1718            {
   1719              destAddr.addrMode = Addr16Bit;
   \   0000B0   12....       LCALL   ?Subroutine38 & 0xFFFF
   1720              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_280:
   \   0000B3   7401         MOV     A,#0x1
   \   0000B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B8   12....       LCALL   ?Subroutine79 & 0xFFFF
   1721              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1722                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   \                     ??CrossCallReturnLabel_146:
   \   0000BB                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   0000BB   78..         MOV     R0,#?V6
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   78..         MOV     R0,#?V0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000C5   12....       LCALL   ?Subroutine57 & 0xFFFF
   1723            }
   \                     ??CrossCallReturnLabel_86:
   \   0000C8   12....       LCALL   ?XSTACK_DISP101_8
   \   0000CB   12....       LCALL   `??ZDP_MgmtNwkUpdateReq::?relay`; Banked call to: ZDP_MgmtNwkUpdateReq
   \   0000CE   7406         MOV     A,#0x6
   \   0000D0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D3   E9           MOV     A,R1
   \   0000D4   85..82       MOV     DPL,?XSP + 0
   \   0000D7   85..83       MOV     DPH,?XSP + 1
   \   0000DA   F0           MOVX    @DPTR,A
   1724          
   1725            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMgmtNwkUpdateRequest_3:
   \   0000DB                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000DB   AC..         MOV     R4,?XSP + 0
   \   0000DD   AD..         MOV     R5,?XSP + 1
   \   0000DF   7B01         MOV     R3,#0x1
   \   0000E1   EF           MOV     A,R7
   \   0000E2   02....       LJMP    ?Subroutine9 & 0xFFFF
   1726          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   90....       MOV     DPTR,#_NIB + 109
   \   000003   E0           MOVX    A,@DPTR
   \   000004   04           INC     A
   \   000005   FD           MOV     R5,A
   \   000006   AC..         MOV     R4,?V4
   \   000008   EE           MOV     A,R6
   \   000009   F9           MOV     R1,A
   \   00000A   7407         MOV     A,#0x7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003                REQUIRE ??Subroutine130_0
   \   000003                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   90....       MOV     DPTR,#_NIB + 20
   \   000003                REQUIRE ??Subroutine131_0
   \   000003                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
   1727          #endif /* MT_ZDO_MGMT */
   1728          
   1729          /***************************************************************************************************
   1730           * @fn      MT_ZdoSendData
   1731           *
   1732           * @brief   Handle a ZDO Send Data request.
   1733           *
   1734           * @param   pBuf  - MT message data
   1735           *
   1736           * @return  void
   1737           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine111_0
   \   000002                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1738          void MT_ZdoSendData( uint8 *pBuf )
   \                     MT_ZdoSendData:
   1739          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V1,R3
   1740            uint8 cmdId;
   1741            uint8 retValue;
   1742            zAddrType_t destAddr;
   1743            uint8 transSeq;
   1744            uint8 len;
   1745            uint16 cmd;
   1746          
   1747              /* parse header */
   1748            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   FE           MOV     R6,A
   1749            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000014   EA           MOV     A,R2
   \   000015   2403         ADD     A,#0x3
   \   000017   F5..         MOV     ?V0,A
   \   000019   5002         JNC     ??MT_ZdoSendData_0
   \   00001B   05..         INC     ?V1
   1750          
   1751            /* Destination address */
   1752            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoSendData_0:
   \   00001D   740A         MOV     A,#0xa
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   7402         MOV     A,#0x2
   \   000024   F0           MOVX    @DPTR,A
   1753            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000025   85..82       MOV     DPL,?V0
   \   000028   85..83       MOV     DPH,?V1
   \   00002B   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   12....       LCALL   ?Subroutine79 & 0xFFFF
   1754            pBuf += 2;
   1755          
   1756            /* Destination address mode */
   1757            transSeq = *pBuf++;
   \                     ??CrossCallReturnLabel_147:
   \   000036   85..82       MOV     DPL,?V0
   \   000039   85..83       MOV     DPH,?V1
   \   00003C   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00003F   E5..         MOV     A,?V0
   \   000041   2403         ADD     A,#0x3
   \   000043   F5..         MOV     ?V0,A
   \   000045   5002         JNC     ??MT_ZdoSendData_1
   \   000047   05..         INC     ?V1
   1758          
   1759            /* cmd */
   1760            cmd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoSendData_1:
   \   000049   F582         MOV     DPL,A
   \   00004B   85..83       MOV     DPH,?V1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FA           MOV     R2,A
   \   000050   A3           INC     DPTR
   \   000051   12....       LCALL   ?Subroutine39 & 0xFFFF
   1761            pBuf += 2;
   1762            len = *pBuf++;
   \                     ??CrossCallReturnLabel_47:
   \   000054   85..82       MOV     DPL,?V0
   \   000057   85..83       MOV     DPH,?V1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FF           MOV     R7,A
   \   00005E   E5..         MOV     A,?V0
   \   000060   2403         ADD     A,#0x3
   \   000062   F5..         MOV     ?V0,A
   \   000064   5002         JNC     ??MT_ZdoSendData_2
   \   000066   05..         INC     ?V1
   1763          
   1764            /* Send the Generic ZDO message request */
   1765            retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \                     ??MT_ZdoSendData_2:
   \   000068                ; Setup parameters for call to function ZDP_SendData
   \   000068   88..         MOV     ?V4,R0
   \   00006A   78..         MOV     R0,#?V4
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006F   78..         MOV     R0,#?V0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000074   78..         MOV     R0,#?V2
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   EF           MOV     A,R7
   \   00007A   F9           MOV     R1,A
   \   00007B   7407         MOV     A,#0x7
   \   00007D   12....       LCALL   ?XSTACK_DISP102_8
   \   000080   7405         MOV     A,#0x5
   \   000082   12....       LCALL   ?XSTACK_DISP101_8
   \   000085   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   000088   7405         MOV     A,#0x5
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D   7401         MOV     A,#0x1
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   E9           MOV     A,R1
   \   000093   F0           MOVX    @DPTR,A
   1766            /*
   1767              Since we don't recevied our own broadcast messages, we should
   1768              send a unicast copy of the message to ourself.
   1769            */
   1770            if ( destAddr.addrMode == AddrBroadcast )
   \   000094   740A         MOV     A,#0xa
   \   000096   12....       LCALL   ?XSTACK_DISP0_8
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   640F         XRL     A,#0xf
   \   00009C   7035         JNZ     ??MT_ZdoSendData_3
   1771            {
   1772              destAddr.addrMode = Addr16Bit;
   \   00009E   12....       LCALL   ?Subroutine38 & 0xFFFF
   1773              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_281:
   \   0000A1   7402         MOV     A,#0x2
   \   0000A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A6   12....       LCALL   ?Subroutine79 & 0xFFFF
   1774              retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \                     ??CrossCallReturnLabel_148:
   \   0000A9                ; Setup parameters for call to function ZDP_SendData
   \   0000A9   78..         MOV     R0,#?V4
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AE   78..         MOV     R0,#?V0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   78..         MOV     R0,#?V2
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   EF           MOV     A,R7
   \   0000B9   F9           MOV     R1,A
   \   0000BA   7407         MOV     A,#0x7
   \   0000BC   12....       LCALL   ?XSTACK_DISP102_8
   \   0000BF   7405         MOV     A,#0x5
   \   0000C1   12....       LCALL   ?XSTACK_DISP101_8
   \   0000C4   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000C7   7405         MOV     A,#0x5
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CC   7401         MOV     A,#0x1
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   E9           MOV     A,R1
   \   0000D2   F0           MOVX    @DPTR,A
   1775            }
   1776          
   1777            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoSendData_3:
   \   0000D3                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000D3   7401         MOV     A,#0x1
   \   0000D5   12....       LCALL   ?XSTACK_DISP102_8
   \   0000D8   7B01         MOV     R3,#0x1
   \   0000DA   EE           MOV     A,R6
   \   0000DB   FA           MOV     R2,A
   \   0000DC   7965         MOV     R1,#0x65
   \   0000DE   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1778          }
   \   0000E1   740B         MOV     A,#0xb
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   7F05         MOV     R7,#0x5
   \   0000E8   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000003   F5..         MOV     ?V2,A
   \   000005   E4           CLR     A
   \   000006   39           ADDC    A,R1
   \   000007   F5..         MOV     ?V3,A
   \   000009   22           RET
   1779          
   1780          /***************************************************************************************************
   1781           * @fn      MT_ZdoNwkAddrOfInterestReq
   1782           *
   1783           * @brief   Handle a ZDO Network Address of Interest request.
   1784           *
   1785           * @param   pBuf  - MT message data
   1786           *
   1787           * @return  void
   1788           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1789          void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
   \                     MT_ZdoNwkAddrOfInterestReq:
   1790          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1791            uint8 cmdId;
   1792            uint8 retValue;
   1793            zAddrType_t destAddr;
   1794            uint16 nwkAddr;
   1795            uint8 cmd;
   1796          
   1797              /* parse header */
   1798            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine45 & 0xFFFF
   1799            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_62:
   \   00000D   5001         JNC     ??MT_ZdoNwkAddrOfInterestReq_0
   \   00000F   0B           INC     R3
   1800          
   1801            /* Destination address */
   1802            destAddr.addrMode = Addr16Bit;
   \                     ??MT_ZdoNwkAddrOfInterestReq_0:
   \   000010   7409         MOV     A,#0x9
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine10 & 0xFFFF
   1803            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_222:
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
   1804            pBuf += 2;
   \                     ??CrossCallReturnLabel_109:
   \   00001E   5001         JNC     ??MT_ZdoNwkAddrOfInterestReq_1
   \   000020   0B           INC     R3
   1805          
   1806            /* Network Address of Interest */
   1807            nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoNwkAddrOfInterestReq_1:
   \   000021   12....       LCALL   ?Subroutine21 & 0xFFFF
   1808            pBuf += 2;
   1809          
   1810            cmd = *pBuf++;
   \                     ??CrossCallReturnLabel_19:
   \   000024   F5..         MOV     ?V1,A
   1811          
   1812            /* Send the Generic ZDO message request */
   1813            retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \   000026                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000026   88..         MOV     ?V2,R0
   \   000028   78..         MOV     R0,#?V2
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   A9..         MOV     R1,?V1
   \   00002F   EF           MOV     A,R7
   \   000030   FD           MOV     R5,A
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?XSTACK_DISP101_8
   \   000036   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   000039   7401         MOV     A,#0x1
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003E   E9           MOV     A,R1
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   F0           MOVX    @DPTR,A
   1814          
   1815          
   1816            /*
   1817              Since we don't recevied our own broadcast messages, we should
   1818              send a unicast copy of the message to ourself.
   1819            */
   1820            if ( destAddr.addrMode == AddrBroadcast )
   \   000046   7409         MOV     A,#0x9
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   640F         XRL     A,#0xf
   \   00004E   702B         JNZ     ??MT_ZdoNwkAddrOfInterestReq_2
   1821            {
   1822              destAddr.addrMode = Addr16Bit;
   \   000050   12....       LCALL   ?Subroutine38 & 0xFFFF
   1823              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_282:
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine79 & 0xFFFF
   1824              retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \                     ??CrossCallReturnLabel_149:
   \   00005B                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00005B   78..         MOV     R0,#?V2
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   A9..         MOV     R1,?V1
   \   000062   EE           MOV     A,R6
   \   000063   FC           MOV     R4,A
   \   000064   EF           MOV     A,R7
   \   000065   FD           MOV     R5,A
   \   000066   7402         MOV     A,#0x2
   \   000068   12....       LCALL   ?XSTACK_DISP101_8
   \   00006B   12....       LCALL   `??ZDP_NWKAddrOfInterestReq::?relay`; Banked call to: ZDP_NWKAddrOfInterestReq
   \   00006E   7401         MOV     A,#0x1
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   E9           MOV     A,R1
   \   000074   85..82       MOV     DPL,?XSP + 0
   \   000077   85..83       MOV     DPH,?XSP + 1
   \   00007A   F0           MOVX    @DPTR,A
   1825            }
   1826          
   1827            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoNwkAddrOfInterestReq_2:
   \   00007B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00007B   AC..         MOV     R4,?XSP + 0
   \   00007D   AD..         MOV     R5,?XSP + 1
   \   00007F   7B01         MOV     R3,#0x1
   \   000081   AA..         MOV     R2,?V0
   \   000083   7965         MOV     R1,#0x65
   \   000085   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1828          }
   \   000088   740A         MOV     A,#0xa
   \   00008A   02....       LJMP    ??Subroutine143_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine143_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine144_0
   \   000003                ; // Fall through to label ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine144_0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1829          
   1830          /***************************************************************************************************
   1831           * @fn      MT_ZdoStartupFromApp
   1832           *
   1833           * @brief   Handle a Startup from App request.
   1834           *
   1835           * @param   pBuf  - MT message data
   1836           *
   1837           * @return  void
   1838           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1839          void MT_ZdoStartupFromApp(uint8 *pBuf)
   \                     MT_ZdoStartupFromApp:
   1840          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1841            uint8 cmd0, cmd1, retValue;
   1842          
   1843            /* parse header */
   1844            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   1845            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   1846            pBuf += MT_RPC_FRAME_HDR_SZ;
   1847          
   1848            retValue = ZDOInitDevice(100);
   \   000019                ; Setup parameters for call to function ZDOInitDevice
   \   000019   7A64         MOV     R2,#0x64
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000020   12....       LCALL   ?Subroutine74 & 0xFFFF
   1849          
   1850            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_133:
   \   000023   700D         JNZ     ??MT_ZdoStartupFromApp_0
   1851            {
   1852              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   \   000025                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000025   AC..         MOV     R4,?XSP + 0
   \   000027   AD..         MOV     R5,?XSP + 1
   \   000029   7B01         MOV     R3,#0x1
   \   00002B   EE           MOV     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   7965         MOV     R1,#0x65
   \   00002F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1853            }
   1854          }
   \                     ??MT_ZdoStartupFromApp_0:
   \   000032   80..         SJMP    ??Subroutine133_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   74E0         MOV     A,#-0x20
   \   00000A   5F           ANL     A,R7
   \   00000B   6420         XRL     A,#0x20
   \   00000D   22           RET
   1855          
   1856          
   1857          /***************************************************************************************************
   1858           * @fn      MT_ZdoNetworkDiscoveryReq
   1859           *
   1860           * @brief   Handle a ZDO Network Discovery request.
   1861           *
   1862           * @param   pBuf  - MT message data
   1863           *
   1864           * @return  void
   1865           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1866          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   \                     MT_ZdoNetworkDiscoveryReq:
   1867          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine29 & 0xFFFF
   1868            uint8  retValue = ZFailure;
   1869            uint8  cmdId;
   1870            uint32 scanChannels;
   1871          
   1872            /* parse header */
   1873            cmdId = pBuf[MT_RPC_POS_CMD1];
   1874            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_286:
   \   00000D   5001         JNC     ??MT_ZdoNetworkDiscoveryReq_0
   \   00000F   0F           INC     R7
   1875          
   1876            /* Packet format */
   1877            /* scan channels (4) | scan duration (1) */
   1878          
   1879            /* Scan channels */
   1880            scanChannels = osal_build_uint32(pBuf, 4);
   \                     ??MT_ZdoNetworkDiscoveryReq_0:
   \   000010                ; Setup parameters for call to function osal_build_uint32
   \   000010   7904         MOV     R1,#0x4
   \   000012   FA           MOV     R2,A
   \   000013   EF           MOV     A,R7
   \   000014   FB           MOV     R3,A
   \   000015   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   1881            pBuf += 4;
   1882          
   1883            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
   \   000018                ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   `??ZDApp_NetworkDiscoveryReq::?relay`; Banked call to: ZDApp_NetworkDiscoveryReq
   \   000025   E9           MOV     A,R1
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   F0           MOVX    @DPTR,A
   1884          
   1885            // Register ZDO callback for MT to handle the network discovery confirm
   1886            // and beacon notification confirm
   1887            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   \   00002D                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00002D   7A..         MOV     R2,#`??MT_ZdoNwkDiscoveryCnfCB::?relay` & 0xff
   \   00002F   7B..         MOV     R3,#(`??MT_ZdoNwkDiscoveryCnfCB::?relay` >> 8) & 0xff
   \   000031   7902         MOV     R1,#0x2
   \   000033   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1888            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   \   000036                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000036   7A..         MOV     R2,#`??MT_ZdoBeaconIndCB::?relay` & 0xff
   \   000038   7B..         MOV     R3,#(`??MT_ZdoBeaconIndCB::?relay` >> 8) & 0xff
   \   00003A   7903         MOV     R1,#0x3
   \   00003C   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1889          
   1890            /* Build and send back the response */
   1891            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \   00003F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00003F   AC..         MOV     R4,?XSP + 0
   \   000041   AD..         MOV     R5,?XSP + 1
   \   000043   7B01         MOV     R3,#0x1
   \   000045   AA..         MOV     R2,?V0
   \   000047   7965         MOV     R1,#0x65
   \   000049   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1892          }
   \   00004C   7401         MOV     A,#0x1
   \   00004E   02....       LJMP    ??Subroutine120_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D                REQUIRE ??Subroutine134_0
   \   00000D                ; // Fall through to label ??Subroutine134_0
   1893          
   1894          
   1895          /***************************************************************************************************
   1896           * @fn      MT_ZdoJoinReq
   1897           *
   1898           * @brief   Handle a ZDO Join request.
   1899           *
   1900           * @param   pBuf  - MT message data
   1901           *
   1902           * @return  void
   1903           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1904          void MT_ZdoJoinReq(uint8 *pBuf)
   \                     MT_ZdoJoinReq:
   1905          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine29 & 0xFFFF
   1906            uint8  retValue = ZFailure;
   1907            uint8  cmdId;
   1908            uint16 panId;
   1909            uint16 chosenParent;
   1910          
   1911            /* parse header */
   1912            cmdId = pBuf[MT_RPC_POS_CMD1];
   1913            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_287:
   \   00000D   5001         JNC     ??MT_ZdoJoinReq_0
   \   00000F   0F           INC     R7
   1914          
   1915            /* Packet format */
   1916            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
   1917             * parentDepth (1) | stackProfile  (1)
   1918             */
   1919          
   1920            panId        = BUILD_UINT16(pBuf[1], pBuf[2]);
   1921            chosenParent = BUILD_UINT16(pBuf[11], pBuf[12]);
   1922          
   1923            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   \                     ??MT_ZdoJoinReq_0:
   \   000010                ; Setup parameters for call to function ZDApp_JoinReq
   \   000010   240E         ADD     A,#0xe
   \   000012   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000018   EE           MOV     A,R6
   \   000019   240D         ADD     A,#0xd
   \   00001B   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000021   EE           MOV     A,R6
   \   000022   240B         ADD     A,#0xb
   \   000024   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000027   FA           MOV     R2,A
   \   000028   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   00002B   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   00002E   78..         MOV     R0,#?V2
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   EE           MOV     A,R6
   \   000034   2403         ADD     A,#0x3
   \   000036   FC           MOV     R4,A
   \   000037   E4           CLR     A
   \   000038   3F           ADDC    A,R7
   \   000039   FD           MOV     R5,A
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FA           MOV     R2,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000049   E4           CLR     A
   \   00004A   39           ADDC    A,R1
   \   00004B   FB           MOV     R3,A
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   `??ZDApp_JoinReq::?relay`; Banked call to: ZDApp_JoinReq
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005A   E9           MOV     A,R1
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   F0           MOVX    @DPTR,A
   1924          
   1925            /* Register for MT to receive Join Confirm */
   1926            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   \   000062                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000062   7A..         MOV     R2,#`??MT_ZdoJoinCnfCB::?relay` & 0xff
   \   000064   7B..         MOV     R3,#(`??MT_ZdoJoinCnfCB::?relay` >> 8) & 0xff
   \   000066   7904         MOV     R1,#0x4
   \   000068   12....       LCALL   `??ZDO_RegisterForZdoCB::?relay`; Banked call to: ZDO_RegisterForZdoCB
   1927          
   1928            /* Build and send back the response */
   1929            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \   00006B                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00006B   AC..         MOV     R4,?XSP + 0
   \   00006D   AD..         MOV     R5,?XSP + 1
   \   00006F   7B01         MOV     R3,#0x1
   \   000071   AA..         MOV     R2,?V0
   \   000073   7965         MOV     R1,#0x65
   \   000075   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1930          
   1931          }
   \   000078   7401         MOV     A,#0x1
   \   00007A   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V1,A
   \   000009   78..         MOV     R0,#?V1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine139_0:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   1932          
   1933          
   1934          /***************************************************************************************************
   1935           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1936           *
   1937           * @brief       Send an indication to inform host device the completion of
   1938           *              network discovery scan
   1939           *
   1940           * @param       pStr - pointer to a parameter and a structure of parameters
   1941           *
   1942           * @return      void
   1943           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1944          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   \                     MT_ZdoNwkDiscoveryCnfCB:
   1945          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1946            /* pStr: status (uint8) */
   1947            /* Packet Format */
   1948            /* Status (1) */
   1949          
   1950            // Scan completed. De-register the callback with ZDO
   1951            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7902         MOV     R1,#0x2
   \   00000B   12....       LCALL   `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1952            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7903         MOV     R1,#0x3
   \   000010   12....       LCALL   `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   1953          
   1954            // Send the buffered beacon indication
   1955            MT_ZdoBeaconIndCB ( NULL );
   \   000013                ; Setup parameters for call to function MT_ZdoBeaconIndCB
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   12....       LCALL   `??MT_ZdoBeaconIndCB::?relay`; Banked call to: MT_ZdoBeaconIndCB
   1956          
   1957            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1958                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   \   00001A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001A   EE           MOV     A,R6
   \   00001B   FC           MOV     R4,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FD           MOV     R5,A
   \   00001E   7B01         MOV     R3,#0x1
   \   000020   7AC7         MOV     R2,#-0x39
   \   000022   7945         MOV     R1,#0x45
   \   000024   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1959            return NULL;
   \   000027   7A00         MOV     R2,#0x0
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   02....       LJMP    ??Subroutine129_0 & 0xFFFF
   1960          }
   1961          
   1962          /***************************************************************************************************
   1963           * @fn          MT_ZdoBeaconIndCB
   1964           *
   1965           * @brief       Send an indication to host device of a beacon notification
   1966           *
   1967           * @param       pStr -  pointer to a parameter and a structure of parameters
   1968           *
   1969           * @return      void
   1970           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine110_0
   \   000001                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1971          void *MT_ZdoBeaconIndCB ( void *pStr )
   \                     MT_ZdoBeaconIndCB:
   1972          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1973            zdoBeaconInd_t *pBeacon = pStr;
   1974            uint8 *pTmp;
   1975          
   1976            /* Packet Format */
   1977            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   1978          
   1979            if( pStr != NULL)
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   90....       MOV     DPTR,#pBeaconIndBuf
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??MT_ZdoBeaconIndCB_0 & 0xFFFF
   1980            {
   1981              if( pBeaconIndBuf == NULL )
   \   000013   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   000016   701E         JNZ     ??MT_ZdoBeaconIndCB_1
   1982              {
   1983                // If pBeaconIndBuf has not been allocated yet
   1984                // allocate memory now with MAX_UART_TX_BUFF
   1985                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7AF9         MOV     R2,#-0x7
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001F   90....       MOV     DPTR,#pBeaconIndBuf
   \   000022   EA           MOV     A,R2
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   EB           MOV     A,R3
   \   000026   F0           MOVX    @DPTR,A
   \   000027   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??MT_ZdoBeaconIndCB_2 & 0xFFFF
   1986                {
   1987                  // Memory failure
   1988                  return NULL;
   1989                }
   1990                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F583         MOV     DPH,A
   \   000032   8882         MOV     DPL,R0
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   1991              }
   1992          
   1993              // Fill in the buffer with the beacon indication
   1994              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   \                     ??MT_ZdoBeaconIndCB_1:
   \   000036   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000039   F8           MOV     R0,A
   \   00003A   A9F0         MOV     R1,B
   \   00003C   90....       MOV     DPTR,#pBeaconIndBuf
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   28           ADD     A,R0
   \   000041   FA           MOV     R2,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   39           ADDC    A,R1
   \   000045   8A82         MOV     DPL,R2
   \   000047   F583         MOV     DPH,A
   \   000049   A3           INC     DPTR
   \   00004A   AA82         MOV     R2,DPL
   \   00004C   AB83         MOV     R3,DPH
   1995              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   12....       LCALL   ?Subroutine56 & 0xFFFF
   1996              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   \                     ??CrossCallReturnLabel_83:
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   12....       LCALL   ?Subroutine46 & 0xFFFF
   1997              *pTmp++ = LO_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_64:
   \   00005C   EE           MOV     A,R6
   \   00005D   2402         ADD     A,#0x2
   \   00005F   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000062   12....       LCALL   ?Subroutine41 & 0xFFFF
   1998              *pTmp++ = HI_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_49:
   \   000065   8882         MOV     DPL,R0
   \   000067   8983         MOV     DPH,R1
   \   000069   12....       LCALL   ?Subroutine30 & 0xFFFF
   1999              *pTmp++ = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_294:
   \   00006C   8E82         MOV     DPL,R6
   \   00006E   8F83         MOV     DPH,R7
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   12....       LCALL   ?Subroutine49 & 0xFFFF
   2000              *pTmp++ = pBeacon->permitJoining;
   \                     ??CrossCallReturnLabel_68:
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   12....       LCALL   ?Subroutine47 & 0xFFFF
   2001              *pTmp++ = pBeacon->routerCapacity;
   \                     ??CrossCallReturnLabel_66:
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   12....       LCALL   ?Subroutine43 & 0xFFFF
   2002              *pTmp++ = pBeacon->deviceCapacity;
   \                     ??CrossCallReturnLabel_54:
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   12....       LCALL   ?Subroutine42 & 0xFFFF
   2003              *pTmp++ = pBeacon->protocolVersion;
   \                     ??CrossCallReturnLabel_52:
   \   00009D   8E82         MOV     DPL,R6
   \   00009F   8F83         MOV     DPH,R7
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   12....       LCALL   ?Subroutine31 & 0xFFFF
   2004              *pTmp++ = pBeacon->stackProfile;
   \                     ??CrossCallReturnLabel_33:
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000B2   12....       LCALL   ?Subroutine101 & 0xFFFF
   2005              *pTmp++ = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_183:
   \   0000B5   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000B8   A3           INC     DPTR
   \   0000B9   12....       LCALL   ?Subroutine70 & 0xFFFF
   2006              *pTmp++ = pBeacon->depth;
   \                     ??CrossCallReturnLabel_124:
   \   0000BC   C0E0         PUSH    A
   \   0000BE   EA           MOV     A,R2
   \   0000BF   240B         ADD     A,#0xb
   \   0000C1   F582         MOV     DPL,A
   \   0000C3   E4           CLR     A
   \   0000C4   3B           ADDC    A,R3
   \   0000C5   F583         MOV     DPH,A
   \   0000C7   D0E0         POP     A
   \   0000C9   12....       LCALL   ?Subroutine71 & 0xFFFF
   2007              *pTmp++ = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_126:
   \   0000CC   C0E0         PUSH    A
   \   0000CE   EA           MOV     A,R2
   \   0000CF   240C         ADD     A,#0xc
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   E4           CLR     A
   \   0000D4   3B           ADDC    A,R3
   \   0000D5   F583         MOV     DPH,A
   \   0000D7   D0E0         POP     A
   \   0000D9   F0           MOVX    @DPTR,A
   2008              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   \   0000DA                ; Setup parameters for call to function osal_memcpy
   \   0000DA   EE           MOV     A,R6
   \   0000DB   240D         ADD     A,#0xd
   \   0000DD   F5..         MOV     ?V0,A
   \   0000DF   E4           CLR     A
   \   0000E0   3F           ADDC    A,R7
   \   0000E1   F5..         MOV     ?V1,A
   \   0000E3   75..00       MOV     ?V2,#0x0
   \   0000E6   78..         MOV     R0,#?V0
   \   0000E8   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000EB   7C08         MOV     R4,#0x8
   \   0000ED   7D00         MOV     R5,#0x0
   \   0000EF   EA           MOV     A,R2
   \   0000F0   240D         ADD     A,#0xd
   \   0000F2   FA           MOV     R2,A
   \   0000F3   5001         JNC     ??MT_ZdoBeaconIndCB_3
   \   0000F5   0B           INC     R3
   \                     ??MT_ZdoBeaconIndCB_3:
   \   0000F6   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F9   7403         MOV     A,#0x3
   \   0000FB   12....       LCALL   ?DEALLOC_XSTACK8
   2009          
   2010              pBeaconIndBuf[0] += 1; // Increment the devCnt
   \   0000FE   90....       MOV     DPTR,#pBeaconIndBuf
   \   000101   E0           MOVX    A,@DPTR
   \   000102   F8           MOV     R0,A
   \   000103   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000106   04           INC     A
   \   000107   F0           MOVX    @DPTR,A
   2011          
   2012              // Check if the buffer can fit in another beacon
   2013              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   \   000108   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00010B   A9F0         MOV     R1,B
   \   00010D   2416         ADD     A,#0x16
   \   00010F   5001         JNC     ??MT_ZdoBeaconIndCB_4
   \   000111   09           INC     R1
   \                     ??MT_ZdoBeaconIndCB_4:
   \   000112   C3           CLR     C
   \   000113   94FA         SUBB    A,#-0x6
   \   000115   E9           MOV     A,R1
   \   000116   9400         SUBB    A,#0x0
   \   000118   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00011A   65D0         XRL     A,PSW
   \   00011C   33           RLC     A
   \   00011D   4033         JC      ??MT_ZdoBeaconIndCB_2
   2014              {
   2015                // Packet full, send the packet over MT
   2016                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2017                                             MT_ZDO_BEACON_NOTIFY_IND,
   2018                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   00011F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00011F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000122   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2019                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   \   000125   12....       LCALL   ?Subroutine89 & 0xFFFF
   2020              }
   2021            }
   \                     ??CrossCallReturnLabel_291:
   \   000128   E4           CLR     A
   \   000129   8026         SJMP    ??MT_ZdoBeaconIndCB_5
   2022            else
   2023            {
   2024              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   \                     ??MT_ZdoBeaconIndCB_0:
   \   00012B   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00012E   6022         JZ      ??MT_ZdoBeaconIndCB_2
   \   000130   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000133   600B         JZ      ??MT_ZdoBeaconIndCB_6
   2025              {
   2026                // End of beacon indication, send the packet over MT
   2027                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2028                                             MT_ZDO_BEACON_NOTIFY_IND,
   2029                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   000135                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000135   12....       LCALL   ?Subroutine23 & 0xFFFF
   2030              }
   \                     ??CrossCallReturnLabel_21:
   \   000138   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2031              // Free the allocated memory
   2032              if(pBeaconIndBuf != NULL)
   \   00013B   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   00013E   6012         JZ      ??MT_ZdoBeaconIndCB_2
   2033              {
   2034                osal_mem_free(pBeaconIndBuf);
   \                     ??MT_ZdoBeaconIndCB_6:
   \   000140                ; Setup parameters for call to function osal_mem_free
   \   000140   90....       MOV     DPTR,#pBeaconIndBuf
   \   000143   E0           MOVX    A,@DPTR
   \   000144   FA           MOV     R2,A
   \   000145   A3           INC     DPTR
   \   000146   E0           MOVX    A,@DPTR
   \   000147   FB           MOV     R3,A
   \   000148   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2035                pBeaconIndBuf = NULL;
   \   00014B   90....       MOV     DPTR,#pBeaconIndBuf
   \   00014E   E4           CLR     A
   \   00014F   F0           MOVX    @DPTR,A
   \   000150   A3           INC     DPTR
   \                     ??MT_ZdoBeaconIndCB_5:
   \   000151   F0           MOVX    @DPTR,A
   2036              }
   2037            }
   2038          
   2039            return NULL;
   \                     ??MT_ZdoBeaconIndCB_2:
   \   000152   7A00         MOV     R2,#0x0
   \   000154   7B00         MOV     R3,#0x0
   \   000156   02....       LJMP    ??Subroutine144_0 & 0xFFFF
   2040          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003                REQUIRE ??Subroutine135_0
   \   000003                ; // Fall through to label ??Subroutine135_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine135_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   75F015       MOV     B,#0x15
   \   000007   A4           MUL     AB
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine137_0
   \   000001                ; // Fall through to label ??Subroutine137_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine137_0:
   \   000000   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000006   FD           MOV     R5,A
   \   000007   75F015       MOV     B,#0x15
   \   00000A   F583         MOV     DPH,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   A4           MUL     AB
   \   000010   04           INC     A
   \   000011   FB           MOV     R3,A
   \   000012   7AC5         MOV     R2,#-0x3b
   \   000014   7945         MOV     R1,#0x45
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003                REQUIRE ??Subroutine138_0
   \   000003                ; // Fall through to label ??Subroutine138_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine138_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ??Subroutine136_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   3F           ADDC    A,R7
   \   000003   F9           MOV     R1,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   240B         ADD     A,#0xb
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000003   A3           INC     DPTR
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   2041          
   2042          
   2043          
   2044          /***************************************************************************************************
   2045           * @fn          MT_ZdoJoinCnfCB
   2046           *
   2047           * @brief       Handle the ZDO Join Confirm from ZDO
   2048           *
   2049           * @param       pStr - pointer to a parameter and a structure of parameters
   2050           *
   2051           * @return      void
   2052           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2053          void *MT_ZdoJoinCnfCB ( void *pStr )
   \                     MT_ZdoJoinCnfCB:
   2054          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2055            /* pStr: zdoJoinCnf_t* */
   2056            /* Packet Format */
   2057            /* Status (1) | device addr (2) | parent addr (2) */
   2058          
   2059            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   2060            zdoJoinCnf_t *joinCnf = pStr;
   2061          
   2062            /* Join Complete. De-register the callback with ZDO */
   2063            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??ZDO_DeregisterForZdoCB::?relay`; Banked call to: ZDO_DeregisterForZdoCB
   2064          
   2065            buf[0] = joinCnf->status;
   \   000013   8E82         MOV     DPL,R6
   \   000015   8F83         MOV     DPH,R7
   \   000017   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   2066            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_195:
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   A3           INC     DPTR
   \   00001F   A882         MOV     R0,DPL
   \   000021   A983         MOV     R1,DPH
   \   000023   E0           MOVX    A,@DPTR
   \   000024   C0E0         PUSH    A
   \   000026   7401         MOV     A,#0x1
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   D0E0         POP     A
   \   00002D   12....       LCALL   ?Subroutine67 & 0xFFFF
   2067            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_119:
   \   000030   C0E0         PUSH    A
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
   2068            buf[3] = LO_UINT16( joinCnf->parentAddr );
   \   00003A   EE           MOV     A,R6
   \   00003B   2403         ADD     A,#0x3
   \   00003D   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000040   E0           MOVX    A,@DPTR
   \   000041   C0E0         PUSH    A
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   D0E0         POP     A
   \   00004A   12....       LCALL   ?Subroutine67 & 0xFFFF
   2069            buf[4] = HI_UINT16( joinCnf->parentAddr );
   \                     ??CrossCallReturnLabel_120:
   \   00004D   C0E0         PUSH    A
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   D0E0         POP     A
   \   000056   12....       LCALL   ?Subroutine77 & 0xFFFF
   2070          
   2071            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2072                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   \                     ??CrossCallReturnLabel_138:
   \   000059   7B05         MOV     R3,#0x5
   \   00005B   7AC6         MOV     R2,#-0x3a
   \   00005D   7945         MOV     R1,#0x45
   \   00005F   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2073          
   2074            return NULL;
   \   000062   7A00         MOV     R2,#0x0
   \   000064   7B00         MOV     R3,#0x0
   \   000066   7405         MOV     A,#0x5
   \   000068   02....       LJMP    ??Subroutine128_0 & 0xFFFF
   2075          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   22           RET
   2076          
   2077          /*************************************************************************************************
   2078           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   2079           *
   2080           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   2081           *
   2082           * @param   pBuf  - MT message data
   2083           *
   2084           * @return  void
   2085           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2086          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   \                     MT_ZdoRegisterForZDOMsg:
   2087          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2088            uint8 cmd0, cmd1, tmp;
   2089            uint16 cId;
   2090          
   2091            /* parse header */
   2092            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   2093            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   2094            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_260:
   \   000014   5001         JNC     ??MT_ZdoRegisterForZDOMsg_0
   \   000016   0B           INC     R3
   2095          
   2096            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   2097            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   \                     ??MT_ZdoRegisterForZDOMsg_0:
   \   000017                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000017   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00001A   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   \   00001D   12....       LCALL   ?Subroutine74 & 0xFFFF
   2098          
   2099            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_134:
   \   000020   700D         JNZ     ??MT_ZdoRegisterForZDOMsg_1
   2100            {
   2101              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   000022                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7B01         MOV     R3,#0x1
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   7965         MOV     R1,#0x65
   \   00002C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2102            }
   2103          }
   \                     ??MT_ZdoRegisterForZDOMsg_1:
   \   00002F   02....       LJMP    ??Subroutine133_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   39           ADDC    A,R1
   \   000006   FB           MOV     R3,A
   \   000007   90....       MOV     DPTR,#MT_TaskID
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET
   2104          
   2105          /*************************************************************************************************
   2106           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   2107           *
   2108           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   2109           *
   2110           * @param   pBuf  - MT message data
   2111           *
   2112           * @return  void
   2113           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2114          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   \                     MT_ZdoRemoveRegisteredCB:
   2115          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2116            uint8 cmd0, cmd1, tmp;
   2117            uint16 cId;
   2118          
   2119            /* parse header */
   2120            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   2121            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   2122            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_261:
   \   000014   5001         JNC     ??MT_ZdoRemoveRegisteredCB_0
   \   000016   0B           INC     R3
   2123          
   2124            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   2125            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   \                     ??MT_ZdoRemoveRegisteredCB_0:
   \   000017                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   000017   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00001A   12....       LCALL   `??ZDO_RemoveRegisteredCB::?relay`; Banked call to: ZDO_RemoveRegisteredCB
   \   00001D   12....       LCALL   ?Subroutine74 & 0xFFFF
   2126          
   2127            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_135:
   \   000020   700D         JNZ     ??MT_ZdoRemoveRegisteredCB_1
   2128            {
   2129              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   000022                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000022   AC..         MOV     R4,?XSP + 0
   \   000024   AD..         MOV     R5,?XSP + 1
   \   000026   7B01         MOV     R3,#0x1
   \   000028   EE           MOV     A,R6
   \   000029   FA           MOV     R2,A
   \   00002A   7965         MOV     R1,#0x65
   \   00002C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2130            }
   2131          }
   \                     ??MT_ZdoRemoveRegisteredCB_1:
   \   00002F   02....       LJMP    ??Subroutine133_0 & 0xFFFF
   2132          
   2133          #endif /* MT_ZDO_FUNC */
   2134          
   2135          
   2136          /***************************************************************************************************
   2137           * Callback handling function
   2138           ***************************************************************************************************/
   2139          
   2140          #if defined (MT_ZDO_CB_FUNC)
   2141          
   2142          /***************************************************************************************************
   2143           * @fn      MT_ZdoStateChangeCB
   2144           *
   2145           * @brief   Handle state change OSAL message from ZDO.
   2146           *
   2147           * @param   pMsg  - Message data
   2148           *
   2149           * @return  void
   2150           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2151          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   \                     MT_ZdoStateChangeCB:
   2152          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2153            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2154                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   \   000004                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   AC82         MOV     R4,DPL
   \   00000B   AD83         MOV     R5,DPH
   \   00000D   7B01         MOV     R3,#0x1
   \   00000F   7AC0         MOV     R2,#-0x40
   \   000011   7945         MOV     R1,#0x45
   \   000013   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2155          }
   \   000016   02....       LJMP    ?Subroutine0 & 0xFFFF
   2156          
   2157          /***************************************************************************************************
   2158           * @fn     MT_ZdoDirectCB()
   2159           *
   2160           * @brief  ZDO direct callback.  Build an MT message directly from the
   2161           *         over-the-air ZDO message.
   2162           *
   2163           * @param  pData - Incoming AF frame.
   2164           *
   2165           * @return  none
   2166           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2167          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   \                     MT_ZdoDirectCB:
   2168          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2169            uint8 len, *pBuf;
   2170            uint16 origClusterId;
   2171          
   2172            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
   2173            origClusterId = pData->clusterId;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V1,A
   2174          
   2175            // Is the message an exception or not a response?
   2176            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   \   000015                ; Setup parameters for call to function MT_ZdoHandleExceptions
   \   000015   12....       LCALL   `??MT_ZdoHandleExceptions::?relay`; Banked call to: MT_ZdoHandleExceptions
   \   000018   E9           MOV     A,R1
   \   000019   7076         JNZ     ??MT_ZdoDirectCB_0
   \   00001B   E5..         MOV     A,?V1
   \   00001D   5480         ANL     A,#0x80
   \   00001F   7002         JNZ     ??MT_ZdoDirectCB_1
   2177            {
   2178              return;  // Handled somewhere else or not needed.
   \                     ??MT_ZdoDirectCB_2:
   \   000021   806E         SJMP    ??MT_ZdoDirectCB_0
   2179            }
   2180          
   2181            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   2182             * two bytes for srcAddr.
   2183             */
   2184            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   \                     ??MT_ZdoDirectCB_1:
   \   000023   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000026   04           INC     A
   \   000027   F5..         MOV     ?V3,A
   2185          
   2186            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   FA           MOV     R2,A
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002F   8A..         MOV     ?V0,R2
   \   000031   8B..         MOV     ?V1,R3
   \   000033   EA           MOV     A,R2
   \   000034   45..         ORL     A,?V1
   \   000036   6059         JZ      ??MT_ZdoDirectCB_0
   2187            {
   2188              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   4480         ORL     A,#0x80
   \   000043   F5..         MOV     ?V2,A
   2189          
   2190              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   \   000045   EE           MOV     A,R6
   \   000046   2406         ADD     A,#0x6
   \   000048   12....       LCALL   ?Subroutine25 & 0xFFFF
   2191              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   2192          
   2193              /* copy ZDO data, skipping one-byte sequence number */
   2194              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   \                     ??CrossCallReturnLabel_24:
   \   00004B   2422         ADD     A,#0x22
   \   00004D   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   000050   2401         ADD     A,#0x1
   \   000052   F5..         MOV     ?V4,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   3400         ADDC    A,#0x0
   \   000058   F5..         MOV     ?V5,A
   \   00005A   75..00       MOV     ?V6,#0x0
   \   00005D   78..         MOV     R0,#?V4
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000062   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000065   24FF         ADD     A,#-0x1
   \   000067   FC           MOV     R4,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   34FF         ADDC    A,#-0x1
   \   00006C   FD           MOV     R5,A
   \   00006D   EA           MOV     A,R2
   \   00006E   2402         ADD     A,#0x2
   \   000070   FA           MOV     R2,A
   \   000071   E4           CLR     A
   \   000072   35..         ADDC    A,?V1
   \   000074   FB           MOV     R3,A
   \   000075   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000078   7403         MOV     A,#0x3
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   2195          
   2196              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   \   00007D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00007D   AC..         MOV     R4,?V0
   \   00007F   AD..         MOV     R5,?V1
   \   000081   AB..         MOV     R3,?V3
   \   000083   AA..         MOV     R2,?V2
   \   000085   7945         MOV     R1,#0x45
   \   000087   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2197              osal_mem_free(pBuf);
   \   00008A                ; Setup parameters for call to function osal_mem_free
   \   00008A   AA..         MOV     R2,?V0
   \   00008C   AB..         MOV     R3,?V1
   \   00008E   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2198            }
   2199          }
   \                     ??MT_ZdoDirectCB_0:
   \   000091   80..         SJMP    ??Subroutine140_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   EE           MOV     A,R6
   \   000001   2420         ADD     A,#0x20
   \   000003                REQUIRE ??Subroutine139_0
   \   000003                ; // Fall through to label ??Subroutine139_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   3F           ADDC    A,R7
   \   000003   F9           MOV     R1,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000013   F0           MOVX    @DPTR,A
   \   000014                ; Setup parameters for call to function osal_memcpy
   \   000014   EE           MOV     A,R6
   \   000015   22           RET
   2200          
   2201          /***************************************************************************************************
   2202           * @fn     MT_ZdoHandleExceptions()
   2203           *
   2204           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   2205           *
   2206           * @param  pData - Incoming AF frame.
   2207           *
   2208           * @return  TRUE if handled by this function, FALSE if not
   2209           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2210          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   \                     MT_ZdoHandleExceptions:
   2211          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   2212            uint8 ret = TRUE;
   \   00000E   75..01       MOV     ?V2,#0x1
   2213            ZDO_NwkIEEEAddrResp_t *nwkRsp;
   2214            ZDO_DeviceAnnce_t devAnnce;
   2215            uint8 doDefault = FALSE;
   2216          
   2217            switch ( inMsg->clusterID )
   \   000011   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000014   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000017   F5..         MOV     ?V1,A
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for MT_ZdoHandleExceptions>_0`:
   \   00001E   0100         DW        1
   \   000020   0080         DW        32768
   \   000022   0180         DW        32769
   \   000024   ....         DW        ??MT_ZdoHandleExceptions_0
   \   000026   0200         DW        2
   \   000028   1300         DW        19
   \   00002A   ....         DW        ??MT_ZdoHandleExceptions_1
   \   00002C   0480         DW        32772
   \   00002E   ....         DW        ??MT_ZdoHandleExceptions_2
   \   000030   ....         DW        ??MT_ZdoHandleExceptions_3
   2218            {
   2219              case NWK_addr_rsp:
   2220              case IEEE_addr_rsp:
   2221                if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
   \                     ??MT_ZdoHandleExceptions_0:
   \   000032                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000032   EE           MOV     A,R6
   \   000033   FA           MOV     R2,A
   \   000034   EF           MOV     A,R7
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000039   8A..         MOV     ?V0,R2
   \   00003B   8B..         MOV     ?V1,R3
   \   00003D   EA           MOV     A,R2
   \   00003E   45..         ORL     A,?V1
   \   000040   6064         JZ      ??MT_ZdoHandleExceptions_4
   2222                {
   2223                  if ( nwkRsp->status == ZDO_SUCCESS )
   \   000042   8A82         MOV     DPL,R2
   \   000044   8B83         MOV     DPH,R3
   \   000046   E0           MOVX    A,@DPTR
   \   000047   700A         JNZ     ??MT_ZdoHandleExceptions_5
   2224                  {
   2225                    MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   \   000049                ; Setup parameters for call to function MT_ZdoAddrRspCB
   \   000049   12....       LCALL   ?Subroutine84 & 0xFFFF
   2226                  }
   \                     ??CrossCallReturnLabel_161:
   \   00004C   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   00004F   FD           MOV     R5,A
   \   000050   12....       LCALL   `??MT_ZdoAddrRspCB::?relay`; Banked call to: MT_ZdoAddrRspCB
   2227                  osal_mem_free( nwkRsp );
   \                     ??MT_ZdoHandleExceptions_5:
   \   000053                ; Setup parameters for call to function osal_mem_free
   \   000053   AA..         MOV     R2,?V0
   \   000055   AB..         MOV     R3,?V1
   \   000057   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00005A   804A         SJMP    ??MT_ZdoHandleExceptions_4
   2228                }
   2229                break;
   2230          
   2231              case Device_annce:
   2232                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   \                     ??MT_ZdoHandleExceptions_1:
   \   00005C                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00005C   AC..         MOV     R4,?XSP + 0
   \   00005E   AD..         MOV     R5,?XSP + 1
   \   000060   EE           MOV     A,R6
   \   000061   FA           MOV     R2,A
   \   000062   EF           MOV     A,R7
   \   000063   FB           MOV     R3,A
   \   000064   12....       LCALL   `??ZDO_ParseDeviceAnnce::?relay`; Banked call to: ZDO_ParseDeviceAnnce
   2233                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   \   000067                ; Setup parameters for call to function MT_ZdoEndDevAnnceCB
   \   000067   8E82         MOV     DPL,R6
   \   000069   8F83         MOV     DPH,R7
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000070   FD           MOV     R5,A
   \   000071   AA..         MOV     R2,?XSP + 0
   \   000073   AB..         MOV     R3,?XSP + 1
   \   000075   12....       LCALL   `??MT_ZdoEndDevAnnceCB::?relay`; Banked call to: MT_ZdoEndDevAnnceCB
   2234                break;
   \   000078   802C         SJMP    ??MT_ZdoHandleExceptions_4
   2235          
   2236              case Simple_Desc_rsp:
   2237                if ( pData->cmd.DataLength > 5 )
   \                     ??MT_ZdoHandleExceptions_2:
   \   00007A   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00007D   C3           CLR     C
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   9406         SUBB    A,#0x6
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   9400         SUBB    A,#0x0
   \   000085   501C         JNC     ??MT_ZdoHandleExceptions_3
   2238                {
   2239                  ret = FALSE;
   2240                }
   2241                else
   2242                {
   2243                  doDefault = TRUE;
   2244                }
   2245                break;
   2246          
   2247              default:
   2248                ret = FALSE;
   2249                break;
   2250            }
   2251          
   2252            if ( doDefault )
   2253            {
   2254              ret = FALSE;
   \   000087   75..00       MOV     ?V2,#0x0
   2255              pData->clusterId = MtZdoDef_rsp;
   \   00008A   8A82         MOV     DPL,R2
   \   00008C   8B83         MOV     DPH,R3
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   7440         MOV     A,#0x40
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   E4           CLR     A
   \   000097   F0           MOVX    @DPTR,A
   2256              pData->cmd.DataLength = 2;
   \   000098   12....       LCALL   ?Subroutine86 & 0xFFFF
   2257            }
   \                     ??CrossCallReturnLabel_165:
   \   00009B   7402         MOV     A,#0x2
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   E4           CLR     A
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   8003         SJMP    ??MT_ZdoHandleExceptions_4
   \                     ??MT_ZdoHandleExceptions_3:
   \   0000A3   75..00       MOV     ?V2,#0x0
   2258          
   2259            return ( ret );
   \                     ??MT_ZdoHandleExceptions_4:
   \   0000A6   A9..         MOV     R1,?V2
   \   0000A8   740B         MOV     A,#0xb
   \   0000AA   02....       LJMP    ?Subroutine4 & 0xFFFF
   2260          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   EA           MOV     A,R2
   \   000001   2420         ADD     A,#0x20
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3B           ADDC    A,R3
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2261          
   2262          /***************************************************************************************************
   2263           * @fn      MT_ZdoAddrRspCB
   2264           *
   2265           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   2266           *
   2267           * @param   pMsg  - Message data
   2268           *
   2269           * @return  void
   2270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2271          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   \                     MT_ZdoAddrRspCB:
   2272          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   2273            uint8   listLen, len, *pBuf;
   2274          
   2275            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   2276          
   2277            /* get length, sanity check length */
   2278            listLen = pMsg->numAssocDevs;
   \   00000B   EA           MOV     A,R2
   \   00000C   240B         ADD     A,#0xb
   \   00000E   F582         MOV     DPL,A
   \   000010   E4           CLR     A
   \   000011   35..         ADDC    A,?V1
   \   000013   F583         MOV     DPH,A
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V4,A
   2279          
   2280            /* calculate msg length */
   2281            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   \   000018   C3           CLR     C
   \   000019   33           RLC     A
   \   00001A   240D         ADD     A,#0xd
   \   00001C   F5..         MOV     ?V5,A
   2282          
   2283            /* get buffer */
   2284            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   FA           MOV     R2,A
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000024   8A..         MOV     ?V6,R2
   \   000026   8B..         MOV     ?V7,R3
   \   000028   EA           MOV     A,R2
   \   000029   45..         ORL     A,?V7
   \   00002B   6076         JZ      ??MT_ZdoAddrRspCB_0
   2285            {
   2286              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   2287              uint8 *pTmp = pBuf;
   \   00002D   AE..         MOV     R6,?V6
   \   00002F   AF..         MOV     R7,?V7
   2288          
   2289              *pTmp++ = pMsg->status;
   \   000031   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   AE82         MOV     R6,DPL
   \   000038   AF83         MOV     R7,DPH
   2290          
   2291              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   \   00003A                ; Setup parameters for call to function sAddrExtCpy
   \   00003A   E5..         MOV     A,?V0
   \   00003C   2403         ADD     A,#0x3
   \   00003E   FC           MOV     R4,A
   \   00003F   E4           CLR     A
   \   000040   35..         ADDC    A,?V1
   \   000042   FD           MOV     R5,A
   \   000043   EE           MOV     A,R6
   \   000044   FA           MOV     R2,A
   \   000045   EF           MOV     A,R7
   \   000046   FB           MOV     R3,A
   \   000047   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2292              pTmp += Z_EXTADDR_LEN;
   2293          
   2294              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   \   00004A   85..82       MOV     DPL,?V0
   \   00004D   85..83       MOV     DPH,?V1
   \   000050   A3           INC     DPTR
   \   000051   A882         MOV     R0,DPL
   \   000053   A983         MOV     R1,DPH
   \   000055   12....       LCALL   ?Subroutine33 & 0xFFFF
   2295              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   \                     ??CrossCallReturnLabel_37:
   \   000058   8882         MOV     DPL,R0
   \   00005A   8983         MOV     DPH,R1
   \   00005C   A3           INC     DPTR
   \   00005D   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000060   F0           MOVX    @DPTR,A
   2296          
   2297              *pTmp++ = pMsg->startIndex;
   \   000061   E5..         MOV     A,?V0
   \   000063   240C         ADD     A,#0xc
   \   000065   F582         MOV     DPL,A
   \   000067   E4           CLR     A
   \   000068   35..         ADDC    A,?V1
   \   00006A   F583         MOV     DPH,A
   \   00006C   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00006F   A3           INC     DPTR
   \   000070   F0           MOVX    @DPTR,A
   2298              *pTmp++ = listLen;
   \   000071   EE           MOV     A,R6
   \   000072   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000075   E5..         MOV     A,?V4
   \   000077   F0           MOVX    @DPTR,A
   2299          
   2300              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   \   000078                ; Setup parameters for call to function MT_Word2Buf
   \   000078   F9           MOV     R1,A
   \   000079   E5..         MOV     A,?V0
   \   00007B   240D         ADD     A,#0xd
   \   00007D   FC           MOV     R4,A
   \   00007E   E4           CLR     A
   \   00007F   35..         ADDC    A,?V1
   \   000081   FD           MOV     R5,A
   \   000082   EE           MOV     A,R6
   \   000083   240C         ADD     A,#0xc
   \   000085   FA           MOV     R2,A
   \   000086   E4           CLR     A
   \   000087   3F           ADDC    A,R7
   \   000088   FB           MOV     R3,A
   \   000089   12....       LCALL   `??MT_Word2Buf::?relay`; Banked call to: MT_Word2Buf
   2301          
   2302              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   \   00008C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008C   AC..         MOV     R4,?V6
   \   00008E   AD..         MOV     R5,?V7
   \   000090   AB..         MOV     R3,?V5
   \   000092   E5..         MOV     A,?V2
   \   000094   4480         ORL     A,#0x80
   \   000096   FA           MOV     R2,A
   \   000097   7945         MOV     R1,#0x45
   \   000099   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2303              osal_mem_free(pBuf);
   \   00009C                ; Setup parameters for call to function osal_mem_free
   \   00009C   AA..         MOV     R2,?V6
   \   00009E   AB..         MOV     R3,?V7
   \   0000A0   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2304            }
   2305          }
   \                     ??MT_ZdoAddrRspCB_0:
   \   0000A3   7F0A         MOV     R7,#0xa
   \   0000A5   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   85..82       MOV     DPL,?V0
   \   000003   85..83       MOV     DPH,?V1
   \   000006                REQUIRE ??Subroutine141_0
   \   000006                ; // Fall through to label ??Subroutine141_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   22           RET
   2306          
   2307          /***************************************************************************************************
   2308           * @fn      MT_ZdoEndDevAnnceCB
   2309           *
   2310           * @brief   Handle end device announce OSAL message from ZDO.
   2311           *
   2312           * @param   pMsg  - Message data
   2313           *
   2314           * @return  void
   2315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2316          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   \                     MT_ZdoEndDevAnnceCB:
   2317          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   2318            uint8 *pBuf;
   2319          
   2320            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0D         MOV     R2,#0xd
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000014   8A..         MOV     ?V0,R2
   \   000016   8B..         MOV     ?V1,R3
   \   000018   EA           MOV     A,R2
   \   000019   45..         ORL     A,?V1
   \   00001B   605A         JZ      ??MT_ZdoEndDevAnnceCB_0
   2321            {
   2322              uint8 *pTmp = pBuf;
   2323          
   2324              *pTmp++ = LO_UINT16(srcAddr);
   \   00001D   EE           MOV     A,R6
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   F0           MOVX    @DPTR,A
   2325              *pTmp++ = HI_UINT16(srcAddr);
   \   000023   EF           MOV     A,R7
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
   2326          
   2327              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   \   000026   85..82       MOV     DPL,?V2
   \   000029   85..83       MOV     DPH,?V3
   \   00002C   12....       LCALL   ?Subroutine41 & 0xFFFF
   2328              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   \                     ??CrossCallReturnLabel_50:
   \   00002F   85..82       MOV     DPL,?V2
   \   000032   85..83       MOV     DPH,?V3
   \   000035   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000038   EA           MOV     A,R2
   \   000039   2404         ADD     A,#0x4
   \   00003B   FE           MOV     R6,A
   \   00003C   E4           CLR     A
   \   00003D   35..         ADDC    A,?V1
   \   00003F   FF           MOV     R7,A
   2329          
   2330              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   \   000040                ; Setup parameters for call to function sAddrExtCpy
   \   000040   E5..         MOV     A,?V2
   \   000042   2402         ADD     A,#0x2
   \   000044   FC           MOV     R4,A
   \   000045   E4           CLR     A
   \   000046   35..         ADDC    A,?V3
   \   000048   FD           MOV     R5,A
   \   000049   EE           MOV     A,R6
   \   00004A   FA           MOV     R2,A
   \   00004B   EF           MOV     A,R7
   \   00004C   FB           MOV     R3,A
   \   00004D   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2331              pTmp += Z_EXTADDR_LEN;
   2332          
   2333              *pTmp = pMsg->capabilities;
   \   000050   85..82       MOV     DPL,?V2
   \   000053   85..83       MOV     DPH,?V3
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   12....       LCALL   ?Subroutine33 & 0xFFFF
   2334          
   2335              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2336                                                   MT_ZDO_END_DEVICE_ANNCE_IND,
   2337                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   \                     ??CrossCallReturnLabel_38:
   \   000063                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000063   AC..         MOV     R4,?V0
   \   000065   AD..         MOV     R5,?V1
   \   000067   7B0D         MOV     R3,#0xd
   \   000069   7AC1         MOV     R2,#-0x3f
   \   00006B   7945         MOV     R1,#0x45
   \   00006D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2338              osal_mem_free(pBuf);
   \   000070                ; Setup parameters for call to function osal_mem_free
   \   000070   AA..         MOV     R2,?V0
   \   000072   AB..         MOV     R3,?V1
   \   000074   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2339            }
   2340          }
   \                     ??MT_ZdoEndDevAnnceCB_0:
   \   000077   80..         SJMP    ??Subroutine142_0
   2341          
   2342          /***************************************************************************************************
   2343           * @fn      MT_ZdoSrcRtgCB
   2344           *
   2345           * @brief   Handle Src Route from ZDO.
   2346           *
   2347           * @param   pStr  - pointer to the data structure for the src route
   2348           *
   2349           * @return  void*
   2350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2351          void* MT_ZdoSrcRtgCB( void *pStr )
   \                     MT_ZdoSrcRtgCB:
   2352          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2353            uint8 len, *pBuf;
   2354            zdoSrcRtg_t *pSrcRtg = pStr;
   2355          
   2356            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2357            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   C3           CLR     C
   \   000011   33           RLC     A
   \   000012   2403         ADD     A,#0x3
   \   000014   F5..         MOV     ?V2,A
   2358          
   2359            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   FA           MOV     R2,A
   \   000017   7B00         MOV     R3,#0x0
   \   000019   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00001C   8A..         MOV     ?V4,R2
   \   00001E   8B..         MOV     ?V5,R3
   \   000020   AE..         MOV     R6,?V4
   \   000022   AF..         MOV     R7,?V5
   \   000024   EE           MOV     A,R6
   \   000025   4F           ORL     A,R7
   \   000026   6070         JZ      ??MT_ZdoSrcRtgCB_0
   2360            {
   2361              uint8 idx, *pTmp = pBuf;
   2362              uint16 *pRelay;
   2363          
   2364              // Packet payload
   2365              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   \   000028   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   00002B   12....       LCALL   ?Subroutine80 & 0xFFFF
   2366              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   \                     ??CrossCallReturnLabel_150:
   \   00002E   12....       LCALL   ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000031   A3           INC     DPTR
   \   000032   12....       LCALL   ?Subroutine80 & 0xFFFF
   2367              *pTmp++ = pSrcRtg->relayCnt;
   \                     ??CrossCallReturnLabel_151:
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   EE           MOV     A,R6
   \   00003D   2403         ADD     A,#0x3
   \   00003F   FA           MOV     R2,A
   \   000040   E4           CLR     A
   \   000041   3F           ADDC    A,R7
   \   000042   FB           MOV     R3,A
   2368          
   2369              // Relay List
   2370              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   \   000043   85..82       MOV     DPL,?V0
   \   000046   85..83       MOV     DPH,?V1
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   00004F   6033         JZ      ??MT_ZdoSrcRtgCB_1
   2371              {
   2372                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   \   000051   75..00       MOV     ?V3,#0x0
   \   000054   801E         SJMP    ??MT_ZdoSrcRtgCB_2
   2373                {
   2374                  *pTmp++ = LO_UINT16(*pRelay);
   \                     ??MT_ZdoSrcRtgCB_3:
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   12....       LCALL   ?Subroutine56 & 0xFFFF
   2375                  *pTmp++ = HI_UINT16(*pRelay);
   \                     ??CrossCallReturnLabel_84:
   \   00005D   8882         MOV     DPL,R0
   \   00005F   8983         MOV     DPH,R1
   \   000061   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000064   EA           MOV     A,R2
   \   000065   2402         ADD     A,#0x2
   \   000067   FA           MOV     R2,A
   \   000068   5001         JNC     ??MT_ZdoSrcRtgCB_4
   \   00006A   0B           INC     R3
   2376                  pRelay++;
   \                     ??MT_ZdoSrcRtgCB_4:
   \   00006B   E8           MOV     A,R0
   \   00006C   2402         ADD     A,#0x2
   \   00006E   F8           MOV     R0,A
   \   00006F   5001         JNC     ??MT_ZdoSrcRtgCB_5
   \   000071   09           INC     R1
   2377                }
   \                     ??MT_ZdoSrcRtgCB_5:
   \   000072   05..         INC     ?V3
   \                     ??MT_ZdoSrcRtgCB_2:
   \   000074   85..82       MOV     DPL,?V0
   \   000077   85..83       MOV     DPH,?V1
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FC           MOV     R4,A
   \   00007E   E5..         MOV     A,?V3
   \   000080   C3           CLR     C
   \   000081   9C           SUBB    A,R4
   \   000082   40D2         JC      ??MT_ZdoSrcRtgCB_3
   2378              }
   2379              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2380                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   \                     ??MT_ZdoSrcRtgCB_1:
   \   000084                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000084   EE           MOV     A,R6
   \   000085   FC           MOV     R4,A
   \   000086   EF           MOV     A,R7
   \   000087   FD           MOV     R5,A
   \   000088   AB..         MOV     R3,?V2
   \   00008A   7AC4         MOV     R2,#-0x3c
   \   00008C   7945         MOV     R1,#0x45
   \   00008E   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2381              osal_mem_free(pBuf);
   \   000091                ; Setup parameters for call to function osal_mem_free
   \   000091   EE           MOV     A,R6
   \   000092   FA           MOV     R2,A
   \   000093   EF           MOV     A,R7
   \   000094   FB           MOV     R3,A
   \   000095   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2382            }
   2383          
   2384            return NULL;
   \                     ??MT_ZdoSrcRtgCB_0:
   \   000098   7A00         MOV     R2,#0x0
   \   00009A   7B00         MOV     R3,#0x0
   \   00009C   02....       LJMP    ??Subroutine142_0 & 0xFFFF
   2385          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   A3           INC     DPTR
   \   000008   22           RET
   2386          
   2387          /***************************************************************************************************
   2388           * @fn          MT_ZdoConcentratorIndCB
   2389           *
   2390           * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
   2391           *
   2392           * @param       pStr - pointer to a parameter and a structure of parameters
   2393           *
   2394           * @return      NULL
   2395           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2396          static void *MT_ZdoConcentratorIndCB(void *pStr)
   \                     MT_ZdoConcentratorIndCB:
   2397          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine15 & 0xFFFF
   2398            uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
   2399            zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
   2400          
   2401            *pTmp++ = LO_UINT16(pInd->nwkAddr);
   2402            *pTmp++ = HI_UINT16(pInd->nwkAddr);
   \                     ??CrossCallReturnLabel_6:
   \   00000D   C0E0         PUSH    A
   \   00000F   7401         MOV     A,#0x1
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   D0E0         POP     A
   \   000016   12....       LCALL   ?Subroutine101 & 0xFFFF
   2403            pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_184:
   \   000019   A3           INC     DPTR
   \   00001A   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00001D   F5..         MOV     ?V1,A
   \   00001F   75..00       MOV     ?V2,#0x0
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000027   7C08         MOV     R4,#0x8
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7405         MOV     A,#0x5
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   AA82         MOV     R2,DPL
   \   000032   AB83         MOV     R3,DPH
   \   000034   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003C   8A..         MOV     ?V0,R2
   \   00003E   8B..         MOV     ?V1,R3
   \   000040   A8..         MOV     R0,?V0
   \   000042   A9..         MOV     R1,?V1
   2404            *pTmp = pInd->pktCost;
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   12....       LCALL   ?Subroutine59 & 0xFFFF
   2405          
   2406            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2407                                              MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
   \                     ??CrossCallReturnLabel_87:
   \   00004F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00004F   AC..         MOV     R4,?XSP + 0
   \   000051   AD..         MOV     R5,?XSP + 1
   \   000053   7B0B         MOV     R3,#0xb
   \   000055   7AC8         MOV     R2,#-0x38
   \   000057   7945         MOV     R1,#0x45
   \   000059   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2408            return NULL;
   \   00005C   7A00         MOV     R2,#0x0
   \   00005E   7B00         MOV     R3,#0x0
   \   000060   740B         MOV     A,#0xb
   \   000062   02....       LJMP    ??Subroutine143_0 & 0xFFFF
   2409          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00000B   8E82         MOV     DPL,R6
   \   00000D   8F83         MOV     DPH,R7
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
   2410          
   2411          /***************************************************************************************************
   2412           * @fn          MT_ZdoLeaveInd
   2413           *
   2414           * @brief       Handle the ZDO Leave Indication callback from the ZDO.
   2415           *
   2416           * @param       vPtr - Pointer to the received Leave Indication message.
   2417           *
   2418           * @return      NULL
   2419           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2420          static void *MT_ZdoLeaveInd(void *vPtr)
   \                     MT_ZdoLeaveInd:
   2421          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine15 & 0xFFFF
   2422            NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
   2423            uint8 buf[sizeof(NLME_LeaveInd_t)];
   2424          
   2425            buf[0] = LO_UINT16(pInd->srcAddr);
   2426            buf[1] = HI_UINT16(pInd->srcAddr);
   \                     ??CrossCallReturnLabel_7:
   \   00000D   C0E0         PUSH    A
   \   00000F   7401         MOV     A,#0x1
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   D0E0         POP     A
   \   000016   12....       LCALL   ?Subroutine64 & 0xFFFF
   2427            (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_110:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001C   7C08         MOV     R4,#0x8
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7405         MOV     A,#0x5
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   AA82         MOV     R2,DPL
   \   000027   AB83         MOV     R3,DPH
   \   000029   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002C   7403         MOV     A,#0x3
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   2428            buf[2+Z_EXTADDR_LEN] = pInd->request;
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   C0E0         PUSH    A
   \   000042   740A         MOV     A,#0xa
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   D0E0         POP     A
   \   000049   12....       LCALL   ?Subroutine70 & 0xFFFF
   2429            buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
   \                     ??CrossCallReturnLabel_125:
   \   00004C   C0E0         PUSH    A
   \   00004E   740B         MOV     A,#0xb
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   D0E0         POP     A
   \   000055   12....       LCALL   ?Subroutine71 & 0xFFFF
   2430            buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
   \                     ??CrossCallReturnLabel_127:
   \   000058   C0E0         PUSH    A
   \   00005A   740C         MOV     A,#0xc
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   D0E0         POP     A
   \   000061   12....       LCALL   ?Subroutine77 & 0xFFFF
   2431          
   2432            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2433                                                 MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
   \                     ??CrossCallReturnLabel_139:
   \   000064   7B0D         MOV     R3,#0xd
   \   000066   7AC9         MOV     R2,#-0x37
   \   000068   7945         MOV     R1,#0x45
   \   00006A   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2434            return NULL;
   \   00006D   7A00         MOV     R2,#0x0
   \   00006F   7B00         MOV     R3,#0x0
   \   000071   740D         MOV     A,#0xd
   \   000073   80..         SJMP    ??Subroutine143_0
   2435          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   A3           INC     DPTR
   \   000004   A982         MOV     R1,DPL
   \   000006   AA83         MOV     R2,DPH
   \   000008   89..         MOV     ?V0,R1
   \   00000A   8A..         MOV     ?V1,R2
   \   00000C   75..00       MOV     ?V2,#0x0
   \   00000F   78..         MOV     R0,#?V0
   \   000011   22           RET
   2436          
   2437          /***************************************************************************************************
   2438           * @fn          MT_ZdoTcDeviceInd
   2439           *
   2440           * @brief       Handle the ZDO TC Device Indication callback from the ZDO.
   2441           *
   2442           * @param       params - pointer to Trust Center joining device information
   2443           *
   2444           * @return      NULL
   2445           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2446          void *MT_ZdoTcDeviceInd( void *params )
   \                     MT_ZdoTcDeviceInd:
   2447          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine15 & 0xFFFF
   2448            ZDO_TC_Device_t *pDev = (ZDO_TC_Device_t *)params;
   2449            uint8 buf[12];
   2450          
   2451            buf[0] = LO_UINT16( pDev->nwkAddr );
   2452            buf[1] = HI_UINT16( pDev->nwkAddr );
   \                     ??CrossCallReturnLabel_8:
   \   00000D   C0E0         PUSH    A
   \   00000F   7401         MOV     A,#0x1
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   D0E0         POP     A
   \   000016   12....       LCALL   ?Subroutine64 & 0xFFFF
   2453            (void)osal_memcpy( &buf[2], pDev->extAddr, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_111:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001C   7C08         MOV     R4,#0x8
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7405         MOV     A,#0x5
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   AA82         MOV     R2,DPL
   \   000027   AB83         MOV     R3,DPH
   \   000029   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002C   7403         MOV     A,#0x3
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   2454            buf[2+Z_EXTADDR_LEN] = LO_UINT16( pDev->parentAddr );
   \   000031   EE           MOV     A,R6
   \   000032   240A         ADD     A,#0xa
   \   000034   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000037   E0           MOVX    A,@DPTR
   \   000038   C0E0         PUSH    A
   \   00003A   740A         MOV     A,#0xa
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   D0E0         POP     A
   \   000041   12....       LCALL   ?Subroutine67 & 0xFFFF
   2455            buf[3+Z_EXTADDR_LEN] = HI_UINT16( pDev->parentAddr );
   \                     ??CrossCallReturnLabel_121:
   \   000044   C0E0         PUSH    A
   \   000046   740B         MOV     A,#0xb
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   D0E0         POP     A
   \   00004D   12....       LCALL   ?Subroutine77 & 0xFFFF
   2456          
   2457            MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2458                                                 MT_ZDO_TC_DEVICE_IND, 12, buf );
   \                     ??CrossCallReturnLabel_140:
   \   000050   7B0C         MOV     R3,#0xc
   \   000052   7ACA         MOV     R2,#-0x36
   \   000054   7945         MOV     R1,#0x45
   \   000056   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2459            
   2460            return ( NULL );
   \   000059   7A00         MOV     R2,#0x0
   \   00005B   7B00         MOV     R3,#0x0
   \   00005D   740C         MOV     A,#0xc
   \   00005F   80..         SJMP    ??Subroutine143_0
   2461          }
   2462          
   2463          /***************************************************************************************************
   2464           * @fn          MT_ZdoPermitJoinInd
   2465           *
   2466           * @brief       Handle the ZDO Permit Join Indication callback from the ZDO.
   2467           *
   2468           * @param       duration - permit join duration
   2469           *
   2470           * @return      NULL
   2471           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2472          void *MT_ZdoPermitJoinInd( void *duration )
   \                     MT_ZdoPermitJoinInd:
   2473          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2474            if ( ignoreIndication == FALSE )
   \   000004   90....       MOV     DPTR,#ignoreIndication
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700D         JNZ     ??MT_ZdoPermitJoinInd_0
   2475            {
   2476              MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2477                                                 MT_ZDO_PERMIT_JOIN_IND, 1, (uint8 *)duration );
   \   00000A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
   \   00000E   7B01         MOV     R3,#0x1
   \   000010   7ACB         MOV     R2,#-0x35
   \   000012   7945         MOV     R1,#0x45
   \   000014   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2478            }
   2479            
   2480            return ( NULL );
   \                     ??MT_ZdoPermitJoinInd_0:
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   02....       LJMP    ?Subroutine0 & 0xFFFF
   2481          }
   2482          #endif // MT_ZDO_CB_FUNC
   2483          
   2484          /***************************************************************************************************
   2485           * @fn      MT_ZdoSendMsgCB
   2486           *
   2487           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2488           *
   2489           * @param   pMsg  - Message data
   2490           *
   2491           * @return  void
   2492           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2493          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   2494          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2495            uint8 len = pMsg->asduLen + 9;
   \   000009   EE           MOV     A,R6
   \   00000A   2410         ADD     A,#0x10
   \   00000C   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   00000F   2409         ADD     A,#0x9
   \   000011   F5..         MOV     ?V2,A
   2496            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   000013                ; Setup parameters for call to function osal_mem_alloc
   \   000013   FA           MOV     R2,A
   \   000014   7B00         MOV     R3,#0x0
   \   000016   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000019   8A..         MOV     ?V0,R2
   \   00001B   8B..         MOV     ?V1,R3
   2497          
   2498            if (pBuf != NULL)
   \   00001D   EA           MOV     A,R2
   \   00001E   45..         ORL     A,?V1
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??MT_ZdoSendMsgCB_0 & 0xFFFF
   2499            {
   2500              uint8 *pTmp = pBuf;
   2501          
   2502              // Assuming exclusive use of network short addresses.
   2503              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000025   EE           MOV     A,R6
   \   000026   2402         ADD     A,#0x2
   \   000028   12....       LCALL   ?Subroutine25 & 0xFFFF
   2504              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   2505              *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_25:
   \   00002B   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   00002E   12....       LCALL   ?Subroutine41 & 0xFFFF
   2506              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_51:
   \   000031   EE           MOV     A,R6
   \   000032   240C         ADD     A,#0xc
   \   000034   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000037   12....       LCALL   ??Subroutine137_0 & 0xFFFF
   2507              *pTmp++ = HI_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_293:
   \   00003A   8882         MOV     DPL,R0
   \   00003C   8983         MOV     DPH,R1
   \   00003E   12....       LCALL   ?Subroutine49 & 0xFFFF
   2508              *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_69:
   \   000041   EE           MOV     A,R6
   \   000042   240E         ADD     A,#0xe
   \   000044   F582         MOV     DPL,A
   \   000046   E4           CLR     A
   \   000047   3F           ADDC    A,R7
   \   000048   F583         MOV     DPH,A
   \   00004A   12....       LCALL   ?Subroutine47 & 0xFFFF
   2509              *pTmp++ = pMsg->TransSeq;
   \                     ??CrossCallReturnLabel_67:
   \   00004D   EE           MOV     A,R6
   \   00004E   240F         ADD     A,#0xf
   \   000050   F582         MOV     DPL,A
   \   000052   E4           CLR     A
   \   000053   3F           ADDC    A,R7
   \   000054   F583         MOV     DPH,A
   \   000056   12....       LCALL   ?Subroutine43 & 0xFFFF
   2510              // Skipping asduLen since it can be deduced from the RPC packet length.
   2511              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_55:
   \   000059   EE           MOV     A,R6
   \   00005A   2411         ADD     A,#0x11
   \   00005C   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00005F   12....       LCALL   ?Subroutine42 & 0xFFFF
   2512              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_53:
   \   000062   8882         MOV     DPL,R0
   \   000064   8983         MOV     DPH,R1
   \   000066   12....       LCALL   ?Subroutine31 & 0xFFFF
   2513              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \                     ??CrossCallReturnLabel_34:
   \   000069                ; Setup parameters for call to function osal_memcpy
   \   000069   EE           MOV     A,R6
   \   00006A   2413         ADD     A,#0x13
   \   00006C   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   00006F   F5..         MOV     ?V4,A
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F5..         MOV     ?V5,A
   \   000075   75..00       MOV     ?V6,#0x0
   \   000078   78..         MOV     R0,#?V4
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007D   EE           MOV     A,R6
   \   00007E   2410         ADD     A,#0x10
   \   000080   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000083   FC           MOV     R4,A
   \   000084   7D00         MOV     R5,#0x0
   \   000086   EA           MOV     A,R2
   \   000087   2409         ADD     A,#0x9
   \   000089   FA           MOV     R2,A
   \   00008A   E4           CLR     A
   \   00008B   35..         ADDC    A,?V1
   \   00008D   FB           MOV     R3,A
   \   00008E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000091   7403         MOV     A,#0x3
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   2514          
   2515              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2516                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   000096                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000096   AC..         MOV     R4,?V0
   \   000098   AD..         MOV     R5,?V1
   \   00009A   AB..         MOV     R3,?V2
   \   00009C   7AFF         MOV     R2,#-0x1
   \   00009E   7945         MOV     R1,#0x45
   \   0000A0   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2517          
   2518              osal_mem_free(pBuf);
   \   0000A3                ; Setup parameters for call to function osal_mem_free
   \   0000A3   AA..         MOV     R2,?V0
   \   0000A5   AB..         MOV     R3,?V1
   \   0000A7   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   2519            }
   2520          }
   \                     ??MT_ZdoSendMsgCB_0:
   \   0000AA   02....       LJMP    ??Subroutine140_0 & 0xFFFF
   2521          
   2522          #if defined ( MT_ZDO_EXTENSIONS )
   2523          /***************************************************************************************************
   2524           * @fn          MT_ZdoSecUpdateNwkKey
   2525           *
   2526           * @brief       Handle the ZDO Security Update Network Key extension message
   2527           *
   2528           * @param       pBuf - Pointer to the received message data.
   2529           *
   2530           * @return      NULL
   2531           ***************************************************************************************************/
   2532          static void MT_ZdoSecUpdateNwkKey( uint8 *pBuf )
   2533          {
   2534            uint16 dstAddr;
   2535            uint8 keySeqNum;
   2536            uint8 status;
   2537          
   2538            pBuf += MT_RPC_FRAME_HDR_SZ;
   2539            
   2540            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2541            pBuf += 2;
   2542            keySeqNum = *pBuf++;
   2543          
   2544            status = ZDSecMgrUpdateNwkKey( pBuf, keySeqNum, dstAddr );
   2545          
   2546            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2547                                                 MT_ZDO_EXT_UPDATE_NWK_KEY, 1, &status );
   2548          }
   2549          
   2550          /***************************************************************************************************
   2551           * @fn          MT_ZdoSecSwitchNwkKey
   2552           *
   2553           * @brief       Handle the ZDO Security Switch Network Key extension message
   2554           *
   2555           * @param       pBuf - Pointer to the received message data.
   2556           *
   2557           * @return      NULL
   2558           ***************************************************************************************************/
   2559          static void MT_ZdoSecSwitchNwkKey( uint8 *pBuf )
   2560          {
   2561            uint16 dstAddr;
   2562            uint8 keySeqNum;
   2563            uint8 status;
   2564          
   2565            pBuf += MT_RPC_FRAME_HDR_SZ;
   2566            
   2567            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2568            pBuf += 2;
   2569            keySeqNum = *pBuf++;
   2570          
   2571            status = ZDSecMgrSwitchNwkKey( keySeqNum, dstAddr );
   2572          
   2573            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2574                                                 MT_ZDO_EXT_SWITCH_NWK_KEY, 1, &status );
   2575          }
   2576          
   2577          /***************************************************************************************************
   2578           * @fn          MT_ZdoSecAddLinkKey
   2579           *
   2580           * @brief       Handle the ZDO Security Add Link Key extension message
   2581           *
   2582           * @param       pBuf - Pointer to the received message data.
   2583           *
   2584           * @return      NULL
   2585           ***************************************************************************************************/
   2586          static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
   2587          {
   2588            uint16 shortAddr;
   2589            uint8 *pExtAddr;
   2590            uint8 status;
   2591          
   2592            pBuf += MT_RPC_FRAME_HDR_SZ;
   2593            
   2594            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2595            pBuf += 2;
   2596            pExtAddr = pBuf;
   2597            pBuf += Z_EXTADDR_LEN;
   2598          
   2599            status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
   2600          
   2601            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2602                                                 MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
   2603          }
   2604          
   2605          /***************************************************************************************************
   2606           * @fn          MT_ZdoSecEntryLookupExt
   2607           *
   2608           * @brief       Handle the ZDO Security Entry Lookup Extended extension message
   2609           *
   2610           * @param       pBuf - Pointer to the received message data.
   2611           *
   2612           * @return      NULL
   2613           ***************************************************************************************************/
   2614          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
   2615          {
   2616            ZDSecMgrEntry_t *pEntry = NULL;
   2617            uint8 buf[6] = {0};
   2618          
   2619            pBuf += MT_RPC_FRAME_HDR_SZ;
   2620            
   2621            // lookup entry index for specified EXT address
   2622            buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
   2623            if ( pEntry )
   2624            {
   2625              buf[1] = LO_UINT16( pEntry->ami );
   2626              buf[2] = HI_UINT16( pEntry->ami );
   2627              buf[3] = LO_UINT16( pEntry->keyNvId );
   2628              buf[4] = HI_UINT16( pEntry->keyNvId );
   2629              buf[5] = (uint8)pEntry->authenticateOption;
   2630            }
   2631          
   2632            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2633                                                 MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
   2634          }
   2635          
   2636          /***************************************************************************************************
   2637           * @fn          MT_ZdoSecDeviceRemove
   2638           *
   2639           * @brief       Handle the ZDO Security Remove Device extension message
   2640           *
   2641           * @param       pBuf - Pointer to the received message data.
   2642           *
   2643           * @return      NULL
   2644           ***************************************************************************************************/
   2645          static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
   2646          {
   2647            ZStatus_t status;
   2648          
   2649            pBuf += MT_RPC_FRAME_HDR_SZ;
   2650          
   2651            // lookup entry index for specified EXT address
   2652            status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
   2653          
   2654            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2655                                                 MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
   2656          }
   2657          
   2658          /***************************************************************************************************
   2659           * @fn          MT_ZdoExtRouteDisc
   2660           *
   2661           * @brief       Handle the ZDO Route Discovery extension message
   2662           *
   2663           * @param       pBuf - Pointer to the received message data.
   2664           *
   2665           * @return      NULL
   2666           ***************************************************************************************************/
   2667          static void MT_ZdoExtRouteDisc( uint8 *pBuf )
   2668          {
   2669            ZStatus_t status;
   2670            uint16 dstAddr;
   2671          
   2672            pBuf += MT_RPC_FRAME_HDR_SZ;
   2673          
   2674            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2675          
   2676            status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
   2677          
   2678          
   2679            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2680                                                 MT_ZDO_EXT_ROUTE_DISC, 1, &status );
   2681          }
   2682          
   2683          /***************************************************************************************************
   2684           * @fn          MT_ZdoExtRouteCheck
   2685           *
   2686           * @brief       Handle the ZDO Route Check extension message
   2687           *
   2688           * @param       pBuf - Pointer to the received message data.
   2689           *
   2690           * @return      NULL
   2691           ***************************************************************************************************/
   2692          static void MT_ZdoExtRouteCheck( uint8 *pBuf )
   2693          {
   2694            ZStatus_t status;
   2695            uint16 dstAddr;
   2696          
   2697            pBuf += MT_RPC_FRAME_HDR_SZ;
   2698            
   2699            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2700          
   2701            status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
   2702          
   2703            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2704                                                 MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
   2705          }
   2706          
   2707          /***************************************************************************************************
   2708           * @fn          MT_ZdoExtRemoveGroup
   2709           *
   2710           * @brief       Handle the ZDO extension Remove Group message
   2711           *
   2712           * @param       pBuf - Pointer to the received message data.
   2713           *
   2714           * @return      NULL
   2715           ***************************************************************************************************/
   2716          static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
   2717          {
   2718            ZStatus_t status;
   2719            uint8 endpoint;
   2720            uint16 groupID;
   2721          
   2722            pBuf += MT_RPC_FRAME_HDR_SZ;
   2723            
   2724            endpoint = *pBuf++;
   2725            groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2726          
   2727            if ( aps_RemoveGroup( endpoint, groupID ) )
   2728            {
   2729              status = ZSuccess;
   2730            }
   2731            else
   2732            {
   2733              status = ZFailure;
   2734            }
   2735          
   2736            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2737                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2738          }
   2739          
   2740          /***************************************************************************************************
   2741           * @fn          MT_ZdoExtRemoveAllGroup
   2742           *
   2743           * @brief       Handle the ZDO extension Remove All Groups message
   2744           *
   2745           * @param       pBuf - Pointer to the received message data.
   2746           *
   2747           * @return      NULL
   2748           ***************************************************************************************************/
   2749          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
   2750          {
   2751            ZStatus_t status = ZSuccess;
   2752          
   2753            pBuf += MT_RPC_FRAME_HDR_SZ;
   2754            
   2755            aps_RemoveAllGroup( *pBuf );
   2756          
   2757            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2758                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2759          }
   2760          
   2761          /***************************************************************************************************
   2762           * @fn          MT_ZdoExtFindAllGroupsEndpoint
   2763           *
   2764           * @brief       Handle the ZDO extension Find All Groups for Endpoint message
   2765           *
   2766           * @param       pBuf - Pointer to the received message data.
   2767           *
   2768           * @return      NULL
   2769           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2770          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
   \                     MT_ZdoExtFindAllGroupsEndpoint:
   2771          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 33
   \   000005   74DF         MOV     A,#-0x21
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   2772            uint16 groupList[ APS_MAX_GROUPS ];
   2773            uint8 groups;
   2774            uint8 msgLen;
   2775            uint8 *pMsg;
   2776          
   2777            pBuf += MT_RPC_FRAME_HDR_SZ;
   2778            
   2779            groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
   \   00000E                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   00000E   7401         MOV     A,#0x1
   \   000010   12....       LCALL   ?XSTACK_DISP101_8
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   `??aps_FindAllGroupsForEndpoint::?relay`; Banked call to: aps_FindAllGroupsForEndpoint
   \   00001B   E9           MOV     A,R1
   \   00001C   85..82       MOV     DPL,?XSP + 0
   \   00001F   85..83       MOV     DPH,?XSP + 1
   \   000022   F0           MOVX    @DPTR,A
   2780          
   2781            msgLen = 1 + (2 * groups);
   \   000023   C3           CLR     C
   \   000024   33           RLC     A
   \   000025   04           INC     A
   \   000026   F5..         MOV     ?V0,A
   2782            pMsg = osal_mem_alloc( msgLen );
   \   000028                ; Setup parameters for call to function osal_mem_alloc
   \   000028   FA           MOV     R2,A
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002E   8A..         MOV     ?V2,R2
   \   000030   8B..         MOV     ?V3,R3
   \   000032   AE..         MOV     R6,?V2
   \   000034   AF..         MOV     R7,?V3
   2783            if ( pMsg )
   \   000036   EE           MOV     A,R6
   \   000037   4F           ORL     A,R7
   \   000038   6068         JZ      ??MT_ZdoExtFindAllGroupsEndpoint_0
   2784            {
   2785              uint8 x;
   2786              uint8 *pBuf = pMsg;
   \   00003A   EE           MOV     A,R6
   \   00003B   F8           MOV     R0,A
   \   00003C   EF           MOV     A,R7
   \   00003D   F9           MOV     R1,A
   2787          
   2788              *pBuf++ = groups;
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000047   A3           INC     DPTR
   \   000048   A882         MOV     R0,DPL
   \   00004A   A983         MOV     R1,DPH
   2789              for ( x = 0; x < groups; x++ )
   \   00004C   7C00         MOV     R4,#0x0
   \   00004E   802F         SJMP    ??MT_ZdoExtFindAllGroupsEndpoint_1
   2790              {
   2791                *pBuf++ = LO_UINT16( groupList[x] );
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_2:
   \   000050   EC           MOV     A,R4
   \   000051   25E0         ADD     A,0xE0 /* A   */
   \   000053   FA           MOV     R2,A
   \   000054   E4           CLR     A
   \   000055   33           RLC     A
   \   000056   FB           MOV     R3,A
   \   000057   7401         MOV     A,#0x1
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   E582         MOV     A,DPL
   \   00005E   2A           ADD     A,R2
   \   00005F   FA           MOV     R2,A
   \   000060   E583         MOV     A,DPH
   \   000062   3B           ADDC    A,R3
   \   000063   FB           MOV     R3,A
   \   000064   8A82         MOV     DPL,R2
   \   000066   8B83         MOV     DPH,R3
   \   000068   12....       LCALL   ?Subroutine59 & 0xFFFF
   2792                *pBuf++ = HI_UINT16( groupList[x] );
   \                     ??CrossCallReturnLabel_89:
   \   00006B   8A82         MOV     DPL,R2
   \   00006D   8B83         MOV     DPH,R3
   \   00006F   A3           INC     DPTR
   \   000070   E0           MOVX    A,@DPTR
   \   000071   8882         MOV     DPL,R0
   \   000073   8983         MOV     DPH,R1
   \   000075   A3           INC     DPTR
   \   000076   F0           MOVX    @DPTR,A
   \   000077   E8           MOV     A,R0
   \   000078   2402         ADD     A,#0x2
   \   00007A   F8           MOV     R0,A
   \   00007B   5001         JNC     ??MT_ZdoExtFindAllGroupsEndpoint_3
   \   00007D   09           INC     R1
   2793              }
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_3:
   \   00007E   0C           INC     R4
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_1:
   \   00007F   85..82       MOV     DPL,?XSP + 0
   \   000082   85..83       MOV     DPH,?XSP + 1
   \   000085   E0           MOVX    A,@DPTR
   \   000086   FA           MOV     R2,A
   \   000087   EC           MOV     A,R4
   \   000088   C3           CLR     C
   \   000089   9A           SUBB    A,R2
   \   00008A   40C4         JC      ??MT_ZdoExtFindAllGroupsEndpoint_2
   2794          
   2795              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2796                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
   \   00008C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008C   EE           MOV     A,R6
   \   00008D   FC           MOV     R4,A
   \   00008E   EF           MOV     A,R7
   \   00008F   FD           MOV     R5,A
   \   000090   AB..         MOV     R3,?V0
   \   000092   7A49         MOV     R2,#0x49
   \   000094   7965         MOV     R1,#0x65
   \   000096   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2797              osal_mem_free( pMsg );
   \   000099                ; Setup parameters for call to function osal_mem_free
   \   000099   EE           MOV     A,R6
   \   00009A   FA           MOV     R2,A
   \   00009B   EF           MOV     A,R7
   \   00009C   FB           MOV     R3,A
   \   00009D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   0000A0   8011         SJMP    ??MT_ZdoExtFindAllGroupsEndpoint_4
   2798            }
   2799            else
   2800            {
   2801              groups = 0;
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_0:
   \   0000A2   85..82       MOV     DPL,?XSP + 0
   \   0000A5   85..83       MOV     DPH,?XSP + 1
   \   0000A8   E4           CLR     A
   \   0000A9   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   2802              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2803                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
   2804            }
   \                     ??CrossCallReturnLabel_211:
   \   0000AC   7A49         MOV     R2,#0x49
   \   0000AE   7965         MOV     R1,#0x65
   \   0000B0   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2805          }
   \                     ??MT_ZdoExtFindAllGroupsEndpoint_4:
   \   0000B3   7421         MOV     A,#0x21
   \   0000B5   02....       LJMP    ?Subroutine2 & 0xFFFF
   2806          
   2807          /***************************************************************************************************
   2808           * @fn          MT_ZdoExtFindGroup
   2809           *
   2810           * @brief       Handle the ZDO extension Find Group message
   2811           *
   2812           * @param       pBuf - Pointer to the received message data.
   2813           *
   2814           * @return      NULL
   2815           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7965         MOV     R1,#0x65
   \   000002   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005   7413         MOV     A,#0x13
   \   000007                REQUIRE ??Subroutine143_0
   \   000007                ; // Fall through to label ??Subroutine143_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2816          static void MT_ZdoExtFindGroup( uint8 *pBuf )
   \                     MT_ZdoExtFindGroup:
   2817          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2818            uint8 endpoint;
   2819            uint16 groupID;
   2820            aps_Group_t *pGroup;
   2821            uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7413         MOV     A,#0x13
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2822          
   2823            pBuf += MT_RPC_FRAME_HDR_SZ;
   2824            
   2825            endpoint = *pBuf++;
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F9           MOV     R1,A
   \   00001F   EA           MOV     A,R2
   \   000020   2404         ADD     A,#0x4
   \   000022   FA           MOV     R2,A
   \   000023   5001         JNC     ??MT_ZdoExtFindGroup_0
   \   000025   0B           INC     R3
   2826            groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2827          
   2828            pGroup = aps_FindGroup( endpoint, groupID );
   \                     ??MT_ZdoExtFindGroup_0:
   \   000026                ; Setup parameters for call to function aps_FindGroup
   \   000026   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000029   FB           MOV     R3,A
   \   00002A   EC           MOV     A,R4
   \   00002B   FA           MOV     R2,A
   \   00002C   12....       LCALL   `??aps_FindGroup::?relay`; Banked call to: aps_FindGroup
   2829            if ( pGroup  )
   \   00002F   EA           MOV     A,R2
   \   000030   4B           ORL     A,R3
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   604D         JZ      ??MT_ZdoExtFindGroup_1
   2830            {
   2831              buf[0] = ZSuccess;
   \   000039   E4           CLR     A
   \   00003A   F0           MOVX    @DPTR,A
   2832              buf[1] = LO_UINT16( pGroup->ID );
   \   00003B   8A82         MOV     DPL,R2
   \   00003D   8B83         MOV     DPH,R3
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   C0E0         PUSH    A
   \   000042   7401         MOV     A,#0x1
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   D0E0         POP     A
   \   000049   12....       LCALL   ?Subroutine73 & 0xFFFF
   2833              buf[2] = HI_UINT16( pGroup->ID );
   2834              buf[3] = pGroup->name[0];
   2835              osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
   2836            }
   \                     ??CrossCallReturnLabel_130:
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   C0E0         PUSH    A
   \   00004F   7402         MOV     A,#0x2
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   D0E0         POP     A
   \   000056   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   FC           MOV     R4,A
   \   00005C   7403         MOV     A,#0x3
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   EC           MOV     A,R4
   \   000062   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000065   89..         MOV     ?V0,R1
   \   000067   8A..         MOV     ?V1,R2
   \   000069   75..00       MOV     ?V2,#0x0
   \   00006C   78..         MOV     R0,#?V0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000071   7D00         MOV     R5,#0x0
   \   000073   7407         MOV     A,#0x7
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   AA82         MOV     R2,DPL
   \   00007A   AB83         MOV     R3,DPH
   \   00007C   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00007F   7403         MOV     A,#0x3
   \   000081   12....       LCALL   ?DEALLOC_XSTACK8
   \   000084   8003         SJMP    ??MT_ZdoExtFindGroup_2
   2837            else
   2838            {
   2839              buf[0] = ZFailure;
   \                     ??MT_ZdoExtFindGroup_1:
   \   000086   7401         MOV     A,#0x1
   \   000088   F0           MOVX    @DPTR,A
   2840            }
   2841          
   2842            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2843                                MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
   \                     ??MT_ZdoExtFindGroup_2:
   \   000089                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000089   AC..         MOV     R4,?XSP + 0
   \   00008B   AD..         MOV     R5,?XSP + 1
   \   00008D   7B13         MOV     R3,#0x13
   \   00008F   7A4A         MOV     R2,#0x4a
   \   000091   02....       LJMP    ?Subroutine7 & 0xFFFF
   2844          }
   2845          
   2846          /***************************************************************************************************
   2847           * @fn          MT_ZdoExtAddGroup
   2848           *
   2849           * @brief       Handle the ZDO extension Add Group message
   2850           *
   2851           * @param       pBuf - Pointer to the received message data.
   2852           *
   2853           * @return      NULL
   2854           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2855          static void MT_ZdoExtAddGroup( uint8 *pBuf )
   \                     MT_ZdoExtAddGroup:
   2856          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2857            ZStatus_t status = ZSuccess;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   2858            aps_Group_t group = {0};
   \   000012   90....       MOV     DPTR,#`?<Constant {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, `
   \   000015   04           INC     A
   \   000016   12....       LCALL   ?XSTACK_DISP102_8
   \   000019   7412         MOV     A,#0x12
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   2859            uint8 endpoint;
   2860          
   2861            pBuf += MT_RPC_FRAME_HDR_SZ;
   2862          
   2863            endpoint = *pBuf++;
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FE           MOV     R6,A
   \   000027   EA           MOV     A,R2
   \   000028   2404         ADD     A,#0x4
   \   00002A   FA           MOV     R2,A
   \   00002B   5001         JNC     ??MT_ZdoExtAddGroup_0
   \   00002D   0B           INC     R3
   2864            group.ID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoExtAddGroup_0:
   \   00002E   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   12....       LCALL   ?Subroutine66 & 0xFFFF
   2865            group.name[0] = pBuf[2];
   \                     ??CrossCallReturnLabel_117:
   \   000037   F8           MOV     R0,A
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E8           MOV     A,R0
   \   00003E   F0           MOVX    @DPTR,A
   2866            if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
   \   00003F   C3           CLR     C
   \   000040   9410         SUBB    A,#0x10
   \   000042   4005         JC      ??MT_ZdoExtAddGroup_1
   2867            {
   2868              group.name[0] = (APS_GROUP_NAME_LEN-1);
   \   000044   740F         MOV     A,#0xf
   \   000046   F0           MOVX    @DPTR,A
   \   000047   8003         SJMP    ??MT_ZdoExtAddGroup_2
   2869            }
   2870          
   2871            if (group.name[0] > 0 )
   \                     ??MT_ZdoExtAddGroup_1:
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   6031         JZ      ??MT_ZdoExtAddGroup_3
   2872            {
   2873              osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
   \                     ??MT_ZdoExtAddGroup_2:
   \   00004C                ; Setup parameters for call to function osal_memcpy
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A982         MOV     R1,DPL
   \   000055   AA83         MOV     R2,DPH
   \   000057   89..         MOV     ?V0,R1
   \   000059   8A..         MOV     ?V1,R2
   \   00005B   75..00       MOV     ?V2,#0x0
   \   00005E   78..         MOV     R0,#?V0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   7406         MOV     A,#0x6
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FC           MOV     R4,A
   \   00006A   7D00         MOV     R5,#0x0
   \   00006C   7407         MOV     A,#0x7
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   AA82         MOV     R2,DPL
   \   000073   AB83         MOV     R3,DPH
   \   000075   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000078   7403         MOV     A,#0x3
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   2874            }
   2875          
   2876            status = aps_AddGroup( endpoint, &group );
   \                     ??MT_ZdoExtAddGroup_3:
   \   00007D                ; Setup parameters for call to function aps_AddGroup
   \   00007D   7401         MOV     A,#0x1
   \   00007F   12....       LCALL   ?XSTACK_DISP101_8
   \   000082   EE           MOV     A,R6
   \   000083   F9           MOV     R1,A
   \   000084   12....       LCALL   `??aps_AddGroup::?relay`; Banked call to: aps_AddGroup
   \   000087   12....       LCALL   ?Subroutine76 & 0xFFFF
   2877          
   2878            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2879                                                 MT_ZDO_EXT_ADD_GROUP, 1, &status );
   \                     ??CrossCallReturnLabel_209:
   \   00008A   7A4B         MOV     R2,#0x4b
   \   00008C   02....       LJMP    ?Subroutine7 & 0xFFFF
   2880          }
   2881          
   2882          /***************************************************************************************************
   2883           * @fn          MT_ZdoExtCountAllGroups
   2884           *
   2885           * @brief       Handle the ZDO extension Count All Groups message
   2886           *
   2887           * @param       pBuf - Pointer to the received message data.
   2888           *
   2889           * @return      NULL
   2890           ***************************************************************************************************/
   2891          static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
   2892          {
   2893            ZStatus_t status = 0;
   2894          
   2895            pBuf += MT_RPC_FRAME_HDR_SZ;
   2896          
   2897            status = (ZStatus_t)aps_CountAllGroups();
   2898          
   2899            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2900                                                 MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
   2901          }
   2902          
   2903          
   2904          /***************************************************************************************************
   2905           * @fn          MT_ZdoExtRxIdle
   2906           *
   2907           * @brief       Handle the ZDO extension Get/Set RxOnIdle to ZMac message 
   2908           *
   2909           * @param       pBuf - Pointer to the received message data.
   2910           *
   2911           * @return      NULL
   2912           ***************************************************************************************************/
   2913          static void MT_ZdoExtRxIdle( uint8 *pBuf )
   2914          {
   2915            uint8 setFlag;
   2916            uint8 setValue;
   2917            
   2918            pBuf += MT_RPC_FRAME_HDR_SZ;
   2919          
   2920            setFlag = *pBuf++;
   2921            setValue = *pBuf++;
   2922            
   2923            if ( setFlag )
   2924            {
   2925              ZMacSetReq( ZMacRxOnIdle, &setValue );
   2926            }
   2927            else
   2928            {
   2929              ZMacGetReq( ZMacRxOnIdle, &setValue );
   2930            }
   2931           
   2932            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2933                                                 MT_ZDO_EXT_RX_IDLE, 1, &setValue );
   2934          }
   2935          
   2936          /***************************************************************************************************
   2937           * @fn          MT_ZdoExtNwkInfo
   2938           *
   2939           * @brief       Handle the ZDO extension Network Info Request message 
   2940           *
   2941           * @param       pBuf - Pointer to the received message data.
   2942           *
   2943           * @return      NULL
   2944           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2945          static void MT_ZdoExtNwkInfo( uint8 *pBuf )
   \                     MT_ZdoExtNwkInfo:
   2946          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 24
   \   000005   74E8         MOV     A,#-0x18
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2947            uint8 buf[24];
   2948            uint8 *pMsg;
   2949            
   2950            pMsg = buf;
   2951            
   2952            *pMsg++ = LO_UINT16( _NIB.nwkDevAddress );
   \   00000A   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   00000D   E8           MOV     A,R0
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   2953            *pMsg++ = HI_UINT16( _NIB.nwkDevAddress );
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E9           MOV     A,R1
   \   00001B   F0           MOVX    @DPTR,A
   2954            
   2955            *pMsg++ = devState;
   \   00001C   90....       MOV     DPTR,#devState
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   C0E0         PUSH    A
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   F0           MOVX    @DPTR,A
   2956            *pMsg++ = LO_UINT16( _NIB.nwkPanId );
   \   00002A   90....       MOV     DPTR,#_NIB + 33
   \   00002D   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000030   7403         MOV     A,#0x3
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E8           MOV     A,R0
   \   000036   F0           MOVX    @DPTR,A
   2957            *pMsg++ = HI_UINT16( _NIB.nwkPanId );
   \   000037   7404         MOV     A,#0x4
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E9           MOV     A,R1
   \   00003D   F0           MOVX    @DPTR,A
   2958            *pMsg++ = LO_UINT16( _NIB.nwkCoordAddress );
   \   00003E   90....       MOV     DPTR,#_NIB + 23
   \   000041   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   000044   7405         MOV     A,#0x5
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   E8           MOV     A,R0
   \   00004A   F0           MOVX    @DPTR,A
   2959            *pMsg++ = HI_UINT16( _NIB.nwkCoordAddress );
   \   00004B   7406         MOV     A,#0x6
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   E9           MOV     A,R1
   \   000051   F0           MOVX    @DPTR,A
   2960            osal_memcpy( pMsg, _NIB.extendedPANID, 8 );
   \   000052                ; Setup parameters for call to function osal_memcpy
   \   000052   75....       MOV     ?V0,#(_NIB + 53) & 0xff
   \   000055   75....       MOV     ?V1,#((_NIB + 53) >> 8) & 0xff
   \   000058   75..00       MOV     ?V2,#0x0
   \   00005B   78..         MOV     R0,#?V0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000060   7C08         MOV     R4,#0x8
   \   000062   7D00         MOV     R5,#0x0
   \   000064   740A         MOV     A,#0xa
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   AA82         MOV     R2,DPL
   \   00006B   AB83         MOV     R3,DPH
   \   00006D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000070   7403         MOV     A,#0x3
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   2961            pMsg += 8;
   2962            osal_memcpy( pMsg, _NIB.nwkCoordExtAddress, 8 );
   \   000075                ; Setup parameters for call to function osal_memcpy
   \   000075   75....       MOV     ?V0,#(_NIB + 25) & 0xff
   \   000078   75....       MOV     ?V1,#((_NIB + 25) >> 8) & 0xff
   \   00007B   78..         MOV     R0,#?V0
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000080   7C08         MOV     R4,#0x8
   \   000082   7D00         MOV     R5,#0x0
   \   000084   7412         MOV     A,#0x12
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   AA82         MOV     R2,DPL
   \   00008B   AB83         MOV     R3,DPH
   \   00008D   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000090   7403         MOV     A,#0x3
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
   2963            pMsg += 8;
   2964            *pMsg++ = _NIB.nwkLogicalChannel;
   \   000095   90....       MOV     DPTR,#_NIB + 22
   \   000098   E0           MOVX    A,@DPTR
   \   000099   C0E0         PUSH    A
   \   00009B   7417         MOV     A,#0x17
   \   00009D   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A0   D0E0         POP     A
   \   0000A2   12....       LCALL   ?Subroutine77 & 0xFFFF
   2965           
   2966            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   2967                                                 MT_ZDO_EXT_NWK_INFO, 24, buf );
   \                     ??CrossCallReturnLabel_141:
   \   0000A5   7B18         MOV     R3,#0x18
   \   0000A7   7A50         MOV     R2,#0x50
   \   0000A9   7965         MOV     R1,#0x65
   \   0000AB   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   2968          }
   \   0000AE   7418         MOV     A,#0x18
   \   0000B0   02....       LJMP    ??Subroutine143_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function aps_RemoveAllGroup
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E8           MOV     A,R0
   \   000001   2403         ADD     A,#0x3
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   39           ADDC    A,R1
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ??Subroutine135_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   FB           MOV     R3,A
   \   000004   EC           MOV     A,R4
   \   000005   FA           MOV     R2,A
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   FA           MOV     R2,A
   \   000001   E9           MOV     A,R1
   \   000002   FB           MOV     R3,A
   \   000003                ; Setup parameters for call to function NLME_RouteDiscoveryRequest
   \   000003                ; Setup parameters for call to function RTG_CheckRtStatus
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   F9           MOV     R1,A
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   AA..         MOV     R2,?V0
   \   000018   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNWKAddressRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNWKAddressRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoIEEEAddrRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoIEEEAddrRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNodeDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNodeDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoPowerDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoPowerDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSimpleDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSimpleDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoActiveEpRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoActiveEpRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMatchDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMatchDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoComplexDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoComplexDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevAnnce::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUserDescSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoServiceDiscRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoServiceDiscRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDeviceTimeoutRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDeviceTimeoutRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoUnbindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUnbindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMgmtNwkDiscRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtNwkDiscRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMgmtLqiRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtLqiRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMgmtRtgRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtRtgRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMgmtBindRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMgmtLeaveRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtLeaveRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMgmtDirectJoinRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtDirectJoinRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMgmtPermitJoinRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtPermitJoinRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoMgmtNwkUpdateRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtNwkUpdateRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNwkAddrOfInterestReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoStartupFromApp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStartupFromApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoJoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoNwkDiscoveryCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkDiscoveryCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoBeaconIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBeaconIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoJoinCnfCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRegisterForZDOMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoRemoveRegisteredCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoStateChangeCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStateChangeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoDirectCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoDirectCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoHandleExceptions::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoHandleExceptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoAddrRspCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoAddrRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoEndDevAnnceCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnceCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSrcRtgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSrcRtgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoConcentratorIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoConcentratorIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoLeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoLeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoTcDeviceInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoTcDeviceInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoPermitJoinInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoPermitJoinInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoSendMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoExtFindAllGroupsEndpoint::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoExtFindAllGroupsEndpoint

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoExtFindGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoExtFindGroup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoExtAddGroup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoExtAddGroup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_ZdoExtNwkInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoExtNwkInfo

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   \   000012   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, `:
   \   000000   0000         DW 0
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   00           DB 0
   \   000009   00           DB 0
   \   00000A   00           DB 0
   \   00000B   00           DB 0
   \   00000C   00           DB 0
   \   00000D   00           DB 0
   \   00000E   00           DB 0
   \   00000F   00           DB 0
   \   000010   00           DB 0
   \   000011   00           DB 0
   2969          
   2970          /***************************************************************************************************
   2971           * @fn          MT_ZdoExtSecApsRemoveReq
   2972           *
   2973           * @brief       Handle the ZDO extension Security Manager APS Remove Request message
   2974           *
   2975           * @param       pBuf - Pointer to the received message data.
   2976           *
   2977           * @return      NULL
   2978           ***************************************************************************************************/
   2979          static void MT_ZdoExtSecApsRemoveReq( uint8 *pBuf )
   2980          {
   2981            ZStatus_t status = 0;
   2982            uint16 parentAddr;
   2983            uint16 nwkAddr;
   2984            
   2985            pBuf += MT_RPC_FRAME_HDR_SZ;
   2986          
   2987            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   2988            {
   2989              parentAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2990              pBuf += 2;
   2991              
   2992              nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2993              pBuf += 2;
   2994              
   2995              status = ZDSecMgrAPSRemove( nwkAddr, pBuf, parentAddr );
   2996            }
   2997            else
   2998            {
   2999              status = ZUnsupportedMode;
   3000            }
   3001            
   3002            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3003                                                 MT_ZDO_EXT_SEC_APS_REMOVE_REQ, 1, &status );
   3004          }
   3005          
   3006          /***************************************************************************************************
   3007           * @fn          MT_ZdoExtSetParams
   3008           *
   3009           * @brief       Set Parameters not settable through NV.
   3010           *
   3011           * @param       pBuf - Pointer to the received message data.
   3012           *
   3013           * @return      NULL
   3014           ***************************************************************************************************/
   3015          static void MT_ZdoExtSetParams( uint8 *pBuf )
   3016          {
   3017            ZStatus_t status = ZSuccess;
   3018            uint8 useMultiCast;
   3019            
   3020            pBuf += MT_RPC_FRAME_HDR_SZ;
   3021            
   3022            // Is the useMulticast in this message
   3023            useMultiCast = *pBuf++;
   3024            if ( useMultiCast & 0x80 )
   3025            {
   3026              if ( useMultiCast & 0x7F )
   3027              {
   3028                _NIB.nwkUseMultiCast = TRUE;
   3029              }
   3030              else
   3031              {
   3032                _NIB.nwkUseMultiCast = FALSE;
   3033              }
   3034            }
   3035            
   3036            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO),
   3037                                                 MT_ZDO_EXT_SET_PARAMS, 1, &status );
   3038          }
   3039          #endif // MT_ZDO_EXTENSIONS
   3040          
   3041          #endif   /*ZDO Command Processing in MT*/
   3042          /***************************************************************************************************
   3043          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     39   MT_ZdoActiveEpRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     43   MT_ZdoAddrRspCB
        0     18   -> MT_BuildAndSendZToolResponse
        0     18   -> MT_Word2Buf
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
        0     18   -> sAddrExtCpy
      1     23   MT_ZdoBeaconIndCB
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> osal_mem_alloc
        0     11   -> osal_mem_free
        0     14   -> osal_memcpy
      1     62   MT_ZdoBindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> sAddrExtCpy
      1     21   MT_ZdoCommandProcessing
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> MT_ZdoActiveEpRequest
        0     19   -> MT_ZdoBindRequest
        0     19   -> MT_ZdoComplexDescRequest
        0     19   -> MT_ZdoEndDevAnnce
        0     19   -> MT_ZdoEndDevBindRequest
        0     19   -> MT_ZdoEndDeviceTimeoutRequest
        0     19   -> MT_ZdoExtAddGroup
        0     19   -> MT_ZdoExtFindAllGroupsEndpoint
        0     19   -> MT_ZdoExtFindGroup
        0     19   -> MT_ZdoExtNwkInfo
        0     19   -> MT_ZdoIEEEAddrRequest
        0     19   -> MT_ZdoJoinReq
        0     19   -> MT_ZdoMatchDescRequest
        0     19   -> MT_ZdoMgmtBindRequest
        0     19   -> MT_ZdoMgmtDirectJoinRequest
        0     19   -> MT_ZdoMgmtLeaveRequest
        0     19   -> MT_ZdoMgmtLqiRequest
        0     19   -> MT_ZdoMgmtNwkDiscRequest
        0     19   -> MT_ZdoMgmtNwkUpdateRequest
        0     19   -> MT_ZdoMgmtPermitJoinRequest
        0     19   -> MT_ZdoMgmtRtgRequest
        0     19   -> MT_ZdoNWKAddressRequest
        0     19   -> MT_ZdoNetworkDiscoveryReq
        0     19   -> MT_ZdoNodeDescRequest
        0     19   -> MT_ZdoNwkAddrOfInterestReq
        0     19   -> MT_ZdoPowerDescRequest
        0     19   -> MT_ZdoRegisterForZDOMsg
        0     19   -> MT_ZdoRemoveRegisteredCB
        0     19   -> MT_ZdoSendData
        0     19   -> MT_ZdoServiceDiscRequest
        0     19   -> MT_ZdoSimpleDescRequest
        0     19   -> MT_ZdoStartupFromApp
        0     19   -> MT_ZdoUnbindRequest
        0     19   -> MT_ZdoUserDescRequest
        0     19   -> MT_ZdoUserDescSet
        0     19   -> NLME_RouteDiscoveryRequest
        0     19   -> RTG_CheckRtStatus
        0     19   -> ZDApp_ForceConcentratorChange
        0     21   -> ZDSecMgrAPSRemove
        0     21   -> ZDSecMgrAddLinkKey
        0     19   -> ZDSecMgrDeviceRemoveByExtAddr
        0     19   -> ZDSecMgrEntryLookupExt
        0     19   -> ZDSecMgrSwitchNwkKey
        0     19   -> ZDSecMgrUpdateNwkKey
        0     19   -> ZMacGetReq
        0     19   -> ZMacSetReq
        0     19   -> aps_CountAllGroups
        0     19   -> aps_RemoveAllGroup
        0     19   -> aps_RemoveGroup
      1     39   MT_ZdoComplexDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     25   MT_ZdoConcentratorIndCB
        0     22   -> MT_BuildAndSendZToolResponse
        0     25   -> osal_memcpy
      1     18   MT_ZdoDirectCB
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> MT_ZdoHandleExceptions
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      1     30   MT_ZdoEndDevAnnce
        0     10   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_DeviceAnnce
      1     39   MT_ZdoEndDevAnnceCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> sAddrExtCpy
      1    113   MT_ZdoEndDevBindRequest
        0     85   -> MT_BuildAndSendZToolResponse
        0     94   -> ZDP_EndDeviceBindReq
      1     30   MT_ZdoEndDeviceTimeoutRequest
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZDP_EndDeviceTimeoutReq
      1     52   MT_ZdoExtAddGroup
        0     30   -> MT_BuildAndSendZToolResponse
        0     30   -> aps_AddGroup
        0     33   -> osal_memcpy
      1     64   MT_ZdoExtFindAllGroupsEndpoint
        0     45   -> MT_BuildAndSendZToolResponse
        0     45   -> aps_FindAllGroupsForEndpoint
        0     45   -> osal_mem_alloc
        0     45   -> osal_mem_free
      1     52   MT_ZdoExtFindGroup
        0     30   -> MT_BuildAndSendZToolResponse
        0     30   -> aps_FindGroup
        0     33   -> osal_memcpy
      1     57   MT_ZdoExtNwkInfo
        0     35   -> MT_BuildAndSendZToolResponse
        0     38   -> osal_memcpy
      0     40   MT_ZdoHandleExceptions
        0     25   -> MT_ZdoAddrRspCB
        0     25   -> MT_ZdoEndDevAnnceCB
        0     25   -> ZDO_ParseAddrRsp
        0     25   -> ZDO_ParseDeviceAnnce
        0     25   -> osal_mem_free
      1     29   MT_ZdoIEEEAddrRequest
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDP_IEEEAddrReq
      2      0   MT_ZdoInit
        2      0   -> ZDO_RegisterForZdoCB
      1     14   MT_ZdoJoinCnfCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> ZDO_DeregisterForZdoCB
      1     36   MT_ZdoJoinReq
        0     13   -> MT_BuildAndSendZToolResponse
        0     17   -> ZDApp_JoinReq
        0     13   -> ZDO_RegisterForZdoCB
      1     27   MT_ZdoLeaveInd
        0     24   -> MT_BuildAndSendZToolResponse
        0     27   -> osal_memcpy
      1    115   MT_ZdoMatchDescRequest
        0     88   -> MT_BuildAndSendZToolResponse
        0     96   -> ZDP_MatchDescReq
      1     45   MT_ZdoMgmtBindRequest
        0     21   -> MT_BuildAndSendZToolResponse
        0     26   -> ZDP_SendData
      1     39   MT_ZdoMgmtDirectJoinRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_MgmtDirectJoinReq
      1     40   MT_ZdoMgmtLeaveRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     21   -> ZDP_MgmtLeaveReq
      1     45   MT_ZdoMgmtLqiRequest
        0     21   -> MT_BuildAndSendZToolResponse
        0     26   -> ZDP_SendData
      1     49   MT_ZdoMgmtNwkDiscRequest
        0     26   -> MT_BuildAndSendZToolResponse
        0     30   -> ZDP_MgmtNwkDiscReq
      1     51   MT_ZdoMgmtNwkUpdateRequest
        0     26   -> MT_BuildAndSendZToolResponse
        0     32   -> ZDP_MgmtNwkUpdateReq
      1     38   MT_ZdoMgmtPermitJoinRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> ZDP_MgmtPermitJoinReq
      1     45   MT_ZdoMgmtRtgRequest
        0     21   -> MT_BuildAndSendZToolResponse
        0     26   -> ZDP_SendData
      1     53   MT_ZdoNWKAddressRequest
        0     34   -> AssocGetWithExt
        0     34   -> MT_BuildAndSendZToolResponse
        0     34   -> NLME_GetShortAddr
        0     34   -> ZDP_NwkAddrReq
        0     34   -> sAddrExtCpy
      1     36   MT_ZdoNetworkDiscoveryReq
        0     17   -> MT_BuildAndSendZToolResponse
        0     17   -> ZDApp_NetworkDiscoveryReq
        0     17   -> ZDO_RegisterForZdoCB
        0     17   -> osal_build_uint32
      1     39   MT_ZdoNodeDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     41   MT_ZdoNwkAddrOfInterestReq
        0     21   -> MT_BuildAndSendZToolResponse
        0     22   -> ZDP_NWKAddrOfInterestReq
      0      9   MT_ZdoNwkDiscoveryCnfCB
        0      9   -> MT_BuildAndSendZToolResponse
        0      9   -> MT_ZdoBeaconIndCB
        0      9   -> ZDO_DeregisterForZdoCB
      2      0   MT_ZdoPermitJoinInd
        2      0   -> MT_BuildAndSendZToolResponse
      1     39   MT_ZdoPowerDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     29   MT_ZdoRegisterForZDOMsg
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDO_RegisterForZDOMsg
      1     29   MT_ZdoRemoveRegisteredCB
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDO_RemoveRegisteredCB
      1     48   MT_ZdoSendData
        0     24   -> MT_BuildAndSendZToolResponse
        0     29   -> ZDP_SendData
      1     18   MT_ZdoSendMsgCB
        0     15   -> MT_BuildAndSendZToolResponse
        0     15   -> osal_mem_alloc
        0     15   -> osal_mem_free
        0     18   -> osal_memcpy
      1     29   MT_ZdoServiceDiscRequest
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDP_ServerDiscReq
      1     39   MT_ZdoSimpleDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_SimpleDescReq
      1     14   MT_ZdoSrcRtgCB
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
      1     29   MT_ZdoStartupFromApp
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZDOInitDevice
      2      0   MT_ZdoStateChangeCB
        2      0   -> MT_BuildAndSendZToolResponse
      1     26   MT_ZdoTcDeviceInd
        0     23   -> MT_BuildAndSendZToolResponse
        0     26   -> osal_memcpy
      1     62   MT_ZdoUnbindRequest
        0     35   -> MT_BuildAndSendZToolResponse
        0     43   -> ZDP_BindUnbindReq
        0     35   -> sAddrExtCpy
      1     39   MT_ZdoUserDescRequest
        0     19   -> MT_BuildAndSendZToolResponse
        0     20   -> ZDP_NWKAddrOfInterestReq
      1     64   MT_ZdoUserDescSet
        0     42   -> MT_BuildAndSendZToolResponse
        0     44   -> ZDP_UserDescSet
        0     45   -> osal_memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      19  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
       6  ?<Constant {0, 0, 0, 0, 0, 0}>
      18  ?<Constant {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       7  ??Subroutine110_0
       4  ??Subroutine111_0
       4  ??Subroutine112_0
       9  ??Subroutine113_0
       5  ??Subroutine114_0
       4  ??Subroutine115_0
       6  ??Subroutine116_0
       6  ??Subroutine117_0
       4  ??Subroutine118_0
       9  ??Subroutine119_0
       8  ??Subroutine120_0
       8  ??Subroutine121_0
       8  ??Subroutine122_0
       6  ??Subroutine123_0
       6  ??Subroutine124_0
       2  ??Subroutine125_0
      10  ??Subroutine126_0
       8  ??Subroutine127_0
       3  ??Subroutine128_0
       5  ??Subroutine129_0
       3  ??Subroutine130_0
       6  ??Subroutine131_0
       5  ??Subroutine132_0
       5  ??Subroutine133_0
      14  ??Subroutine134_0
       9  ??Subroutine135_0
       5  ??Subroutine136_0
       7  ??Subroutine137_0
       8  ??Subroutine138_0
       8  ??Subroutine139_0
       5  ??Subroutine140_0
       6  ??Subroutine141_0
       5  ??Subroutine142_0
       3  ??Subroutine143_0
       5  ??Subroutine144_0
       7  ?Subroutine0
      50  ?Subroutine1
       3  ?Subroutine10
       4  ?Subroutine100
       7  ?Subroutine101
       5  ?Subroutine102
       9  ?Subroutine103
      10  ?Subroutine104
       1  ?Subroutine105
      12  ?Subroutine106
       6  ?Subroutine107
       8  ?Subroutine108
       1  ?Subroutine109
       8  ?Subroutine11
      55  ?Subroutine12
      31  ?Subroutine13
      30  ?Subroutine14
      18  ?Subroutine15
      12  ?Subroutine16
       3  ?Subroutine17
      12  ?Subroutine18
      11  ?Subroutine19
       8  ?Subroutine2
      25  ?Subroutine20
      15  ?Subroutine21
       7  ?Subroutine22
      23  ?Subroutine23
      13  ?Subroutine24
      22  ?Subroutine25
      15  ?Subroutine26
      12  ?Subroutine27
      15  ?Subroutine28
      13  ?Subroutine29
       3  ?Subroutine3
       1  ?Subroutine30
       5  ?Subroutine31
      13  ?Subroutine32
       5  ?Subroutine33
       5  ?Subroutine34
      13  ?Subroutine35
       7  ?Subroutine36
       9  ?Subroutine37
       3  ?Subroutine38
      10  ?Subroutine39
       3  ?Subroutine4
       2  ?Subroutine40
       6  ?Subroutine41
       6  ?Subroutine42
       5  ?Subroutine43
      17  ?Subroutine44
      14  ?Subroutine45
       5  ?Subroutine46
       6  ?Subroutine47
       4  ?Subroutine48
       6  ?Subroutine49
       3  ?Subroutine5
      17  ?Subroutine50
      18  ?Subroutine51
      13  ?Subroutine52
       1  ?Subroutine53
       5  ?Subroutine54
       6  ?Subroutine55
       5  ?Subroutine56
      13  ?Subroutine57
       6  ?Subroutine58
       7  ?Subroutine59
      18  ?Subroutine6
       4  ?Subroutine60
      22  ?Subroutine61
       8  ?Subroutine62
      10  ?Subroutine63
      18  ?Subroutine64
      15  ?Subroutine65
       5  ?Subroutine66
       8  ?Subroutine67
       9  ?Subroutine68
       7  ?Subroutine69
       7  ?Subroutine7
       7  ?Subroutine70
       6  ?Subroutine71
      17  ?Subroutine72
       7  ?Subroutine73
      14  ?Subroutine74
      11  ?Subroutine75
       7  ?Subroutine76
       6  ?Subroutine77
      10  ?Subroutine78
       6  ?Subroutine79
       4  ?Subroutine8
       9  ?Subroutine80
       9  ?Subroutine81
      12  ?Subroutine82
       3  ?Subroutine83
       4  ?Subroutine84
       4  ?Subroutine85
      10  ?Subroutine86
      12  ?Subroutine87
      18  ?Subroutine88
       3  ?Subroutine89
      10  ?Subroutine9
       9  ?Subroutine90
       7  ?Subroutine91
      14  ?Subroutine92
       8  ?Subroutine93
       4  ?Subroutine94
       6  ?Subroutine95
       8  ?Subroutine96
       1  ?Subroutine97
       4  ?Subroutine98
      12  ?Subroutine99
      46  MT_ZdoActiveEpRequest
       6  MT_ZdoActiveEpRequest::?relay
     168  MT_ZdoAddrRspCB
       6  MT_ZdoAddrRspCB::?relay
     345  MT_ZdoBeaconIndCB
       6  MT_ZdoBeaconIndCB::?relay
     142  MT_ZdoBindRequest
       6  MT_ZdoBindRequest::?relay
    1142  MT_ZdoCommandProcessing
       6  MT_ZdoCommandProcessing::?relay
      46  MT_ZdoComplexDescRequest
       6  MT_ZdoComplexDescRequest::?relay
     101  MT_ZdoConcentratorIndCB
       6  MT_ZdoConcentratorIndCB::?relay
     147  MT_ZdoDirectCB
       6  MT_ZdoDirectCB::?relay
      54  MT_ZdoEndDevAnnce
       6  MT_ZdoEndDevAnnce::?relay
     121  MT_ZdoEndDevAnnceCB
       6  MT_ZdoEndDevAnnceCB::?relay
     269  MT_ZdoEndDevBindRequest
       6  MT_ZdoEndDevBindRequest::?relay
      55  MT_ZdoEndDeviceTimeoutRequest
       6  MT_ZdoEndDeviceTimeoutRequest::?relay
     143  MT_ZdoExtAddGroup
       6  MT_ZdoExtAddGroup::?relay
     184  MT_ZdoExtFindAllGroupsEndpoint
       6  MT_ZdoExtFindAllGroupsEndpoint::?relay
     148  MT_ZdoExtFindGroup
       6  MT_ZdoExtFindGroup::?relay
     179  MT_ZdoExtNwkInfo
       6  MT_ZdoExtNwkInfo::?relay
     173  MT_ZdoHandleExceptions
       6  MT_ZdoHandleExceptions::?relay
      49  MT_ZdoIEEEAddrRequest
       6  MT_ZdoIEEEAddrRequest::?relay
      49  MT_ZdoInit
       6  MT_ZdoInit::?relay
     107  MT_ZdoJoinCnfCB
       6  MT_ZdoJoinCnfCB::?relay
     125  MT_ZdoJoinReq
       6  MT_ZdoJoinReq::?relay
     117  MT_ZdoLeaveInd
       6  MT_ZdoLeaveInd::?relay
     238  MT_ZdoMatchDescRequest
       6  MT_ZdoMatchDescRequest::?relay
      50  MT_ZdoMgmtBindRequest
       6  MT_ZdoMgmtBindRequest::?relay
      65  MT_ZdoMgmtDirectJoinRequest
       6  MT_ZdoMgmtDirectJoinRequest::?relay
     106  MT_ZdoMgmtLeaveRequest
       6  MT_ZdoMgmtLeaveRequest::?relay
      53  MT_ZdoMgmtLqiRequest
       6  MT_ZdoMgmtLqiRequest::?relay
     108  MT_ZdoMgmtNwkDiscRequest
       6  MT_ZdoMgmtNwkDiscRequest::?relay
     229  MT_ZdoMgmtNwkUpdateRequest
       6  MT_ZdoMgmtNwkUpdateRequest::?relay
     105  MT_ZdoMgmtPermitJoinRequest
       6  MT_ZdoMgmtPermitJoinRequest::?relay
      52  MT_ZdoMgmtRtgRequest
       6  MT_ZdoMgmtRtgRequest::?relay
     246  MT_ZdoNWKAddressRequest
       6  MT_ZdoNWKAddressRequest::?relay
      81  MT_ZdoNetworkDiscoveryReq
       6  MT_ZdoNetworkDiscoveryReq::?relay
      59  MT_ZdoNodeDescRequest
       6  MT_ZdoNodeDescRequest::?relay
     141  MT_ZdoNwkAddrOfInterestReq
       6  MT_ZdoNwkAddrOfInterestReq::?relay
      46  MT_ZdoNwkDiscoveryCnfCB
       6  MT_ZdoNwkDiscoveryCnfCB::?relay
      30  MT_ZdoPermitJoinInd
       6  MT_ZdoPermitJoinInd::?relay
      46  MT_ZdoPowerDescRequest
       6  MT_ZdoPowerDescRequest::?relay
      50  MT_ZdoRegisterForZDOMsg
       6  MT_ZdoRegisterForZDOMsg::?relay
      50  MT_ZdoRemoveRegisteredCB
       6  MT_ZdoRemoveRegisteredCB::?relay
     235  MT_ZdoSendData
       6  MT_ZdoSendData::?relay
     173  MT_ZdoSendMsgCB
       6  MT_ZdoSendMsgCB::?relay
      30  MT_ZdoServiceDiscRequest
       6  MT_ZdoServiceDiscRequest::?relay
      61  MT_ZdoSimpleDescRequest
       6  MT_ZdoSimpleDescRequest::?relay
     159  MT_ZdoSrcRtgCB
       6  MT_ZdoSrcRtgCB::?relay
      52  MT_ZdoStartupFromApp
       6  MT_ZdoStartupFromApp::?relay
      25  MT_ZdoStateChangeCB
       6  MT_ZdoStateChangeCB::?relay
      97  MT_ZdoTcDeviceInd
       6  MT_ZdoTcDeviceInd::?relay
     142  MT_ZdoUnbindRequest
       6  MT_ZdoUnbindRequest::?relay
      46  MT_ZdoUserDescRequest
       6  MT_ZdoUserDescRequest::?relay
     129  MT_ZdoUserDescSet
       6  MT_ZdoUserDescSet::?relay
       4  _zdoCallbackSub
       1  ignoreIndication
       2  pBeaconIndBuf

 
 8 136 bytes in segment BANKED_CODE
   306 bytes in segment BANK_RELAYS
    43 bytes in segment XDATA_ROM_C
     7 bytes in segment XDATA_Z
 
 8 442 bytes of CODE  memory
    43 bytes of CONST memory
     7 bytes of XDATA memory

Errors: none
Warnings: none
