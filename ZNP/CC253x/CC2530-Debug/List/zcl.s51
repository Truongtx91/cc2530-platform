///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               21/Nov/2018  13:52:16
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Components\stack\zcl\zcl.c
//    Command line       =  
//        -f "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
//        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR |
//        DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL
//        -DZNP_RUN_WDOG=FALSE -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO
//        -DZIGBEE_FRAGMENTATION -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE
//        -DSAPI_CB_FUNC=FALSE -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT
//        -DNUM_DISC_ATTEMPTS=0 -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC
//        -DMT_SAPI_FUNC -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC
//        -DMT_ZDO_MGMT -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -f
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Components\stack\zcl\zcl.c" -D FEATURE_SYSTEM_STATS -D
//        POWER_SAVING -lC "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
//        Pe001,Pa010 -o "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e
//        --no_code_motion --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\Source\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\zcl.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME zcl

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_CODE
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION `??zclBuildHdr::?relay`,0203H
        PUBLIC `??zclFindAttrRec::?relay`
        FUNCTION `??zclFindAttrRec::?relay`,0203H
        FUNCTION `??zclFindAttrRecsList::?relay`,0203H
        FUNCTION `??zclFindClusterOption::?relay`,0203H
        PUBLIC `??zclGetAttrDataLength::?relay`
        FUNCTION `??zclGetAttrDataLength::?relay`,0203H
        FUNCTION `??zclGetClusterOption::?relay`,0203H
        PUBLIC `??zclGetDataTypeLength::?relay`
        FUNCTION `??zclGetDataTypeLength::?relay`,0203H
        PUBLIC `??zclParseHdr::?relay`
        FUNCTION `??zclParseHdr::?relay`,0203H
        FUNCTION `??zclParseInDefaultRspCmd::?relay`,0203H
        PUBLIC `??zclSerializeData::?relay`
        FUNCTION `??zclSerializeData::?relay`,0203H
        FUNCTION `??zclSetSecurityOption::?relay`,0203H
        FUNCTION `??zcl_DeviceOperational::?relay`,0203H
        PUBLIC `??zcl_HandleExternal::?relay`
        FUNCTION `??zcl_HandleExternal::?relay`,0203H
        PUBLIC `??zcl_Init::?relay`
        FUNCTION `??zcl_Init::?relay`,0203H
        PUBLIC `??zcl_ProcessMessageMSG::?relay`
        FUNCTION `??zcl_ProcessMessageMSG::?relay`,0203H
        PUBLIC `??zcl_SendCommand::?relay`
        FUNCTION `??zcl_SendCommand::?relay`,0203H
        PUBLIC `??zcl_SendDefaultRspCmd::?relay`
        FUNCTION `??zcl_SendDefaultRspCmd::?relay`,0203H
        PUBLIC `??zcl_event_loop::?relay`
        FUNCTION `??zcl_event_loop::?relay`,0203H
        PUBLIC `??zcl_getParsedTransSeqNum::?relay`
        FUNCTION `??zcl_getParsedTransSeqNum::?relay`,0203H
        PUBLIC `??zcl_getRawAFMsg::?relay`
        FUNCTION `??zcl_getRawAFMsg::?relay`,0203H
        PUBLIC `??zcl_registerAttrList::?relay`
        FUNCTION `??zcl_registerAttrList::?relay`,0203H
        PUBLIC `??zcl_registerClusterOptionList::?relay`
        FUNCTION `??zcl_registerClusterOptionList::?relay`,0203H
        PUBLIC `??zcl_registerForMsg::?relay`
        FUNCTION `??zcl_registerForMsg::?relay`,0203H
        PUBLIC `??zcl_registerPlugin::?relay`
        FUNCTION `??zcl_registerPlugin::?relay`,0203H
        PUBLIC `??zcl_registerReadWriteCB::?relay`
        FUNCTION `??zcl_registerReadWriteCB::?relay`,0203H
        PUBLIC `??zcl_registerValidateAttrData::?relay`
        FUNCTION `??zcl_registerValidateAttrData::?relay`,0203H
        FUNCTION zclBuildHdr,0203H
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclFindAttrRec
        FUNCTION zclFindAttrRec,0a1203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION zclFindAttrRecsList,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclFindClusterOption,080203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclGetAttrDataLength
        FUNCTION zclGetAttrDataLength,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclGetClusterOption,0a1203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclGetDataTypeLength
        FUNCTION zclGetDataTypeLength,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC zclParseHdr
        FUNCTION zclParseHdr,0a1203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zclParseInDefaultRspCmd,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclSerializeData
        FUNCTION zclSerializeData,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zclSetSecurityOption,0a1203H
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zcl_DeviceOperational,0a1203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC zcl_HandleExternal
        FUNCTION zcl_HandleExternal,0a1603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zcl_Init
        FUNCTION zcl_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_ProcessMessageMSG
        FUNCTION zcl_ProcessMessageMSG,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 42, STACK
        PUBLIC zcl_RegisteredMsgTaskID
        PUBLIC zcl_SendCommand
        FUNCTION zcl_SendCommand,0a1203H
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC zcl_SendDefaultRspCmd
        FUNCTION zcl_SendDefaultRspCmd,0a1203H
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC zcl_SeqNum
        PUBLIC zcl_TaskID
        PUBLIC zcl_TransID
        PUBLIC zcl_ValidateAttrDataCB
        PUBLIC zcl_event_loop
        FUNCTION zcl_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_getParsedTransSeqNum
        FUNCTION zcl_getParsedTransSeqNum,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerClusterOptionList
        FUNCTION zcl_registerClusterOptionList,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_registerPlugin
        FUNCTION zcl_registerPlugin,0a1203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zcl_registerValidateAttrData
        FUNCTION zcl_registerValidateAttrData,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
StubAPS_InterPan    SYMBOL "StubAPS_InterPan"
`??StubAPS_InterPan::?relay` SYMBOL "?relay", StubAPS_InterPan
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
`??afFindEndPointDesc::?relay` SYMBOL "?relay", afFindEndPointDesc
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
`??osal_msg_deallocate::?relay` SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
`??osal_msg_receive::?relay` SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
zclFindAttrRec      SYMBOL "zclFindAttrRec"
`??zclFindAttrRec::?relay` SYMBOL "?relay", zclFindAttrRec
zclGetAttrDataLength SYMBOL "zclGetAttrDataLength"
`??zclGetAttrDataLength::?relay` SYMBOL "?relay", zclGetAttrDataLength
zclGetDataTypeLength SYMBOL "zclGetDataTypeLength"
`??zclGetDataTypeLength::?relay` SYMBOL "?relay", zclGetDataTypeLength
zclParseHdr         SYMBOL "zclParseHdr"
`??zclParseHdr::?relay` SYMBOL "?relay", zclParseHdr
zclSerializeData    SYMBOL "zclSerializeData"
`??zclSerializeData::?relay` SYMBOL "?relay", zclSerializeData
zcl_HandleExternal  SYMBOL "zcl_HandleExternal"
`??zcl_HandleExternal::?relay` SYMBOL "?relay", zcl_HandleExternal
zcl_Init            SYMBOL "zcl_Init"
`??zcl_Init::?relay` SYMBOL "?relay", zcl_Init
zcl_ProcessMessageMSG SYMBOL "zcl_ProcessMessageMSG"
`??zcl_ProcessMessageMSG::?relay` SYMBOL "?relay", zcl_ProcessMessageMSG
zcl_SendCommand     SYMBOL "zcl_SendCommand"
`??zcl_SendCommand::?relay` SYMBOL "?relay", zcl_SendCommand
zcl_SendDefaultRspCmd SYMBOL "zcl_SendDefaultRspCmd"
`??zcl_SendDefaultRspCmd::?relay` SYMBOL "?relay", zcl_SendDefaultRspCmd
zcl_event_loop      SYMBOL "zcl_event_loop"
`??zcl_event_loop::?relay` SYMBOL "?relay", zcl_event_loop
zcl_getParsedTransSeqNum SYMBOL "zcl_getParsedTransSeqNum"
`??zcl_getParsedTransSeqNum::?relay` SYMBOL "?relay", zcl_getParsedTransSeqNum
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
`??zcl_getRawAFMsg::?relay` SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
`??zcl_registerAttrList::?relay` SYMBOL "?relay", zcl_registerAttrList
zcl_registerClusterOptionList SYMBOL "zcl_registerClusterOptionList"
`??zcl_registerClusterOptionList::?relay` SYMBOL "?relay", zcl_registerClusterOptionList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
`??zcl_registerForMsg::?relay` SYMBOL "?relay", zcl_registerForMsg
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
`??zcl_registerPlugin::?relay` SYMBOL "?relay", zcl_registerPlugin
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
`??zcl_registerReadWriteCB::?relay` SYMBOL "?relay", zcl_registerReadWriteCB
zcl_registerValidateAttrData SYMBOL "zcl_registerValidateAttrData"
`??zcl_registerValidateAttrData::?relay` SYMBOL "?relay", zcl_registerValidateAttrData

        EXTERN `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,00H
        EXTERN `??StubAPS_InterPan::?relay`
        FUNCTION `??StubAPS_InterPan::?relay`,00H
        EXTERN `??afFindEndPointDesc::?relay`
        FUNCTION `??afFindEndPointDesc::?relay`,00H
        EXTERN `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_deallocate::?relay`
        FUNCTION `??osal_msg_deallocate::?relay`,00H
        EXTERN `??osal_msg_receive::?relay`
        FUNCTION `??osal_msg_receive::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN StubAPS_InterPan
        FUNCTION StubAPS_InterPan,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh 1.0.0\Components\stack\zcl\zcl.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl.c
//    3   Revised:        $Date: 2014-06-25 18:07:01 -0700 (Wed, 25 Jun 2014) $
//    4   Revision:       $Revision: 39221 $
//    5 
//    6   Description:    This file contains the Zigbee Cluster Library Foundation functions.
//    7 
//    8 
//    9   Copyright 2006-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "AF.h"
//   45 
//   46 #include "zcl.h"
//   47 #include "zcl_general.h"
//   48 
//   49 #if defined ( INTER_PAN )
//   50   #include "stub_aps.h"
//   51 #endif
//   52 
//   53 /*********************************************************************
//   54  * MACROS
//   55  */
//   56 /*** Frame Control ***/
//   57 #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
//   58 #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
//   59 #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
//   60 #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
//   61 
//   62 /*** Attribute Access Control ***/
//   63 #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
//   64 #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
//   65 #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
//   66 #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
//   67 #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
//   68 
//   69 #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
//   70 #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
//   71 
//   72 #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \ 
//   73                                         (zclHdr).fc.manuSpecific == 0          && \ 
//   74                                         (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
//   75 
//   76 // Commands that have corresponding responses
//   77 #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \ 
//   78                                         (cmd) == ZCL_CMD_WRITE                  || \ 
//   79                                         (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \ 
//   80                                         (cmd) == ZCL_CMD_CONFIG_REPORT          || \ 
//   81                                         (cmd) == ZCL_CMD_READ_REPORT_CFG        || \ 
//   82                                         (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \ 
//   83                                         (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \ 
//   84                                         (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \ 
//   85                                         (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \ 
//   86                                         (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
//   87 
//   88 /*********************************************************************
//   89  * CONSTANTS
//   90  */
//   91 
//   92 /*********************************************************************
//   93  * TYPEDEFS
//   94  */
//   95 typedef struct zclLibPlugin
//   96 {
//   97   struct zclLibPlugin *next;
//   98   uint16              startClusterID;    // starting cluster ID
//   99   uint16              endClusterID;      // ending cluster ID
//  100   zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
//  101 } zclLibPlugin_t;
//  102 
//  103 // Command record list
//  104 typedef struct zclCmdRecsList
//  105 {
//  106   struct zclCmdRecsList *pNext;
//  107   uint8                 endpoint;
//  108   uint8                 numCommands;
//  109   CONST zclCommandRec_t *pCmdRecs;
//  110 } zclCmdRecsList_t;
//  111 
//  112 // Attribute record list item
//  113 typedef struct zclAttrRecsList
//  114 {
//  115   struct zclAttrRecsList *next;
//  116   uint8                  endpoint;      // Used to link it into the endpoint descriptor
//  117   zclReadWriteCB_t       pfnReadWriteCB;// Read or Write attribute value callback function
//  118   zclAuthorizeCB_t       pfnAuthorizeCB;// Authorize Read or Write operation
//  119   uint8                  numAttributes; // Number of the following records
//  120   CONST zclAttrRec_t     *attrs;        // attribute records
//  121 } zclAttrRecsList;
//  122 
//  123 // Cluster option list item
//  124 typedef struct zclClusterOptionList
//  125 {
//  126   struct zclClusterOptionList *next;
//  127   uint8                       endpoint;   // Used to link it into the endpoint descriptor
//  128   uint8                       numOptions; // Number of the following records
//  129   zclOptionRec_t              *options;   // option records
//  130 } zclClusterOptionList;
//  131 
//  132 typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
//  133 typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
//  134 
//  135 typedef struct
//  136 {
//  137   zclParseInProfileCmd_t   pfnParseInProfile;
//  138   zclProcessInProfileCmd_t pfnProcessInProfile;
//  139 } zclCmdItems_t;
//  140 
//  141 
//  142 /*********************************************************************
//  143  * GLOBAL VARIABLES
//  144  */
//  145 
//  146 #if !defined ( ZCL_STANDALONE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147   uint8 zcl_TaskID;
zcl_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  148 
//  149   // The task Id of the Application where the unprocessed Foundation
//  150   // Command/Response messages will be sent to.

        RSEG XDATA_I:XDATA:NOROOT(0)
//  151   uint8 zcl_RegisteredMsgTaskID = TASK_NO_TASK;
zcl_RegisteredMsgTaskID:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zcl_RegisteredMsgTaskID>`
        REQUIRE __INIT_XDATA_I
//  152 #endif
//  153 
//  154 // The Application should register its attribute data validation function

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  155 zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
zcl_ValidateAttrDataCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  156 
//  157 // ZCL Sequence number

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  158 uint8 zcl_SeqNum = 0x00;
zcl_SeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  159 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  160 uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
zcl_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  161 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  162 static uint8 savedZCLTransSeqNum = 0;
savedZCLTransSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  163 
//  164 /*********************************************************************
//  165  * EXTERNAL VARIABLES
//  166  */
//  167 
//  168 /*********************************************************************
//  169  * EXTERNAL FUNCTIONS
//  170  */
//  171 
//  172 /*********************************************************************
//  173  * LOCAL VARIABLES
//  174  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  175 static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
plugins:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  176 
//  177 #if defined ( ZCL_DISCOVER )
//  178   static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
//  179 #endif
//  180 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  181 static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
attrList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  182 static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
clusterOptionList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  183 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  184 static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
rawAFMsg:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  185 
//  186 /*********************************************************************
//  187  * LOCAL FUNCTIONS
//  188  */
//  189 static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
//  190 static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
//  191 static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
//  192 
//  193 #if defined ( ZCL_DISCOVER )
//  194   static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
//  195 #endif
//  196 
//  197 static zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
//  198 static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
//  199 static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
//  200 static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
//  201 
//  202 static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
//  203 
//  204 #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
//  205 static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
//  206 static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
//  207 #endif // ZCL_READ || ZCL_WRITE
//  208 
//  209 #ifdef ZCL_READ
//  210 ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
//  211 static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
//  212 static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
//  213                                          uint8 *pAttrData, uint16 *pDataLen );
//  214 static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
//  215 static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
//  216 static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
//  217 #endif // ZCL_READ
//  218 
//  219 #ifdef ZCL_WRITE
//  220 static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
//  221                                    zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
//  222 static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
//  223                                           zclAttrRec_t *pAttr, uint8 *pAttrData );
//  224 static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
//  225 static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
//  226 static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
//  227 static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
//  228 #endif // ZCL_WRITE
//  229 
//  230 #ifdef ZCL_REPORT
//  231 static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
//  232 static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
//  233 #endif // ZCL_REPORT
//  234 
//  235 static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
//  236 
//  237 #ifdef ZCL_DISCOVER
//  238 static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
//  239 static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
//  240 static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
//  241 static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
//  242 static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
//  243 static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
//  244 static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
//  245 static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
//  246 static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
//  247 #endif // ZCL_DISCOVER
//  248 
//  249 /*********************************************************************
//  250  * Parse Profile Command Function Table
//  251  */
//  252 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  253 static CONST zclCmdItems_t zclCmdTable[] =
zclCmdTable:
        DATA16
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW `??zclParseInDefaultRspCmd::?relay`
        DW `??zcl_HandleExternal::?relay`
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
//  254 {
//  255 #ifdef ZCL_READ
//  256   /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
//  257   /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
//  258 #else
//  259   /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  260   /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  261 #endif // ZCL_READ
//  262 
//  263 #ifdef ZCL_WRITE
//  264   /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
//  265   /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
//  266   /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
//  267   /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
//  268 #else
//  269   /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  270   /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  271   /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  272   /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  273 #endif // ZCL_WRITE
//  274 
//  275 #ifdef ZCL_REPORT
//  276   /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
//  277   /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
//  278   /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
//  279   /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
//  280   /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
//  281 #else
//  282   /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  283   /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  284   /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  285   /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  286   /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  287 #endif // ZCL_REPORT
//  288 
//  289   /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
//  290 
//  291 #ifdef ZCL_DISCOVER
//  292   /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
//  293   /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
//  294   /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  295   /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  296   /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  297   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
//  298   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
//  299   /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
//  300   /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
//  301   /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
//  302   /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
//  303 #else
//  304   /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
//  305   /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  306   /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  307   /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  308   /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  309   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  310   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  311   /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  312   /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  313   /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  314   /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  315 #endif // ZCL_DISCOVER
//  316 };
//  317 
//  318 /*********************************************************************
//  319  * PUBLIC FUNCTIONS
//  320  *********************************************************************/
//  321 
//  322 #if !defined ( ZCL_STANDALONE )
//  323 /*********************************************************************
//  324  * @fn          zcl_Init
//  325  *
//  326  * @brief       Initialization function for the zcl layer.
//  327  *
//  328  * @param       task_id - ZCL task id
//  329  *
//  330  * @return      none
//  331  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  332 void zcl_Init( uint8 task_id )
zcl_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zcl_Init
        CODE
//  333 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  334   zcl_TaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#zcl_TaskID
        MOVX    @DPTR,A
//  335 }
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  336 #endif
//  337 
//  338 #if !defined ( ZCL_STANDALONE )
//  339 /*********************************************************************
//  340  * @fn          zcl_event_loop
//  341  *
//  342  * @brief       Event Loop Processor for zcl.
//  343  *
//  344  * @param       task_id - task id
//  345  * @param       events - event bitmap
//  346  *
//  347  * @return      unprocessed events
//  348  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  349 uint16 zcl_event_loop( uint8 task_id, uint16 events )
zcl_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zcl_event_loop
        CODE
//  350 {
        FUNCALL zcl_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, zcl_ProcessMessageMSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
//  351   uint8 *msgPtr;
//  352 
//  353   (void)task_id;  // Intentionally unreferenced parameter
//  354 
//  355   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??zcl_event_loop_0
//  356   {
//  357     msgPtr = osal_msg_receive( zcl_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??zcl_event_loop_1
//  358     while ( msgPtr != NULL )
//  359     {
//  360       uint8 dealloc = TRUE;
//  361 
//  362       if ( *msgPtr == AF_INCOMING_MSG_CMD )
//  363       {
//  364         zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
??zcl_event_loop_2:
        ; Setup parameters for call to function zcl_ProcessMessageMSG
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??zcl_ProcessMessageMSG::?relay`; Banked call to: zcl_ProcessMessageMSG
//  365       }
//  366       else if ( zcl_RegisteredMsgTaskID != TASK_NO_TASK )
//  367       {
//  368         // send it to another task to process.
//  369         osal_msg_send( zcl_RegisteredMsgTaskID, msgPtr );
//  370         dealloc = FALSE;
//  371       }
//  372 
//  373       // Release the memory
//  374       if ( dealloc )
//  375       {
//  376         osal_msg_deallocate( msgPtr );
??zcl_event_loop_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
//  377       }
//  378 
//  379       // Next
//  380       msgPtr = osal_msg_receive( zcl_TaskID );
??zcl_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zcl_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R6,?V2
        MOV     R7,?V3
        MOV     A,R6
        ORL     A,R7
        JZ      ??zcl_event_loop_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x1a
        JZ      ??zcl_event_loop_2
        MOV     DPTR,#zcl_RegisteredMsgTaskID
        MOVX    A,@DPTR
        CPL     A
        JZ      ??zcl_event_loop_3
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
        SJMP    ??zcl_event_loop_1
//  381     }
//  382 
//  383     // return unprocessed events
//  384     return (events ^ SYS_EVENT_MSG);
??zcl_event_loop_4:
        MOV     R2,?V0
        MOV     A,?V1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??zcl_event_loop_5
//  385   }
//  386 
//  387   // Discard unknown events
//  388   return 0;
??zcl_event_loop_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zcl_event_loop_5:
        LJMP    ?Subroutine1 & 0xFFFF
//  389 }
          CFI EndBlock cfiBlock1
//  390 #endif
//  391 
//  392 #if !defined ( ZCL_STANDALONE )
//  393 /*********************************************************************
//  394  * @fn      zcl_registerForMsg
//  395  *
//  396  * @brief   The ZCL is setup to send all incoming Foundation Command/Response
//  397  *          messages that aren't processed to one task (if a task is
//  398  *          registered).
//  399  *
//  400  * @param   taskId - task Id of the Application where commands will be sent to
//  401  *
//  402  * @return  TRUE if task registeration successful, FALSE otherwise
//  403  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  404 uint8 zcl_registerForMsg( uint8 taskId )
zcl_registerForMsg:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zcl_registerForMsg
        CODE
//  405 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  406   // Allow only the first task
//  407   if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
        MOV     DPTR,#zcl_RegisteredMsgTaskID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??zcl_registerForMsg_0
//  408   {
//  409     zcl_RegisteredMsgTaskID = taskId;
        MOV     A,R0
        MOVX    @DPTR,A
//  410 
//  411     return ( true );
        MOV     R1,#0x1
        SJMP    ??zcl_registerForMsg_1
//  412   }
//  413 
//  414   return ( false );
??zcl_registerForMsg_0:
        MOV     R1,#0x0
??zcl_registerForMsg_1:
        LJMP    ?Subroutine0 & 0xFFFF
//  415 }
          CFI EndBlock cfiBlock2
//  416 #endif
//  417 
//  418 #if !defined ( ZCL_STANDALONE )
//  419 /*********************************************************************
//  420  * @fn      zcl_HandleExternal
//  421  *
//  422  * @brief
//  423  *
//  424  * @param   pInMsg - incoming message to process
//  425  *
//  426  * @return  TRUE
//  427  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  428 uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
zcl_HandleExternal:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zcl_HandleExternal
        CODE
//  429 {
        FUNCALL zcl_HandleExternal, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_HandleExternal, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  430   zclIncomingMsg_t *pCmd;
//  431 
//  432   if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
        MOV     DPTR,#zcl_RegisteredMsgTaskID
        MOVX    A,@DPTR
        CPL     A
        JNZ     $+5
        LJMP    ??zcl_HandleExternal_0 & 0xFFFF
//  433   {
//  434     return ( TRUE );
//  435   }
//  436 
//  437   pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x19
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
//  438   if ( pCmd != NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??zcl_HandleExternal_0 & 0xFFFF
//  439   {
//  440     // fill in the message
//  441     pCmd->hdr.event = ZCL_INCOMING_MSG;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x34
        LCALL   ?Subroutine11 & 0xFFFF
//  442     pCmd->zclHdr    = pInMsg->hdr;
??CrossCallReturnLabel_10:
        INC     DPTR
        MOV     A,R2
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,R3
        MOV     R5,A
        MOV     A,#0x6
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  443     pCmd->clusterId = pInMsg->msg->clusterId;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_60:
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_115:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        LCALL   ?Subroutine10 & 0xFFFF
//  444     pCmd->srcAddr   = pInMsg->msg->srcAddr;
??CrossCallReturnLabel_8:
        INC     DPTR
        MOV     A,R2
        ADD     A,#0xa
        MOV     R4,A
        CLR     A
        ADDC    A,R3
        MOV     R5,A
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  445     pCmd->endPoint  = pInMsg->msg->endPoint;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_82:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  446     pCmd->attrCmd   = pInMsg->attrCmd;
        MOV     A,R6
        ADD     A,#0xc
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_112:
        MOV     A,R2
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  447 
//  448     // Application will free the attrCmd buffer
//  449     pInMsg->attrCmd = NULL;
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  450 
//  451     /* send message through task message */
//  452     osal_msg_send( zcl_RegisteredMsgTaskID, (uint8 *)pCmd );
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#zcl_RegisteredMsgTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  453   }
//  454 
//  455   return ( TRUE );
??zcl_HandleExternal_0:
        MOV     R1,#0x1
        LJMP    ?Subroutine2 & 0xFFFF
//  456 }
          CFI EndBlock cfiBlock3
//  457 #endif
//  458 
//  459 
//  460 /*********************************************************************
//  461  * @fn          zcl_getRawAFMsg
//  462  *
//  463  * @brief       Call to get original unprocessed AF message
//  464  *              (not parsed by ZCL).
//  465  *
//  466  *   NOTE:  This function can only be called during a ZCL callback function
//  467  *          and the calling function must NOT change any data in the message.
//  468  *
//  469  * @param       none
//  470  *
//  471  * @return      pointer to original AF message, NULL if not processing
//  472  *              AF message.
//  473  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  474 afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
zcl_getRawAFMsg:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zcl_getRawAFMsg
        CODE
//  475 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  476   return ( rawAFMsg );
        MOV     DPTR,#rawAFMsg
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_94:
        SJMP    ?Subroutine0
//  477 }
          CFI EndBlock cfiBlock4
//  478 
//  479 /*********************************************************************
//  480  * @fn          zcl_getParsedTransSeqNum
//  481  *
//  482  * @brief       Call to the get the transaction sequence number from 
//  483  *              the incoming message.
//  484  *
//  485  *   NOTE:  This function can only be called during a ZCL callback function
//  486  *          and the calling function must NOT change any data in the message.
//  487  *
//  488  * @param       none
//  489  *
//  490  * @return      transaction sequence number.
//  491  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  492 uint8 zcl_getParsedTransSeqNum( void )
zcl_getParsedTransSeqNum:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function zcl_getParsedTransSeqNum
        CODE
//  493 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  494   return ( savedZCLTransSeqNum );
        MOV     DPTR,#savedZCLTransSeqNum
        MOVX    A,@DPTR
        MOV     R1,A
          CFI EndBlock cfiBlock5
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  495 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock6
//  496 
//  497 /*********************************************************************
//  498  * @fn          zcl_registerPlugin
//  499  *
//  500  * @brief       Add a Cluster Library handler
//  501  *
//  502  * @param       startClusterID - starting cluster ID
//  503  * @param       endClusterID - ending cluster ID
//  504  * @param       pfnHdlr - function pointer to incoming message handler
//  505  *
//  506  * @return      ZSuccess if OK
//  507  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  508 ZStatus_t zcl_registerPlugin( uint16 startClusterID,
zcl_registerPlugin:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zcl_registerPlugin
        CODE
//  509           uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
//  510 {
        FUNCALL zcl_registerPlugin, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  511   zclLibPlugin_t *pNewItem;
//  512   zclLibPlugin_t *pLoop;
//  513 
//  514   // Fill in the new profile list
//  515   pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R0,?V2
        MOV     R1,?V3
//  516   if ( pNewItem == NULL )
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zcl_registerPlugin_0
//  517   {
//  518     return (ZMemError);
        MOV     R1,#0x10
        SJMP    ??CrossCallReturnLabel_13
//  519   }
//  520 
//  521   // Fill in the plugin record.
//  522   pNewItem->next = (zclLibPlugin_t *)NULL;
??zcl_registerPlugin_0:
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine14 & 0xFFFF
//  523   pNewItem->startClusterID = startClusterID;
??CrossCallReturnLabel_16:
        INC     DPTR
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine7 & 0xFFFF
//  524   pNewItem->endClusterID = endClusterID;
//  525   pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
??CrossCallReturnLabel_2:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  526 
//  527   // Find spot in list
//  528   if (  plugins == NULL )
        MOV     DPTR,#plugins
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_33:
        JNZ     ??zcl_registerPlugin_1
//  529   {
//  530     plugins = pNewItem;
        MOV     DPTR,#plugins
        SJMP    ??zcl_registerPlugin_2
//  531   }
//  532   else
//  533   {
//  534     // Look for end of list
//  535     pLoop = plugins;
//  536     while ( pLoop->next != NULL )
//  537     {
//  538       pLoop = pLoop->next;
??zcl_registerPlugin_3:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
//  539     }
??zcl_registerPlugin_1:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_23:
        JNZ     ??zcl_registerPlugin_3
//  540 
//  541     // Put new item at end of list
//  542     pLoop->next = pNewItem;
//  543   }
??zcl_registerPlugin_2:
        LCALL   ?Subroutine12 & 0xFFFF
//  544 
//  545   return ( ZSuccess );
??CrossCallReturnLabel_13:
        SJMP    ?Subroutine1
//  546 }
          CFI EndBlock cfiBlock7
//  547 
//  548 #ifdef ZCL_DISCOVER
//  549 /*********************************************************************
//  550  * @fn          zcl_registerCmdList
//  551  *
//  552  * @brief       Register a Command List with ZCL Foundation
//  553  *
//  554  * @param       endpoint - endpoint the attribute list belongs to
//  555  * @param       newCmdList - array of command records
//  556  *
//  557  * @return      ZSuccess if OK
//  558  */
//  559 ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 cmdListSize, CONST zclCommandRec_t newCmdList[] )
//  560 {
//  561   zclCmdRecsList_t *pNewItem;
//  562   zclCmdRecsList_t *pLoop;
//  563 
//  564   // Fill in the new profile list
//  565   pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
//  566   if ( pNewItem == NULL )
//  567   {
//  568     return (ZMemError);
//  569   }
//  570 
//  571   pNewItem->pNext = (zclCmdRecsList_t *)NULL;
//  572   pNewItem->endpoint = endpoint;
//  573   pNewItem->numCommands = cmdListSize;
//  574   pNewItem->pCmdRecs = newCmdList;
//  575 
//  576   // Find spot in list
//  577   if ( gpCmdList == NULL )
//  578   {
//  579     gpCmdList = pNewItem;
//  580   }
//  581   else
//  582   {
//  583     // Look for end of list
//  584     pLoop = gpCmdList;
//  585     while ( pLoop->pNext != NULL )
//  586     {
//  587       pLoop = pLoop->pNext;
//  588     }
//  589 
//  590     // Put new item at end of list
//  591     pLoop->pNext = pNewItem;
//  592   }
//  593 
//  594   return ( ZSuccess );
//  595 }
//  596 #endif  // ZCL_DISCOVER
//  597 
//  598 /*********************************************************************
//  599  * @fn          zcl_registerAttrList
//  600  *
//  601  * @brief       Register an Attribute List with ZCL Foundation
//  602  *
//  603  * @param       endpoint - endpoint the attribute list belongs to
//  604  * @param       numAttr - number of attributes in list
//  605  * @param       newAttrList - array of Attribute records.
//  606  *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
//  607  *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
//  608  *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
//  609  *
//  610  * @return      ZSuccess if OK
//  611  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  612 ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
zcl_registerAttrList:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function zcl_registerAttrList
        CODE
//  613 {
        FUNCALL zcl_registerAttrList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  614   zclAttrRecsList *pNewItem;
//  615   zclAttrRecsList *pLoop;
//  616 
//  617   // Fill in the new profile list
//  618   pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R0,?V2
        MOV     R1,?V3
//  619   if ( pNewItem == NULL )
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zcl_registerAttrList_0
//  620   {
//  621     return (ZMemError);
        MOV     R1,#0x10
        SJMP    ??CrossCallReturnLabel_14
//  622   }
//  623 
//  624   pNewItem->next = (zclAttrRecsList *)NULL;
??zcl_registerAttrList_0:
        LCALL   ?Subroutine6 & 0xFFFF
//  625   pNewItem->endpoint = endpoint;
//  626   pNewItem->pfnReadWriteCB = NULL;
??CrossCallReturnLabel_0:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine9 & 0xFFFF
//  627   pNewItem->numAttributes = numAttr;
??CrossCallReturnLabel_6:
        MOV     A,?V1
        LCALL   ?Subroutine9 & 0xFFFF
//  628   pNewItem->attrs = newAttrList;
??CrossCallReturnLabel_7:
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  629 
//  630   // Find spot in list
//  631   if ( attrList == NULL )
        MOV     DPTR,#attrList
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_34:
        JNZ     ??zcl_registerAttrList_1
//  632   {
//  633     attrList = pNewItem;
        MOV     DPTR,#attrList
        SJMP    ??zcl_registerAttrList_2
//  634   }
//  635   else
//  636   {
//  637     // Look for end of list
//  638     pLoop = attrList;
//  639     while ( pLoop->next != NULL )
//  640     {
//  641       pLoop = pLoop->next;
??zcl_registerAttrList_3:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
//  642     }
??zcl_registerAttrList_1:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_24:
        JNZ     ??zcl_registerAttrList_3
//  643 
//  644     // Put new item at end of list
//  645     pLoop->next = pNewItem;
//  646   }
??zcl_registerAttrList_2:
        LCALL   ?Subroutine12 & 0xFFFF
//  647 
//  648   return ( ZSuccess );
??CrossCallReturnLabel_14:
          CFI EndBlock cfiBlock8
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  649 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function zcl_registerAttrList
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+-2
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zcl_registerClusterOptionList
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function zcl_registerAttrList
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-2
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function zcl_registerClusterOptionList
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     R1,#0x0
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function zcl_registerAttrList
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_75:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20
//  650 
//  651 /*********************************************************************
//  652  * @fn          zcl_registerClusterOptionList
//  653  *
//  654  * @brief       Register a Cluster Option List with ZCL Foundation
//  655  *
//  656  * @param       endpoint - endpoint the option list belongs to
//  657  * @param       numOption - number of options in list
//  658  * @param       optionList - array of cluster option records.
//  659  *
//  660  *              NOTE: This API should be called to enable 'Application
//  661  *                    Link Key' security and/or 'APS ACK' for a specific
//  662  *                    Cluster. The 'Application Link Key' is discarded
//  663  *                    if security isn't enabled on the device.
//  664  *                    The default behavior is 'Network Key' when security
//  665  *                    is enabled and no 'APS ACK' for the ZCL messages.
//  666  *
//  667  * @return      ZSuccess if OK
//  668  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  669 ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
zcl_registerClusterOptionList:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function zcl_registerClusterOptionList
        CODE
//  670 {
        FUNCALL zcl_registerClusterOptionList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  671   zclClusterOptionList *pNewItem;
//  672   zclClusterOptionList *pLoop;
//  673 
//  674   // Fill in the new profile list
//  675   pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R0,?V2
        MOV     R1,?V3
//  676   if ( pNewItem == NULL )
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zcl_registerClusterOptionList_0
//  677   {
//  678     return (ZMemError);
        MOV     R1,#0x10
        SJMP    ??CrossCallReturnLabel_15
//  679   }
//  680 
//  681   pNewItem->next = (zclClusterOptionList *)NULL;
??zcl_registerClusterOptionList_0:
        LCALL   ?Subroutine6 & 0xFFFF
//  682   pNewItem->endpoint = endpoint;
//  683   pNewItem->numOptions = numOption;
??CrossCallReturnLabel_1:
        LCALL   ?Subroutine7 & 0xFFFF
//  684   pNewItem->options = optionList;
//  685 
//  686   // Find spot in list
//  687   if ( clusterOptionList == NULL )
??CrossCallReturnLabel_3:
        MOV     DPTR,#clusterOptionList
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_35:
        JNZ     ??zcl_registerClusterOptionList_1
//  688   {
//  689     clusterOptionList = pNewItem;
        MOV     DPTR,#clusterOptionList
        SJMP    ??zcl_registerClusterOptionList_2
//  690   }
//  691   else
//  692   {
//  693     // Look for end of list
//  694     pLoop = clusterOptionList;
//  695     while ( pLoop->next != NULL )
//  696     {
//  697       pLoop = pLoop->next;
??zcl_registerClusterOptionList_3:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
//  698     }
??zcl_registerClusterOptionList_1:
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_25:
        JNZ     ??zcl_registerClusterOptionList_3
//  699 
//  700     // Put new item at end of list
//  701     pLoop->next = pNewItem;
//  702   }
??zcl_registerClusterOptionList_2:
        LCALL   ?Subroutine12 & 0xFFFF
//  703 
//  704   return ( ZSuccess );
??CrossCallReturnLabel_15:
        SJMP    ?Subroutine1
//  705 }
          CFI EndBlock cfiBlock21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zcl_registerAttrList
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function zcl_registerClusterOptionList
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zcl_ProcessMessageMSG
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zclFindAttrRecsList
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond26) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond26) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond26) CFA_SP SP+-7
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV     A,R2
        ORL     A,R3
        RET
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zcl_registerClusterOptionList
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOV     A,?V1
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_77:
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zcl_registerClusterOptionList
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_91:
        INC     DPTR
        MOV     A,?V0
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_78:
        RET
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zcl_registerClusterOptionList
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_3
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-4
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zcl_registerAttrList
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_0
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-4
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zcl_registerClusterOptionList
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_1
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-4
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_89:
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zcl_registerClusterOptionList
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_3
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-6
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zcl_registerAttrList
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_0
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-6
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zcl_registerClusterOptionList
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_1
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-6
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function zcl_registerAttrList
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_6
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+-6
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zcl_registerAttrList
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_7
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-6
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function zcl_HandleExternal
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_8
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-6
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function zcl_registerReadWriteCB
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_9
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+-6
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_92:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47
//  706 
//  707 /*********************************************************************
//  708  * @fn          zcl_registerValidateAttrData
//  709  *
//  710  * @brief       Add a validation function for attribute data
//  711  *
//  712  * @param       pfnValidateAttrData - function pointer to validate routine
//  713  *
//  714  * @return      ZSuccess if OK
//  715  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  716 ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
zcl_registerValidateAttrData:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function zcl_registerValidateAttrData
        CODE
//  717 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  718   zcl_ValidateAttrDataCB = pfnValidateAttrData;
        MOV     DPTR,#zcl_ValidateAttrDataCB
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  719 
//  720   return ( ZSuccess );
        MOV     R1,#0x0
        LJMP    ?Subroutine0 & 0xFFFF
//  721 }
          CFI EndBlock cfiBlock48
//  722 
//  723 /*********************************************************************
//  724  * @fn          zcl_registerReadWriteCB
//  725  *
//  726  * @brief       Register the application's callback function to read/write
//  727  *              attribute data, and authorize read/write operation.
//  728  *
//  729  *              Note: The pfnReadWriteCB callback function is only required
//  730  *                    when the attribute data format is unknown to ZCL. The
//  731  *                    callback function gets called when the pointer 'dataPtr'
//  732  *                    to the attribute value is NULL in the attribute database
//  733  *                    registered with the ZCL.
//  734  *
//  735  *              Note: The pfnAuthorizeCB callback function is only required
//  736  *                    when the Read/Write operation on an attribute requires
//  737  *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
//  738  *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
//  739  *
//  740  * @param       endpoint - application's endpoint
//  741  * @param       pfnReadWriteCB - function pointer to read/write routine
//  742  * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
//  743  *
//  744  * @return      ZSuccess if successful. ZFailure, otherwise.
//  745  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  746 ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
zcl_registerReadWriteCB:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function zcl_registerReadWriteCB
        CODE
//  747                                    zclAuthorizeCB_t pfnAuthorizeCB )
//  748 {
        FUNCALL zcl_registerReadWriteCB, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
//  749   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL   `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R0,?V4
        MOV     R1,?V5
//  750 
//  751   if ( pRec != NULL )
        MOV     A,R0
        ORL     A,R1
        JZ      ??zcl_registerReadWriteCB_0
//  752   {
//  753     pRec->pfnReadWriteCB = pfnReadWriteCB;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine10 & 0xFFFF
//  754     pRec->pfnAuthorizeCB = pfnAuthorizeCB;
??CrossCallReturnLabel_9:
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        MOVX    @DPTR,A
//  755 
//  756     return ( ZSuccess );
        MOV     R1,#0x0
        SJMP    ??zcl_registerReadWriteCB_1
//  757   }
//  758 
//  759   return ( ZFailure );
??zcl_registerReadWriteCB_0:
        MOV     R1,#0x1
??zcl_registerReadWriteCB_1:
          CFI EndBlock cfiBlock49
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  760 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function zcl_registerReadWriteCB
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_76:
        RET
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function zcl_registerAttrList
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_7
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-4
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function zcl_HandleExternal
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_8
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-4
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zcl_registerReadWriteCB
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_9
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond57) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+-4
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_90:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58
//  761 
//  762 /*********************************************************************
//  763  * @fn      zcl_DeviceOperational
//  764  *
//  765  * @brief   Used to see whether or not the device can send or respond
//  766  *          to application level commands.
//  767  *
//  768  * @param   srcEP - source endpoint
//  769  * @param   clusterID - cluster ID
//  770  * @param   frameType - command type
//  771  * @param   cmd - command ID
//  772  *
//  773  * @return  TRUE if device is operational, FALSE otherwise
//  774  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  775 static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
zcl_DeviceOperational:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function zcl_DeviceOperational
        CODE
//  776                                     uint8 frameType, uint8 cmd, uint16 profileID )
//  777 {
        FUNCALL zcl_DeviceOperational, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R4
//  778   zclAttrRec_t attrRec;
//  779   uint8 deviceEnabled = DEVICE_ENABLED; // default value
//  780 
//  781   (void)profileID;  // Intentionally unreferenced parameter
//  782 
//  783   // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
//  784   // cannot send or respond to application level commands, other than commands
//  785   // to read or write attributes. Note that the Identify cluster cannot be
//  786   // disabled, and remains functional regardless of this setting.
//  787   if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
        JNZ     ??zcl_DeviceOperational_0
        MOV     A,R5
        CLR     C
        SUBB    A,#0x6
        JC      ??zcl_DeviceOperational_1
//  788   {
//  789     return ( TRUE );
//  790   }
//  791 
//  792   if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
??zcl_DeviceOperational_0:
        MOV     A,#0x3
        XRL     A,R2
        ORL     A,R3
        JNZ     ??zcl_DeviceOperational_2
//  793   {
//  794     return ( TRUE );
??zcl_DeviceOperational_1:
        MOV     R1,#0x1
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine1 & 0xFFFF
          CFI CFA_XSP16 add(XSP16, 20)
//  795   }
//  796 
//  797   // Is device enabled?
//  798   if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
//  799                        ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
??zcl_DeviceOperational_2:
        ; Setup parameters for call to function zclFindAttrRec
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x12
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     A,R6
        MOV     R1,A
        LCALL   `??zclFindAttrRec::?relay`; Banked call to: zclFindAttrRec
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        SJMP    ??zcl_DeviceOperational_1
//  800   {
//  801 #ifdef ZCL_READ
//  802     zclReadAttrData( &deviceEnabled, &attrRec, NULL );
//  803 #endif
//  804   }
//  805 
//  806   return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
//  807 }
          CFI EndBlock cfiBlock59
//  808 
//  809 /*********************************************************************
//  810  * @fn      zcl_SendCommand
//  811  *
//  812  * @brief   Used to send Profile and Cluster Specific Command messages.
//  813  *
//  814  *          NOTE: The calling application is responsible for incrementing
//  815  *                the Sequence Number.
//  816  *
//  817  * @param   srcEp - source endpoint
//  818  * @param   destAddr - destination address
//  819  * @param   clusterID - cluster ID
//  820  * @param   cmd - command ID
//  821  * @param   specific - whether the command is Cluster Specific
//  822  * @param   direction - client/server direction of the command
//  823  * @param   disableDefaultRsp - disable Default Response command
//  824  * @param   manuCode - manufacturer code for proprietary extensions to a profile
//  825  * @param   seqNumber - identification number for the transaction
//  826  * @param   cmdFormatLen - length of the command to be sent
//  827  * @param   cmdFormat - command to be sent
//  828  *
//  829  * @return  ZSuccess if OK
//  830  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  831 ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
zcl_SendCommand:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function zcl_SendCommand
        CODE
//  832                            uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
//  833                            uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
//  834                            uint16 cmdFormatLen, uint8 *cmdFormat )
//  835 {
        FUNCALL zcl_SendCommand, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, StubAPS_InterPan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zclGetClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zcl_DeviceOperational
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zclBuildHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V3,R1
        MOV     ?V14,R2
        MOV     ?V15,R3
        MOV     ?V0,R4
        MOV     ?V1,R5
//  836   endPointDesc_t *epDesc;
//  837   zclFrameHdr_t hdr;
//  838   uint8 *msgBuf;
//  839   uint16 msgLen;
//  840   uint8 *pBuf;
//  841   uint8 options;
//  842   ZStatus_t status;
//  843 
//  844   epDesc = afFindEndPointDesc( srcEP );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV     ?V12,R2
        MOV     ?V13,R3
//  845   if ( epDesc == NULL )
        MOV     A,R2
        ORL     A,?V13
        JNZ     ??zcl_SendCommand_0
//  846   {
//  847     return ( ZInvalidParameter ); // EMBEDDED RETURN
        MOV     R1,#0x2
        LJMP    ??zcl_SendCommand_1 & 0xFFFF
//  848   }
//  849 
//  850 #if defined ( INTER_PAN )
//  851   if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
??zcl_SendCommand_0:
        ; Setup parameters for call to function StubAPS_InterPan
        MOV     DPL,?V14
        MOV     DPH,?V15
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V14
        MOV     DPH,?V15
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine49_0 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL   `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
        MOV     A,R1
        JZ      ??zcl_SendCommand_2
//  852   {
//  853     options = AF_TX_OPTIONS_NONE;
        MOV     ?V2,#0x0
        SJMP    ??zcl_SendCommand_3
//  854   }
//  855   else
//  856 #endif
//  857   {
//  858     options = zclGetClusterOption( srcEP, clusterID );
??zcl_SendCommand_2:
        ; Setup parameters for call to function zclGetClusterOption
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,?V3
        LCALL   `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
        MOV     A,R1
        MOV     ?V2,A
//  859 
//  860     // The cluster might not have been defined to use security but if this message
//  861     // is in response to another message that was using APS security this message
//  862     // will be sent with APS security
//  863     if ( !( options & AF_EN_SECURITY ) )
        MOV     C,0xE0 /* A   */.6
        JC      ??zcl_SendCommand_3
//  864     {
//  865       afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
        MOV     DPTR,#rawAFMsg
        LCALL   ??Subroutine53_0 & 0xFFFF
//  866 
//  867       if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
??CrossCallReturnLabel_117:
        JZ      ??zcl_SendCommand_3
        MOV     A,R0
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zcl_SendCommand_3
//  868       {
//  869         options |= AF_EN_SECURITY;
        MOV     A,?V2
        SETB    0xE0 /* A   */.6
        MOV     ?V2,A
//  870       }
//  871     }
//  872   }
//  873 
//  874   zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
??zcl_SendCommand_3:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  875 
//  876   // Not Profile wide command (like READ, WRITE)
//  877   if ( specific )
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_39:
        JZ      ??zcl_SendCommand_4
//  878   {
//  879     hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
        MOVX    A,@DPTR
        ANL     A,#0xfc
        MOVX    @DPTR,A
        MOVX    A,@DPTR
        ORL     A,#0x1
        SJMP    ??zcl_SendCommand_5
//  880   }
//  881   else
//  882   {
//  883     hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
??zcl_SendCommand_4:
        MOVX    A,@DPTR
        ANL     A,#0xfc
??zcl_SendCommand_5:
        MOVX    @DPTR,A
//  884   }
//  885 
//  886   if ( ( epDesc->simpleDesc == NULL ) ||
//  887        ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
//  888                                 cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
        MOV     DPL,?V12
        MOV     DPH,?V13
        INC     DPTR
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_122:
        JZ      ??zcl_SendCommand_6
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        ; Setup parameters for call to function zcl_DeviceOperational
        MOV     DPL,?V12
        MOV     DPH,?V13
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R6
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x3
        MOV     R4,A
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R1,?V3
        LCALL   `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        JNZ     ??zcl_SendCommand_7
//  889   {
//  890     return ( ZFailure ); // EMBEDDED RETURN
??zcl_SendCommand_6:
        MOV     R1,#0x1
        LJMP    ??zcl_SendCommand_1 & 0xFFFF
//  891   }
??zcl_SendCommand_7:
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine53_0 & 0xFFFF
//  892 
//  893   // Fill in the Maufacturer Code
//  894   if ( manuCode != 0 )
??CrossCallReturnLabel_118:
        JZ      ??CrossCallReturnLabel_105
//  895   {
//  896     hdr.fc.manuSpecific = 1;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ORL     A,#0x4
        MOVX    @DPTR,A
//  897     hdr.manuCode = manuCode;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  898   }
//  899 
//  900   // Set the Command Direction
//  901   if ( direction )
??CrossCallReturnLabel_105:
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_40:
        JZ      ??zcl_SendCommand_8
//  902   {
//  903     hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
        MOVX    A,@DPTR
        ORL     A,#0x8
        SJMP    ??zcl_SendCommand_9
//  904   }
//  905   else
//  906   {
//  907     hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
??zcl_SendCommand_8:
        MOVX    A,@DPTR
        ANL     A,#0xf7
??zcl_SendCommand_9:
        MOVX    @DPTR,A
//  908   }
//  909 
//  910   // Set the Disable Default Response field
//  911   if ( disableDefaultRsp )
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_41:
        JZ      ??zcl_SendCommand_10
//  912   {
//  913     hdr.fc.disableDefaultRsp = 1;
        MOVX    A,@DPTR
        ORL     A,#0x10
        SJMP    ??zcl_SendCommand_11
//  914   }
//  915   else
//  916   {
//  917     hdr.fc.disableDefaultRsp = 0;
??zcl_SendCommand_10:
        MOVX    A,@DPTR
        ANL     A,#0xef
??zcl_SendCommand_11:
        MOVX    @DPTR,A
//  918   }
//  919 
//  920   // Fill in the Transaction Sequence Number
//  921   hdr.transSeqNum = seqNum;
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  922 
//  923   // Fill in the command
//  924   hdr.commandID = cmd;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  925 
//  926   // calculate the needed buffer size
//  927   msgLen = zclCalcHdrSize( &hdr );
        MOV     R0,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ANL     A,#0x4
        JZ      ??zcl_SendCommand_12
        MOV     R0,#0x5
??zcl_SendCommand_12:
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V11,A
//  928   msgLen += cmdFormatLen;
        MOV     A,R0
        ADD     A,?V10
        MOV     R6,A
        CLR     A
        ADDC    A,?V11
        MOV     R7,A
//  929 
//  930   // Allocate the buffer needed
//  931   msgBuf = zcl_mem_alloc( msgLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V8,R2
        MOV     ?V9,R3
//  932   if ( msgBuf != NULL )
        MOV     A,R2
        ORL     A,?V9
        JZ      ??zcl_SendCommand_13
//  933   {
//  934     // Fill in the ZCL Header
//  935     pBuf = zclBuildHdr( &hdr, msgBuf );
        ; Setup parameters for call to function zclBuildHdr
        MOV     R4,?V8
        MOV     R5,?V9
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??zclBuildHdr::?relay`; Banked call to: zclBuildHdr
//  936 
//  937     // Fill in the command frame
//  938     zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     A,#0x27
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,?V10
        MOV     R5,?V11
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  939 
//  940     status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
//  941                              &zcl_TransID, options, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V4,#0x1e
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V4,#zcl_TransID & 0xff
        MOV     ?V5,#(zcl_TransID >> 8) & 0xff
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R1,?V2
        MOV     R4,?V12
        MOV     R5,?V13
        MOV     R2,?V14
        MOV     R3,?V15
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        MOV     R6,A
//  942     zcl_mem_free ( msgBuf );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V8
        MOV     R3,?V9
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??zcl_SendCommand_14
//  943   }
//  944   else
//  945   {
//  946     status = ZMemError;
??zcl_SendCommand_13:
        MOV     R6,#0x10
//  947   }
//  948 
//  949   return ( status );
??zcl_SendCommand_14:
        MOV     A,R6
        MOV     R1,A
??zcl_SendCommand_1:
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
//  950 }
          CFI EndBlock cfiBlock60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond61 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_98
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function zcl_ProcessMessageMSG
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-2
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker63 Using cfiCommon1
          CFI (cfiPicker63) NoFunction
          CFI (cfiPicker63) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiPicker63
        REQUIRE ??Subroutine49_0
        ; // Fall through to label ??Subroutine49_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine49_0:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function zcl_getRawAFMsg
          CFI Conditional ??CrossCallReturnLabel_94
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zcl_registerPlugin
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zcl_SendCommand
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+-2
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zcl_ProcessMessageMSG
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zcl_ProcessMessageMSG
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zcl_ProcessMessageMSG
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker70 Using cfiCommon1
          CFI (cfiPicker70) NoFunction
          CFI (cfiPicker70) Picker
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_103:
        RET
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond71 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zcl_registerAttrList
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_34
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zcl_registerClusterOptionList
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_35
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+-4
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function zcl_ProcessMessageMSG
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_36
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+-4
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function zclFindAttrRecsList
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_100, ??CrossCallReturnLabel_32
          CFI (cfiCond75) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond75) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond75) CFA_SP SP+-9
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zcl_ProcessMessageMSG
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_98
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+-4
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zcl_ProcessMessageMSG
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_99
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+-4
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function zcl_getRawAFMsg
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_94
          CFI (cfiCond78) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond78) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond78) CFA_SP SP+-9
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zcl_registerPlugin
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_95
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-4
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zcl_SendCommand
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_96
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-4
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zcl_ProcessMessageMSG
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_103, ??CrossCallReturnLabel_97
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+-4
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zcl_ProcessMessageMSG
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_49
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-4
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zcl_ProcessMessageMSG
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_102, ??CrossCallReturnLabel_50
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-4
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zcl_ProcessMessageMSG
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_37
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-4
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zcl_ProcessMessageMSG
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_101, ??CrossCallReturnLabel_38
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-4
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond87 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_105
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function zcl_ProcessMessageMSG
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zcl_ProcessMessageMSG
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zcl_ProcessMessageMSG
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function zcl_ProcessMessageMSG
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function zcl_ProcessMessageMSG
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function zclParseHdr
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+-2
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker94 Using cfiCommon1
          CFI (cfiPicker94) NoFunction
          CFI (cfiPicker94) Picker
        MOV     A,R0
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiPicker94
        REQUIRE ??Subroutine50_0
        ; // Fall through to label ??Subroutine50_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine50_0:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function zcl_SendCommand
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond96) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond96) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond96) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond96) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond96) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function zcl_ProcessMessageMSG
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function zcl_ProcessMessageMSG
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-2
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function zcl_ProcessMessageMSG
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-2
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function zcl_ProcessMessageMSG
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function zcl_ProcessMessageMSG
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+-2
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zclParseHdr
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+-2
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker103 Using cfiCommon1
          CFI (cfiPicker103) NoFunction
          CFI (cfiPicker103) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiPicker103
//  951 
//  952 #ifdef ZCL_READ
//  953 /*********************************************************************
//  954  * @fn      zcl_SendRead
//  955  *
//  956  * @brief   Send a Read command
//  957  *
//  958  * @param   srcEP - Application's endpoint
//  959  * @param   dstAddr - destination address
//  960  * @param   clusterID - cluster ID
//  961  * @param   readCmd - read command to be sent
//  962  * @param   direction - direction of the command
//  963  * @param   seqNum - transaction sequence number
//  964  *
//  965  * @return  ZSuccess if OK
//  966  */
//  967 ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
//  968                         uint16 clusterID, zclReadCmd_t *readCmd,
//  969                         uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
//  970 {
//  971   uint16 dataLen;
//  972   uint8 *buf;
//  973   uint8 *pBuf;
//  974   ZStatus_t status;
//  975 
//  976   dataLen = readCmd->numAttr * 2; // Attribute ID
//  977 
//  978   buf = zcl_mem_alloc( dataLen );
//  979   if ( buf != NULL )
//  980   {
//  981     uint8 i;
//  982 
//  983     // Load the buffer - serially
//  984     pBuf = buf;
//  985     for (i = 0; i < readCmd->numAttr; i++)
//  986     {
//  987       *pBuf++ = LO_UINT16( readCmd->attrID[i] );
//  988       *pBuf++ = HI_UINT16( readCmd->attrID[i] );
//  989     }
//  990 
//  991     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
//  992                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
//  993     zcl_mem_free( buf );
//  994   }
//  995   else
//  996   {
//  997     status = ZMemError;
//  998   }
//  999 
// 1000   return ( status );
// 1001 }
// 1002 
// 1003 /*********************************************************************
// 1004  * @fn      zcl_SendReadRsp
// 1005  *
// 1006  * @brief   Send a Read Response command.
// 1007  *
// 1008  * @param   srcEP - Application's endpoint
// 1009  * @param   dstAddr - destination address
// 1010  * @param   clusterID - cluster ID
// 1011  * @param   readRspCmd - read response command to be sent
// 1012  * @param   direction - direction of the command
// 1013  * @param   seqNum - transaction sequence number
// 1014  *
// 1015  * @return  ZSuccess if OK
// 1016  */
// 1017 ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
// 1018                            uint16 clusterID, zclReadRspCmd_t *readRspCmd,
// 1019                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1020 {
// 1021   uint8 *buf;
// 1022   uint16 len = 0;
// 1023   ZStatus_t status;
// 1024   uint8 i;
// 1025 
// 1026   // calculate the size of the command
// 1027   for ( i = 0; i < readRspCmd->numAttr; i++ )
// 1028   {
// 1029     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1030 
// 1031     len += 2 + 1; // Attribute ID + Status
// 1032 
// 1033     if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 1034     {
// 1035       len++; // Attribute Data Type length
// 1036 
// 1037       // Attribute Data length
// 1038       if ( statusRec->data != NULL )
// 1039       {
// 1040         len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
// 1041       }
// 1042       else
// 1043       {
// 1044         len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
// 1045       }
// 1046     }
// 1047   }
// 1048 
// 1049   buf = zcl_mem_alloc( len );
// 1050   if ( buf != NULL )
// 1051   {
// 1052     // Load the buffer - serially
// 1053     uint8 *pBuf = buf;
// 1054 
// 1055     for ( i = 0; i < readRspCmd->numAttr; i++ )
// 1056     {
// 1057       zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1058 
// 1059       *pBuf++ = LO_UINT16( statusRec->attrID );
// 1060       *pBuf++ = HI_UINT16( statusRec->attrID );
// 1061       *pBuf++ = statusRec->status;
// 1062 
// 1063       if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 1064       {
// 1065         *pBuf++ = statusRec->dataType;
// 1066 
// 1067         if ( statusRec->data != NULL )
// 1068         {
// 1069           // Copy attribute data to the buffer to be sent out
// 1070           pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
// 1071         }
// 1072         else
// 1073         {
// 1074           uint16 dataLen;
// 1075 
// 1076           // Read attribute data directly into the buffer to be sent out
// 1077           zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
// 1078           pBuf += dataLen;
// 1079         }
// 1080       }
// 1081     } // for loop
// 1082 
// 1083     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
// 1084                               direction, disableDefaultRsp, 0, seqNum, len, buf );
// 1085     zcl_mem_free( buf );
// 1086   }
// 1087   else
// 1088   {
// 1089     status = ZMemError;
// 1090   }
// 1091 
// 1092   return ( status );
// 1093 }
// 1094 #endif // ZCL_READ
// 1095 
// 1096 #ifdef ZCL_WRITE
// 1097 /*********************************************************************
// 1098  * @fn      sendWriteRequest
// 1099  *
// 1100  * @brief   Send a Write command
// 1101  *
// 1102  * @param   dstAddr - destination address
// 1103  * @param   clusterID - cluster ID
// 1104  * @param   writeCmd - write command to be sent
// 1105  * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
// 1106  * @param   direction - direction of the command
// 1107  * @param   seqNum - transaction sequence number
// 1108  *
// 1109  * @return  ZSuccess if OK
// 1110  */
// 1111 ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
// 1112                                 zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
// 1113                                 uint8 disableDefaultRsp, uint8 seqNum )
// 1114 {
// 1115   uint8 *buf;
// 1116   uint16 dataLen = 0;
// 1117   ZStatus_t status;
// 1118   uint8 i;
// 1119 
// 1120   for ( i = 0; i < writeCmd->numAttr; i++ )
// 1121   {
// 1122     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 1123 
// 1124     dataLen += 2 + 1; // Attribute ID + Attribute Type
// 1125 
// 1126     // Attribute Data
// 1127     dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
// 1128   }
// 1129 
// 1130   buf = zcl_mem_alloc( dataLen );
// 1131   if ( buf != NULL )
// 1132   {
// 1133     // Load the buffer - serially
// 1134     uint8 *pBuf = buf;
// 1135     for ( i = 0; i < writeCmd->numAttr; i++ )
// 1136     {
// 1137       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 1138 
// 1139       *pBuf++ = LO_UINT16( statusRec->attrID );
// 1140       *pBuf++ = HI_UINT16( statusRec->attrID );
// 1141       *pBuf++ = statusRec->dataType;
// 1142 
// 1143       pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
// 1144     }
// 1145 
// 1146     status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
// 1147                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1148     zcl_mem_free( buf );
// 1149   }
// 1150   else
// 1151   {
// 1152     status = ZMemError;
// 1153   }
// 1154 
// 1155   return ( status);
// 1156 }
// 1157 
// 1158 /*********************************************************************
// 1159  * @fn      zcl_SendWriteRsp
// 1160  *
// 1161  * @brief   Send a Write Response command
// 1162  *
// 1163  * @param   dstAddr - destination address
// 1164  * @param   clusterID - cluster ID
// 1165  * @param   wrtieRspCmd - write response command to be sent
// 1166  * @param   direction - direction of the command
// 1167  * @param   seqNum - transaction sequence number
// 1168  *
// 1169  * @return  ZSuccess if OK
// 1170  */
// 1171 ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
// 1172                             uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
// 1173                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1174 {
// 1175   uint16 dataLen;
// 1176   uint8 *buf;
// 1177   ZStatus_t status;
// 1178 
// 1179   dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
// 1180 
// 1181   buf = zcl_mem_alloc( dataLen );
// 1182   if ( buf != NULL )
// 1183   {
// 1184     // Load the buffer - serially
// 1185     uint8 i;
// 1186     uint8 *pBuf = buf;
// 1187     for ( i = 0; i < writeRspCmd->numAttr; i++ )
// 1188     {
// 1189       *pBuf++ = writeRspCmd->attrList[i].status;
// 1190       *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
// 1191       *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
// 1192     }
// 1193 
// 1194     // If there's only a single status record and its status field is set to
// 1195     // SUCCESS then omit the attribute ID field.
// 1196     if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
// 1197     {
// 1198       dataLen = 1;
// 1199     }
// 1200 
// 1201     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
// 1202                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1203     zcl_mem_free( buf );
// 1204   }
// 1205   else
// 1206   {
// 1207     status = ZMemError;
// 1208   }
// 1209 
// 1210   return ( status );
// 1211 }
// 1212 #endif // ZCL_WRITE
// 1213 
// 1214 #ifdef ZCL_REPORT
// 1215 /*********************************************************************
// 1216  * @fn      zcl_SendConfigReportCmd
// 1217  *
// 1218  * @brief   Send a Configure Reporting command
// 1219  *
// 1220  * @param   dstAddr - destination address
// 1221  * @param   clusterID - cluster ID
// 1222  * @param   cfgReportCmd - configure reporting command to be sent
// 1223  * @param   direction - direction of the command
// 1224  * @param   seqNum - transaction sequence number
// 1225  *
// 1226  * @return  ZSuccess if OK
// 1227  */
// 1228 ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1229                           uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
// 1230                           uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1231 {
// 1232   uint8 *buf;
// 1233   uint16 dataLen = 0;
// 1234   ZStatus_t status;
// 1235   uint8 i;
// 1236 
// 1237   // Find out the data length
// 1238   for ( i = 0; i < cfgReportCmd->numAttr; i++ )
// 1239   {
// 1240     zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 1241 
// 1242     dataLen += 1 + 2; // Direction + Attribute ID
// 1243 
// 1244     if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1245     {
// 1246       dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
// 1247 
// 1248       // Find out the size of the Reportable Change field (for Analog data types)
// 1249       if ( zclAnalogDataType( reportRec->dataType ) )
// 1250       {
// 1251         dataLen += zclGetDataTypeLength( reportRec->dataType );
// 1252       }
// 1253     }
// 1254     else
// 1255     {
// 1256       dataLen += 2; // Timeout Period
// 1257     }
// 1258   }
// 1259 
// 1260   buf = zcl_mem_alloc( dataLen );
// 1261   if ( buf != NULL )
// 1262   {
// 1263     // Load the buffer - serially
// 1264     uint8 *pBuf = buf;
// 1265 
// 1266     for ( i = 0; i < cfgReportCmd->numAttr; i++ )
// 1267     {
// 1268       zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 1269 
// 1270       *pBuf++ = reportRec->direction;
// 1271       *pBuf++ = LO_UINT16( reportRec->attrID );
// 1272       *pBuf++ = HI_UINT16( reportRec->attrID );
// 1273 
// 1274       if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1275       {
// 1276         *pBuf++ = reportRec->dataType;
// 1277         *pBuf++ = LO_UINT16( reportRec->minReportInt );
// 1278         *pBuf++ = HI_UINT16( reportRec->minReportInt );
// 1279         *pBuf++ = LO_UINT16( reportRec->maxReportInt );
// 1280         *pBuf++ = HI_UINT16( reportRec->maxReportInt );
// 1281 
// 1282         if ( zclAnalogDataType( reportRec->dataType ) )
// 1283         {
// 1284           pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
// 1285         }
// 1286       }
// 1287       else
// 1288       {
// 1289         *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
// 1290         *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
// 1291       }
// 1292     } // for loop
// 1293 
// 1294     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
// 1295                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1296     zcl_mem_free( buf );
// 1297   }
// 1298   else
// 1299   {
// 1300     status = ZMemError;
// 1301   }
// 1302 
// 1303   return ( status );
// 1304 }
// 1305 
// 1306 /*********************************************************************
// 1307  * @fn      zcl_SendConfigReportRspCmd
// 1308  *
// 1309  * @brief   Send a Configure Reporting Response command
// 1310  *
// 1311  * @param   dstAddr - destination address
// 1312  * @param   clusterID - cluster ID
// 1313  * @param   cfgReportRspCmd - configure reporting response command to be sent
// 1314  * @param   direction - direction of the command
// 1315  * @param   seqNum - transaction sequence number
// 1316  *
// 1317  * @return  ZSuccess if OK
// 1318  */
// 1319 ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1320                     uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
// 1321                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1322 {
// 1323   uint16 dataLen;
// 1324   uint8 *buf;
// 1325   ZStatus_t status;
// 1326 
// 1327   // Atrribute list (Status, Direction and Attribute ID)
// 1328   dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
// 1329 
// 1330   buf = zcl_mem_alloc( dataLen );
// 1331   if ( buf != NULL )
// 1332   {
// 1333     // Load the buffer - serially
// 1334     uint8 *pBuf = buf;
// 1335     uint8 i;
// 1336 
// 1337     for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
// 1338     {
// 1339       *pBuf++ = cfgReportRspCmd->attrList[i].status;
// 1340       *pBuf++ = cfgReportRspCmd->attrList[i].direction;
// 1341       *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
// 1342       *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
// 1343     }
// 1344 
// 1345     // If there's only a single status record and its status field is set to
// 1346     // SUCCESS then omit the attribute ID field.
// 1347     if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
// 1348     {
// 1349       dataLen = 1;
// 1350     }
// 1351 
// 1352     status = zcl_SendCommand( srcEP, dstAddr, clusterID,
// 1353                               ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
// 1354                               disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1355     zcl_mem_free( buf );
// 1356   }
// 1357   else
// 1358   {
// 1359     status = ZMemError;
// 1360   }
// 1361 
// 1362   return ( status );
// 1363 }
// 1364 
// 1365 /*********************************************************************
// 1366  * @fn      zcl_SendReadReportCfgCmd
// 1367  *
// 1368  * @brief   Send a Read Reporting Configuration command
// 1369  *
// 1370  * @param   dstAddr - destination address
// 1371  * @param   clusterID - cluster ID
// 1372  * @param   readReportCfgCmd - read reporting configuration command to be sent
// 1373  * @param   direction - direction of the command
// 1374  * @param   seqNum - transaction sequence number
// 1375  *
// 1376  * @return  ZSuccess if OK
// 1377  */
// 1378 ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1379                   uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
// 1380                   uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1381 {
// 1382   uint16 dataLen;
// 1383   uint8 *buf;
// 1384   ZStatus_t status;
// 1385 
// 1386   dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
// 1387 
// 1388   buf = zcl_mem_alloc( dataLen );
// 1389   if ( buf != NULL )
// 1390   {
// 1391     // Load the buffer - serially
// 1392     uint8 *pBuf = buf;
// 1393     uint8 i;
// 1394 
// 1395     for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
// 1396     {
// 1397       *pBuf++ = readReportCfgCmd->attrList[i].direction;
// 1398       *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
// 1399       *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
// 1400     }
// 1401 
// 1402     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
// 1403                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1404     zcl_mem_free( buf );
// 1405   }
// 1406   else
// 1407   {
// 1408     status = ZMemError;
// 1409   }
// 1410 
// 1411   return ( status );
// 1412 }
// 1413 
// 1414 /*********************************************************************
// 1415  * @fn      zcl_SendReadReportCfgRspCmd
// 1416  *
// 1417  * @brief   Send a Read Reporting Configuration Response command
// 1418  *
// 1419  * @param   dstAddr - destination address
// 1420  * @param   clusterID - cluster ID
// 1421  * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
// 1422  * @param   direction - direction of the command
// 1423  * @param   seqNum - transaction sequence number
// 1424  *
// 1425  * @return  ZSuccess if OK
// 1426  */
// 1427 ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1428              uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
// 1429              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1430 {
// 1431   uint8 *buf;
// 1432   uint16 dataLen = 0;
// 1433   ZStatus_t status;
// 1434   uint8 i;
// 1435 
// 1436   // Find out the data length
// 1437   for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
// 1438   {
// 1439     zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 1440 
// 1441     dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
// 1442 
// 1443     if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 1444     {
// 1445       if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1446       {
// 1447         dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
// 1448 
// 1449         // Find out the size of the Reportable Change field (for Analog data types)
// 1450         if ( zclAnalogDataType( reportRspRec->dataType ) )
// 1451         {
// 1452           dataLen += zclGetDataTypeLength( reportRspRec->dataType );
// 1453         }
// 1454       }
// 1455       else
// 1456       {
// 1457         dataLen += 2; // Timeout Period
// 1458       }
// 1459     }
// 1460   }
// 1461 
// 1462   buf = zcl_mem_alloc( dataLen );
// 1463   if ( buf != NULL )
// 1464   {
// 1465     // Load the buffer - serially
// 1466     uint8 *pBuf = buf;
// 1467 
// 1468     for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
// 1469     {
// 1470       zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 1471 
// 1472       *pBuf++ = reportRspRec->status;
// 1473       *pBuf++ = reportRspRec->direction;
// 1474       *pBuf++ = LO_UINT16( reportRspRec->attrID );
// 1475       *pBuf++ = HI_UINT16( reportRspRec->attrID );
// 1476 
// 1477       if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 1478       {
// 1479         if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1480         {
// 1481           *pBuf++ = reportRspRec->dataType;
// 1482           *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
// 1483           *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
// 1484           *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
// 1485           *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
// 1486 
// 1487           if ( zclAnalogDataType( reportRspRec->dataType ) )
// 1488           {
// 1489             pBuf = zclSerializeData( reportRspRec->dataType,
// 1490                                      reportRspRec->reportableChange, pBuf );
// 1491           }
// 1492         }
// 1493         else
// 1494         {
// 1495           *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
// 1496           *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
// 1497         }
// 1498       }
// 1499     }
// 1500 
// 1501     status = zcl_SendCommand( srcEP, dstAddr, clusterID,
// 1502                               ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
// 1503                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1504     zcl_mem_free( buf );
// 1505   }
// 1506   else
// 1507   {
// 1508     status = ZMemError;
// 1509   }
// 1510 
// 1511   return ( status );
// 1512 }
// 1513 
// 1514 /*********************************************************************
// 1515  * @fn      zcl_SendReportCmd
// 1516  *
// 1517  * @brief   Send a Report command
// 1518  *
// 1519  * @param   dstAddr - destination address
// 1520  * @param   clusterID - cluster ID
// 1521  * @param   reportCmd - report command to be sent
// 1522  * @param   direction - direction of the command
// 1523  * @param   seqNum - transaction sequence number
// 1524  *
// 1525  * @return  ZSuccess if OK
// 1526  */
// 1527 ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1528                              uint16 clusterID, zclReportCmd_t *reportCmd,
// 1529                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1530 {
// 1531   uint16 dataLen = 0;
// 1532   uint8 *buf;
// 1533   ZStatus_t status;
// 1534   uint8 i;
// 1535 
// 1536   // calculate the size of the command
// 1537   for ( i = 0; i < reportCmd->numAttr; i++ )
// 1538   {
// 1539     zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 1540 
// 1541     dataLen += 2 + 1; // Attribute ID + data type
// 1542 
// 1543     // Attribute Data
// 1544     dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
// 1545   }
// 1546 
// 1547   buf = zcl_mem_alloc( dataLen );
// 1548   if ( buf != NULL )
// 1549   {
// 1550     // Load the buffer - serially
// 1551     uint8 *pBuf = buf;
// 1552 
// 1553     for ( i = 0; i < reportCmd->numAttr; i++ )
// 1554     {
// 1555       zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 1556 
// 1557       *pBuf++ = LO_UINT16( reportRec->attrID );
// 1558       *pBuf++ = HI_UINT16( reportRec->attrID );
// 1559       *pBuf++ = reportRec->dataType;
// 1560 
// 1561       pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
// 1562     }
// 1563 
// 1564     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
// 1565                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1566     zcl_mem_free( buf );
// 1567   }
// 1568   else
// 1569   {
// 1570     status = ZMemError;
// 1571   }
// 1572 
// 1573   return ( status );
// 1574 }
// 1575 #endif // ZCL_REPORT
// 1576 
// 1577 /*********************************************************************
// 1578  * @fn      zcl_SendDefaultRspCmd
// 1579  *
// 1580  * @brief   Send a Default Response command
// 1581  *
// 1582  *          Note: The manufacturer code field should be set if this
// 1583  *          command is being sent in response to a manufacturer specific
// 1584  *          command.
// 1585  *
// 1586  * @param   dstAddr - destination address
// 1587  * @param   clusterID - cluster ID
// 1588  * @param   defaultRspCmd - default response command to be sent
// 1589  * @param   direction - direction of the command
// 1590  * @param   manuCode - manufacturer code for proprietary extensions to a profile
// 1591  * @param   seqNum - transaction sequence number
// 1592  *
// 1593  * @return  ZSuccess if OK
// 1594  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1595 ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
zcl_SendDefaultRspCmd:
          CFI Block cfiBlock104 Using cfiCommon0
          CFI Function zcl_SendDefaultRspCmd
        CODE
// 1596                                  zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
// 1597                                  uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
// 1598 {
        FUNCALL zcl_SendDefaultRspCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        MOV     R6,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine34 & 0xFFFF
// 1599   uint8 buf[2]; // Command ID and Status;
// 1600 
// 1601   // Load the buffer - serially
// 1602   buf[0] = defaultRspCmd->commandID;
??CrossCallReturnLabel_59:
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   ?Subroutine14 & 0xFFFF
// 1603   buf[1] = defaultRspCmd->statusCode;
??CrossCallReturnLabel_17:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1604 
// 1605   return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
// 1606                             direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
        ; Setup parameters for call to function zcl_SendCommand
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0,#0x2
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_65:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0,#0xb
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R6
        MOV     R1,A
        LCALL   `??zcl_SendCommand::?relay`; Banked call to: zcl_SendCommand
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine2 & 0xFFFF
// 1607 }
          CFI EndBlock cfiBlock104

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_60
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zcl_SendDefaultRspCmd
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zcl_SendCommand
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function zcl_SendCommand
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function zcl_SendDefaultRspCmd
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond113 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function zcl_SendDefaultRspCmd
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+-2
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function zclBuildHdr
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker116 Using cfiCommon1
          CFI (cfiPicker116) NoFunction
          CFI (cfiPicker116) Picker
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_93:
        RET
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiPicker116

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond117 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function zcl_registerClusterOptionList
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_91, ??CrossCallReturnLabel_1
          CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond118) CFA_SP SP+-4
          CFI (cfiCond118) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function zcl_registerPlugin
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_2
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-8
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function zcl_registerClusterOptionList
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_3
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+-8
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function zcl_registerAttrList
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_0
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+-8
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function zcl_registerClusterOptionList
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_89, ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_1
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-8
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function zcl_registerAttrList
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_6
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-8
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function zcl_registerAttrList
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_7
          CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond124) CFA_SP SP+-8
          CFI (cfiCond124) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zcl_HandleExternal
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_8
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+-8
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zcl_registerReadWriteCB
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_92, ??CrossCallReturnLabel_90, ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_9
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-8
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function zcl_registerPlugin
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_16
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-4
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function zcl_SendDefaultRspCmd
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_17
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-4
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function zclBuildHdr
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_93, ??CrossCallReturnLabel_18
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker130 Using cfiCommon1
          CFI (cfiPicker130) NoFunction
          CFI (cfiPicker130) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        RET
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiPicker130
// 1608 
// 1609 #ifdef ZCL_DISCOVER
// 1610 /*********************************************************************
// 1611  * @fn      zcl_SendDiscoverCmdsCmd
// 1612  *
// 1613  * @brief   Send a Discover Commands command
// 1614  *
// 1615  * @param   dstAddr - destination address
// 1616  * @param   clusterID - cluster ID
// 1617  * @param   cmdType - requesting command ID
// 1618  * @param   pDiscoverCmd - discover command to be sent
// 1619  * @param   direction - direction of the command
// 1620  * @param   seqNum - transaction sequence number
// 1621  *
// 1622  * @return  ZSuccess if OK
// 1623  */
// 1624 ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
// 1625                                   uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
// 1626                                   uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1627 {
// 1628   uint8 payload[2]; // size of startCmdID and maxCmdID
// 1629   ZStatus_t status;
// 1630 
// 1631   payload[0] = pDiscoverCmd->startCmdID;
// 1632   payload[1] = pDiscoverCmd->maxCmdID;
// 1633 
// 1634   // Send message for either commands received or generated
// 1635   if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 1636   {
// 1637     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
// 1638                                 direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
// 1639   }
// 1640   else  // generated
// 1641   {
// 1642     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
// 1643                                 direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
// 1644   }
// 1645 
// 1646   return ( status );
// 1647 }
// 1648 
// 1649 /*********************************************************************
// 1650  * @fn      zcl_SendDiscoverCmdsRspCmd
// 1651  *
// 1652  * @brief   Send a Discover Commands Response command
// 1653  *
// 1654  * @param   dstAddr - destination address
// 1655  * @param   clusterID - cluster ID
// 1656  * @param   pDiscoverRspCmd - response command to be sent
// 1657  * @param   direction - direction of the command
// 1658  * @param   seqNum - transaction sequence number
// 1659  *
// 1660  * @return  ZSuccess if OK
// 1661  */
// 1662 ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1663                                       uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
// 1664                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1665 {
// 1666   uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
// 1667   uint8 *pCmdBuf;
// 1668   uint8 i;
// 1669   ZStatus_t status = ZSuccess;
// 1670 
// 1671   // allocate memory
// 1672   pCmdBuf = zcl_mem_alloc( payloadSize );
// 1673   if ( pCmdBuf != NULL )
// 1674   {
// 1675     uint8 *pBuf = pCmdBuf;
// 1676 
// 1677     // Load the buffer - serially
// 1678     *pBuf++ = pDiscoverRspCmd->discComplete;
// 1679     for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
// 1680     {
// 1681       *pBuf++ = pDiscoverRspCmd->pCmdID[i];
// 1682     }
// 1683 
// 1684     // Send response message for either commands received or generated
// 1685     if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 1686     {
// 1687       status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
// 1688                                 direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
// 1689     }
// 1690     else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
// 1691     {
// 1692       status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
// 1693                                 direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
// 1694     }
// 1695 
// 1696     zcl_mem_free( pCmdBuf );
// 1697   }
// 1698   else
// 1699   {
// 1700     status = ZMemError;
// 1701   }
// 1702 
// 1703   return ( status );
// 1704 }
// 1705 
// 1706 /*********************************************************************
// 1707  * @fn      zcl_SendDiscoverAttrsCmd
// 1708  *
// 1709  * @brief   Send a Discover Attributes command
// 1710  *
// 1711  * @param   dstAddr - destination address
// 1712  * @param   clusterID - cluster ID
// 1713  * @param   pDiscoverCmd - discover command to be sent
// 1714  * @param   direction - direction of the command
// 1715  * @param   seqNum - transaction sequence number
// 1716  *
// 1717  * @return  ZSuccess if OK
// 1718  */
// 1719 ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1720                             uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
// 1721                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1722 {
// 1723   uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
// 1724   uint8 *buf;
// 1725   ZStatus_t status;
// 1726 
// 1727   buf = zcl_mem_alloc( dataLen );
// 1728   if ( buf != NULL )
// 1729   {
// 1730     // Load the buffer - serially
// 1731     uint8 *pBuf = buf;
// 1732     *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
// 1733     *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
// 1734     *pBuf++ = pDiscoverCmd->maxAttrIDs;
// 1735 
// 1736     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
// 1737                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1738     zcl_mem_free( buf );
// 1739   }
// 1740   else
// 1741   {
// 1742     status = ZMemError;
// 1743   }
// 1744 
// 1745   return ( status );
// 1746 }
// 1747 
// 1748 /*********************************************************************
// 1749  * @fn      zcl_SendDiscoverAttrsRspCmd
// 1750  *
// 1751  * @brief   Send a Discover Attributes Response command
// 1752  *
// 1753  * @param   dstAddr - destination address
// 1754  * @param   clusterID - cluster ID
// 1755  * @param   reportRspCmd - report response command to be sent
// 1756  * @param   direction - direction of the command
// 1757  * @param   seqNum - transaction sequence number
// 1758  *
// 1759  * @return  ZSuccess if OK
// 1760  */
// 1761 ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1762                           uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
// 1763                           uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1764 {
// 1765   uint16 dataLen = 1; // Discovery complete
// 1766   uint8 *buf;
// 1767   ZStatus_t status;
// 1768 
// 1769   // calculate the size of the command
// 1770   dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
// 1771 
// 1772   buf = zcl_mem_alloc( dataLen );
// 1773   if ( buf != NULL )
// 1774   {
// 1775     // Load the buffer - serially
// 1776     uint8 i;
// 1777     uint8 *pBuf = buf;
// 1778 
// 1779     *pBuf++ = pDiscoverRspCmd->discComplete;
// 1780 
// 1781     for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
// 1782     {
// 1783       *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
// 1784       *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
// 1785       *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
// 1786     }
// 1787 
// 1788     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
// 1789                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1790     zcl_mem_free( buf );
// 1791   }
// 1792   else
// 1793   {
// 1794     status = ZMemError;
// 1795   }
// 1796 
// 1797   return ( status );
// 1798 }
// 1799 
// 1800 /*********************************************************************
// 1801  * @fn      zcl_SendDiscoverAttrsExt
// 1802  *
// 1803  * @brief   Send a Discover Attributes Extended command
// 1804  *
// 1805  * @param   dstAddr - destination address
// 1806  * @param   clusterID - cluster ID
// 1807  * @param   pDiscoverAttrsExt:
// 1808  *            - startAttrID: the first attribute to be selected
// 1809  *            - maxAttrIDs: maximum number of returned attributes
// 1810  * @param   direction - direction of the command
// 1811  * @param   seqNum - transaction sequence number
// 1812  *
// 1813  * @return  ZSuccess if OK
// 1814  */
// 1815 ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
// 1816                             uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
// 1817                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1818 {
// 1819   uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
// 1820   ZStatus_t status;
// 1821 
// 1822   // Load the buffer - serially
// 1823   buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
// 1824   buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
// 1825   buf[2] = pDiscoverAttrsExt->maxAttrIDs;
// 1826 
// 1827   status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
// 1828                             direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
// 1829 
// 1830   return ( status );
// 1831 }
// 1832 
// 1833 /*********************************************************************
// 1834  * @fn      zcl_SendDiscoverAttrsExtRsp
// 1835  *
// 1836  * @brief   Send a Discover Attributes Extended Response command
// 1837  *
// 1838  * @param   dstAddr - destination address
// 1839  * @param   clusterID - cluster ID
// 1840  * @param   pDiscoverRspCmd:
// 1841  *            - discComplete: indicates whether all requested attributes returned
// 1842  *            - attrID: attribute ID
// 1843  *            - attrDataType: data type of the given attribute
// 1844  *            - attrAccessControl: access control of the given attribute
// 1845  * @param   direction - direction of the command
// 1846  * @param   seqNum - transaction sequence number
// 1847  *
// 1848  * @return  ZSuccess if OK
// 1849  */
// 1850 ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
// 1851                                       uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
// 1852                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1853 {
// 1854   uint8 *buf;
// 1855   uint8 i;
// 1856   uint16 dataLen = 1; // Discovery complete
// 1857   ZStatus_t status;
// 1858 
// 1859   // calculate the size of the command
// 1860   dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
// 1861 
// 1862   buf = zcl_mem_alloc( dataLen );
// 1863   if ( buf != NULL )
// 1864   {
// 1865     // Load the buffer - serially
// 1866     uint8 *pBuf = buf;
// 1867     *pBuf++ = pDiscoverRspCmd->discComplete;
// 1868     for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
// 1869     {
// 1870       *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
// 1871       *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
// 1872       *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
// 1873       *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
// 1874     }
// 1875 
// 1876     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
// 1877                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1878     zcl_mem_free( buf );
// 1879   }
// 1880   else
// 1881   {
// 1882     status = ZMemError;
// 1883   }
// 1884 
// 1885   return ( status );
// 1886 }
// 1887 #endif // ZCL_DISCOVER
// 1888 
// 1889 /*********************************************************************
// 1890  * @fn      zcl_ProcessMessageMSG
// 1891  *
// 1892  * @brief   Data message processor callback.  This function processes
// 1893  *          any incoming data - probably from other devices.  So, based
// 1894  *          on cluster ID, perform the intended action.
// 1895  *
// 1896  * @param   pkt - incoming message
// 1897  *
// 1898  * @return  zclProcMsgStatus_t
// 1899  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1900 zclProcMsgStatus_t zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
zcl_ProcessMessageMSG:
          CFI Block cfiBlock131 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
        CODE
// 1901 {
        FUNCALL zcl_ProcessMessageMSG, zclParseHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_DeviceOperational
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, StubAPS_InterPan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclGetClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclSetSecurityOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclSetSecurityOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1902   endPointDesc_t *epDesc;
// 1903   zclIncoming_t inMsg;
// 1904   zclLibPlugin_t *pInPlugin;
// 1905   zclDefaultRspCmd_t defautlRspCmd;
// 1906   uint8 options;
// 1907   uint8 securityEnable;
// 1908   uint8 interPanMsg;
// 1909   ZStatus_t status = ZFailure;
// 1910   uint8 defaultResponseSent = FALSE;
        MOV     ?V0,#0x0
// 1911 
// 1912   if ( pkt->cmd.DataLength == 0 )
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_119:
        JNZ     ??zcl_ProcessMessageMSG_0
// 1913   {
// 1914     return ( ZCL_PROC_INVALID );   // Error, ignore the message
        MOV     R1,#0x1
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 1915   }
// 1916 
// 1917   // Initialize
// 1918   rawAFMsg = (afIncomingMSGPacket_t *)pkt;
??zcl_ProcessMessageMSG_0:
        MOV     DPTR,#rawAFMsg
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1919   inMsg.msg = pkt;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1920   inMsg.attrCmd = NULL;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1921   inMsg.pData = NULL;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1922   inMsg.pDataLen = 0;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1923 
// 1924   inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
        MOV     A,R6
        ADD     A,#0x22
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     ?V2,R0
        MOV     ?V3,R1
        ; Setup parameters for call to function zclParseHdr
        MOV     DPL,R0
        MOV     DPH,A
        LCALL   ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_113:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??zclParseHdr::?relay`; Banked call to: zclParseHdr
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R0,?V4
        MOV     R1,?V5
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
// 1925   inMsg.pDataLen = pkt->cmd.DataLength;
// 1926   inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
??CrossCallReturnLabel_106:
        MOV     A,R6
        ADD     A,#0x20
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_98:
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R1,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
// 1927 
// 1928   // Temporary workaround to allow callback functions access to the 
// 1929   // transaction sequence number.  Callback functions will call 
// 1930   // zcl_getParsedTransSeqNum() to retrieve this number.
// 1931   savedZCLTransSeqNum = inMsg.hdr.transSeqNum;
??CrossCallReturnLabel_107:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#savedZCLTransSeqNum
        MOVX    @DPTR,A
// 1932   
// 1933   // Find the wanted endpoint
// 1934   epDesc = afFindEndPointDesc( pkt->endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV     R1,A
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
// 1935   if ( epDesc == NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     ??zcl_ProcessMessageMSG_2
// 1936   {
// 1937     rawAFMsg = NULL;
        MOV     DPTR,#rawAFMsg
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1938     return ( ZCL_PROC_EP_NOT_FOUND );   // Error, ignore the message
        MOV     R1,#0x2
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 1939   }
// 1940 
// 1941   if ( ( epDesc->simpleDesc == NULL ) ||
// 1942        ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
// 1943                                 inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
??zcl_ProcessMessageMSG_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ??Subroutine52_0 & 0xFFFF
??CrossCallReturnLabel_123:
        JZ      ??zcl_ProcessMessageMSG_3
        ; Setup parameters for call to function zcl_DeviceOperational
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x3
        MOV     R4,A
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   `??zcl_DeviceOperational::?relay`; Banked call to: zcl_DeviceOperational
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,R1
        JNZ     ??zcl_ProcessMessageMSG_4
// 1944   {
// 1945     rawAFMsg = NULL;
??zcl_ProcessMessageMSG_3:
        MOV     DPTR,#rawAFMsg
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1946     return ( ZCL_PROC_NOT_OPERATIONAL ); // Error, ignore the message
        MOV     R1,#0x3
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 1947   }
// 1948 
// 1949 #if defined ( INTER_PAN )
// 1950   if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
??zcl_ProcessMessageMSG_4:
        ; Setup parameters for call to function StubAPS_InterPan
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x10
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL   `??StubAPS_InterPan::?relay`; Banked call to: StubAPS_InterPan
        MOV     A,R1
        JZ      ??zcl_ProcessMessageMSG_5
// 1951   {
// 1952     // No foundation command is supported thru Inter-PAN communication.
// 1953     // But the Light Link cluster uses a different Frame Control format
// 1954     // for it's Inter-PAN messages, where the messages could be confused
// 1955     // with the foundation commands.
// 1956     if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x3
        JNZ     ??zcl_ProcessMessageMSG_6
// 1957     {
// 1958       rawAFMsg = NULL;
        MOV     DPTR,#rawAFMsg
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1959       return ( ZCL_PROC_INTERPAN_FOUNDATION_CMD );
        MOV     R1,#0x4
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 1960     }
// 1961 
// 1962     interPanMsg = TRUE;
??zcl_ProcessMessageMSG_6:
        MOV     ?V1,#0x1
// 1963     options = AF_TX_OPTIONS_NONE;
        MOV     R2,#0x0
        SJMP    ??zcl_ProcessMessageMSG_7
// 1964   }
// 1965   else
// 1966 #endif
// 1967   {
// 1968     interPanMsg = FALSE;
??zcl_ProcessMessageMSG_5:
        MOV     ?V1,#0x0
// 1969     options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
        ; Setup parameters for call to function zclGetClusterOption
        LCALL   ?Subroutine22 & 0xFFFF
// 1970   }
??CrossCallReturnLabel_38:
        LCALL   `??zclGetClusterOption::?relay`; Banked call to: zclGetClusterOption
        MOV     A,R1
        MOV     R2,A
// 1971 
// 1972   // Find the appropriate plugin
// 1973   pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
??zcl_ProcessMessageMSG_7:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_116:
        MOV     DPTR,#plugins
        SJMP    ??zcl_ProcessMessageMSG_8
??zcl_ProcessMessageMSG_9:
        MOV     DPL,R0
        MOV     DPH,R1
??zcl_ProcessMessageMSG_8:
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_120:
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_10 & 0xFFFF
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
        CLR     C
        MOV     A,R4
        SUBB    A,?V2
        MOV     A,R5
        SUBB    A,?V3
        JC      ??zcl_ProcessMessageMSG_9
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R5
        JC      ??zcl_ProcessMessageMSG_9
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x7
        JNZ     ??zcl_ProcessMessageMSG_11
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xb
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_12 & 0xFFFF
// 1974 
// 1975   // Local and remote Security options must match except for Default Response command
// 1976   if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
// 1977   {
// 1978     securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
??zcl_ProcessMessageMSG_11:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.6
        JC      $+5
        LJMP    ??zcl_ProcessMessageMSG_12 & 0xFFFF
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zcl_ProcessMessageMSG_12 & 0xFFFF
// 1979 
// 1980     // Make sure that Clusters specifically defined to use security are received secure,
// 1981     // any other cluster that wants to use APS security will be allowed
// 1982     if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
// 1983     {
// 1984       if ( UNICAST_MSG( inMsg.msg ) )
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_43:
        JZ      $+5
        LJMP    ??zcl_ProcessMessageMSG_13 & 0xFFFF
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_124:
        JZ      $+5
        LJMP    ??zcl_ProcessMessageMSG_13 & 0xFFFF
// 1985       {
// 1986         // Send a Default Response command back with no Application Link Key security
// 1987         zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V1,A
        MOV     A,R6
        ADD     A,#0x14
        MOV     R6,A
        JNC     ??zcl_ProcessMessageMSG_14
        INC     R7
??zcl_ProcessMessageMSG_14:
        ; Setup parameters for call to function zclSetSecurityOption
        MOV     R4,#0x0
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_49:
        LCALL   `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
// 1988 
// 1989         defautlRspCmd.statusCode = status;
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1990         defautlRspCmd.commandID = inMsg.hdr.commandID;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1991         zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
// 1992                                inMsg.msg->clusterId, &defautlRspCmd,
// 1993                                !inMsg.hdr.fc.direction, true,
// 1994                                inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V2,#0x1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_55:
        MOV     ?V2,A
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_30:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_51:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL   `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 1995 
// 1996         zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
        ; Setup parameters for call to function zclSetSecurityOption
        MOV     R4,#0x1
        LCALL   ?Subroutine28 & 0xFFFF
// 1997       }
??CrossCallReturnLabel_50:
        LCALL   `??zclSetSecurityOption::?relay`; Banked call to: zclSetSecurityOption
// 1998 
// 1999       rawAFMsg = NULL;
??zcl_ProcessMessageMSG_13:
        MOV     DPTR,#rawAFMsg
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2000       return ( ZCL_PROC_NOT_SECURE );   // Error, ignore the message
        MOV     R1,#0x5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2001     }
// 2002   }
??zcl_ProcessMessageMSG_10:
        MOV     R0,#0x0
        MOV     R1,#0x0
// 2003 
// 2004   // Is this a foundation type message
// 2005   if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
??zcl_ProcessMessageMSG_12:
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.0
        JNC     $+5
        LJMP    ??zcl_ProcessMessageMSG_15 & 0xFFFF
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x3
        JZ      $+5
        LJMP    ??zcl_ProcessMessageMSG_15 & 0xFFFF
// 2006   {
// 2007     if ( inMsg.hdr.fc.manuSpecific )
        MOVX    A,@DPTR
        ANL     A,#0x4
        JZ      ??zcl_ProcessMessageMSG_16
// 2008     {
// 2009       // We don't support any manufacturer specific command
// 2010       status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
        MOV     R6,#-0x7c
        LJMP    ??zcl_ProcessMessageMSG_17 & 0xFFFF
// 2011     }
// 2012     else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
// 2013               ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
??zcl_ProcessMessageMSG_16:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x17
        JC      $+5
        LJMP    ??zcl_ProcessMessageMSG_18 & 0xFFFF
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ?S_SHL
        MOV     A,#zclCmdTable & 0xff
        ADD     A,?V2
        MOV     DPL,A
        MOV     A,#(zclCmdTable >> 8) & 0xff
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_73:
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_18 & 0xFFFF
// 2014     {
// 2015       zclParseCmd_t parseCmd;
// 2016 
// 2017       parseCmd.endpoint = pkt->endPoint;
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_72:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2018       parseCmd.dataLen = inMsg.pDataLen;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
// 2019       parseCmd.pData = inMsg.pData;
??CrossCallReturnLabel_108:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_109:
        ; Setup parameters for indirect call
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP101_8
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_27:
        LCALL   ?S_SHL
        MOV     A,#zclCmdTable & 0xff
        ADD     A,?V2
        MOV     DPL,A
        MOV     A,#(zclCmdTable >> 8) & 0xff
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_86:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     DPH,A
        POP     DPL
          CFI CFA_SP SP+0
// 2020 
// 2021       // Parse the command, remember that the return value is a pointer to allocated memory
// 2022       inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
        LCALL   ?CALL_IND
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R0,?V2
        MOV     R1,?V3
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
// 2023       if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
??CrossCallReturnLabel_110:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zcl_ProcessMessageMSG_19
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?S_SHL
        MOV     A,#(zclCmdTable + 2) & 0xff
        ADD     A,?V2
        MOV     DPL,A
        MOV     A,#((zclCmdTable + 2) >> 8) & 0xff
        LCALL   ?Subroutine39 & 0xFFFF
??CrossCallReturnLabel_74:
        JZ      ??zcl_ProcessMessageMSG_20
// 2024       {
// 2025         // Process the command
// 2026         if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine19 & 0xFFFF
// 2027         {
// 2028           // Couldn't find attribute in the table.
// 2029         }
// 2030       }
??CrossCallReturnLabel_29:
        LCALL   ?S_SHL
        MOV     A,#(zclCmdTable + 2) & 0xff
        ADD     A,?V2
        MOV     DPL,A
        MOV     A,#((zclCmdTable + 2) >> 8) & 0xff
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_87:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     DPH,A
        POP     DPL
          CFI CFA_SP SP+0
        LCALL   ?CALL_IND
// 2031 
// 2032       // Free the buffer
// 2033       if ( inMsg.attrCmd )
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine53_0 & 0xFFFF
??CrossCallReturnLabel_121:
        JZ      ??zcl_ProcessMessageMSG_19
// 2034       {
// 2035         zcl_mem_free( inMsg.attrCmd );
??zcl_ProcessMessageMSG_20:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine49_0 & 0xFFFF
// 2036       }
??CrossCallReturnLabel_97:
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 2037 
// 2038       if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
??zcl_ProcessMessageMSG_19:
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JZ      ??zcl_ProcessMessageMSG_21
        XRL     A,#0x2
        JZ      ??zcl_ProcessMessageMSG_21
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??zcl_ProcessMessageMSG_21
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      ??zcl_ProcessMessageMSG_21
        MOVX    A,@DPTR
        XRL     A,#0x8
        JZ      ??zcl_ProcessMessageMSG_21
        MOVX    A,@DPTR
        XRL     A,#0xc
        JZ      ??zcl_ProcessMessageMSG_21
        MOVX    A,@DPTR
        XRL     A,#0x11
        JZ      ??zcl_ProcessMessageMSG_21
        MOVX    A,@DPTR
        XRL     A,#0x13
        JZ      ??zcl_ProcessMessageMSG_21
        MOVX    A,@DPTR
        XRL     A,#0x15
        JZ      ??zcl_ProcessMessageMSG_21
        MOVX    A,@DPTR
        XRL     A,#0xb
        JZ      ??zcl_ProcessMessageMSG_21
// 2039       {
// 2040         rawAFMsg = NULL;
// 2041         return ( ZCL_PROC_SUCCESS ); // We're done
// 2042       }
// 2043 
// 2044       status = ZSuccess;
        MOV     R6,#0x0
        SJMP    ??zcl_ProcessMessageMSG_17
// 2045     }
// 2046     else
// 2047     {
// 2048       // Unsupported message
// 2049       status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
??zcl_ProcessMessageMSG_18:
        MOV     R6,#-0x7e
        SJMP    ??zcl_ProcessMessageMSG_17
// 2050     }
// 2051   }
// 2052   else  // Not a foundation type message, so it must be specific to the cluster ID.
// 2053   {
// 2054     if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
??zcl_ProcessMessageMSG_15:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zcl_ProcessMessageMSG_22
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_36:
        JZ      ??zcl_ProcessMessageMSG_22
// 2055     {
// 2056       // The return value of the plugin function will be
// 2057       //  ZSuccess - Supported and need default response
// 2058       //  ZFailure - Unsupported
// 2059       //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
// 2060       //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
// 2061       //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
// 2062       //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
// 2063       status = pInPlugin->pfnIncomingHdlr( &inMsg );
        ; Setup parameters for indirect call
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL   ?CALL_IND
        MOV     A,R1
        MOV     R6,A
// 2064       if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
        MOV     A,#-0x1
        XRL     A,R6
        JZ      ??zcl_ProcessMessageMSG_21
        MOV     A,?V1
        MOV     C,0xE0 /* A   */.0
        JNC     ??zcl_ProcessMessageMSG_23
        MOV     A,R6
        JNZ     ??zcl_ProcessMessageMSG_23
// 2065       {
// 2066         rawAFMsg = NULL;
??zcl_ProcessMessageMSG_21:
        MOV     DPTR,#rawAFMsg
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2067         return ( ZCL_PROC_SUCCESS ); // We're done
        MOV     R1,A
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2068       }
// 2069     }
// 2070 
// 2071     if ( status == ZFailure )
??zcl_ProcessMessageMSG_23:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??zcl_ProcessMessageMSG_17
// 2072     {
// 2073       // Unsupported message
// 2074       if ( inMsg.hdr.fc.manuSpecific )
??zcl_ProcessMessageMSG_22:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x4
        JZ      ??zcl_ProcessMessageMSG_24
// 2075       {
// 2076         status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
        MOV     R6,#-0x7d
        SJMP    ??zcl_ProcessMessageMSG_17
// 2077       }
// 2078       else
// 2079       {
// 2080         status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
??zcl_ProcessMessageMSG_24:
        MOV     R6,#-0x7f
// 2081       }
// 2082     }
// 2083   }
// 2084 
// 2085   if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
??zcl_ProcessMessageMSG_17:
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_44:
        JNZ     ??zcl_ProcessMessageMSG_25
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_125:
        JNZ     ??zcl_ProcessMessageMSG_25
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x10
        JNZ     ??zcl_ProcessMessageMSG_25
// 2086   {
// 2087     // Send a Default Response command back
// 2088     defautlRspCmd.statusCode = status;
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
// 2089     defautlRspCmd.commandID = inMsg.hdr.commandID;
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 2090     zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
// 2091                            inMsg.msg->clusterId, &defautlRspCmd,
// 2092                            !inMsg.hdr.fc.direction, true,
// 2093                            inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_68:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V0,#0x1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_56:
        MOV     ?V0,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V0,R0
        MOV     ?V1,R1
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_46:
        LCALL   `??zcl_SendDefaultRspCmd::?relay`; Banked call to: zcl_SendDefaultRspCmd
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 35)
// 2094     defaultResponseSent = TRUE;
        MOV     ?V0,#0x1
// 2095   }
// 2096 
// 2097   rawAFMsg = NULL;
??zcl_ProcessMessageMSG_25:
        MOV     DPTR,#rawAFMsg
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2098   if ( status == ZSuccess )
        MOV     A,R6
        JNZ     ??zcl_ProcessMessageMSG_26
// 2099   {
// 2100     return ( ZCL_PROC_SUCCESS );
        MOV     R1,#0x0
        SJMP    ??zcl_ProcessMessageMSG_1
// 2101   }
// 2102   else if ( status == ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND )
??zcl_ProcessMessageMSG_26:
        MOV     A,#-0x7c
        XRL     A,R6
        JNZ     ??zcl_ProcessMessageMSG_27
// 2103   {
// 2104     if ( defaultResponseSent )
        MOV     A,?V0
        MOV     C,0xE0 /* A   */.0
        JNC     ??zcl_ProcessMessageMSG_28
// 2105     {
// 2106       return ( ZCL_PROC_MANUFACTURER_SPECIFIC_DR );
        MOV     R1,#0x7
        SJMP    ??zcl_ProcessMessageMSG_1
// 2107     }
// 2108     else
// 2109     {
// 2110       return ( ZCL_PROC_MANUFACTURER_SPECIFIC );
??zcl_ProcessMessageMSG_28:
        MOV     R1,#0x6
        SJMP    ??zcl_ProcessMessageMSG_1
// 2111     }
// 2112   }
// 2113   else
// 2114   {
// 2115     if ( defaultResponseSent )
??zcl_ProcessMessageMSG_27:
        MOV     A,?V0
        MOV     C,0xE0 /* A   */.0
        JNC     ??zcl_ProcessMessageMSG_29
// 2116     {
// 2117       return ( ZCL_PROC_NOT_HANDLED_DR );
        MOV     R1,#0x9
        SJMP    ??zcl_ProcessMessageMSG_1
// 2118     }
// 2119     else
// 2120     {
// 2121       return ( ZCL_PROC_NOT_HANDLED );
??zcl_ProcessMessageMSG_29:
        MOV     R1,#0x8
??zcl_ProcessMessageMSG_1:
        MOV     A,#0x15
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2122     }
// 2123   }
        LJMP    ?Subroutine3 & 0xFFFF
// 2124 }
          CFI EndBlock cfiBlock131

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond132 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function zcl_ProcessMessageMSG
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker134 Using cfiCommon1
          CFI (cfiPicker134) NoFunction
          CFI (cfiPicker134) Picker
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiPicker134

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond135 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function zcl_ProcessMessageMSG
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zcl_ProcessMessageMSG
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_73
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-4
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function zcl_ProcessMessageMSG
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_88, ??CrossCallReturnLabel_74
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-4
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker139 Using cfiCommon1
          CFI (cfiPicker139) NoFunction
          CFI (cfiPicker139) Picker
        ADDC    A,?V3
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        RET
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiPicker139

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond140 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_71
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function zcl_ProcessMessageMSG
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker142 Using cfiCommon1
          CFI (cfiPicker142) NoFunction
          CFI (cfiPicker142) Picker
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_85:
        RET
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiPicker142

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond143 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_71
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function zcl_ProcessMessageMSG
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_85, ??CrossCallReturnLabel_72
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-4
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zcl_ProcessMessageMSG
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_37
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-4
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function zcl_ProcessMessageMSG
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_84, ??CrossCallReturnLabel_38
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-4
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker147 Using cfiCommon1
          CFI (cfiPicker147) NoFunction
          CFI (cfiPicker147) Picker
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiPicker147

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function zcl_SendDefaultRspCmd
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function zcl_SendDefaultRspCmd
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-2
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function zcl_SendDefaultRspCmd
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-2
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function zcl_ProcessMessageMSG
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        MOVX    A,@DPTR
        MOV     ?V0,A
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond153 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function zcl_ProcessMessageMSG
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-2
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiPicker155 Using cfiCommon1
          CFI (cfiPicker155) NoFunction
          CFI (cfiPicker155) Picker
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        XRL     A,#0x1
        ANL     A,#0x1
        RET
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiPicker155

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond156 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function zcl_ProcessMessageMSG
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond157) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond157) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond157) CFA_SP SP+-2
          CFI (cfiCond157) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiPicker158 Using cfiCommon1
          CFI (cfiPicker158) NoFunction
          CFI (cfiPicker158) Picker
        MOVX    A,@DPTR
        ADD     A,#0x6
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,#0x7
        RET
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiPicker158

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond159 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function zcl_ProcessMessageMSG
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+-2
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker161 Using cfiCommon1
          CFI (cfiPicker161) NoFunction
          CFI (cfiPicker161) Picker
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiPicker161

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond162 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_115
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function zcl_ProcessMessageMSG
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+-2
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker164 Using cfiCommon1
          CFI (cfiPicker164) NoFunction
          CFI (cfiPicker164) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiPicker164
        REQUIRE ??Subroutine51_0
        ; // Fall through to label ??Subroutine51_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine51_0:
          CFI Block cfiCond165 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_112
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function zcl_ProcessMessageMSG
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond166) CFA_SP SP+-2
          CFI (cfiCond166) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function zclFindAttrRec
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-4
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function zcl_HandleExternal
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function zcl_ProcessMessageMSG
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+-2
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker170 Using cfiCommon1
          CFI (cfiPicker170) NoFunction
          CFI (cfiPicker170) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiPicker170

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond171 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function zcl_ProcessMessageMSG
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiPicker173 Using cfiCommon1
          CFI (cfiPicker173) NoFunction
          CFI (cfiPicker173) Picker
        LCALL   ?Subroutine43 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV     R1,A
        RET
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiPicker173

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond174 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_82
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function zcl_ProcessMessageMSG
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_45
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+-4
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function zcl_ProcessMessageMSG
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_83, ??CrossCallReturnLabel_46
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+-4
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiPicker177 Using cfiCommon1
          CFI (cfiPicker177) NoFunction
          CFI (cfiPicker177) Picker
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiPicker177

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond178 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function zcl_ProcessMessageMSG
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker180 Using cfiCommon1
          CFI (cfiPicker180) NoFunction
          CFI (cfiPicker180) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiPicker180

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond181 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function zcl_ProcessMessageMSG
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker183 Using cfiCommon1
          CFI (cfiPicker183) NoFunction
          CFI (cfiPicker183) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_101:
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     R1,A
        RET
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiPicker183

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond184 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function zcl_ProcessMessageMSG
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiPicker186 Using cfiCommon1
          CFI (cfiPicker186) NoFunction
          CFI (cfiPicker186) Picker
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_81:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x7
        RET
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiPicker186

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond187 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function zcl_ProcessMessageMSG
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_30
          CFI (cfiCond188) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond188) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond188) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond188) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond188) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond188) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond188) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond188) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond188) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond188) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond188) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond188) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond188) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond188) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond188) CFA_SP SP+-4
          CFI (cfiCond188) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function zcl_ProcessMessageMSG
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_81, ??CrossCallReturnLabel_31
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+-4
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 42)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function zcl_ProcessMessageMSG
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_124
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-4
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function zcl_ProcessMessageMSG
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_125
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+-4
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker192 Using cfiCommon1
          CFI (cfiPicker192) NoFunction
          CFI (cfiPicker192) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiPicker192

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond193 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function zcl_ProcessMessageMSG
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function zcl_ProcessMessageMSG
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function zcl_ProcessMessageMSG
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOVX    A,@DPTR
        MOV     ?V2,A
        MOV     ?V3,#0x0
        MOV     A,#0x2
        MOV     R0,#?V2
        RET
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_124
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function zcl_ProcessMessageMSG
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_80:
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200
        REQUIRE ??Subroutine52_0
        ; // Fall through to label ??Subroutine52_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine52_0:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_122
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function zcl_ProcessMessageMSG
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function zcl_ProcessMessageMSG
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function zcl_ProcessMessageMSG
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker205 Using cfiCommon1
          CFI (cfiPicker205) NoFunction
          CFI (cfiPicker205) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiPicker205
        REQUIRE ??Subroutine53_0
        ; // Fall through to label ??Subroutine53_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine53_0:
          CFI Block cfiCond206 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_117
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function zcl_SendCommand
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond207) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond207) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond207) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond207) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond207) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond207) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond207) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond207) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond207) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond207) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond207) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond207) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond207) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function zcl_ProcessMessageMSG
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function zcl_ProcessMessageMSG
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond209) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond209) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond209) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond209) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond209) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond209) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond209) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond209) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond209) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond209) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond209) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond209) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond209) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond209) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond209) CFA_SP SP+-2
          CFI (cfiCond209) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function zcl_ProcessMessageMSG
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond210) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond210) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond210) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond210) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond210) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond210) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond210) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond210) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond210) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond210) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond210) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond210) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond210) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond210) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond210) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function zcl_SendCommand
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond211) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond211) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond211) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond211) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond211) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond211) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond211) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function zcl_ProcessMessageMSG
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-2
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function zcl_ProcessMessageMSG
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function zcl_ProcessMessageMSG
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiPicker215 Using cfiCommon1
          CFI (cfiPicker215) NoFunction
          CFI (cfiPicker215) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiPicker215
// 2125 
// 2126 /*********************************************************************
// 2127  * PRIVATE FUNCTIONS
// 2128  *********************************************************************/
// 2129 
// 2130 /*********************************************************************
// 2131  * @fn      zclParseHdr
// 2132  *
// 2133  * @brief   Parse header of the ZCL format
// 2134  *
// 2135  * @param   hdr - place to put the frame control information
// 2136  * @param   pData - incoming buffer to parse
// 2137  *
// 2138  * @return  pointer past the header
// 2139  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2140 uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
zclParseHdr:
          CFI Block cfiBlock216 Using cfiCommon0
          CFI Function zclParseHdr
        CODE
// 2141 {
        FUNCALL zclParseHdr, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2142   // Clear the header
// 2143   zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 2144 
// 2145   // Parse the Frame Control
// 2146   hdr->fc.type = zcl_FCType( *pData );
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ANL     A,#0xfc
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ANL     A,#0x3
        MOV     R0,A
        MOV     A,R2
        ORL     A,R0
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine13 & 0xFFFF
// 2147   hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
??CrossCallReturnLabel_111:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclParseHdr_0
        SETB    B.0
        SJMP    ??zclParseHdr_1
??zclParseHdr_0:
        CLR     B.0
??zclParseHdr_1:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ANL     A,#0xfb
        MOVX    @DPTR,A
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     ?V2,A
        MOV     ?V3,#0x0
        MOV     A,#0x2
        MOV     R0,#?V2
        LCALL   ?S_SHL
        MOVX    A,@DPTR
        ORL     A,?V2
        LCALL   ?Subroutine15 & 0xFFFF
// 2148   if ( zcl_FCDirection( *pData ) )
??CrossCallReturnLabel_19:
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.3
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        JNC     ??zclParseHdr_2
// 2149   {
// 2150     hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
        ORL     A,#0x8
        SJMP    ??zclParseHdr_3
// 2151   }
// 2152   else
// 2153   {
// 2154     hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
??zclParseHdr_2:
        ANL     A,#0xf7
// 2155   }
??zclParseHdr_3:
        LCALL   ?Subroutine15 & 0xFFFF
// 2156 
// 2157   hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
??CrossCallReturnLabel_20:
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.4
        JNC     ??zclParseHdr_4
        SETB    B.0
        SJMP    ??zclParseHdr_5
??zclParseHdr_4:
        CLR     B.0
??zclParseHdr_5:
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ANL     A,#0xef
        MOVX    @DPTR,A
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     ?V2,A
        MOV     A,#0x4
        MOV     R0,#?V2
        LCALL   ?S_SHL
        MOVX    A,@DPTR
        ORL     A,?V2
        LCALL   ?Subroutine11 & 0xFFFF
// 2158   pData++;  // move past the frame control field
??CrossCallReturnLabel_11:
        MOV     R6,DPL
        MOV     R7,DPH
// 2159 
// 2160   // parse the manfacturer code
// 2161   if ( hdr->fc.manuSpecific )
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ANL     A,#0x4
        JZ      ??zclParseHdr_6
// 2162   {
// 2163     hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine50_0 & 0xFFFF
// 2164     pData += 2;
??CrossCallReturnLabel_104:
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        JNC     ??zclParseHdr_6
        INC     R7
// 2165   }
// 2166 
// 2167   // parse the Transaction Sequence Number
// 2168   hdr->transSeqNum = *pData++;
??zclParseHdr_6:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ?Subroutine11 & 0xFFFF
// 2169 
// 2170   // parse the Cluster's command ID
// 2171   hdr->commandID = *pData++;
??CrossCallReturnLabel_12:
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_54:
        INC     DPTR
        MOVX    @DPTR,A
// 2172 
// 2173   // Should point to the frame payload
// 2174   return ( pData );
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LJMP    ?Subroutine1 & 0xFFFF
// 2175 }
          CFI EndBlock cfiBlock216

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond217 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function zclParseHdr
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker219 Using cfiCommon1
          CFI (cfiPicker219) NoFunction
          CFI (cfiPicker219) Picker
        MOVX    A,@DPTR
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiPicker219

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond220 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function zclParseHdr
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond221) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function zclParseHdr
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker223 Using cfiCommon1
          CFI (cfiPicker223) NoFunction
          CFI (cfiPicker223) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiPicker223
// 2176 
// 2177 /*********************************************************************
// 2178  * @fn      zclBuildHdr
// 2179  *
// 2180  * @brief   Build header of the ZCL format
// 2181  *
// 2182  * @param   hdr - outgoing header information
// 2183  * @param   pData - outgoing header space
// 2184  *
// 2185  * @return  pointer past the header
// 2186  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2187 static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
zclBuildHdr:
          CFI Block cfiBlock224 Using cfiCommon0
          CFI Function zclBuildHdr
        CODE
// 2188 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 2189   // Build the Frame Control byte
// 2190   *pData = hdr->fc.type;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ANL     A,#0x3
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine54_0 & 0xFFFF
// 2191   *pData |= hdr->fc.manuSpecific << 2;
??CrossCallReturnLabel_128:
        ANL     A,#0x4
        LCALL   ?Subroutine16 & 0xFFFF
// 2192   *pData |= hdr->fc.direction << 3;
??CrossCallReturnLabel_126:
        ANL     A,#0x8
        LCALL   ?Subroutine16 & 0xFFFF
// 2193   *pData |= hdr->fc.disableDefaultRsp << 4;
??CrossCallReturnLabel_127:
        ANL     A,#0x10
        MOV     R0,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        ORL     A,R0
        MOVX    @DPTR,A
// 2194   pData++;  // move past the frame control field
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
// 2195 
// 2196   // Add the manfacturer code
// 2197   if ( hdr->fc.manuSpecific )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ANL     A,#0x4
        JZ      ??zclBuildHdr_0
// 2198   {
// 2199     *pData++ = LO_UINT16( hdr->manuCode );
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine14 & 0xFFFF
// 2200     *pData++ = HI_UINT16( hdr->manuCode );
// 2201   }
??CrossCallReturnLabel_18:
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_58:
        MOV     R4,A
        JNC     ??zclBuildHdr_0
        INC     R5
// 2202 
// 2203   // Add the Transaction Sequence Number
// 2204   *pData++ = hdr->transSeqNum;
??zclBuildHdr_0:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
// 2205 
// 2206   // Add the Cluster's command ID
// 2207   *pData++ = hdr->commandID;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine33 & 0xFFFF
// 2208 
// 2209   // Should point to the frame payload
// 2210   return ( pData );
??CrossCallReturnLabel_57:
        MOV     R2,A
        CLR     A
        ADDC    A,R5
        MOV     R3,A
          CFI EndBlock cfiBlock224
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
// 2211 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock225 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock225

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond226 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_58
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function zclBuildHdr
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond227) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond227) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond227) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond227) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond227) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond227) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond227) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond227) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond227) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond227) CFA_SP SP+-2
          CFI (cfiCond227) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker228 Using cfiCommon1
          CFI (cfiPicker228) NoFunction
          CFI (cfiPicker228) Picker
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#0x2
        RET
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiPicker228

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond229 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_126
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function zclBuildHdr
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker231 Using cfiCommon1
          CFI (cfiPicker231) NoFunction
          CFI (cfiPicker231) Picker
        MOV     R0,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        ORL     A,R0
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiPicker231
        REQUIRE ??Subroutine54_0
        ; // Fall through to label ??Subroutine54_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine54_0:
          CFI Block cfiCond232 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_128
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function zclBuildHdr
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function zclBuildHdr
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker235 Using cfiCommon1
          CFI (cfiPicker235) NoFunction
          CFI (cfiPicker235) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiPicker235
// 2212 
// 2213 /*********************************************************************
// 2214  * @fn      zclCalcHdrSize
// 2215  *
// 2216  * @brief   Calculate the number of bytes needed for an outgoing
// 2217  *          ZCL header.
// 2218  *
// 2219  * @param   hdr - outgoing header information
// 2220  *
// 2221  * @return  returns the number of bytes needed
// 2222  */
// 2223 static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
// 2224 {
// 2225   uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
// 2226 
// 2227   // Add the manfacturer code
// 2228   if ( hdr->fc.manuSpecific )
// 2229   {
// 2230     needed += 2;
// 2231   }
// 2232 
// 2233   return ( needed );
// 2234 }
// 2235 
// 2236 /*********************************************************************
// 2237  * @fn      zclFindPlugin
// 2238  *
// 2239  * @brief   Find the right plugin for a cluster ID
// 2240  *
// 2241  * @param   clusterID - cluster ID to look for
// 2242  * @param   profileID - profile ID
// 2243  *
// 2244  * @return  pointer to plugin, NULL if not found
// 2245  */
// 2246 static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
// 2247 {
// 2248   zclLibPlugin_t *pLoop = plugins;
// 2249 
// 2250   (void)profileID;  // Intentionally unreferenced parameter
// 2251 
// 2252   while ( pLoop != NULL )
// 2253   {
// 2254     if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
// 2255     {
// 2256       return ( pLoop );
// 2257     }
// 2258 
// 2259     pLoop = pLoop->next;
// 2260   }
// 2261 
// 2262   return ( (zclLibPlugin_t *)NULL );
// 2263 }
// 2264 
// 2265 #ifdef ZCL_DISCOVER
// 2266 /*********************************************************************
// 2267  * @fn      zclFindCmdRecsList
// 2268  *
// 2269  * @brief   Find the right command record list for an endpoint
// 2270  *
// 2271  * @param   endpoint - endpoint to look for
// 2272  *
// 2273  * @return  pointer to record list, NULL if not found
// 2274  */
// 2275 static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
// 2276 {
// 2277   zclCmdRecsList_t *pLoop = gpCmdList;
// 2278 
// 2279   while ( pLoop != NULL )
// 2280   {
// 2281     if ( pLoop->endpoint == endpoint )
// 2282     {
// 2283       return ( pLoop );
// 2284     }
// 2285 
// 2286     pLoop = pLoop->pNext;
// 2287   }
// 2288 
// 2289   return ( NULL );
// 2290 }
// 2291 
// 2292 /*********************************************************************
// 2293  * @fn      zclFindCmdRec
// 2294  *
// 2295  * @brief   Find the command record that matchs the parameters
// 2296  *
// 2297  * @param   endpoint - Application's endpoint
// 2298  * @param   clusterID - cluster ID
// 2299  * @param   attrId - attribute looking for
// 2300  * @param   pAttr - attribute record to be returned
// 2301  *
// 2302  * @return  TRUE if record found. FALSE, otherwise.
// 2303  */
// 2304 uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
// 2305 {
// 2306   uint8 i;
// 2307   zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
// 2308 
// 2309   if ( pRec != NULL )
// 2310   {
// 2311     for ( i = 0; i < pRec->numCommands; i++ )
// 2312     {
// 2313       if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
// 2314       {
// 2315         *pCmd = pRec->pCmdRecs[i];
// 2316 
// 2317         return ( TRUE ); // EMBEDDED RETURN
// 2318       }
// 2319     }
// 2320   }
// 2321 
// 2322   return ( FALSE );
// 2323 }
// 2324 #endif // ZCL_DISCOVER
// 2325 
// 2326 /*********************************************************************
// 2327  * @fn      zclFindAttrRecsList
// 2328  *
// 2329  * @brief   Find the right attribute record list for an endpoint
// 2330  *
// 2331  * @param   clusterID - endpointto look for
// 2332  *
// 2333  * @return  pointer to record list, NULL if not found
// 2334  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2335 static zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
zclFindAttrRecsList:
          CFI Block cfiBlock236 Using cfiCommon0
          CFI Function zclFindAttrRecsList
        CODE
// 2336 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2337   zclAttrRecsList *pLoop = attrList;
        MOV     DPTR,#attrList
        SJMP    ??zclFindAttrRecsList_0
// 2338 
// 2339   while ( pLoop != NULL )
// 2340   {
// 2341     if ( pLoop->endpoint == endpoint )
// 2342     {
// 2343       return ( pLoop );
// 2344     }
// 2345 
// 2346     pLoop = pLoop->next;
??zclFindAttrRecsList_1:
        MOV     DPL,R2
        MOV     DPH,R3
??zclFindAttrRecsList_0:
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_32:
        JZ      ??zclFindAttrRecsList_2
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??zclFindAttrRecsList_1
        SJMP    ??zclFindAttrRecsList_3
// 2347   }
// 2348 
// 2349   return ( NULL );
??zclFindAttrRecsList_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclFindAttrRecsList_3:
        LJMP    ?Subroutine0 & 0xFFFF
// 2350 }
          CFI EndBlock cfiBlock236
// 2351 
// 2352 /*********************************************************************
// 2353  * @fn      zclFindAttrRec
// 2354  *
// 2355  * @brief   Find the attribute record that matchs the parameters
// 2356  *
// 2357  * @param   endpoint - Application's endpoint
// 2358  * @param   clusterID - cluster ID
// 2359  * @param   attrId - attribute looking for
// 2360  * @param   pAttr - attribute record to be returned
// 2361  *
// 2362  * @return  TRUE if record found. FALSE, otherwise.
// 2363  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2364 uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
zclFindAttrRec:
          CFI Block cfiBlock237 Using cfiCommon0
          CFI Function zclFindAttrRec
        CODE
// 2365 {
        FUNCALL zclFindAttrRec, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2366   uint8 x;
// 2367   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL   `??zclFindAttrRecsList::?relay`; Banked call to: zclFindAttrRecsList
// 2368 
// 2369   if ( pRec != NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??zclFindAttrRec_0 & 0xFFFF
// 2370   {
// 2371     for ( x = 0; x < pRec->numAttributes; x++ )
        MOV     ?V0,#0x0
        SJMP    ??zclFindAttrRec_1
??zclFindAttrRec_2:
        INC     ?V0
??zclFindAttrRec_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0
        CLR     C
        SUBB    A,R0
        JNC     ??zclFindAttrRec_0
// 2372     {
// 2373       if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
        MOV     ?V6,?V0
        MOV     ?V7,#0x0
        MOV     A,#0x3
        MOV     R0,#?V6
        LCALL   ?S_SHL
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_47:
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,?V2
        XRL     A,R0
        JNZ     ??zclFindAttrRec_3
        MOV     A,?V3
        XRL     A,R1
??zclFindAttrRec_3:
        JNZ     ??zclFindAttrRec_2
        MOV     ?V6,?V0
        MOV     ?V7,#0x0
        MOV     A,#0x3
        MOV     R0,#?V6
        LCALL   ?S_SHL
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_48:
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R6
        XRL     A,R0
        JNZ     ??zclFindAttrRec_4
        MOV     A,R7
        XRL     A,R1
??zclFindAttrRec_4:
        JNZ     ??zclFindAttrRec_2
// 2374       {
// 2375         *pAttr = pRec->attrs[x];
        MOV     ?V1,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,?V0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V1
        MOV     DPL,R0
        MOV     DPH,A
        PUSH    DPL
          CFI CFA_SP SP+-1
        PUSH    DPH
          CFI CFA_SP SP+-2
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine51_0 & 0xFFFF
??CrossCallReturnLabel_114:
        POP     DPH
          CFI CFA_SP SP+-1
        POP     DPL
          CFI CFA_SP SP+0
        MOV     A,#0x8
        LCALL   ?MOVE_LONG8_XDATA_CODE
// 2376 
// 2377         return ( TRUE ); // EMBEDDED RETURN
        MOV     R1,#0x1
        SJMP    ??zclFindAttrRec_5
// 2378       }
// 2379     }
// 2380   }
// 2381 
// 2382   return ( FALSE );
??zclFindAttrRec_0:
        MOV     R1,#0x0
??zclFindAttrRec_5:
          CFI EndBlock cfiBlock237
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
// 2383 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock238 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock238

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond239 Using cfiCommon0
          CFI Function zclFindAttrRec
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function zclFindAttrRec
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+-2
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker241 Using cfiCommon1
          CFI (cfiPicker241) NoFunction
          CFI (cfiPicker241) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,?V6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V7
        MOV     DPL,R0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiPicker241
// 2384 
// 2385 #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
// 2386 /*********************************************************************
// 2387  * @fn      zclGetReadWriteCB
// 2388  *
// 2389  * @brief   Get the Read/Write callback function pointer for a given endpoint.
// 2390  *
// 2391  * @param   endpoint - Application's endpoint
// 2392  *
// 2393  * @return  Read/Write CB, NULL if not found
// 2394  */
// 2395 static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
// 2396 {
// 2397   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
// 2398 
// 2399   if ( pRec != NULL )
// 2400   {
// 2401     return ( pRec->pfnReadWriteCB );
// 2402   }
// 2403 
// 2404   return ( NULL );
// 2405 }
// 2406 
// 2407 /*********************************************************************
// 2408  * @fn      zclGetAuthorizeCB
// 2409  *
// 2410  * @brief   Get the Read/Write Authorization callback function pointer
// 2411  *          for a given endpoint.
// 2412  *
// 2413  * @param   endpoint - Application's endpoint
// 2414  *
// 2415  * @return  Authorization CB, NULL if not found
// 2416  */
// 2417 static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
// 2418 {
// 2419   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
// 2420 
// 2421   if ( pRec != NULL )
// 2422   {
// 2423     return ( pRec->pfnAuthorizeCB );
// 2424   }
// 2425 
// 2426   return ( NULL );
// 2427 }
// 2428 #endif // ZCL_READ || ZCL_WRITE
// 2429 
// 2430 /*********************************************************************
// 2431  * @fn      zclFindClusterOption
// 2432  *
// 2433  * @brief   Find the option record that matchs the cluster id
// 2434  *
// 2435  * @param   endpoint - Application's endpoint
// 2436  * @param   clusterID - cluster ID looking for
// 2437  *
// 2438  * @return  pointer to clutser option, NULL if not found
// 2439  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2440 static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
zclFindClusterOption:
          CFI Block cfiBlock242 Using cfiCommon0
          CFI Function zclFindClusterOption
        CODE
// 2441 {
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
// 2442   zclClusterOptionList *pLoop;
// 2443 
// 2444   pLoop = clusterOptionList;
        MOV     DPTR,#clusterOptionList
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        SJMP    ??zclFindClusterOption_0
// 2445   while ( pLoop != NULL )
// 2446   {
// 2447     if ( pLoop->endpoint == endpoint )
// 2448     {
// 2449       uint8 x;
// 2450       for ( x = 0; x < pLoop->numOptions; x++ )
// 2451       {
// 2452         if ( pLoop->options[x].clusterID == clusterID )
// 2453         {
// 2454           return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
// 2455         }
// 2456       }
// 2457     }
// 2458 
// 2459     pLoop = pLoop->next;
??zclFindClusterOption_1:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_63:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
??zclFindClusterOption_0:
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclFindClusterOption_2
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
        JNZ     ??zclFindClusterOption_1
        MOV     R6,#0x0
        SJMP    ??zclFindClusterOption_3
??zclFindClusterOption_4:
        INC     R6
??zclFindClusterOption_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     ??zclFindClusterOption_1
        MOV     A,R6
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     ?V0,B
        MOV     R1,?V0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,?V0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??zclFindClusterOption_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??zclFindClusterOption_5:
        JNZ     ??zclFindClusterOption_4
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R3,A
        SJMP    ??zclFindClusterOption_6
// 2460   }
// 2461 
// 2462   return ( NULL );
??zclFindClusterOption_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclFindClusterOption_6:
        LJMP    ?Subroutine4 & 0xFFFF
// 2463 }
          CFI EndBlock cfiBlock242

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond243 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function zcl_ProcessMessageMSG
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+-2
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 35)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function zclFindClusterOption
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+-2
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function zclParseInDefaultRspCmd
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+-2
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker247 Using cfiCommon1
          CFI (cfiPicker247) NoFunction
          CFI (cfiPicker247) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiPicker247
// 2464 
// 2465 /*********************************************************************
// 2466  * @fn      zclGetClusterOption
// 2467  *
// 2468  * @brief   Get the option record that matchs the cluster id
// 2469  *
// 2470  * @param   endpoint - Application's endpoint
// 2471  * @param   clusterID - cluster ID looking for
// 2472  *
// 2473  * @return  clutser option, AF_TX_OPTIONS_NONE if not found
// 2474  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2475 static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
zclGetClusterOption:
          CFI Block cfiBlock248 Using cfiCommon0
          CFI Function zclGetClusterOption
        CODE
// 2476 {
        FUNCALL zclGetClusterOption, zclFindClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2477   uint8 option;
// 2478   zclOptionRec_t *pOption;
// 2479 
// 2480   pOption = zclFindClusterOption( endpoint, clusterID );
        ; Setup parameters for call to function zclFindClusterOption
        LCALL   `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
        MOV     DPL,R2
        MOV     DPH,R3
// 2481   if ( pOption != NULL )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??zclGetClusterOption_0
// 2482   {
// 2483     option = pOption->option;
// 2484     if ( !ZG_SECURE_ENABLED )
// 2485     {
// 2486       option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
// 2487     }
// 2488 
// 2489     return ( option ); // EMBEDDED RETURN
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        SJMP    ??zclGetClusterOption_1
// 2490   }
// 2491 
// 2492   return ( AF_TX_OPTIONS_NONE );
??zclGetClusterOption_0:
        MOV     R1,#0x0
??zclGetClusterOption_1:
          CFI EndBlock cfiBlock248
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
// 2493 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock249 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock249
// 2494 
// 2495 /*********************************************************************
// 2496  * @fn      zclSetSecurityOption
// 2497  *
// 2498  * @brief   Set the security option for the cluster id
// 2499  *
// 2500  * @param   endpoint - Application's endpoint
// 2501  * @param   clusterID - cluster ID looking for
// 2502  * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
// 2503  *
// 2504  * @return  none
// 2505  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2506 static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
zclSetSecurityOption:
          CFI Block cfiBlock250 Using cfiCommon0
          CFI Function zclSetSecurityOption
        CODE
// 2507 {
        FUNCALL zclSetSecurityOption, zclFindClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R4
        MOV     R7,A
// 2508   zclOptionRec_t *pOption;
// 2509 
// 2510   pOption = zclFindClusterOption( endpoint, clusterID );
        ; Setup parameters for call to function zclFindClusterOption
        LCALL   `??zclFindClusterOption::?relay`; Banked call to: zclFindClusterOption
        MOV     DPL,R2
        MOV     DPH,R3
// 2511   if ( pOption != NULL )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??zclSetSecurityOption_0
// 2512   {
// 2513     if ( enable )
        MOV     A,R7
        INC     DPTR
        INC     DPTR
        JZ      ??zclSetSecurityOption_1
// 2514     {
// 2515       pOption->option |= AF_EN_SECURITY;
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        SJMP    ??zclSetSecurityOption_2
// 2516     }
// 2517     else
// 2518     {
// 2519       pOption->option &= (AF_EN_SECURITY ^ 0xFF);
??zclSetSecurityOption_1:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.6
??zclSetSecurityOption_2:
        MOVX    @DPTR,A
// 2520     }
// 2521   }
// 2522 }
??zclSetSecurityOption_0:
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock250
// 2523 
// 2524 #ifdef ZCL_DISCOVER
// 2525 /*********************************************************************
// 2526  * @fn      zclFindNextCmdRec
// 2527  *
// 2528  * @brief   Find the command (or next) record that matchs the parameters
// 2529  *
// 2530  * @param   endpoint - Application's endpoint
// 2531  * @param   clusterID - cluster ID
// 2532  * @param   commandID - command ID from requesting command
// 2533  * @param   direction- direction of received command
// 2534  * @param   pCmdID - command looking for
// 2535  * @param   pCmd - command information within command record list
// 2536  *
// 2537  * @return  pointer to command record, NULL no more records of this cluster
// 2538  */
// 2539 static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
// 2540                                 uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
// 2541 {
// 2542   zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
// 2543   uint8 i;
// 2544 
// 2545   if ( pRec != NULL )
// 2546   {
// 2547     for ( i = 0; i < pRec->numCommands; i++ )
// 2548     {
// 2549       if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
// 2550           ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
// 2551       {
// 2552         if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 2553         {
// 2554           if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
// 2555           {
// 2556             *pCmd = pRec->pCmdRecs[i];
// 2557 
// 2558             // Update command ID
// 2559             *pCmdID = pCmd->cmdID;
// 2560 
// 2561             return ( TRUE ); // EMBEDDED RETURN
// 2562           }
// 2563           else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
// 2564           {
// 2565             *pCmd = pRec->pCmdRecs[i];
// 2566 
// 2567             // Update command ID
// 2568             *pCmdID = pCmd->cmdID;
// 2569 
// 2570             return ( TRUE ); // EMBEDDED RETURN
// 2571           }
// 2572         }
// 2573         else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
// 2574         {
// 2575           if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
// 2576           {
// 2577             *pCmd = pRec->pCmdRecs[i];
// 2578 
// 2579             // Update command ID
// 2580             *pCmdID = pCmd->cmdID;
// 2581 
// 2582             return ( TRUE ); // EMBEDDED RETURN
// 2583           }
// 2584           else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
// 2585           {
// 2586             *pCmd = pRec->pCmdRecs[i];
// 2587 
// 2588             // Update command ID
// 2589             *pCmdID = pCmd->cmdID;
// 2590 
// 2591             return ( TRUE ); // EMBEDDED RETURN
// 2592           }
// 2593         }
// 2594         else
// 2595         {
// 2596           return ( FALSE ); // Incorrect Command ID
// 2597         }
// 2598       }
// 2599     }
// 2600   }
// 2601 
// 2602   return ( FALSE );
// 2603 }
// 2604 
// 2605 /*********************************************************************
// 2606  * @fn      zclFindNextAttrRec
// 2607  *
// 2608  * @brief   Find the attribute (or next) record that matchs the parameters
// 2609  *
// 2610  * @param   endpoint - Application's endpoint
// 2611  * @param   clusterID - cluster ID
// 2612  * @param   attr - attribute looking for
// 2613  *
// 2614  * @return  pointer to attribute record, NULL if not found
// 2615  */
// 2616 static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
// 2617                                  uint16 *attrId, zclAttrRec_t *pAttr )
// 2618 {
// 2619   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
// 2620   uint8 attrDir;
// 2621 
// 2622   if ( pRec != NULL )
// 2623   {
// 2624     uint16 x;
// 2625 
// 2626     for ( x = 0; x < pRec->numAttributes; x++ )
// 2627     {
// 2628       if ( ( pRec->attrs[x].clusterID == clusterID ) &&
// 2629            ( pRec->attrs[x].attr.attrId >= *attrId ) )
// 2630       {
// 2631         // also make sure direction is right
// 2632         attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
// 2633         if ( attrDir == direction )
// 2634         {
// 2635           // return attribute and found attribute ID
// 2636           *pAttr = pRec->attrs[x];
// 2637           *attrId = pAttr->attr.attrId;
// 2638 
// 2639           return ( TRUE ); // EMBEDDED RETURN
// 2640         }
// 2641       }
// 2642     }
// 2643   }
// 2644 
// 2645   return ( FALSE );
// 2646 }
// 2647 #endif // ZCL_DISCOVER
// 2648 
// 2649 /*********************************************************************
// 2650  * @fn      zclSerializeData
// 2651  *
// 2652  * @brief   Builds a buffer from the attribute data to sent out over
// 2653  *          the air.
// 2654  *          NOTE - Not compatible with application's attributes callbacks.
// 2655  *
// 2656  * @param   dataType - data types defined in zcl.h
// 2657  * @param   attrData - pointer to the attribute data
// 2658  * @param   buf - where to put the serialized data
// 2659  *
// 2660  * @return  pointer to end of destination buffer
// 2661  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2662 uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
zclSerializeData:
          CFI Block cfiBlock251 Using cfiCommon0
          CFI Function zclSerializeData
        CODE
// 2663 {
        FUNCALL zclSerializeData, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
// 2664   uint8 *pStr;
// 2665   uint16 len;
// 2666 
// 2667   if ( attrData == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??zclSerializeData_0 & 0xFFFF
// 2668   {
// 2669     return ( buf );
// 2670   }
// 2671 
// 2672   switch ( dataType )
        MOV     A,R1
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for zclSerializeData>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        65
        DATA
        DATA8
        DATA
        DATA8
        DB        66
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        67
        DATA
        DATA8
        DATA
        DATA8
        DB        68
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        224
        DATA
        DATA8
        DATA
        DATA8
        DB        226
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        232
        DATA
        DATA8
        DATA
        DATA8
        DB        233
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        26
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        10
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        11
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        16
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        24
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        25
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        26
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        27
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        32
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        33
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        35
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        36
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        37
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        40
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        41
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        42
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        43
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        48
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        49
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        56
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        57
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        234
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        240
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        241
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_0
        CODE
// 2673   {
// 2674     case ZCL_DATATYPE_DATA8:
// 2675     case ZCL_DATATYPE_BOOLEAN:
// 2676     case ZCL_DATATYPE_BITMAP8:
// 2677     case ZCL_DATATYPE_INT8:
// 2678     case ZCL_DATATYPE_UINT8:
// 2679     case ZCL_DATATYPE_ENUM8:
// 2680       *buf++ = *((uint8 *)attrData);
??zclSerializeData_5:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 2681        break;
        LJMP    ??zclSerializeData_0 & 0xFFFF
// 2682 
// 2683     case ZCL_DATATYPE_DATA16:
// 2684     case ZCL_DATATYPE_BITMAP16:
// 2685     case ZCL_DATATYPE_UINT16:
// 2686     case ZCL_DATATYPE_INT16:
// 2687     case ZCL_DATATYPE_ENUM16:
// 2688     case ZCL_DATATYPE_SEMI_PREC:
// 2689     case ZCL_DATATYPE_CLUSTER_ID:
// 2690     case ZCL_DATATYPE_ATTR_ID:
// 2691       *buf++ = LO_UINT16( *((uint16*)attrData) );
??zclSerializeData_4:
        LCALL   ?Subroutine8 & 0xFFFF
// 2692       *buf++ = HI_UINT16( *((uint16*)attrData) );
??CrossCallReturnLabel_4:
        MOV     A,R2
        ADD     A,#0x2
        MOV     R2,A
        JNC     ??zclSerializeData_11
        INC     R3
// 2693       break;
??zclSerializeData_11:
        LJMP    ??zclSerializeData_0 & 0xFFFF
// 2694 
// 2695     case ZCL_DATATYPE_DATA24:
// 2696     case ZCL_DATATYPE_BITMAP24:
// 2697     case ZCL_DATATYPE_UINT24:
// 2698     case ZCL_DATATYPE_INT24:
// 2699       *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
??zclSerializeData_6:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V4
        LCALL   ?Subroutine15 & 0xFFFF
// 2700       *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
??CrossCallReturnLabel_21:
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,?V5
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?Subroutine15 & 0xFFFF
// 2701       *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
??CrossCallReturnLabel_22:
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V4
        LCALL   ?UL_SHR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOV     A,?V4
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        JNC     ??zclSerializeData_12
        INC     R3
// 2702       break;
??zclSerializeData_12:
        LJMP    ??zclSerializeData_0 & 0xFFFF
// 2703 
// 2704     case ZCL_DATATYPE_DATA32:
// 2705     case ZCL_DATATYPE_BITMAP32:
// 2706     case ZCL_DATATYPE_UINT32:
// 2707     case ZCL_DATATYPE_INT32:
// 2708     case ZCL_DATATYPE_SINGLE_PREC:
// 2709     case ZCL_DATATYPE_TOD:
// 2710     case ZCL_DATATYPE_DATE:
// 2711     case ZCL_DATATYPE_UTC:
// 2712     case ZCL_DATATYPE_BAC_OID:
// 2713       buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
??zclSerializeData_3:
        ; Setup parameters for call to function osal_buffer_uint32
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 20)
        LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 2714       break;
        SJMP    ??zclSerializeData_0
// 2715 
// 2716     case ZCL_DATATYPE_UINT40:
// 2717       pStr = (uint8*)attrData;
// 2718       buf = zcl_memcpy( buf, pStr, 5 );
??zclSerializeData_7:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x5
        SJMP    ??zclSerializeData_13
          CFI CFA_XSP16 add(XSP16, 16)
// 2719       break;
// 2720 
// 2721     case ZCL_DATATYPE_UINT48:
// 2722       pStr = (uint8*)attrData;
// 2723       buf = zcl_memcpy( buf, pStr, 6 );
??zclSerializeData_8:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x6
        SJMP    ??zclSerializeData_13
          CFI CFA_XSP16 add(XSP16, 16)
// 2724       break;
// 2725 
// 2726     case ZCL_DATATYPE_IEEE_ADDR:
// 2727       pStr = (uint8*)attrData;
// 2728       buf = zcl_memcpy( buf, pStr, 8 );
??zclSerializeData_9:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x8
        SJMP    ??zclSerializeData_13
          CFI CFA_XSP16 add(XSP16, 16)
// 2729       break;
// 2730 
// 2731     case ZCL_DATATYPE_CHAR_STR:
// 2732     case ZCL_DATATYPE_OCTET_STR:
// 2733       pStr = (uint8*)attrData;
// 2734       len = *pStr;
// 2735       buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
??zclSerializeData_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        SJMP    ??zclSerializeData_14
          CFI CFA_XSP16 add(XSP16, 16)
// 2736       break;
// 2737 
// 2738     case ZCL_DATATYPE_LONG_CHAR_STR:
// 2739     case ZCL_DATATYPE_LONG_OCTET_STR:
// 2740       pStr = (uint8*)attrData;
// 2741       len = BUILD_UINT16( pStr[0], pStr[1] );
// 2742       buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
??zclSerializeData_2:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV     R4,A
        CLR     A
        ADDC    A,R1
??zclSerializeData_14:
        MOV     R5,A
        SJMP    ??zclSerializeData_15
          CFI CFA_XSP16 add(XSP16, 16)
// 2743       break;
// 2744 
// 2745     case ZCL_DATATYPE_128_BIT_SEC_KEY:
// 2746       pStr = (uint8*)attrData;
// 2747       buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
??zclSerializeData_10:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V4,R6
        MOV     ?V5,R7
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x10
??zclSerializeData_13:
        MOV     R5,#0x0
??zclSerializeData_15:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 2748       break;
// 2749 
// 2750     case ZCL_DATATYPE_NO_DATA:
// 2751     case ZCL_DATATYPE_UNKNOWN:
// 2752       // Fall through
// 2753 
// 2754     default:
// 2755       break;
// 2756   }
// 2757 
// 2758   return ( buf );
??zclSerializeData_0:
        LJMP    ?Subroutine5 & 0xFFFF
// 2759 }
          CFI EndBlock cfiBlock251

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond252 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond253 Using cfiCommon0
          CFI (cfiCond253) Function zclParseHdr
          CFI (cfiCond253) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond253) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond253) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond253) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond253) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond253) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond253) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond253) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond253) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond253) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond253) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond253) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond253) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond253) CFA_SP SP+-2
          CFI (cfiCond253) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function zclSerializeData
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+-2
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function zclSerializeData
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond255) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond255) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond255) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond255) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond255) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond255) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond255) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond255) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond255) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond255) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond255) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond255) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond255) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond255) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond255) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond255) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond255) CFA_SP SP+-2
          CFI (cfiCond255) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker256 Using cfiCommon1
          CFI (cfiPicker256) NoFunction
          CFI (cfiPicker256) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond252
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiPicker256
// 2760 
// 2761 #ifdef ZCL_REPORT
// 2762 /*********************************************************************
// 2763  * @fn      zclAnalogDataType
// 2764  *
// 2765  * @brief   Checks to see if Data Type is Analog
// 2766  *
// 2767  * @param   dataType - data type
// 2768  *
// 2769  * @return  TRUE if data type is analog
// 2770  */
// 2771 uint8 zclAnalogDataType( uint8 dataType )
// 2772 {
// 2773   uint8 analog;
// 2774 
// 2775   switch ( dataType )
// 2776   {
// 2777     case ZCL_DATATYPE_UINT8:
// 2778     case ZCL_DATATYPE_UINT16:
// 2779     case ZCL_DATATYPE_UINT24:
// 2780     case ZCL_DATATYPE_UINT32:
// 2781     case ZCL_DATATYPE_UINT40:
// 2782     case ZCL_DATATYPE_UINT48:
// 2783     case ZCL_DATATYPE_UINT56:
// 2784     case ZCL_DATATYPE_UINT64:
// 2785     case ZCL_DATATYPE_INT8:
// 2786     case ZCL_DATATYPE_INT16:
// 2787     case ZCL_DATATYPE_INT24:
// 2788     case ZCL_DATATYPE_INT32:
// 2789     case ZCL_DATATYPE_INT40:
// 2790     case ZCL_DATATYPE_INT48:
// 2791     case ZCL_DATATYPE_INT56:
// 2792     case ZCL_DATATYPE_INT64:
// 2793     case ZCL_DATATYPE_SEMI_PREC:
// 2794     case ZCL_DATATYPE_SINGLE_PREC:
// 2795     case ZCL_DATATYPE_DOUBLE_PREC:
// 2796     case ZCL_DATATYPE_TOD:
// 2797     case ZCL_DATATYPE_DATE:
// 2798     case ZCL_DATATYPE_UTC:
// 2799       analog = TRUE;
// 2800       break;
// 2801 
// 2802     default:
// 2803       analog = FALSE;
// 2804       break;
// 2805   }
// 2806 
// 2807   return ( analog );
// 2808 }
// 2809 
// 2810 /*********************************************************************
// 2811  * @fn      zclIsLittleEndianMachine
// 2812  *
// 2813  * @brief   Verifies endianness in system.
// 2814  *
// 2815  * @param   none
// 2816  *
// 2817  * @return  MSB-00 or LSB-01 depending on endianness in the system
// 2818  */
// 2819 static int zclIsLittleEndianMachine(void)
// 2820 {
// 2821   uint16 test = 0x0001;
// 2822 
// 2823   return (*((uint8 *)(&test)));
// 2824 }
// 2825 
// 2826 /*********************************************************************
// 2827  * @fn      zcl_BuildAnalogData
// 2828  *
// 2829  * @brief   Build an analog arribute out of sequential bytes.
// 2830  *
// 2831  * @param   dataType - type of data
// 2832  * @param   pData - pointer to data
// 2833  * @param   pBuf - where to put the data
// 2834  *
// 2835  * @return  none
// 2836  */
// 2837 static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
// 2838 {
// 2839   int current_byte_index;
// 2840   int remaining_bytes;
// 2841   int step;
// 2842 
// 2843   remaining_bytes = zclGetAttrDataLength(dataType, pData);
// 2844 
// 2845   // decide if move forward or backwards to copy data
// 2846   if ( zclIsLittleEndianMachine() )
// 2847   {
// 2848     step = 1;
// 2849     current_byte_index = 0;
// 2850   }
// 2851   else
// 2852   {
// 2853     step = -1;
// 2854     current_byte_index = remaining_bytes - 1;
// 2855   }
// 2856 
// 2857   while ( remaining_bytes-- )
// 2858   {
// 2859     pData[current_byte_index] = *(pBuf++);
// 2860     current_byte_index += step;
// 2861   }
// 2862 }
// 2863 #endif // ZCL_REPORT
// 2864 
// 2865 /*********************************************************************
// 2866  * @fn      zclGetDataTypeLength
// 2867  *
// 2868  * @brief   Return the length of the datatype in octet.
// 2869  *
// 2870  *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
// 2871  *                ZCL_DATATYPE_CHAR_STR data types.
// 2872  *
// 2873  * @param   dataType - data type
// 2874  *
// 2875  * @return  length of data
// 2876  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2877 uint8 zclGetDataTypeLength( uint8 dataType )
zclGetDataTypeLength:
          CFI Block cfiBlock257 Using cfiCommon0
          CFI Function zclGetDataTypeLength
        CODE
// 2878 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
// 2879   uint8 len;
// 2880 
// 2881   switch ( dataType )
        ADD     A,#-0x8
        JZ      ??zclGetDataTypeLength_0
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_2
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        ADD     A,#-0x5
        JZ      ??zclGetDataTypeLength_0
        ADD     A,#-0x8
        JZ      ??zclGetDataTypeLength_0
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_2
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        ADD     A,#-0x5
        JZ      ??zclGetDataTypeLength_0
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_2
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        DEC     A
        JZ      ??zclGetDataTypeLength_4
        DEC     A
        JZ      ??zclGetDataTypeLength_5
        DEC     A
        JZ      ??zclGetDataTypeLength_6
        DEC     A
        JZ      ??zclGetDataTypeLength_7
        DEC     A
        JZ      ??zclGetDataTypeLength_0
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_2
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        DEC     A
        JZ      ??zclGetDataTypeLength_4
        DEC     A
        JZ      ??zclGetDataTypeLength_5
        DEC     A
        JZ      ??zclGetDataTypeLength_6
        DEC     A
        JZ      ??zclGetDataTypeLength_7
        DEC     A
        JZ      ??zclGetDataTypeLength_0
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        ADD     A,#-0x7
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        DEC     A
        JZ      ??zclGetDataTypeLength_7
        ADD     A,#0x5a
        JZ      ??zclGetDataTypeLength_3
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        ADD     A,#-0x6
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        ADD     A,#-0x6
        JZ      ??zclGetDataTypeLength_7
        DEC     A
        JZ      ??zclGetDataTypeLength_8
        SJMP    ??zclGetDataTypeLength_9
// 2882   {
// 2883     case ZCL_DATATYPE_DATA8:
// 2884     case ZCL_DATATYPE_BOOLEAN:
// 2885     case ZCL_DATATYPE_BITMAP8:
// 2886     case ZCL_DATATYPE_INT8:
// 2887     case ZCL_DATATYPE_UINT8:
// 2888     case ZCL_DATATYPE_ENUM8:
// 2889       len = 1;
??zclGetDataTypeLength_0:
        MOV     R1,#0x1
// 2890       break;
        SJMP    ??zclGetDataTypeLength_10
// 2891 
// 2892     case ZCL_DATATYPE_DATA16:
// 2893     case ZCL_DATATYPE_BITMAP16:
// 2894     case ZCL_DATATYPE_UINT16:
// 2895     case ZCL_DATATYPE_INT16:
// 2896     case ZCL_DATATYPE_ENUM16:
// 2897     case ZCL_DATATYPE_SEMI_PREC:
// 2898     case ZCL_DATATYPE_CLUSTER_ID:
// 2899     case ZCL_DATATYPE_ATTR_ID:
// 2900       len = 2;
??zclGetDataTypeLength_1:
        MOV     R1,#0x2
// 2901       break;
        SJMP    ??zclGetDataTypeLength_10
// 2902 
// 2903     case ZCL_DATATYPE_DATA24:
// 2904     case ZCL_DATATYPE_BITMAP24:
// 2905     case ZCL_DATATYPE_UINT24:
// 2906     case ZCL_DATATYPE_INT24:
// 2907       len = 3;
??zclGetDataTypeLength_2:
        MOV     R1,#0x3
// 2908       break;
        SJMP    ??zclGetDataTypeLength_10
// 2909 
// 2910     case ZCL_DATATYPE_DATA32:
// 2911     case ZCL_DATATYPE_BITMAP32:
// 2912     case ZCL_DATATYPE_UINT32:
// 2913     case ZCL_DATATYPE_INT32:
// 2914     case ZCL_DATATYPE_SINGLE_PREC:
// 2915     case ZCL_DATATYPE_TOD:
// 2916     case ZCL_DATATYPE_DATE:
// 2917     case ZCL_DATATYPE_UTC:
// 2918     case ZCL_DATATYPE_BAC_OID:
// 2919       len = 4;
??zclGetDataTypeLength_3:
        MOV     R1,#0x4
// 2920       break;
        SJMP    ??zclGetDataTypeLength_10
// 2921 
// 2922    case ZCL_DATATYPE_UINT40:
// 2923    case ZCL_DATATYPE_INT40:
// 2924        len = 5;
??zclGetDataTypeLength_4:
        MOV     R1,#0x5
// 2925        break;
        SJMP    ??zclGetDataTypeLength_10
// 2926 
// 2927    case ZCL_DATATYPE_UINT48:
// 2928    case ZCL_DATATYPE_INT48:
// 2929        len = 6;
??zclGetDataTypeLength_5:
        MOV     R1,#0x6
// 2930        break;
        SJMP    ??zclGetDataTypeLength_10
// 2931 
// 2932    case ZCL_DATATYPE_UINT56:
// 2933    case ZCL_DATATYPE_INT56:
// 2934        len = 7;
??zclGetDataTypeLength_6:
        MOV     R1,#0x7
// 2935        break;
        SJMP    ??zclGetDataTypeLength_10
// 2936 
// 2937    case ZCL_DATATYPE_DOUBLE_PREC:
// 2938    case ZCL_DATATYPE_IEEE_ADDR:
// 2939    case ZCL_DATATYPE_UINT64:
// 2940    case ZCL_DATATYPE_INT64:
// 2941      len = 8;
??zclGetDataTypeLength_7:
        MOV     R1,#0x8
// 2942      break;
        SJMP    ??zclGetDataTypeLength_10
// 2943 
// 2944     case ZCL_DATATYPE_128_BIT_SEC_KEY:
// 2945      len = SEC_KEY_LEN;
??zclGetDataTypeLength_8:
        MOV     R1,#0x10
// 2946      break;
        SJMP    ??zclGetDataTypeLength_10
// 2947 
// 2948     case ZCL_DATATYPE_NO_DATA:
// 2949     case ZCL_DATATYPE_UNKNOWN:
// 2950       // Fall through
// 2951 
// 2952     default:
// 2953       len = 0;
??zclGetDataTypeLength_9:
        MOV     R1,#0x0
// 2954       break;
// 2955   }
// 2956 
// 2957   return ( len );
??zclGetDataTypeLength_10:
        LJMP    ?BRET
// 2958 }
          CFI EndBlock cfiBlock257
// 2959 
// 2960 /*********************************************************************
// 2961  * @fn      zclGetAttrDataLength
// 2962  *
// 2963  * @brief   Return the length of the attribute.
// 2964  *
// 2965  * @param   dataType - data type
// 2966  * @param   pData - pointer to data
// 2967  *
// 2968  * @return  returns atrribute length
// 2969  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2970 uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
zclGetAttrDataLength:
          CFI Block cfiBlock258 Using cfiCommon0
          CFI Function zclGetAttrDataLength
        CODE
// 2971 {
        FUNCALL zclGetAttrDataLength, zclGetDataTypeLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 2972   uint16 dataLen = 0;
// 2973 
// 2974   if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
        MOV     A,#0x44
        XRL     A,R6
        JZ      ??zclGetAttrDataLength_0
        MOV     A,#0x43
        XRL     A,R6
        JNZ     ??zclGetAttrDataLength_1
// 2975   {
// 2976     dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
??zclGetAttrDataLength_0:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine37 & 0xFFFF
// 2977   }
??CrossCallReturnLabel_70:
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        SJMP    ??zclGetAttrDataLength_2
// 2978   else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
??zclGetAttrDataLength_1:
        MOV     A,#0x42
        XRL     A,R6
        JZ      ??zclGetAttrDataLength_3
        MOV     A,#0x41
        XRL     A,R6
        JNZ     ??zclGetAttrDataLength_4
// 2979   {
// 2980     dataLen = *pData + 1; // string length + 1 for length field
??zclGetAttrDataLength_3:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
??zclGetAttrDataLength_2:
        MOV     R3,A
        SJMP    ??zclGetAttrDataLength_5
// 2981   }
// 2982   else
// 2983   {
// 2984     dataLen = zclGetDataTypeLength( dataType );
??zclGetAttrDataLength_4:
        ; Setup parameters for call to function zclGetDataTypeLength
        LCALL   `??zclGetDataTypeLength::?relay`; Banked call to: zclGetDataTypeLength
        MOV     A,R1
        MOV     R2,A
        MOV     R3,#0x0
// 2985   }
// 2986 
// 2987   return ( dataLen );
??zclGetAttrDataLength_5:
        LJMP    ?Subroutine4 & 0xFFFF
// 2988 }
          CFI EndBlock cfiBlock258

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond259 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond260 Using cfiCommon0
          CFI (cfiCond260) Function zclGetAttrDataLength
          CFI (cfiCond260) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond260) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond260) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond260) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond260) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond260) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond260) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond260) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond260) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond260) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond260) CFA_SP SP+-2
          CFI (cfiCond260) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker261 Using cfiCommon1
          CFI (cfiPicker261) NoFunction
          CFI (cfiPicker261) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x2
        RET
          CFI EndBlock cfiCond259
          CFI EndBlock cfiCond260
          CFI EndBlock cfiPicker261
// 2989 
// 2990 #ifdef ZCL_READ
// 2991 /*********************************************************************
// 2992  * @fn      zclReadAttrData
// 2993  *
// 2994  * @brief   Read the attribute's current value into pAttrData.
// 2995  *          NOTE - Not compatible with application's attributes callbacks.
// 2996  *
// 2997  * @param   pAttrData - where to put attribute data
// 2998  * @param   pAttr - pointer to attribute
// 2999  * @param   pDataLen - where to put attribute data length
// 3000  *
// 3001  * @return Success
// 3002  */
// 3003 ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
// 3004 {
// 3005   uint16 dataLen;
// 3006 
// 3007   if ( pAttr->attr.dataPtr == NULL )
// 3008   {
// 3009     return ( ZCL_STATUS_FAILURE );
// 3010   }
// 3011 
// 3012   dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
// 3013   zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
// 3014 
// 3015   if ( pDataLen != NULL )
// 3016   {
// 3017     *pDataLen = dataLen;
// 3018   }
// 3019 
// 3020   return ( ZCL_STATUS_SUCCESS );
// 3021 }
// 3022 
// 3023 /*********************************************************************
// 3024  * @fn      zcl_ReadAttrData
// 3025  *
// 3026  * @brief   Read the attribute's current value into pAttrData.
// 3027  *          Use application's callback function if assigned to this attribute.
// 3028  *
// 3029  * @param   endpoint - application's endpoint
// 3030  * @param   clusterId - cluster that attribute belongs to
// 3031  * @param   attrId - attribute id
// 3032  * @param   pAttrData - where to put attribute data
// 3033  * @param   pDataLen - where to put attribute data length
// 3034  *
// 3035  * @return  Successful if data was read
// 3036  */
// 3037 ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
// 3038                                          uint8 *pAttrData, uint16 *pDataLen )
// 3039 {
// 3040   zclAttrRec_t attrRec;
// 3041 
// 3042   if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
// 3043   {
// 3044     return ( ZCL_STATUS_FAILURE );
// 3045   }
// 3046 
// 3047   if ( attrRec.attr.dataPtr != NULL )
// 3048   {
// 3049     return zclReadAttrData( pAttrData, &attrRec, pDataLen );
// 3050   }
// 3051   else
// 3052   {
// 3053     return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
// 3054   }
// 3055 }
// 3056 
// 3057 /*********************************************************************
// 3058  * @fn      zclGetAttrDataLengthUsingCB
// 3059  *
// 3060  * @brief   Use application's callback to get the length of the attribute's
// 3061  *          current value stored in the database.
// 3062  *
// 3063  * @param   endpoint - application's endpoint
// 3064  * @param   clusterId - cluster that attribute belongs to
// 3065  * @param   attrId - attribute id
// 3066  *
// 3067  * @return  returns attribute length
// 3068  */
// 3069 static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
// 3070 {
// 3071   uint16 dataLen = 0;
// 3072   zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
// 3073 
// 3074   if ( pfnReadWriteCB != NULL )
// 3075   {
// 3076     // Only get the attribute length
// 3077     (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
// 3078   }
// 3079 
// 3080   return ( dataLen );
// 3081 }
// 3082 
// 3083 /*********************************************************************
// 3084  * @fn      zclReadAttrDataUsingCB
// 3085  *
// 3086  * @brief   Use application's callback to read the attribute's current
// 3087  *          value stored in the database.
// 3088  *
// 3089  * @param   endpoint - application's endpoint
// 3090  * @param   clusterId - cluster that attribute belongs to
// 3091  * @param   attrId - attribute id
// 3092  * @param   pAttrData - where to put attribute data
// 3093  * @param   pDataLen - where to put attribute data length
// 3094  *
// 3095  * @return  Successful if data was read
// 3096  */
// 3097 static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
// 3098                                          uint8 *pAttrData, uint16 *pDataLen )
// 3099 {
// 3100   zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
// 3101 
// 3102   if ( pDataLen != NULL )
// 3103   {
// 3104     *pDataLen = 0; // Always initialize it to 0
// 3105   }
// 3106 
// 3107   if ( pfnReadWriteCB != NULL )
// 3108   {
// 3109     // Read the attribute value and its length
// 3110     return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
// 3111   }
// 3112 
// 3113   return ( ZCL_STATUS_SOFTWARE_FAILURE );
// 3114 }
// 3115 
// 3116 /*********************************************************************
// 3117  * @fn      zclAuthorizeRead
// 3118  *
// 3119  * @brief   Use application's callback to authorize a Read operation
// 3120  *          on a given attribute.
// 3121  *
// 3122  * @param   endpoint - application's endpoint
// 3123  * @param   srcAddr - source Address
// 3124  * @param   pAttr - pointer to attribute
// 3125  *
// 3126  * @return  ZCL_STATUS_SUCCESS: Operation authorized
// 3127  *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
// 3128  */
// 3129 static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
// 3130 {
// 3131   if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
// 3132   {
// 3133     zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
// 3134 
// 3135     if ( pfnAuthorizeCB != NULL )
// 3136     {
// 3137       return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
// 3138     }
// 3139   }
// 3140 
// 3141   return ( ZCL_STATUS_SUCCESS );
// 3142 }
// 3143 #endif // ZCL_READ
// 3144 
// 3145 #ifdef ZCL_WRITE
// 3146 /*********************************************************************
// 3147  * @fn      zclWriteAttrData
// 3148  *
// 3149  * @brief   Write the received data.
// 3150  *
// 3151  * @param   endpoint - application's endpoint
// 3152  * @param   pAttr - where to write data to
// 3153  * @param   pWriteRec - data to be written
// 3154  *
// 3155  * @return  Successful if data was written
// 3156  */
// 3157 static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
// 3158                                    zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
// 3159 {
// 3160   uint8 status;
// 3161 
// 3162   if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
// 3163   {
// 3164     status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
// 3165     if ( status == ZCL_STATUS_SUCCESS )
// 3166     {
// 3167       if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
// 3168       {
// 3169         // Write the attribute value
// 3170         uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
// 3171         zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
// 3172 
// 3173         status = ZCL_STATUS_SUCCESS;
// 3174       }
// 3175       else
// 3176       {
// 3177         status = ZCL_STATUS_INVALID_VALUE;
// 3178       }
// 3179     }
// 3180   }
// 3181   else
// 3182   {
// 3183     status = ZCL_STATUS_READ_ONLY;
// 3184   }
// 3185 
// 3186   return ( status );
// 3187 }
// 3188 
// 3189 /*********************************************************************
// 3190  * @fn      zclWriteAttrDataUsingCB
// 3191  *
// 3192  * @brief   Use application's callback to write the attribute's current
// 3193  *          value stored in the database.
// 3194  *
// 3195  * @param   endpoint - application's endpoint
// 3196  * @param   pAttr - where to write data to
// 3197  * @param   pAttrData - data to be written
// 3198  *
// 3199  * @return  Successful if data was written
// 3200  */
// 3201 static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
// 3202                                           zclAttrRec_t *pAttr, uint8 *pAttrData )
// 3203 {
// 3204   uint8 status;
// 3205 
// 3206   if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
// 3207   {
// 3208     status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
// 3209     if ( status == ZCL_STATUS_SUCCESS )
// 3210     {
// 3211       zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
// 3212       if ( pfnReadWriteCB != NULL )
// 3213       {
// 3214         // Write the attribute value
// 3215         status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
// 3216                                     ZCL_OPER_WRITE, pAttrData, NULL );
// 3217       }
// 3218       else
// 3219       {
// 3220         status = ZCL_STATUS_SOFTWARE_FAILURE;
// 3221       }
// 3222     }
// 3223   }
// 3224   else
// 3225   {
// 3226     status = ZCL_STATUS_READ_ONLY;
// 3227   }
// 3228 
// 3229   return ( status );
// 3230 }
// 3231 
// 3232 /*********************************************************************
// 3233  * @fn      zclAuthorizeWrite
// 3234  *
// 3235  * @brief   Use application's callback to authorize a Write operation
// 3236  *          on a given attribute.
// 3237  *
// 3238  * @param   endpoint - application's endpoint
// 3239  * @param   srcAddr - source Address
// 3240  * @param   pAttr - pointer to attribute
// 3241  *
// 3242  * @return  ZCL_STATUS_SUCCESS: Operation authorized
// 3243  *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
// 3244  */
// 3245 static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
// 3246 {
// 3247   if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
// 3248   {
// 3249     zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
// 3250 
// 3251     if ( pfnAuthorizeCB != NULL )
// 3252     {
// 3253       return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
// 3254     }
// 3255   }
// 3256 
// 3257   return ( ZCL_STATUS_SUCCESS );
// 3258 }
// 3259 #endif // ZCL_WRITE
// 3260 
// 3261 #ifdef ZCL_READ
// 3262 /*********************************************************************
// 3263  * @fn      zclParseInReadCmd
// 3264  *
// 3265  * @brief   Parse the "Profile" Read Commands
// 3266  *
// 3267  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3268  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3269  *
// 3270  * @param   pCmd - pointer to incoming data to parse
// 3271  *
// 3272  * @return  pointer to the parsed command structure
// 3273  */
// 3274 void *zclParseInReadCmd( zclParseCmd_t *pCmd )
// 3275 {
// 3276   zclReadCmd_t *readCmd;
// 3277   uint8 *pBuf = pCmd->pData;
// 3278 
// 3279   readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
// 3280   if ( readCmd != NULL )
// 3281   {
// 3282     uint8 i;
// 3283     readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
// 3284     for ( i = 0; i < readCmd->numAttr; i++ )
// 3285     {
// 3286       readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3287       pBuf += 2;
// 3288     }
// 3289   }
// 3290 
// 3291   return ( (void *)readCmd );
// 3292 }
// 3293 
// 3294 /*********************************************************************
// 3295  * @fn      zclParseInReadRspCmd
// 3296  *
// 3297  * @brief   Parse the "Profile" Read Response Commands
// 3298  *
// 3299  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3300  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3301  *
// 3302  * @param   pCmd - pointer to incoming data to parse
// 3303  *
// 3304  * @return  pointer to the parsed command structure
// 3305  */
// 3306 static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
// 3307 {
// 3308   zclReadRspCmd_t *readRspCmd;
// 3309   uint8 *pBuf = pCmd->pData;
// 3310   uint8 *dataPtr;
// 3311   uint8 numAttr = 0;
// 3312   uint8 hdrLen;
// 3313   uint16 dataLen = 0;
// 3314   uint16 attrDataLen;
// 3315 
// 3316   // find out the number of attributes and the length of attribute data
// 3317   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3318   {
// 3319     uint8 status;
// 3320 
// 3321     numAttr++;
// 3322     pBuf += 2; // move pass attribute id
// 3323 
// 3324     status = *pBuf++;
// 3325     if ( status == ZCL_STATUS_SUCCESS )
// 3326     {
// 3327       uint8 dataType = *pBuf++;
// 3328 
// 3329       attrDataLen = zclGetAttrDataLength( dataType, pBuf );
// 3330       pBuf += attrDataLen; // move pass attribute data
// 3331 
// 3332       // add padding if needed
// 3333       if ( PADDING_NEEDED( attrDataLen ) )
// 3334       {
// 3335         attrDataLen++;
// 3336       }
// 3337 
// 3338       dataLen += attrDataLen;
// 3339     }
// 3340   }
// 3341 
// 3342   // calculate the length of the response header
// 3343   hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
// 3344 
// 3345   readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3346   if ( readRspCmd != NULL )
// 3347   {
// 3348     uint8 i;
// 3349     pBuf = pCmd->pData;
// 3350     dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
// 3351 
// 3352     readRspCmd->numAttr = numAttr;
// 3353     for ( i = 0; i < numAttr; i++ )
// 3354     {
// 3355       zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 3356 
// 3357       statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3358       pBuf += 2;
// 3359 
// 3360       statusRec->status = *pBuf++;
// 3361       if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 3362       {
// 3363         statusRec->dataType = *pBuf++;
// 3364 
// 3365         attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
// 3366         zcl_memcpy( dataPtr, pBuf, attrDataLen);
// 3367         statusRec->data = dataPtr;
// 3368 
// 3369         pBuf += attrDataLen; // move pass attribute data
// 3370 
// 3371         // advance attribute data pointer
// 3372         if ( PADDING_NEEDED( attrDataLen ) )
// 3373         {
// 3374           attrDataLen++;
// 3375         }
// 3376 
// 3377         dataPtr += attrDataLen;
// 3378       }
// 3379     }
// 3380   }
// 3381 
// 3382   return ( (void *)readRspCmd );
// 3383 }
// 3384 #endif // ZCL_READ
// 3385 
// 3386 #ifdef ZCL_WRITE
// 3387 /*********************************************************************
// 3388  * @fn      zclParseInWriteCmd
// 3389  *
// 3390  * @brief   Parse the "Profile" Write, Write Undivided and Write No
// 3391  *          Response Commands
// 3392  *
// 3393  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3394  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3395  *
// 3396  * @param   pCmd - pointer to incoming data to parse
// 3397  *
// 3398  * @return  pointer to the parsed command structure
// 3399  */
// 3400 void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
// 3401 {
// 3402   zclWriteCmd_t *writeCmd;
// 3403   uint8 *pBuf = pCmd->pData;
// 3404   uint16 attrDataLen;
// 3405   uint8 *dataPtr;
// 3406   uint8 numAttr = 0;
// 3407   uint8 hdrLen;
// 3408   uint16 dataLen = 0;
// 3409 
// 3410   // find out the number of attributes and the length of attribute data
// 3411   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3412   {
// 3413     uint8 dataType;
// 3414 
// 3415     numAttr++;
// 3416     pBuf += 2; // move pass attribute id
// 3417 
// 3418     dataType = *pBuf++;
// 3419 
// 3420     attrDataLen = zclGetAttrDataLength( dataType, pBuf );
// 3421     pBuf += attrDataLen; // move pass attribute data
// 3422 
// 3423     // add padding if needed
// 3424     if ( PADDING_NEEDED( attrDataLen ) )
// 3425     {
// 3426       attrDataLen++;
// 3427     }
// 3428 
// 3429     dataLen += attrDataLen;
// 3430   }
// 3431 
// 3432   // calculate the length of the response header
// 3433   hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
// 3434 
// 3435   writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3436   if ( writeCmd != NULL )
// 3437   {
// 3438     uint8 i;
// 3439     pBuf = pCmd->pData;
// 3440     dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
// 3441 
// 3442     writeCmd->numAttr = numAttr;
// 3443     for ( i = 0; i < numAttr; i++ )
// 3444     {
// 3445       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 3446 
// 3447       statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3448       pBuf += 2;
// 3449       statusRec->dataType = *pBuf++;
// 3450 
// 3451       attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
// 3452       zcl_memcpy( dataPtr, pBuf, attrDataLen);
// 3453       statusRec->attrData = dataPtr;
// 3454 
// 3455       pBuf += attrDataLen; // move pass attribute data
// 3456 
// 3457       // advance attribute data pointer
// 3458       if ( PADDING_NEEDED( attrDataLen ) )
// 3459       {
// 3460         attrDataLen++;
// 3461       }
// 3462 
// 3463       dataPtr += attrDataLen;
// 3464     }
// 3465   }
// 3466 
// 3467   return ( (void *)writeCmd );
// 3468 }
// 3469 
// 3470 /*********************************************************************
// 3471  * @fn      zclParseInWriteRspCmd
// 3472  *
// 3473  * @brief   Parse the "Profile" Write Response Commands
// 3474  *
// 3475  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3476  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3477  *
// 3478  * @param   pCmd - pointer to incoming data to parse
// 3479  *
// 3480  * @return  pointer to the parsed command structure
// 3481  */
// 3482 static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
// 3483 {
// 3484   zclWriteRspCmd_t *writeRspCmd;
// 3485   uint8 *pBuf = pCmd->pData;
// 3486   uint8 i = 0;
// 3487 
// 3488   writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
// 3489   if ( writeRspCmd != NULL )
// 3490   {
// 3491     if ( pCmd->dataLen == 1 )
// 3492     {
// 3493       // special case when all writes were successfull
// 3494       writeRspCmd->attrList[i++].status = *pBuf;
// 3495     }
// 3496     else
// 3497     {
// 3498       while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3499       {
// 3500         writeRspCmd->attrList[i].status = *pBuf++;
// 3501         writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3502         pBuf += 2;
// 3503       }
// 3504     }
// 3505 
// 3506     writeRspCmd->numAttr = i;
// 3507   }
// 3508 
// 3509   return ( (void *)writeRspCmd );
// 3510 }
// 3511 #endif // ZCL_WRITE
// 3512 
// 3513 #ifdef ZCL_REPORT
// 3514 /*********************************************************************
// 3515  * @fn      zclParseInConfigReportCmd
// 3516  *
// 3517  * @brief   Parse the "Profile" Configure Reporting Command
// 3518  *
// 3519  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3520  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3521  *
// 3522  * @param   pCmd - pointer to incoming data to parse
// 3523  *
// 3524  * @return  pointer to the parsed command structure
// 3525  */
// 3526 void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
// 3527 {
// 3528   zclCfgReportCmd_t *cfgReportCmd;
// 3529   uint8 *pBuf = pCmd->pData;
// 3530   uint8 *dataPtr;
// 3531   uint8 numAttr = 0;
// 3532   uint8 dataType;
// 3533   uint8 hdrLen;
// 3534   uint16 dataLen = 0;
// 3535   uint8 reportChangeLen; // length of Reportable Change field
// 3536 
// 3537   // Calculate the length of the Request command
// 3538   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3539   {
// 3540     uint8 direction;
// 3541 
// 3542     numAttr++;
// 3543     direction = *pBuf++;
// 3544     pBuf += 2; // move pass the attribute ID
// 3545 
// 3546     // Is there a Reportable Change field?
// 3547     if ( direction == ZCL_SEND_ATTR_REPORTS )
// 3548     {
// 3549       dataType = *pBuf++;
// 3550       pBuf += 4; // move pass the Min and Max Reporting Intervals
// 3551 
// 3552       // For attributes of 'discrete' data types this field is omitted
// 3553       if ( zclAnalogDataType( dataType ) )
// 3554       {
// 3555         reportChangeLen = zclGetDataTypeLength( dataType );
// 3556         pBuf += reportChangeLen;
// 3557 
// 3558         // add padding if needed
// 3559         if ( PADDING_NEEDED( reportChangeLen ) )
// 3560         {
// 3561           reportChangeLen++;
// 3562         }
// 3563 
// 3564         dataLen += reportChangeLen;
// 3565       }
// 3566       else
// 3567       {
// 3568         pBuf++; // move past reportable change field
// 3569       }
// 3570     }
// 3571     else
// 3572     {
// 3573       pBuf += 2; // move pass the Timeout Period
// 3574     }
// 3575   } // while loop
// 3576 
// 3577   hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
// 3578 
// 3579   cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3580   if ( cfgReportCmd != NULL )
// 3581   {
// 3582     uint8 i;
// 3583     pBuf = pCmd->pData;
// 3584     dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
// 3585 
// 3586     cfgReportCmd->numAttr = numAttr;
// 3587     for ( i = 0; i < numAttr; i++ )
// 3588     {
// 3589       zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 3590 
// 3591       zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
// 3592 
// 3593       reportRec->direction = *pBuf++;
// 3594       reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3595       pBuf += 2;
// 3596       if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 3597       {
// 3598         // Attribute to be reported
// 3599         reportRec->dataType = *pBuf++;
// 3600         reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3601         pBuf += 2;
// 3602         reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3603         pBuf += 2;
// 3604 
// 3605         // For attributes of 'discrete' data types this field is omitted
// 3606         if ( zclAnalogDataType( reportRec->dataType ) )
// 3607         {
// 3608           zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
// 3609           reportRec->reportableChange = dataPtr;
// 3610 
// 3611           reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
// 3612           pBuf += reportChangeLen;
// 3613 
// 3614           // advance attribute data pointer
// 3615           if ( PADDING_NEEDED( reportChangeLen ) )
// 3616           {
// 3617             reportChangeLen++;
// 3618           }
// 3619 
// 3620           dataPtr += reportChangeLen;
// 3621         }
// 3622       }
// 3623       else
// 3624       {
// 3625         // Attribute reports to be received
// 3626         reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3627         pBuf += 2;
// 3628       }
// 3629     } // while loop
// 3630   }
// 3631 
// 3632   return ( (void *)cfgReportCmd );
// 3633 }
// 3634 
// 3635 /*********************************************************************
// 3636  * @fn      zclParseInConfigReportRspCmd
// 3637  *
// 3638  * @brief   Parse the "Profile" Configure Reporting Response Command
// 3639  *
// 3640  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3641  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3642  *
// 3643  * @param   pCmd - pointer to incoming data to parse
// 3644  *
// 3645  * @return  pointer to the parsed command structure
// 3646  */
// 3647 static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
// 3648 {
// 3649   zclCfgReportRspCmd_t *cfgReportRspCmd;
// 3650   uint8 *pBuf = pCmd->pData;
// 3651   uint8 numAttr;
// 3652 
// 3653   numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
// 3654 
// 3655   cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
// 3656                                             + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
// 3657   if ( cfgReportRspCmd != NULL )
// 3658   {
// 3659     uint8 i;
// 3660     cfgReportRspCmd->numAttr = numAttr;
// 3661     for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
// 3662     {
// 3663       cfgReportRspCmd->attrList[i].status = *pBuf++;
// 3664       cfgReportRspCmd->attrList[i].direction = *pBuf++;
// 3665       cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3666       pBuf += 2;
// 3667     }
// 3668   }
// 3669 
// 3670   return ( (void *)cfgReportRspCmd );
// 3671 }
// 3672 
// 3673 /*********************************************************************
// 3674  * @fn      zclParseInReadReportCfgCmd
// 3675  *
// 3676  * @brief   Parse the "Profile" Read Reporting Configuration Command
// 3677  *
// 3678  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3679  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3680  *
// 3681  * @param   pCmd - pointer to incoming data to parse
// 3682  *
// 3683  * @return  pointer to the parsed command structure
// 3684  */
// 3685 void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
// 3686 {
// 3687   zclReadReportCfgCmd_t *readReportCfgCmd;
// 3688   uint8 *pBuf = pCmd->pData;
// 3689   uint8 numAttr;
// 3690 
// 3691   numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
// 3692 
// 3693   readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
// 3694                                                   + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
// 3695   if ( readReportCfgCmd != NULL )
// 3696   {
// 3697     uint8 i;
// 3698     readReportCfgCmd->numAttr = numAttr;
// 3699     for ( i = 0; i < readReportCfgCmd->numAttr; i++)
// 3700     {
// 3701       readReportCfgCmd->attrList[i].direction = *pBuf++;;
// 3702       readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3703       pBuf += 2;
// 3704     }
// 3705   }
// 3706 
// 3707   return ( (void *)readReportCfgCmd );
// 3708 }
// 3709 
// 3710 /*********************************************************************
// 3711  * @fn      zclParseInReadReportCfgRspCmd
// 3712  *
// 3713  * @brief   Parse the "Profile" Read Reporting Configuration Response Command
// 3714  *
// 3715  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3716  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3717  *
// 3718  * @param   pCmd - pointer to incoming data to parse
// 3719  *
// 3720  * @return  pointer to the parsed command structure
// 3721  */
// 3722 static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
// 3723 {
// 3724   zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
// 3725   uint8 reportChangeLen;
// 3726   uint8 *pBuf = pCmd->pData;
// 3727   uint8 *dataPtr;
// 3728   uint8 numAttr = 0;
// 3729   uint8 hdrLen;
// 3730   uint16 dataLen = 0;
// 3731 
// 3732   // Calculate the length of the response command
// 3733   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3734   {
// 3735     uint8 status;
// 3736     uint8 direction;
// 3737 
// 3738     numAttr++;
// 3739     status = *pBuf++;
// 3740     direction = *pBuf++;
// 3741     pBuf += 2; // move pass the attribute ID
// 3742 
// 3743     if ( status == ZCL_STATUS_SUCCESS )
// 3744     {
// 3745       if ( direction == ZCL_SEND_ATTR_REPORTS )
// 3746       {
// 3747         uint8 dataType = *pBuf++;
// 3748         pBuf += 4; // move pass the Min and Max Reporting Intervals
// 3749 
// 3750         // For attributes of 'discrete' data types this field is omitted
// 3751         if ( zclAnalogDataType( dataType ) )
// 3752         {
// 3753           reportChangeLen = zclGetDataTypeLength( dataType );
// 3754           pBuf += reportChangeLen;
// 3755 
// 3756           // add padding if needed
// 3757           if ( PADDING_NEEDED( reportChangeLen ) )
// 3758           {
// 3759             reportChangeLen++;
// 3760           }
// 3761 
// 3762           dataLen += reportChangeLen;
// 3763         }
// 3764       }
// 3765       else
// 3766       {
// 3767         pBuf += 2; // move pass the Timeout field
// 3768       }
// 3769     }
// 3770   } // while loop
// 3771 
// 3772   hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
// 3773 
// 3774   readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3775   if ( readReportCfgRspCmd != NULL )
// 3776   {
// 3777     uint8 i;
// 3778     pBuf = pCmd->pData;
// 3779     dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
// 3780 
// 3781     readReportCfgRspCmd->numAttr = numAttr;
// 3782     for ( i = 0; i < numAttr; i++ )
// 3783     {
// 3784       zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 3785 
// 3786       reportRspRec->status = *pBuf++;
// 3787       reportRspRec->direction = *pBuf++;
// 3788       reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3789       pBuf += 2;
// 3790 
// 3791       if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 3792       {
// 3793         if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 3794         {
// 3795           reportRspRec->dataType = *pBuf++;
// 3796           reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3797           pBuf += 2;
// 3798           reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3799           pBuf += 2;
// 3800 
// 3801           if ( zclAnalogDataType( reportRspRec->dataType ) )
// 3802           {
// 3803             zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
// 3804             reportRspRec->reportableChange = dataPtr;
// 3805 
// 3806             reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
// 3807             pBuf += reportChangeLen;
// 3808 
// 3809             // advance attribute data pointer
// 3810             if ( PADDING_NEEDED( reportChangeLen ) )
// 3811             {
// 3812               reportChangeLen++;
// 3813             }
// 3814 
// 3815             dataPtr += reportChangeLen;
// 3816           }
// 3817         }
// 3818         else
// 3819         {
// 3820           reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3821           pBuf += 2;
// 3822         }
// 3823       }
// 3824     }
// 3825   }
// 3826 
// 3827   return ( (void *)readReportCfgRspCmd );
// 3828 }
// 3829 
// 3830 /*********************************************************************
// 3831  * @fn      zclParseInReportCmd
// 3832  *
// 3833  * @brief   Parse the "Profile" Report Command
// 3834  *
// 3835  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3836  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3837  *
// 3838  * @param   pCmd - pointer to incoming data to parse
// 3839  *
// 3840  * @return  pointer to the parsed command structure
// 3841  */
// 3842 void *zclParseInReportCmd( zclParseCmd_t *pCmd )
// 3843 {
// 3844   zclReportCmd_t *reportCmd;
// 3845   uint8 *pBuf = pCmd->pData;
// 3846   uint16 attrDataLen;
// 3847   uint8 *dataPtr;
// 3848   uint8 numAttr = 0;
// 3849   uint8 hdrLen;
// 3850   uint16 dataLen = 0;
// 3851 
// 3852   // find out the number of attributes and the length of attribute data
// 3853   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3854   {
// 3855     uint8 dataType;
// 3856 
// 3857     numAttr++;
// 3858     pBuf += 2; // move pass attribute id
// 3859 
// 3860     dataType = *pBuf++;
// 3861 
// 3862     attrDataLen = zclGetAttrDataLength( dataType, pBuf );
// 3863     pBuf += attrDataLen; // move pass attribute data
// 3864 
// 3865     // add padding if needed
// 3866     if ( PADDING_NEEDED( attrDataLen ) )
// 3867     {
// 3868       attrDataLen++;
// 3869     }
// 3870 
// 3871     dataLen += attrDataLen;
// 3872   }
// 3873 
// 3874   hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
// 3875 
// 3876   reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3877   if (reportCmd != NULL )
// 3878   {
// 3879     uint8 i;
// 3880     pBuf = pCmd->pData;
// 3881     dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
// 3882 
// 3883     reportCmd->numAttr = numAttr;
// 3884     for ( i = 0; i < numAttr; i++ )
// 3885     {
// 3886       zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 3887 
// 3888       reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3889       pBuf += 2;
// 3890       reportRec->dataType = *pBuf++;
// 3891 
// 3892       attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
// 3893       zcl_memcpy( dataPtr, pBuf, attrDataLen );
// 3894       reportRec->attrData = dataPtr;
// 3895 
// 3896       pBuf += attrDataLen; // move pass attribute data
// 3897 
// 3898       // advance attribute data pointer
// 3899       if ( PADDING_NEEDED( attrDataLen ) )
// 3900       {
// 3901         attrDataLen++;
// 3902       }
// 3903 
// 3904       dataPtr += attrDataLen;
// 3905     }
// 3906   }
// 3907 
// 3908   return ( (void *)reportCmd );
// 3909 }
// 3910 #endif // ZCL_REPORT
// 3911 
// 3912 /*********************************************************************
// 3913  * @fn      zclParseInDefaultRspCmd
// 3914  *
// 3915  * @brief   Parse the "Profile" Default Response Command
// 3916  *
// 3917  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3918  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3919  *
// 3920  * @param   pCmd - pointer to incoming data to parse
// 3921  *
// 3922  * @return  pointer to the parsed command structure
// 3923  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3924 static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
zclParseInDefaultRspCmd:
          CFI Block cfiBlock262 Using cfiCommon0
          CFI Function zclParseInDefaultRspCmd
        CODE
// 3925 {
        FUNCALL zclParseInDefaultRspCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 3926   zclDefaultRspCmd_t *defaultRspCmd;
// 3927   uint8 *pBuf = pCmd->pData;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_64:
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
// 3928 
// 3929   defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
// 3930   if ( defaultRspCmd != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_5
// 3931   {
// 3932     defaultRspCmd->commandID = *pBuf++;
        LCALL   ?Subroutine8 & 0xFFFF
// 3933     defaultRspCmd->statusCode = *pBuf;
// 3934   }
// 3935 
// 3936   return ( (void *)defaultRspCmd );
??CrossCallReturnLabel_5:
        LJMP    ?Subroutine2 & 0xFFFF
// 3937 }
          CFI EndBlock cfiBlock262

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond263 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function zclParseInDefaultRspCmd
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+-2
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker265 Using cfiCommon1
          CFI (cfiPicker265) NoFunction
          CFI (cfiPicker265) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiPicker265

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zcl_RegisteredMsgTaskID>`:
        DATA8
        DB 255

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_Init::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_event_loop::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerForMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerForMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_HandleExternal::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_HandleExternal

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_getRawAFMsg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getRawAFMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_getParsedTransSeqNum::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getParsedTransSeqNum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerPlugin::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerPlugin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerAttrList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerAttrList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerClusterOptionList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerClusterOptionList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerValidateAttrData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerValidateAttrData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_registerReadWriteCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerReadWriteCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_DeviceOperational::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_DeviceOperational

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendCommand::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendCommand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_SendDefaultRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendDefaultRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zcl_ProcessMessageMSG::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_ProcessMessageMSG

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseHdr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseHdr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclBuildHdr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclBuildHdr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindAttrRecsList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindAttrRecsList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindAttrRec::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindAttrRec

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclFindClusterOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindClusterOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetClusterOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetClusterOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSetSecurityOption::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSetSecurityOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclSerializeData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSerializeData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetDataTypeLength::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetDataTypeLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclGetAttrDataLength::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetAttrDataLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??zclParseInDefaultRspCmd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInDefaultRspCmd

        END
// 3938 
// 3939 #ifdef ZCL_DISCOVER
// 3940 /*********************************************************************
// 3941  * @fn      zclParseInDiscAttrsCmd
// 3942  *
// 3943  * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
// 3944  *
// 3945  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3946  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3947  *
// 3948  * @param   pCmd - pointer to incoming data to parse
// 3949  *
// 3950  * @return  pointer to the parsed command structure
// 3951  */
// 3952 void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
// 3953 {
// 3954   zclDiscoverAttrsCmd_t *pDiscoverCmd;
// 3955   uint8 *pBuf = pCmd->pData;
// 3956 
// 3957   pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
// 3958   if ( pDiscoverCmd != NULL )
// 3959   {
// 3960     pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3961     pBuf += 2;
// 3962     pDiscoverCmd->maxAttrIDs = *pBuf;
// 3963   }
// 3964 
// 3965   return ( (void *)pDiscoverCmd );
// 3966 }
// 3967 
// 3968 /*********************************************************************
// 3969  * @fn      zclParseInDiscAttrsRspCmd
// 3970  *
// 3971  * @brief   Parse the "Profile" Discovery Response Commands
// 3972  *
// 3973  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3974  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3975  *
// 3976  * @param   pCmd - pointer to incoming data to parse
// 3977  *
// 3978  * @return  pointer to the parsed command structure
// 3979  */
// 3980 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 3981 static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
// 3982 {
// 3983   zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
// 3984   uint8 *pBuf = pCmd->pData;
// 3985   uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
// 3986 
// 3987   pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
// 3988                     ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
// 3989 
// 3990   if ( pDiscoverRspCmd != NULL )
// 3991   {
// 3992     uint8 i;
// 3993 
// 3994     pDiscoverRspCmd->discComplete = *pBuf++;
// 3995     pDiscoverRspCmd->numAttr = numAttr;
// 3996 
// 3997     for ( i = 0; i < numAttr; i++ )
// 3998     {
// 3999       pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4000       pBuf += 2;
// 4001       pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
// 4002     }
// 4003   }
// 4004 
// 4005   return ( (void *)pDiscoverRspCmd );
// 4006 }
// 4007 
// 4008 /*********************************************************************
// 4009  * @fn      zclParseInDiscCmdsCmd
// 4010  *
// 4011  * @brief   Parse the "Profile" Discovery Commands
// 4012  *
// 4013  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4014  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4015  *
// 4016  * @param   pCmd - pointer to incoming data to parse
// 4017  *
// 4018  * @return  pointer to the parsed command structure
// 4019  */
// 4020 void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
// 4021 {
// 4022   zclDiscoverCmdsCmd_t *pDiscoverCmd;
// 4023   uint8 *pBuf = pCmd->pData;
// 4024 
// 4025   pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
// 4026   if ( pDiscoverCmd != NULL )
// 4027   {
// 4028     pDiscoverCmd->startCmdID = *pBuf++;
// 4029     pDiscoverCmd->maxCmdID = *pBuf++;
// 4030   }
// 4031 
// 4032   return ( (void *)pDiscoverCmd );
// 4033 }
// 4034 
// 4035 /*********************************************************************
// 4036  * @fn      zclParseInDiscCmdsRspCmd
// 4037  *
// 4038  * @brief   Parse the Discover Commands Response Command
// 4039  *
// 4040  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4041  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4042  *
// 4043  * @param   pCmd - pointer to incoming data to parse
// 4044  *
// 4045  * @return  pointer to the parsed command structure
// 4046  */
// 4047 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4048 static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
// 4049 {
// 4050   zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
// 4051   uint8 *pBuf = pCmd->pData;
// 4052   uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // length of command ID variable array
// 4053 
// 4054     // allocate memory for size of structure plus variable array
// 4055   pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmdRsp_t ) +
// 4056                     ( numCmds * sizeof(uint8) ) );
// 4057   if ( pDiscoverRspCmd != NULL )
// 4058   {
// 4059     uint8 i;
// 4060     pDiscoverRspCmd->discComplete = *pBuf++;
// 4061     pDiscoverRspCmd->numCmd = numCmds;
// 4062 
// 4063     for ( i = 0; i < numCmds; i++ )
// 4064     {
// 4065       pDiscoverRspCmd->pCmdID[i] = *pBuf++;
// 4066     }
// 4067   }
// 4068 
// 4069   return ( (void *)pDiscoverRspCmd );
// 4070 }
// 4071 
// 4072 /*********************************************************************
// 4073  * @fn      zclParseInDiscAttrsExtRspCmd
// 4074  *
// 4075  * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
// 4076  *
// 4077  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4078  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4079  *
// 4080  * @param   pCmd - pointer to incoming data to parse
// 4081  *
// 4082  * @return  pointer to the parsed command structure
// 4083  */
// 4084 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4085 static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
// 4086 {
// 4087   zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
// 4088   uint8 i;
// 4089   uint8 *pBuf = pCmd->pData;
// 4090   uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
// 4091 
// 4092   pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
// 4093                     ( numAttrs * sizeof(zclExtAttrInfo_t) ) );
// 4094 
// 4095   if ( pDiscoverRspCmd != NULL )
// 4096   {
// 4097     pDiscoverRspCmd->discComplete = *pBuf++;
// 4098     pDiscoverRspCmd->numAttr = numAttrs;
// 4099 
// 4100     for ( i = 0; i < numAttrs; i++ )
// 4101     {
// 4102       pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4103       pBuf += 2;
// 4104       pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
// 4105       pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
// 4106     }
// 4107   }
// 4108 
// 4109   return ( (void *)pDiscoverRspCmd );
// 4110 }
// 4111 #endif // ZCL_DISCOVER
// 4112 
// 4113 #ifdef ZCL_READ
// 4114 /*********************************************************************
// 4115  * @fn      zclProcessInReadCmd
// 4116  *
// 4117  * @brief   Process the "Profile" Read Command
// 4118  *
// 4119  * @param   pInMsg - incoming message to process
// 4120  *
// 4121  * @return  TRUE if command processed. FALSE, otherwise.
// 4122  */
// 4123 static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
// 4124 {
// 4125   zclReadCmd_t *readCmd;
// 4126   zclReadRspCmd_t *readRspCmd;
// 4127   zclAttrRec_t attrRec;
// 4128   uint16 len;
// 4129   uint8 i;
// 4130 
// 4131   readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
// 4132 
// 4133   // calculate the length of the response status record
// 4134   len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
// 4135 
// 4136   readRspCmd = zcl_mem_alloc( len );
// 4137   if ( readRspCmd == NULL )
// 4138   {
// 4139     return FALSE; // EMBEDDED RETURN
// 4140   }
// 4141 
// 4142   readRspCmd->numAttr = readCmd->numAttr;
// 4143   for ( i = 0; i < readCmd->numAttr; i++ )
// 4144   {
// 4145     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 4146 
// 4147     statusRec->attrID = readCmd->attrID[i];
// 4148 
// 4149     if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4150                          readCmd->attrID[i], &attrRec ) )
// 4151     {
// 4152       if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
// 4153       {
// 4154         statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
// 4155                                               &(pInMsg->msg->srcAddr), &attrRec );
// 4156         if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 4157         {
// 4158           statusRec->data = attrRec.attr.dataPtr;
// 4159           statusRec->dataType = attrRec.attr.dataType;
// 4160         }
// 4161       }
// 4162       else
// 4163       {
// 4164         statusRec->status = ZCL_STATUS_WRITE_ONLY;
// 4165       }
// 4166     }
// 4167     else
// 4168     {
// 4169       statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4170     }
// 4171   }
// 4172 
// 4173   // Build and send Read Response command
// 4174   zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
// 4175                    readRspCmd, !pInMsg->hdr.fc.direction,
// 4176                    true, pInMsg->hdr.transSeqNum );
// 4177   zcl_mem_free( readRspCmd );
// 4178 
// 4179   return TRUE;
// 4180 }
// 4181 #endif // ZCL_READ
// 4182 
// 4183 #ifdef ZCL_WRITE
// 4184 /*********************************************************************
// 4185  * @fn      processInWriteCmd
// 4186  *
// 4187  * @brief   Process the "Profile" Write and Write No Response Commands
// 4188  *
// 4189  * @param   pInMsg - incoming message to process
// 4190  *
// 4191  * @return  TRUE if command processed. FALSE, otherwise.
// 4192  */
// 4193 static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
// 4194 {
// 4195   zclWriteCmd_t *writeCmd;
// 4196   zclWriteRspCmd_t *writeRspCmd;
// 4197   uint8 sendRsp = FALSE;
// 4198   uint8 j = 0;
// 4199   uint8 i;
// 4200 
// 4201   writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
// 4202   if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
// 4203   {
// 4204     // We need to send a response back - allocate space for it
// 4205     writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
// 4206             + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
// 4207     if ( writeRspCmd == NULL )
// 4208     {
// 4209       return FALSE; // EMBEDDED RETURN
// 4210     }
// 4211 
// 4212     sendRsp = TRUE;
// 4213   }
// 4214 
// 4215   for ( i = 0; i < writeCmd->numAttr; i++ )
// 4216   {
// 4217     zclAttrRec_t attrRec;
// 4218     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4219 
// 4220     if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4221                          statusRec->attrID, &attrRec ) )
// 4222     {
// 4223       if ( statusRec->dataType == attrRec.attr.dataType )
// 4224       {
// 4225         uint8 status;
// 4226 
// 4227         // Write the new attribute value
// 4228         if ( attrRec.attr.dataPtr != NULL )
// 4229         {
// 4230           status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4231                                      &attrRec, statusRec );
// 4232         }
// 4233         else // Use CB
// 4234         {
// 4235           status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4236                                             &attrRec, statusRec->attrData );
// 4237         }
// 4238 
// 4239         // If successful, a write attribute status record shall NOT be generated
// 4240         if ( sendRsp && status != ZCL_STATUS_SUCCESS )
// 4241         {
// 4242           // Attribute is read only - move on to the next write attribute record
// 4243           writeRspCmd->attrList[j].status = status;
// 4244           writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4245         }
// 4246       }
// 4247       else
// 4248       {
// 4249         // Attribute data type is incorrect - move on to the next write attribute record
// 4250         if ( sendRsp )
// 4251         {
// 4252           writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
// 4253           writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4254         }
// 4255       }
// 4256     }
// 4257     else
// 4258     {
// 4259       // Attribute is not supported - move on to the next write attribute record
// 4260       if ( sendRsp )
// 4261       {
// 4262         writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4263         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4264       }
// 4265     }
// 4266   } // for loop
// 4267 
// 4268   if ( sendRsp )
// 4269   {
// 4270     writeRspCmd->numAttr = j;
// 4271     if ( writeRspCmd->numAttr == 0 )
// 4272     {
// 4273       // Since all records were written successful, include a single status record
// 4274       // in the resonse command with the status field set to SUCCESS and the
// 4275       // attribute ID field omitted.
// 4276       writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
// 4277       writeRspCmd->numAttr = 1;
// 4278     }
// 4279 
// 4280     zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4281                       pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
// 4282                       true, pInMsg->hdr.transSeqNum );
// 4283     zcl_mem_free( writeRspCmd );
// 4284   }
// 4285 
// 4286   return TRUE;
// 4287 }
// 4288 
// 4289 /*********************************************************************
// 4290  * @fn      zclRevertWriteUndividedCmd
// 4291  *
// 4292  * @brief   Revert the "Profile" Write Undevided Command
// 4293  *
// 4294  * @param   pInMsg - incoming message to process
// 4295  * @param   curWriteRec - old data
// 4296  * @param   numAttr - number of attributes to be reverted
// 4297  *
// 4298  * @return  none
// 4299  */
// 4300 static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
// 4301                                     zclWriteRec_t *curWriteRec, uint16 numAttr )
// 4302 {
// 4303   uint8 i;
// 4304 
// 4305   for ( i = 0; i < numAttr; i++ )
// 4306   {
// 4307     zclAttrRec_t attrRec;
// 4308     zclWriteRec_t *statusRec = &(curWriteRec[i]);
// 4309 
// 4310     if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4311                           statusRec->attrID, &attrRec ) )
// 4312     {
// 4313       break; // should never happen
// 4314     }
// 4315 
// 4316     if ( attrRec.attr.dataPtr != NULL )
// 4317     {
// 4318       // Just copy the old data back - no need to validate the data
// 4319       uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
// 4320       zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
// 4321     }
// 4322     else // Use CB
// 4323     {
// 4324       // Write the old data back
// 4325       zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4326                                &attrRec, statusRec->attrData );
// 4327     }
// 4328   } // for loop
// 4329 }
// 4330 
// 4331 /*********************************************************************
// 4332  * @fn      zclProcessInWriteUndividedCmd
// 4333  *
// 4334  * @brief   Process the "Profile" Write Undivided Command
// 4335  *
// 4336  * @param   pInMsg - incoming message to process
// 4337  *
// 4338  * @return  TRUE if command processed. FALSE, otherwise.
// 4339  */
// 4340 static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
// 4341 {
// 4342   zclWriteCmd_t *writeCmd;
// 4343   zclWriteRspCmd_t *writeRspCmd;
// 4344   zclAttrRec_t attrRec;
// 4345   uint16 dataLen;
// 4346   uint16 curLen = 0;
// 4347   uint8 j = 0;
// 4348   uint8 i;
// 4349 
// 4350   writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
// 4351 
// 4352   // Allocate space for Write Response Command
// 4353   writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
// 4354                    + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
// 4355   if ( writeRspCmd == NULL )
// 4356   {
// 4357     return FALSE; // EMBEDDED RETURN
// 4358   }
// 4359 
// 4360   // If any attribute cannot be written, no attribute values are changed. Hence,
// 4361   // make sure all the attributes are supported and writable
// 4362   for ( i = 0; i < writeCmd->numAttr; i++ )
// 4363   {
// 4364     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4365 
// 4366     if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4367                           statusRec->attrID, &attrRec ) )
// 4368     {
// 4369       // Attribute is not supported - stop here
// 4370       writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4371       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4372       break;
// 4373     }
// 4374 
// 4375     if ( statusRec->dataType != attrRec.attr.dataType )
// 4376     {
// 4377       // Attribute data type is incorrect - stope here
// 4378       writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
// 4379       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4380       break;
// 4381     }
// 4382 
// 4383     if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
// 4384     {
// 4385       // Attribute is not writable - stop here
// 4386       writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
// 4387       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4388       break;
// 4389     }
// 4390 
// 4391     if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
// 4392     {
// 4393       // Not authorized to write - stop here
// 4394       writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
// 4395       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4396       break;
// 4397     }
// 4398 
// 4399     // Attribute Data length
// 4400     if ( attrRec.attr.dataPtr != NULL )
// 4401     {
// 4402       dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
// 4403     }
// 4404     else // Use CB
// 4405     {
// 4406       dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4407                                              statusRec->attrID );
// 4408     }
// 4409 
// 4410     // add padding if needed
// 4411     if ( PADDING_NEEDED( dataLen ) )
// 4412     {
// 4413       dataLen++;
// 4414     }
// 4415 
// 4416     curLen += dataLen;
// 4417   } // for loop
// 4418 
// 4419   writeRspCmd->numAttr = j;
// 4420   if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
// 4421   {
// 4422     uint8 *curDataPtr;
// 4423     zclWriteRec_t *curWriteRec;
// 4424 
// 4425     // calculate the length of the current data header
// 4426     uint8 hdrLen = j * sizeof( zclWriteRec_t );
// 4427 
// 4428     // Allocate space to keep a copy of the current data
// 4429     curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
// 4430     if ( curWriteRec == NULL )
// 4431     {
// 4432       zcl_mem_free(writeRspCmd );
// 4433       return FALSE; // EMBEDDED RETURN
// 4434     }
// 4435 
// 4436     curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
// 4437 
// 4438     // Write the new data over
// 4439     for ( i = 0; i < writeCmd->numAttr; i++ )
// 4440     {
// 4441       uint8 status;
// 4442       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4443       zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
// 4444 
// 4445       if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4446                             statusRec->attrID, &attrRec ) )
// 4447       {
// 4448         break; // should never happen
// 4449       }
// 4450 
// 4451       // Keep a copy of the current data before before writing the new data over
// 4452       curStatusRec->attrID = statusRec->attrID;
// 4453       curStatusRec->attrData = curDataPtr;
// 4454 
// 4455       if ( attrRec.attr.dataPtr != NULL )
// 4456       {
// 4457         // Read the current value
// 4458         zclReadAttrData( curDataPtr, &attrRec, &dataLen );
// 4459 
// 4460         // Write the new attribute value
// 4461         status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4462                                    &attrRec, statusRec );
// 4463       }
// 4464       else // Use CBs
// 4465       {
// 4466         // Read the current value
// 4467         zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4468                                 statusRec->attrID, curDataPtr, &dataLen );
// 4469         // Write the new attribute value
// 4470         status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4471                                           &attrRec, statusRec->attrData );
// 4472       }
// 4473 
// 4474       // If successful, a write attribute status record shall NOT be generated
// 4475       if ( status != ZCL_STATUS_SUCCESS )
// 4476       {
// 4477         writeRspCmd->attrList[j].status = status;
// 4478         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4479 
// 4480         // Since this write failed, we need to revert all the pervious writes
// 4481         zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
// 4482         break;
// 4483       }
// 4484 
// 4485       // add padding if needed
// 4486       if ( PADDING_NEEDED( dataLen ) )
// 4487       {
// 4488         dataLen++;
// 4489       }
// 4490 
// 4491       curDataPtr += dataLen;
// 4492     } // for loop
// 4493 
// 4494     writeRspCmd->numAttr = j;
// 4495     if ( writeRspCmd->numAttr  == 0 )
// 4496     {
// 4497       // Since all records were written successful, include a single status record
// 4498       // in the resonse command with the status field set to SUCCESS and the
// 4499       // attribute ID field omitted.
// 4500       writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
// 4501       writeRspCmd->numAttr = 1;
// 4502     }
// 4503 
// 4504     zcl_mem_free( curWriteRec );
// 4505   }
// 4506 
// 4507   zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4508                     pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
// 4509                     true, pInMsg->hdr.transSeqNum );
// 4510   zcl_mem_free( writeRspCmd );
// 4511 
// 4512   return TRUE;
// 4513 }
// 4514 #endif // ZCL_WRITE
// 4515 
// 4516 #ifdef ZCL_DISCOVER
// 4517 /*********************************************************************
// 4518  * @fn      zclProcessInDiscAttrs
// 4519  *
// 4520  * @brief   Process the "Profile" Discover Attributes Commands
// 4521  *
// 4522  * @param   pInMsg - incoming message to process
// 4523  *
// 4524  * @return  TRUE if command processed. FALSE, otherwise.
// 4525  */
// 4526 static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
// 4527 {
// 4528   zclDiscoverAttrsCmd_t *pDiscoverCmd;
// 4529   zclAttrRec_t attrRec;
// 4530   uint16 attrID;
// 4531   uint8 numAttrs;
// 4532   uint8 i;
// 4533 
// 4534   pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
// 4535 
// 4536   // Find out the number of attributes supported within the specified range
// 4537   for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
// 4538   {
// 4539     // finds the next attribute on this endpoint/cluster after the range.
// 4540     // attributes must be in numerical order in the list.
// 4541     if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4542     {
// 4543       break;
// 4544     }
// 4545   }
// 4546 
// 4547   numAttrs = i;  // store range of attributes in buffer
// 4548 
// 4549     // Process message for either attributes or extended attributes
// 4550   if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
// 4551   {
// 4552     zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
// 4553   }
// 4554   else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
// 4555   {
// 4556     zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
// 4557   }
// 4558 
// 4559   return TRUE;
// 4560 }
// 4561 
// 4562 /*********************************************************************
// 4563  * @fn      zclProcessInDiscAttrsCmd
// 4564  *
// 4565  * @brief   Process the Discover Attributes Command
// 4566  *
// 4567  * @param   pInMsg - incoming message to process
// 4568  *
// 4569  * @param   pDiscoverCmd - structure from requesting command
// 4570  *
// 4571  * @param   attrLenBuf - describes the amount of attributes to be processed
// 4572  *
// 4573  * @return  none
// 4574  */
// 4575 static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
// 4576 {
// 4577   zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
// 4578   uint8 discComplete = TRUE;
// 4579   zclAttrRec_t attrRec;
// 4580   uint16 attrID;
// 4581   uint8 i;
// 4582 
// 4583   // Allocate space for the response command
// 4584   pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
// 4585                                                           + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
// 4586   if ( pDiscoverRsp == NULL )
// 4587   {
// 4588     return; // EMBEDDED RETURN
// 4589   }
// 4590 
// 4591   if ( numAttrs != 0 )
// 4592   {
// 4593     for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
// 4594     {
// 4595       if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4596       {
// 4597         break; // should not happen, as numAttrs already calculated
// 4598       }
// 4599 
// 4600       pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
// 4601       pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
// 4602     }
// 4603 
// 4604     // Are there more attributes to be discovered?
// 4605     if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4606     {
// 4607       discComplete = FALSE;
// 4608     }
// 4609   }
// 4610 
// 4611   pDiscoverRsp->discComplete = discComplete;
// 4612   pDiscoverRsp->numAttr = numAttrs;
// 4613 
// 4614   zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4615                                pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
// 4616                                true, pInMsg->hdr.transSeqNum );
// 4617   zcl_mem_free( pDiscoverRsp );
// 4618 
// 4619   return;
// 4620 }
// 4621 
// 4622 /*********************************************************************
// 4623  * @fn      zclProcessInDiscAttrsExtCmd
// 4624  *
// 4625  * @brief   Process the Discover Attributes Extended Command
// 4626  *
// 4627  * @param   pInMsg - incoming message to process
// 4628  *
// 4629  * @param   pDiscoverCmd - structure from requesting command
// 4630  *
// 4631  * @param   attrLenBuf - describes the amount of attributes to be processed
// 4632  *
// 4633  * @return  none
// 4634  */
// 4635 static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
// 4636 {
// 4637   zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
// 4638   uint8 discComplete = TRUE;
// 4639   zclAttrRec_t attrRec;
// 4640   uint16 attrID;
// 4641   uint8 i;
// 4642 
// 4643     // Allocate space for the response command
// 4644   pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
// 4645                                                          + sizeof ( zclExtAttrInfo_t ) * numAttrs );
// 4646   if ( pDiscoverExtRsp == NULL )
// 4647   {
// 4648     return; // EMBEDDED RETURN
// 4649   }
// 4650 
// 4651 
// 4652   if ( numAttrs != 0 )
// 4653   {
// 4654     for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
// 4655     {
// 4656       if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4657       {
// 4658         break; // Should not happen, as numAttrs already calculated
// 4659       }
// 4660 
// 4661       pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
// 4662       pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
// 4663       pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
// 4664     }
// 4665 
// 4666     // Are there more attributes to be discovered?
// 4667     if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4668     {
// 4669       discComplete = FALSE;
// 4670     }
// 4671   }
// 4672 
// 4673   pDiscoverExtRsp->discComplete = discComplete;
// 4674   pDiscoverExtRsp->numAttr = numAttrs;
// 4675 
// 4676   zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4677                                pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
// 4678                                true, pInMsg->hdr.transSeqNum );
// 4679 
// 4680   zcl_mem_free( pDiscoverExtRsp );
// 4681 
// 4682   return;
// 4683 }
// 4684 
// 4685 /*********************************************************************
// 4686  * @fn      zclProcessInDiscCmd
// 4687  *
// 4688  * @brief   Process the "Profile" Discover Command
// 4689  *
// 4690  * @param   pInMsg - incoming message to process
// 4691  *
// 4692  * @return  TRUE if command processed. FALSE, otherwise.
// 4693  */
// 4694 static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
// 4695 {
// 4696   zclDiscoverCmdsCmd_t *pDiscoverCmd;
// 4697   zclDiscoverCmdsCmdRsp_t cmdRsp;
// 4698   ZStatus_t status;
// 4699   zclCommandRec_t cmdRec;
// 4700   uint8 cmdID;
// 4701   uint8 i;
// 4702   uint8 j;
// 4703 
// 4704   pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
// 4705 
// 4706   // Find out the number of commands supported within the specified range
// 4707   for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
// 4708   {
// 4709     if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 4710     {
// 4711       break;  // Command not supported
// 4712     }
// 4713   }
// 4714 
// 4715   // Allocate space for the response command
// 4716   cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
// 4717 
// 4718   if ( cmdRsp.pCmdID == NULL )
// 4719   {
// 4720     return FALSE; // EMBEDDED RETURN
// 4721   }
// 4722 
// 4723   if ( i != 0 )
// 4724   {
// 4725     for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
// 4726     {
// 4727       if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 4728       {
// 4729         break; // Attribute not supported
// 4730       }
// 4731 
// 4732       cmdRsp.pCmdID[j] = cmdRec.cmdID;
// 4733     }
// 4734   }
// 4735 
// 4736   // Are there more commands to be discovered?
// 4737   if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 4738   {
// 4739     cmdRsp.discComplete = FALSE;
// 4740   }
// 4741   else
// 4742   {
// 4743     cmdRsp.discComplete = TRUE;
// 4744   }
// 4745 
// 4746   // pass the command requested
// 4747   cmdRsp.cmdType = pInMsg->hdr.commandID;
// 4748 
// 4749   // store number of commands returned
// 4750   cmdRsp.numCmd = j;
// 4751 
// 4752   status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4753                                       pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
// 4754                                       true, pInMsg->hdr.transSeqNum );
// 4755 
// 4756   zcl_mem_free( cmdRsp.pCmdID );
// 4757 
// 4758   if ( status == ZSuccess )
// 4759   {
// 4760     return TRUE;
// 4761   }
// 4762   else
// 4763   {
// 4764     return FALSE;
// 4765   }
// 4766 }
// 4767 
// 4768 #endif // ZCL_DISCOVER
// 4769 
// 4770 /*********************************************************************
// 4771 *********************************************************************/
// 
// 4 390 bytes in segment BANKED_CODE
//   156 bytes in segment BANK_RELAYS
//    92 bytes in segment CODE_C
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    14 bytes in segment XDATA_Z
// 
// 4 639 bytes of CODE  memory
//    15 bytes of XDATA memory
//
//Errors: none
//Warnings: none
