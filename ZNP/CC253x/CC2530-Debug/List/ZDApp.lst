###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Nov/2018  13:52:17
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDApp.c
#    Command line       =  
#        -f "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -f "D:\1.embedded\kit\cc2530\Reference\Z-Stack
#        Mesh 1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Components\stack\zdo\ZDApp.c" -D FEATURE_SYSTEM_STATS -D
#        POWER_SAVING -lC "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
#        Pe001,Pa010 -o "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --no_code_motion
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\ZDApp.lst
#    Object file        =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\ZDApp.r51
#
###############################################################################

D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh 1.0.0\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2014-06-03 18:29:46 -0700 (Tue, 03 Jun 2014) $
      4            Revision:       $Revision: 38789 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          #include "hal_lcd.h"
     72          #include "hal_key.h"
     73          
     74          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     75            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     76          #endif
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          
     82          #if !defined( NWK_START_DELAY )
     83            #define NWK_START_DELAY             100   // in milliseconds
     84          #endif
     85          
     86          #if !defined( LEAVE_RESET_DELAY )
     87            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     88          #endif
     89          
     90          // Init ZDO, but hold and wait for application to start the joining or
     91          // forming network
     92          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     93          
     94          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     95            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     96          #endif
     97          
     98          #if !defined( BEACON_REQUEST_DELAY )
     99            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    100          #endif
    101          
    102          #if !defined( BEACON_REQ_DELAY_MASK )
    103            #define BEACON_REQ_DELAY_MASK       0x007F
    104          #endif
    105          
    106          #define MAX_RESUME_RETRY            3
    107          
    108          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    109          
    110          // Beacon Order Settings (see NLMEDE.h)
    111          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    112          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    113          
    114          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    115          // Additional counts to add to the frame counter when restoring from NV
    116          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    117          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    118          #endif
    119          
    120          // Leave control bits
    121          #define ZDAPP_LEAVE_CTRL_INIT 0
    122          #define ZDAPP_LEAVE_CTRL_SET  1
    123          #define ZDAPP_LEAVE_CTRL_RA   2
    124          
    125          // Address Manager Stub Implementation
    126          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    127          
    128          
    129          #if !defined ZDO_NV_SAVE_RFDs
    130          #define ZDO_NV_SAVE_RFDs  TRUE
    131          #endif
    132          
    133          // Delay time before updating NWK NV data to force fewer writes during high activity.
    134          #if ZDO_NV_SAVE_RFDs
    135          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    136          #else
    137          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    138          #endif
    139          
    140          // Timeout value to process New Devices
    141          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    142          
    143          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    144          #if !defined MAX_PENDING_BIND_REQ
    145          #define MAX_PENDING_BIND_REQ 3
    146          #endif
    147          #endif
    148          
    149          /******************************************************************************
    150           * TYPEDEFS
    151           */
    152          typedef struct
    153          {
    154            void   *next;
    155            uint16 shortAddr;
    156            uint16 timeDelta;
    157          } ZDAppNewDevice_t;
    158          
    159          /*********************************************************************
    160           * GLOBAL VARIABLES
    161           */
    162          
    163          #if defined( LCD_SUPPORTED )
    164            uint8 MatchRsps = 0;
    165          #endif
    166          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    176          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    177          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    178          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    180          
    181          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    185          
    186          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    188          #endif
    189          
    190          /*********************************************************************
    191           * EXTERNAL VARIABLES
    192           */
    193          
    194          /*********************************************************************
    195           * EXTERNAL FUNCTIONS
    196           */
    197          
    198          /*********************************************************************
    199           * LOCAL FUNCTIONS
    200           */
    201          
    202          void ZDApp_NetworkStartEvt( void );
    203          void ZDApp_DeviceAuthEvt( void );
    204          void ZDApp_SaveNetworkStateEvt( void );
    205          
    206          uint8 ZDApp_ReadNetworkRestoreState( void );
    207          uint8 ZDApp_RestoreNetworkState( void );
    208          void ZDAppDetermineDeviceType( void );
    209          void ZDApp_InitUserDesc( void );
    210          void ZDAppCheckForHoldKey( void );
    211          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    212          void ZDApp_ProcessNetworkJoin( void );
    213          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    214          uint8 ZDApp_RestoreNwkKey( void );
    215          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    216          
    217          void ZDApp_SecInit( uint8 state );
    218          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    219          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    220          
    221          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    222          
    223          void ZDApp_ResetTimerStart( uint16 delay );
    224          void ZDApp_ResetTimerCancel( void );
    225          void ZDApp_LeaveCtrlInit( void );
    226          void ZDApp_LeaveCtrlSet( uint8 ra );
    227          uint8 ZDApp_LeaveCtrlBypass( void );
    228          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    229          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    230                                  uint8 removeChildren );
    231          void ZDApp_NodeProfileSync( uint8 stackProfile );
    232          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    233          void ZDApp_RegisterCBs( void );
    234          void ZDApp_InitZdoCBFunc(void);
    235          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    236          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    237          void ZDApp_InitPendingBind( void );
    238          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    239          void ZDApp_AgeOutPendingBindEntry( void );
    240          #endif
    241          
    242          /*********************************************************************
    243           * LOCAL VARIABLES
    244           */
    245          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    246          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    247          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    248          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    249          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    250          
    251          #if defined( HOLD_AUTO_START )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    252            devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    253          #else
    254            devStates_t devState = DEV_INIT;
    255          #endif
    256          
    257          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    258            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    259            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    260                                  // to parent. Set to make the device do an Orphan scan.
    261          #else
    262            // Set the default to coodinator
    263            devStartModes_t devStartMode = MODE_HARD;
    264          #endif
    265          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    266          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    267          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    268          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    269          {
    270            ZDO_EP,
    271            &ZDAppTaskID,
    272            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    273            (afNetworkLatencyReq_t)0            // No Network Latency req
    274          };
    275          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    276          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    277          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    278          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    279          
    280          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    281          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    282          
    283          /*********************************************************************
    284           * @fn      ZDApp_Init
    285           *
    286           * @brief   ZDApp Initialization function.
    287           *
    288           * @param   task_id - ZDApp Task ID
    289           *
    290           * @return  None
    291           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    292          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    293          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    294            // Save the task ID
    295            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    296          
    297            // Initialize the ZDO global device short address storage
    298            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    299            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    300            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
    301          
    302            // Check for manual "Hold Auto Start"
    303            ZDAppCheckForHoldKey();
    304          
    305            // Initialize ZDO items and setup the device - type of device to create.
    306            ZDO_Init();
   \   00001C                ; Setup parameters for call to function ZDO_Init
   \   00001C   12....       LCALL   `??ZDO_Init::?relay` ; Banked call to: ZDO_Init
    307          
    308            // Register the endpoint description with the AF
    309            // This task doesn't have a Simple description, but we still need
    310            // to register the endpoint.
    311            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   00001F                ; Setup parameters for call to function afRegister
   \   00001F   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000021   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000023   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
    312          
    313          #if defined( ZDO_USERDESC_RESPONSE )
    314            ZDApp_InitUserDesc();
   \   000026                ; Setup parameters for call to function ZDApp_InitUserDesc
   \   000026   12....       LCALL   `??ZDApp_InitUserDesc::?relay`; Banked call to: ZDApp_InitUserDesc
    315          #endif // ZDO_USERDESC_RESPONSE
    316          
    317            // Start the device?
    318            if ( devState != DEV_HOLD )
   \   000029   90....       MOV     DPTR,#devState
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6009         JZ      ??ZDApp_Init_0
    319            {
    320              ZDOInitDevice( 0 );
   \   00002F                ; Setup parameters for call to function ZDOInitDevice
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
   \   000036   8014         SJMP    ??ZDApp_Init_1
    321            }
    322            else
    323            {
    324              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   000038                ; Setup parameters for call to function ZDOInitDevice
   \   000038   7AFF         MOV     R2,#-0x1
   \   00003A   7BFF         MOV     R3,#-0x1
   \   00003C   12....       LCALL   `??ZDOInitDevice::?relay`; Banked call to: ZDOInitDevice
    325              // Blink LED to indicate HOLD_START
    326              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   00003F                ; Setup parameters for call to function HalLedBlink
   \   00003F   7CF4         MOV     R4,#-0xc
   \   000041   7D01         MOV     R5,#0x1
   \   000043   7B32         MOV     R3,#0x32
   \   000045   7A00         MOV     R2,#0x0
   \   000047   7908         MOV     R1,#0x8
   \   000049   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    327            }
    328          
    329            // Initialize the ZDO callback function pointers zdoCBFunc[]
    330            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00004C                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00004C   12....       LCALL   `??ZDApp_InitZdoCBFunc::?relay`; Banked call to: ZDApp_InitZdoCBFunc
    331          
    332            ZDApp_RegisterCBs();
   \   00004F                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   00004F   12....       LCALL   `??ZDApp_RegisterCBs::?relay`; Banked call to: ZDApp_RegisterCBs
    333          
    334          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    335          #if defined ( REFLECTOR )
    336            ZDApp_InitPendingBind();
   \   000052                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000052   12....       LCALL   `??ZDApp_InitPendingBind::?relay`; Banked call to: ZDApp_InitPendingBind
    337          #endif
    338          #endif
    339          } /* ZDApp_Init() */
   \   000055   02....       LJMP    ??Subroutine62_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine62_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    340          
    341          /*********************************************************************
    342           * @fn          ZDApp_SecInit
    343           *
    344           * @brief       ZDApp initialize security.
    345           *
    346           * @param       state - device initialization state
    347           *
    348           * @return      none
    349           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    350          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    351          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
    352            uint8 zgPreConfigKey[SEC_KEY_LEN];
    353          
    354            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \   00000C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   7007         JNZ     ??ZDApp_SecInit_0
    355            {
    356              // Set the Trust Center bit
    357              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
   \   000012   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   4401         ORL     A,#0x1
   \   000018   F0           MOVX    @DPTR,A
    358            }
    359          
    360            // Initialize ZigBee Device Security Manager
    361            ZDSecMgrInit(state);
   \                     ??ZDApp_SecInit_0:
   \   000019                ; Setup parameters for call to function ZDSecMgrInit
   \   000019   12....       LCALL   `??ZDSecMgrInit::?relay`; Banked call to: ZDSecMgrInit
    362          
    363            if ( ZG_SECURE_ENABLED )
    364            {
    365              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00001C   E5..         MOV     A,?V0
   \   00001E   604B         JZ      ??ZDApp_SecInit_1
    366              {
    367                nwkFrameCounter = 0;
   \   000020   90....       MOV     DPTR,#nwkFrameCounter
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   F0           MOVX    @DPTR,A
   \   000029   A3           INC     DPTR
   \   00002A   F0           MOVX    @DPTR,A
    368          
    369                if( _NIB.nwkKeyLoaded == FALSE )
   \   00002B   90....       MOV     DPTR,#_NIB + 61
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   703A         JNZ     ??ZDApp_SecInit_1
    370                {
    371                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    372                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000031   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000034   E0           MOVX    A,@DPTR
   \   000035   600E         JZ      ??ZDApp_SecInit_2
   \   000037   90....       MOV     DPTR,#zgSecurityMode
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6401         XRL     A,#0x1
   \   00003D   702C         JNZ     ??ZDApp_SecInit_1
   \   00003F   90....       MOV     DPTR,#zgPreConfigKeys
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6026         JZ      ??ZDApp_SecInit_1
    373                  {
    374                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \                     ??ZDApp_SecInit_2:
   \   000045                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000045   AC..         MOV     R4,?XSP + 0
   \   000047   AD..         MOV     R5,?XSP + 1
   \   000049   7A62         MOV     R2,#0x62
   \   00004B   7B00         MOV     R3,#0x0
   \   00004D   12....       LCALL   `??ZDSecMgrReadKeyFromNv::?relay`; Banked call to: ZDSecMgrReadKeyFromNv
    375                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   000050                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000050   7900         MOV     R1,#0x0
   \   000052   AA..         MOV     R2,?XSP + 0
   \   000054   AB..         MOV     R3,?XSP + 1
   \   000056   12....       LCALL   `??SSP_UpdateNwkKey::?relay`; Banked call to: SSP_UpdateNwkKey
    376                      SSP_SwitchNwkKey( 0 );
   \   000059                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000059   7900         MOV     R1,#0x0
   \   00005B   12....       LCALL   `??SSP_SwitchNwkKey::?relay`; Banked call to: SSP_SwitchNwkKey
    377          
    378                      // clear local copy of key
    379                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   00005E                ; Setup parameters for call to function osal_memset
   \   00005E   7C10         MOV     R4,#0x10
   \   000060   7D00         MOV     R5,#0x0
   \   000062   7900         MOV     R1,#0x0
   \   000064   AA..         MOV     R2,?XSP + 0
   \   000066   AB..         MOV     R3,?XSP + 1
   \   000068   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    380                  }
    381                }
    382              }
    383          
    384              // clean the new devices list when Security module is initialized
    385              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_1:
   \   00006B   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00006E   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000071   601B         JZ      ??ZDApp_SecInit_3
    386              {
    387                ZDAppNewDevice_t *pNewDeviceNext;
    388          
    389                while ( ZDApp_NewDeviceList )
    390                {
    391                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_4:
   \   000073   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000076   FE           MOV     R6,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   FF           MOV     R7,A
    392                  osal_mem_free( ZDApp_NewDeviceList );
   \   00007A                ; Setup parameters for call to function osal_mem_free
   \   00007A   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00007D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    393                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000080   EE           MOV     A,R6
   \   000081   F8           MOV     R0,A
   \   000082   EF           MOV     A,R7
   \   000083   F9           MOV     R1,A
   \   000084   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000087   12....       LCALL   ??Subroutine65_0 & 0xFFFF
    394                }
   \                     ??CrossCallReturnLabel_101:
   \   00008A   E8           MOV     A,R0
   \   00008B   49           ORL     A,R1
   \   00008C   70E5         JNZ     ??ZDApp_SecInit_4
    395              }
    396            }
    397          }
   \                     ??ZDApp_SecInit_3:
   \   00008E   7410         MOV     A,#0x10
   \   000090   02....       LJMP    ??Subroutine69_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine54_0
   \   000003                ; // Fall through to label ??Subroutine54_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine54_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine58_0
   \   000003                ; // Fall through to label ??Subroutine58_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine58_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine65_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine66_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine62_0 & 0xFFFF
    398          
    399          /*********************************************************************
    400           * @fn      ZDApp_event_loop()
    401           *
    402           * @brief   Main event loop for Zigbee device objects task. This function
    403           *          should be called at periodic intervals.
    404           *
    405           * @param   task_id - Task ID
    406           * @param   events  - Bitmap of events
    407           *
    408           * @return  none
    409           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    410          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    411          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    412            uint8 *msg_ptr;
    413          
    414            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL     A,#0x80
   \   00000D   7033         JNZ     ??ZDApp_event_loop_0
    415            {
    416              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    417              {
    418                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    419          
    420                // Release the memory
    421                osal_msg_deallocate( msg_ptr );
    422              }
    423          
    424              // Return unprocessed events
    425              return (events ^ SYS_EVENT_MSG);
    426            }
    427          
    428            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EE           MOV     A,R6
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5047         JNC     ??ZDApp_event_loop_1
    429            {
    430              // Initialize apps and start the network
    431              devState = DEV_INIT;
   \   000014   90....       MOV     DPTR,#devState
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ??Subroutine55_0 & 0xFFFF
    432              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_78:
   \   00001C   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    433          
    434              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    435                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   00001F                ; Setup parameters for call to function ZDO_StartDevice
   \   00001F   7C0F         MOV     R4,#0xf
   \   000021   7B0F         MOV     R3,#0xf
   \   000023   90....       MOV     DPTR,#devStartMode
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FA           MOV     R2,A
   \   000028   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   5407         ANL     A,#0x7
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   `??ZDO_StartDevice::?relay`; Banked call to: ZDO_StartDevice
    436          
    437              // Return unprocessed events
    438              return (events ^ ZDO_NETWORK_INIT);
   \   000032   EE           MOV     A,R6
   \   000033   6401         XRL     A,#0x1
   \   000035   02....       LJMP    ??ZDApp_event_loop_2 & 0xFFFF
    439            }
   \                     ??ZDApp_event_loop_3:
   \   000038                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000038   12....       LCALL   `??ZDApp_ProcessOSALMsg::?relay`; Banked call to: ZDApp_ProcessOSALMsg
   \   00003B                ; Setup parameters for call to function osal_msg_deallocate
   \   00003B   AA..         MOV     R2,?V0
   \   00003D   AB..         MOV     R3,?V1
   \   00003F   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
   \                     ??ZDApp_event_loop_0:
   \   000042                ; Setup parameters for call to function osal_msg_receive
   \   000042   90....       MOV     DPTR,#ZDAppTaskID
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
   \   00004A   8A..         MOV     ?V0,R2
   \   00004C   8B..         MOV     ?V1,R3
   \   00004E   EA           MOV     A,R2
   \   00004F   45..         ORL     A,?V1
   \   000051   70E5         JNZ     ??ZDApp_event_loop_3
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   6480         XRL     A,#0x80
   \   000058   02....       LJMP    ??ZDApp_event_loop_4 & 0xFFFF
    440          
    441            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_event_loop_1:
   \   00005B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6004         JZ      ??ZDApp_event_loop_5
   \   000061   6401         XRL     A,#0x1
   \   000063   7039         JNZ     ??ZDApp_event_loop_6
    442            {
    443              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_5:
   \   000065   EE           MOV     A,R6
   \   000066   5402         ANL     A,#0x2
   \   000068   6008         JZ      ??ZDApp_event_loop_7
    444              {
    445                ZDApp_NetworkStartEvt();
   \   00006A                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   00006A   12....       LCALL   `??ZDApp_NetworkStartEvt::?relay`; Banked call to: ZDApp_NetworkStartEvt
    446          
    447                // Return unprocessed events
    448                return (events ^ ZDO_NETWORK_START);
   \   00006D   EE           MOV     A,R6
   \   00006E   6402         XRL     A,#0x2
   \   000070   805B         SJMP    ??ZDApp_event_loop_2
    449              }
    450          
    451              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_7:
   \   000072   EE           MOV     A,R6
   \   000073   5420         ANL     A,#0x20
   \   000075   6027         JZ      ??ZDApp_event_loop_6
    452              {
    453                if ( nwkStatus == ZSuccess )
   \   000077   90....       MOV     DPTR,#nwkStatus
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   7010         JNZ     ??ZDApp_event_loop_8
    454                {
    455                  if ( devState == DEV_END_DEVICE )
   \   00007D   90....       MOV     DPTR,#devState
   \   000080   E0           MOVX    A,@DPTR
   \   000081   6406         XRL     A,#0x6
   \   000083   7003         JNZ     ??ZDApp_event_loop_9
    456                    devState = DEV_ROUTER;
   \   000085   7407         MOV     A,#0x7
   \   000087   F0           MOVX    @DPTR,A
    457          
    458                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_9:
   \   000088                ; Setup parameters for call to function osal_pwrmgr_device
   \   000088   7900         MOV     R1,#0x0
   \   00008A   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    459                }
    460                else
    461                {
    462                  // remain as end device
    463                }
    464                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_8:
   \   00008D                ; Setup parameters for call to function osal_set_event
   \   00008D   7A10         MOV     R2,#0x10
   \   00008F   7B00         MOV     R3,#0x0
   \   000091   90....       MOV     DPTR,#ZDAppTaskID
   \   000094   E0           MOVX    A,@DPTR
   \   000095   F9           MOV     R1,A
   \   000096   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    465          
    466                // Return unprocessed events
    467                return (events ^ ZDO_ROUTER_START);
   \   000099   EE           MOV     A,R6
   \   00009A   6420         XRL     A,#0x20
   \   00009C   802F         SJMP    ??ZDApp_event_loop_2
    468              }
    469            }
    470          
    471            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   00009E   EE           MOV     A,R6
   \   00009F   5410         ANL     A,#0x10
   \   0000A1   602E         JZ      ??ZDApp_event_loop_10
    472            {
    473              ZDO_UpdateNwkStatus( devState );
   \   0000A3                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   0000A3   90....       MOV     DPTR,#devState
   \   0000A6   E0           MOVX    A,@DPTR
   \   0000A7   F9           MOV     R1,A
   \   0000A8   12....       LCALL   `??ZDO_UpdateNwkStatus::?relay`; Banked call to: ZDO_UpdateNwkStatus
    474          
    475              // At start up, do one MTO route discovery if the device is a concentrator
    476              if ( zgConcentratorEnable == TRUE )
   \   0000AB   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   6401         XRL     A,#0x1
   \   0000B1   7017         JNZ     ??ZDApp_event_loop_11
    477              {
    478                // Start next event
    479                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000B3                ; Setup parameters for call to function osal_start_timerEx
   \   0000B3   90....       MOV     DPTR,#__Constant_64
   \   0000B6   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000B9   7A00         MOV     R2,#0x0
   \   0000BB   7B08         MOV     R3,#0x8
   \   0000BD   90....       MOV     DPTR,#NWK_TaskID
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F9           MOV     R1,A
   \   0000C2   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000C5   7404         MOV     A,#0x4
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
    480              }
    481          
    482              // Return unprocessed events
    483              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_11:
   \   0000CA   EE           MOV     A,R6
   \   0000CB   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   0000CD   FA           MOV     R2,A
   \   0000CE   EF           MOV     A,R7
   \   0000CF   8036         SJMP    ??ZDApp_event_loop_4
    484            }
    485          
    486            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_10:
   \   0000D1   EE           MOV     A,R6
   \   0000D2   5408         ANL     A,#0x8
   \   0000D4   6006         JZ      ??ZDApp_event_loop_12
    487            {
    488              // User defined logic
    489          
    490              // Return unprocessed events
    491              return (events ^ ZDO_COMMAND_CNF);
   \   0000D6   EE           MOV     A,R6
   \   0000D7   6408         XRL     A,#0x8
   \   0000D9   FA           MOV     R2,A
   \   0000DA   8037         SJMP    ??ZDApp_event_loop_13
    492            }
    493          
    494            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_12:
   \   0000DC   EF           MOV     A,R7
   \   0000DD   5401         ANL     A,#0x1
   \   0000DF   600A         JZ      ??ZDApp_event_loop_14
    495            {
    496              ZDApp_SaveNetworkStateEvt();
   \   0000E1                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   0000E1   12....       LCALL   `??ZDApp_SaveNetworkStateEvt::?relay`; Banked call to: ZDApp_SaveNetworkStateEvt
    497          
    498              // Return unprocessed events
    499              return (events ^ ZDO_NWK_UPDATE_NV);
   \   0000E4   EE           MOV     A,R6
   \   0000E5   FA           MOV     R2,A
   \   0000E6   EF           MOV     A,R7
   \   0000E7   6401         XRL     A,#0x1
   \   0000E9   801C         SJMP    ??ZDApp_event_loop_4
    500            }
    501          
    502            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_14:
   \   0000EB   EE           MOV     A,R6
   \   0000EC   5404         ANL     A,#0x4
   \   0000EE   600A         JZ      ??ZDApp_event_loop_15
    503            {
    504          #ifdef ZBA_FALLBACK_NWKKEY
    505              if ( devState == DEV_END_DEVICE_UNAUTH )
    506              {
    507                ZDSecMgrFallbackNwkKey();
    508              }
    509              else
    510          #endif
    511              {
    512                // Set the NV startup option to force a "new" join.
    513                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   0000F0                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000F0   7A02         MOV     R2,#0x2
   \   0000F2   79FF         MOV     R1,#-0x1
   \   0000F4   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    514          
    515                // The device has been in the UNAUTH state, so reset
    516                // Note: there will be no return from this call
    517                SystemResetSoft();
   \   0000F7                ; Setup parameters for call to function Onboard_soft_reset
   \   0000F7   12....       LCALL   Onboard_soft_reset & 0xFFFF
    518              }
    519            }
    520          
    521          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    522            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_15:
   \   0000FA   EF           MOV     A,R7
   \   0000FB   5410         ANL     A,#0x10
   \   0000FD   600B         JZ      ??ZDApp_event_loop_16
    523            {
    524          #if defined ( REFLECTOR )
    525              ZDApp_AgeOutPendingBindEntry();
   \   0000FF                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   0000FF   12....       LCALL   `??ZDApp_AgeOutPendingBindEntry::?relay`; Banked call to: ZDApp_AgeOutPendingBindEntry
    526          #endif
    527              // Return unprocessed events
    528              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   000102   EE           MOV     A,R6
   \   000103   FA           MOV     R2,A
   \   000104   EF           MOV     A,R7
   \   000105   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_4:
   \   000107   FB           MOV     R3,A
   \   000108   8009         SJMP    ??ZDApp_event_loop_13
    529            }
    530          #endif
    531          
    532            if ( ZG_SECURE_ENABLED )
    533            {
    534              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_16:
   \   00010A                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   00010A   EE           MOV     A,R6
   \   00010B   FA           MOV     R2,A
   \   00010C   EF           MOV     A,R7
   \   00010D   FB           MOV     R3,A
   \   00010E   A9..         MOV     R1,?V2
   \   000110   12....       LCALL   `??ZDApp_ProcessSecEvent::?relay`; Banked call to: ZDApp_ProcessSecEvent
    535            }
   \                     ??ZDApp_event_loop_13:
   \   000113                REQUIRE ?Subroutine1
   \   000113                ; // Fall through to label ?Subroutine1
    536            else
    537            {
    538              // Discard or make more handlers
    539              return 0;
    540            }
    541          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine55_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001   7A10         MOV     R2,#0x10
   \   000003   7B00         MOV     R3,#0x0
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET
    542          
    543          /*********************************************************************
    544           * @fn      ZDApp_ProcessSecEvent()
    545           *
    546           * @brief   Process incoming security events.
    547           *
    548           * @param   task_id - Task ID
    549           * @param   events  - Bitmap of events
    550           *
    551           * @return  none
    552           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    553          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    554          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    555            (void)task_id;  // Intentionally unreferenced parameter
    556          
    557            if ( ZSTACK_ROUTER_BUILD )
   \   000009   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6007         JZ      ??ZDApp_ProcessSecEvent_0
   \   00000F   6401         XRL     A,#0x1
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDApp_ProcessSecEvent_1 & 0xFFFF
    558            {
    559              if ( events & ZDO_NEW_DEVICE )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   000016   EE           MOV     A,R6
   \   000017   5440         ANL     A,#0x40
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessSecEvent_1 & 0xFFFF
    560              {
    561                // process the new device event
    562                if ( ZDApp_NewDeviceList )
   \   00001E   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000021   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000024   607B         JZ      ??ZDApp_ProcessSecEvent_2
    563                {
    564                  ZDAppNewDevice_t *pNewDevice;
    565                  uint16 timeDelta;
    566          
    567                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
   \   000026                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000026   12....       LCALL   ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00002E   12....       LCALL   `??ZDSecMgrNewDeviceEvent::?relay`; Banked call to: ZDSecMgrNewDeviceEvent
    568          
    569                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   000031   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000034   F5..         MOV     ?V0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V1,A
    570                  osal_mem_free( ZDApp_NewDeviceList );
   \   00003A                ; Setup parameters for call to function osal_mem_free
   \   00003A   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00003D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    571                  ZDApp_NewDeviceList = pNewDevice;
   \   000040   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000043   12....       LCALL   ??Subroutine68_0 & 0xFFFF
    572          
    573                  if ( pNewDevice )
   \                     ??CrossCallReturnLabel_138:
   \   000046   E5..         MOV     A,?V0
   \   000048   45..         ORL     A,?V1
   \   00004A   6055         JZ      ??ZDApp_ProcessSecEvent_2
    574                  {
    575                    timeDelta = pNewDevice->timeDelta;
   \   00004C   85..82       MOV     DPL,?V0
   \   00004F   85..83       MOV     DPH,?V1
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F5..         MOV     ?V4,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V5,A
    576                    pNewDevice = pNewDevice->next;
   \   00005D   8014         SJMP    ??ZDApp_ProcessSecEvent_3
    577          
    578                    while ( pNewDevice )
    579                    {
    580                      pNewDevice->timeDelta -= timeDelta;
   \                     ??ZDApp_ProcessSecEvent_4:
   \   00005F   85..82       MOV     DPL,?V0
   \   000062   85..83       MOV     DPH,?V1
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   C3           CLR     C
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   95..         SUBB    A,?V4
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   95..         SUBB    A,?V5
   \   000072   F0           MOVX    @DPTR,A
    581                      pNewDevice = pNewDevice->next;
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000073   85..82       MOV     DPL,?V0
   \   000076   85..83       MOV     DPH,?V1
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F5..         MOV     ?V0,A
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F5..         MOV     ?V1,A
    582                    }
   \   000080   E5..         MOV     A,?V0
   \   000082   45..         ORL     A,?V1
   \   000084   70D9         JNZ     ??ZDApp_ProcessSecEvent_4
    583          
    584                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
   \   000086                ; Setup parameters for call to function osal_start_timerEx
   \   000086   E4           CLR     A
   \   000087   F5..         MOV     ?V6,A
   \   000089   F5..         MOV     ?V7,A
   \   00008B   78..         MOV     R0,#?V4
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000090   7A40         MOV     R2,#0x40
   \   000092   7B00         MOV     R3,#0x0
   \   000094   90....       MOV     DPTR,#ZDAppTaskID
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F9           MOV     R1,A
   \   000099   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00009C   7404         MOV     A,#0x4
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    585                  }
    586                }
    587          
    588                // Return unprocessed events
    589                return (events ^ ZDO_NEW_DEVICE);
   \                     ??ZDApp_ProcessSecEvent_2:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   6440         XRL     A,#0x40
   \   0000A4   800B         SJMP    ??ZDApp_ProcessSecEvent_5
    590              }
    591            }
    592          
    593            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_1:
   \   0000A6   EE           MOV     A,R6
   \   0000A7   5480         ANL     A,#0x80
   \   0000A9   600A         JZ      ??ZDApp_ProcessSecEvent_6
    594            {
    595              ZDApp_DeviceAuthEvt();
   \   0000AB                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   0000AB   12....       LCALL   `??ZDApp_DeviceAuthEvt::?relay`; Banked call to: ZDApp_DeviceAuthEvt
    596          
    597              // Return unprocessed events
    598              return (events ^ ZDO_DEVICE_AUTH);
   \   0000AE   EE           MOV     A,R6
   \   0000AF   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessSecEvent_5:
   \   0000B1   FA           MOV     R2,A
   \   0000B2   EF           MOV     A,R7
   \   0000B3   802B         SJMP    ??ZDApp_ProcessSecEvent_7
    599            }
    600          
    601            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_6:
   \   0000B5   EF           MOV     A,R7
   \   0000B6   5402         ANL     A,#0x2
   \   0000B8   600A         JZ      ??ZDApp_ProcessSecEvent_8
    602            {
    603              ZDApp_SaveNwkKey();
   \   0000BA                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   0000BA   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    604          
    605              // Return unprocessed events
    606              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   0000BD   EE           MOV     A,R6
   \   0000BE   FA           MOV     R2,A
   \   0000BF   EF           MOV     A,R7
   \   0000C0   6402         XRL     A,#0x2
   \   0000C2   801C         SJMP    ??ZDApp_ProcessSecEvent_7
    607            }
    608          
    609            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_8:
   \   0000C4   EF           MOV     A,R7
   \   0000C5   5408         ANL     A,#0x8
   \   0000C7   600A         JZ      ??ZDApp_ProcessSecEvent_9
    610            {
    611          #if defined (NV_RESTORE)
    612              ZDSecMgrSaveApsLinkKey();
   \   0000C9                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   0000C9   12....       LCALL   `??ZDSecMgrSaveApsLinkKey::?relay`; Banked call to: ZDSecMgrSaveApsLinkKey
    613          #endif // (NV_RESTORE)
    614          
    615              // Return unprocessed events
    616              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   0000CC   EE           MOV     A,R6
   \   0000CD   FA           MOV     R2,A
   \   0000CE   EF           MOV     A,R7
   \   0000CF   6408         XRL     A,#0x8
   \   0000D1   800D         SJMP    ??ZDApp_ProcessSecEvent_7
    617            }
    618          
    619            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_9:
   \   0000D3   EF           MOV     A,R7
   \   0000D4   5404         ANL     A,#0x4
   \   0000D6   600B         JZ      ??ZDApp_ProcessSecEvent_10
    620            {
    621              ZDSecMgrSaveTCLinkKey();
   \   0000D8                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   0000D8   12....       LCALL   `??ZDSecMgrSaveTCLinkKey::?relay`; Banked call to: ZDSecMgrSaveTCLinkKey
    622          
    623              // Return unprocessed events
    624              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   0000DB   EE           MOV     A,R6
   \   0000DC   FA           MOV     R2,A
   \   0000DD   EF           MOV     A,R7
   \   0000DE   6404         XRL     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_7:
   \   0000E0   FB           MOV     R3,A
   \   0000E1   8004         SJMP    ??ZDApp_ProcessSecEvent_11
    625            }
    626          
    627            // Discard or make more handlers
    628            return 0;
   \                     ??ZDApp_ProcessSecEvent_10:
   \   0000E3   7A00         MOV     R2,#0x0
   \   0000E5   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_11:
   \   0000E7                REQUIRE ?Subroutine2
   \   0000E7                ; // Fall through to label ?Subroutine2
    629          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   E5..         MOV     A,?V0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
    630          
    631          /*********************************************************************
    632           * Application Functions
    633           */
    634          
    635          /*********************************************************************
    636           * @fn      ZDOInitDevice
    637           *
    638           * @brief   Start the device in the network.  This function will read
    639           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    640           *   restore the network state of the device.
    641           *
    642           * @param   startDelay - timeDelay to start device (in milliseconds).
    643           *                       There is a jitter added to this delay:
    644           *                       ((NWK_START_DELAY + startDelay)
    645           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    646           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    647           *                       this function will hold the network init. Application
    648           *                       can start the device.
    649           *
    650           * NOTE:    If the application would like to force a "new" join, the
    651           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    652           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    653           *          this function. "new" join means to not restore the network
    654           *          state of the device. Use zgWriteStartupOptions() to set these
    655           *          options.
    656           *
    657           * @return
    658           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    659           *          restored.
    660           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    661           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    662           *          it could mean that there was no network state to restore.
    663           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    664           *          with the rejoin option set to TRUE.  So, the device was not
    665           *          started in the network (one time only).  The next time this
    666           *          function is called it will start.
    667           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    668          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    669          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
    670            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \                     ??CrossCallReturnLabel_158:
   \   00000D   7E01         MOV     R6,#0x1
    671            uint16 extendedDelay = 0;
   \   00000F   75..00       MOV     ?V0,#0x0
   \   000012   75..00       MOV     ?V1,#0x0
    672          
    673            if ( devState == DEV_HOLD )
   \   000015   90....       MOV     DPTR,#devState
   \   000018   E0           MOVX    A,@DPTR
   \   000019   7005         JNZ     ??ZDOInitDevice_0
    674            {
    675              // Initialize the RAM items table, in case an NV item has been updated.
    676              zgInitItems( FALSE );
   \   00001B                ; Setup parameters for call to function zgInitItems
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   12....       LCALL   `??zgInitItems::?relay`; Banked call to: zgInitItems
    677            }
    678          
    679            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   000020                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   000020   12....       LCALL   `??ZDConfig_InitDescriptors::?relay`; Banked call to: ZDConfig_InitDescriptors
    680            //devtag.071807.todo - fix this temporary solution
    681            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000023   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000026   E0           MOVX    A,@DPTR
   \   000027   90....       MOV     DPTR,#_NIB + 14
   \   00002A   F0           MOVX    @DPTR,A
    682          
    683          #if defined ( NV_RESTORE )
    684            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    685            // while booting to skip past NV Restore.
    686            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   00002B   90....       MOV     DPTR,#zdappHoldKeys
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   6404         XRL     A,#0x4
   \   000031   7076         JNZ     ??ZDOInitDevice_1
    687            {
    688              zdappHoldKeys = 0;   // Only once
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
    689              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    690            }
    691            else
    692            {
    693              // Determine if NV should be restored
    694              networkStateNV = ZDApp_ReadNetworkRestoreState();
    695            }
    696          
    697            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    698            {
    699              networkStateNV = ZDApp_RestoreNetworkState();
    700            }
    701            else
    702            {
    703              // Wipe out the network state in NV
    704              NLME_InitNV();
   \                     ??ZDOInitDevice_2:
   \   000035                ; Setup parameters for call to function NLME_InitNV
   \   000035   12....       LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
    705              NLME_SetDefaultNV();
   \   000038                ; Setup parameters for call to function NLME_SetDefaultNV
   \   000038   12....       LCALL   `??NLME_SetDefaultNV::?relay`; Banked call to: NLME_SetDefaultNV
    706              // clear NWK key values
    707              ZDSecMgrClearNVKeyValues();
   \   00003B                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   00003B   12....       LCALL   `??ZDSecMgrClearNVKeyValues::?relay`; Banked call to: ZDSecMgrClearNVKeyValues
    708            }
    709          #endif
    710          
    711            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDevice_3:
   \   00003E   7401         MOV     A,#0x1
   \   000040   6E           XRL     A,R6
   \   000041   7021         JNZ     ??ZDOInitDevice_4
    712            {
    713              ZDAppDetermineDeviceType();
   \   000043                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000043   12....       LCALL   `??ZDAppDetermineDeviceType::?relay`; Banked call to: ZDAppDetermineDeviceType
    714          
    715              // Only delay if joining network - not restoring network state
    716              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    717                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000046                ; Setup parameters for call to function osal_rand
   \   000046   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   EA           MOV     A,R2
   \   000050   547F         ANL     A,#0x7f
   \   000052   F8           MOV     R0,A
   \   000053   E0           MOVX    A,@DPTR
   \   000054   28           ADD     A,R0
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   3400         ADDC    A,#0x0
   \   00005A   F9           MOV     R1,A
   \   00005B   E8           MOV     A,R0
   \   00005C   2464         ADD     A,#0x64
   \   00005E   F5..         MOV     ?V0,A
   \   000060   E4           CLR     A
   \   000061   39           ADDC    A,R1
   \   000062   F5..         MOV     ?V1,A
    718            }
    719          
    720            // Initialize the security for type of device
    721            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDevice_4:
   \   000064                ; Setup parameters for call to function ZDApp_SecInit
   \   000064   EE           MOV     A,R6
   \   000065   F9           MOV     R1,A
   \   000066   12....       LCALL   `??ZDApp_SecInit::?relay`; Banked call to: ZDApp_SecInit
    722          
    723            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F4           CPL     A
   \   000071   7003         JNZ     ??ZDOInitDevice_5
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   F4           CPL     A
   \                     ??ZDOInitDevice_5:
   \   000076   6046         JZ      ??ZDOInitDevice_6
    724            {
    725              devState = DEV_INIT;    // Remove the Hold state
   \   000078   90....       MOV     DPTR,#devState
   \   00007B   7401         MOV     A,#0x1
   \   00007D   F0           MOVX    @DPTR,A
    726          
    727              // Initialize leave control logic
    728              ZDApp_LeaveCtrlInit();
   \   00007E                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00007E   12....       LCALL   `??ZDApp_LeaveCtrlInit::?relay`; Banked call to: ZDApp_LeaveCtrlInit
    729          
    730              // Check leave control reset settings
    731              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   000081                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   000081   AC..         MOV     R4,?XSP + 0
   \   000083   AD..         MOV     R5,?XSP + 1
   \   000085   7A..         MOV     R2,#devState & 0xff
   \   000087   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   000089   12....       LCALL   `??ZDApp_LeaveCtrlStartup::?relay`; Banked call to: ZDApp_LeaveCtrlStartup
    732          
    733              // Leave may make the hold state come back
    734              if ( devState == DEV_HOLD )
   \   00008C   90....       MOV     DPTR,#devState
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   7025         JNZ     ??ZDOInitDevice_7
    735              {
    736                // Set the NV startup option to force a "new" join.
    737                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000092                ; Setup parameters for call to function zgWriteStartupOptions
   \   000092   7A02         MOV     R2,#0x2
   \   000094   79FF         MOV     R1,#-0x1
   \   000096   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    738          
    739                // Notify the applications
    740                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000099                ; Setup parameters for call to function osal_set_event
   \   000099   7A10         MOV     R2,#0x10
   \   00009B   7B00         MOV     R3,#0x0
   \   00009D   90....       MOV     DPTR,#ZDAppTaskID
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   F9           MOV     R1,A
   \   0000A2   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    741          
    742                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \   0000A5   7902         MOV     R1,#0x2
   \   0000A7   801F         SJMP    ??ZDOInitDevice_8
    743              }
   \                     ??ZDOInitDevice_1:
   \   0000A9                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   0000A9   12....       LCALL   `??ZDApp_ReadNetworkRestoreState::?relay`; Banked call to: ZDApp_ReadNetworkRestoreState
   \   0000AC   E9           MOV     A,R1
   \   0000AD   FE           MOV     R6,A
   \   0000AE   7085         JNZ     ??ZDOInitDevice_2
   \   0000B0                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   0000B0   12....       LCALL   `??ZDApp_RestoreNetworkState::?relay`; Banked call to: ZDApp_RestoreNetworkState
   \   0000B3   E9           MOV     A,R1
   \   0000B4   FE           MOV     R6,A
   \   0000B5   8087         SJMP    ??ZDOInitDevice_3
    744          
    745              // Trigger the network start
    746              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_7:
   \   0000B7                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000B7   AA..         MOV     R2,?V0
   \   0000B9   AB..         MOV     R3,?V1
   \   0000BB   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
    747            }
    748          
    749            // set broadcast address mask to support broadcast filtering
    750            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_6:
   \   0000BE                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   0000BE   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F9           MOV     R1,A
   \   0000C3   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
    751          
    752            return ( networkStateNV );
   \   0000C6   EE           MOV     A,R6
   \   0000C7   F9           MOV     R1,A
   \                     ??ZDOInitDevice_8:
   \   0000C8   02....       LJMP    ?Subroutine8 & 0xFFFF
    753          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine59_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine60_0
   \   000003                ; // Fall through to label ??Subroutine60_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine60_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine59_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine71_0
   \   000006                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    754          
    755          /*********************************************************************
    756           * @fn      ZDApp_ReadNetworkRestoreState
    757           *
    758           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    759           *          or not to restore the network state.
    760           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    761           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    762           *
    763           * @param   none
    764           *
    765           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    766           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    767           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    768           *          ZCD_NV_STARTUP_OPTION
    769           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    770          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    771          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    772            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    773          
    774            // Look for the New Network State option.
    775            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   `??zgReadStartupOptions::?relay`; Banked call to: zgReadStartupOptions
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
   \   00000C   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000E   5002         JNC     ??ZDApp_ReadNetworkRestoreState_0
    776            {
    777              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   000010   7E01         MOV     R6,#0x1
    778            }
    779          
    780            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000012   EE           MOV     A,R6
   \   000013   F9           MOV     R1,A
   \   000014   02....       LJMP    ??Subroutine62_0 & 0xFFFF
    781          }
    782          
    783          /*********************************************************************
    784           * @fn      ZDAppDetermineDeviceType()
    785           *
    786           * @brief   Determines the type of device to start.
    787           *
    788           *          Looks at zgDeviceLogicalType and determines what type of
    789           *          device to start.  The types are:
    790           *            ZG_DEVICETYPE_COORDINATOR
    791           *            ZG_DEVICETYPE_ROUTER
    792           *            ZG_DEVICETYPE_ENDDEVICE
    793           *
    794           * @param   none
    795           *
    796           * @return  none
    797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    798          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    799          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    800            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    801            {
    802              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    803              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   8030         SJMP    ??ZDAppDetermineDeviceType_1
    804            }
    805            else
    806            {
    807              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   6401         XRL     A,#0x1
   \   00001A   700B         JNZ     ??ZDAppDetermineDeviceType_2
    808                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   00001C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   54F8         ANL     A,#0xf8
   \   000022   F0           MOVX    @DPTR,A
   \   000023   4401         ORL     A,#0x1
   \   000025   800E         SJMP    ??ZDAppDetermineDeviceType_3
    809              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6402         XRL     A,#0x2
   \   00002A   700A         JNZ     ??ZDAppDetermineDeviceType_4
    810                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   00002C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   54F8         ANL     A,#0xf8
   \   000032   F0           MOVX    @DPTR,A
   \   000033   4402         ORL     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000035   F0           MOVX    @DPTR,A
    811          
    812              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    813              // The device shall do rejoin the network. Otherwise, do normal join
    814              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000036                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000036   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000038   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003A   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   00003D   E9           MOV     A,R1
   \   00003E   90....       MOV     DPTR,#devStartMode
   \   000041   7003         JNZ     ??ZDAppDetermineDeviceType_5
    815              {
    816                devStartMode = MODE_JOIN;     // Assume joining
   \   000043   E4           CLR     A
   \   000044   8002         SJMP    ??ZDAppDetermineDeviceType_1
    817              }
    818              else
    819              {
    820                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000046   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000048   F0           MOVX    @DPTR,A
    821              }
    822            }
    823          }
   \   000049   02....       LJMP    ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine61_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    824          
    825          /*********************************************************************
    826           * @fn      ZDApp_NetworkStartEvt()
    827           *
    828           * @brief   Process the Network Start Event
    829           *
    830           * @param   none
    831           *
    832           * @return  none
    833           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    834          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    835          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    836            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    837            {
    838              // Successfully started a ZigBee network
    839              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    840              {
    841                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    842              }
    843          
    844              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    845              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802E         SJMP    ??ZDApp_NetworkStartEvt_2
    846            }
    847            else
    848            {
    849              // Try again with a higher energy threshold
    850              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   00001F   E9           MOV     A,R1
   \   000020   7900         MOV     R1,#0x0
   \   000022   2410         ADD     A,#0x10
   \   000024   5001         JNC     ??ZDApp_NetworkStartEvt_3
   \   000026   09           INC     R1
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000027   C3           CLR     C
   \   000028   94FF         SUBB    A,#-0x1
   \   00002A   E9           MOV     A,R1
   \   00002B   9400         SUBB    A,#0x0
   \   00002D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00002F   65D0         XRL     A,PSW
   \   000031   33           RLC     A
   \   000032   5010         JNC     ??ZDApp_NetworkStartEvt_4
    851              {
    852                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000034                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000034   12....       LCALL   `??NLME_GetEnergyThreshold::?relay`; Banked call to: NLME_GetEnergyThreshold
   \   000037   E9           MOV     A,R1
   \   000038   F8           MOV     R0,A
   \   000039                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000039   7410         MOV     A,#0x10
   \   00003B   29           ADD     A,R1
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??NLME_SetEnergyThreshold::?relay`; Banked call to: NLME_SetEnergyThreshold
    853                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   000040                ; Setup parameters for call to function osal_set_event
   \   000040   7A01         MOV     R2,#0x1
   \   000042   8008         SJMP    ??ZDApp_NetworkStartEvt_5
    854              }
    855              else
    856              {
    857                // Failed to start network. Enter a dormant state (until user intervenes)
    858                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000044   90....       MOV     DPTR,#devState
   \   000047   7401         MOV     A,#0x1
   \   000049   F0           MOVX    @DPTR,A
    859                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00004A                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   00004A   7A10         MOV     R2,#0x10
   \                     ??ZDApp_NetworkStartEvt_5:
   \   00004C   7B00         MOV     R3,#0x0
   \   00004E   90....       MOV     DPTR,#ZDAppTaskID
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    860              }
    861            }
    862          }
   \   000056   02....       LJMP    ??Subroutine61_0 & 0xFFFF
    863          
    864          /*********************************************************************
    865           * @fn      ZDApp_DeviceAuthEvt()
    866           *
    867           * @brief   Process the Device Authentic Event
    868           *
    869           * @param   none
    870           *
    871           * @return  none
    872           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    873          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    874          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    875            // received authentication from trust center
    876            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   704A         JNZ     ??ZDApp_DeviceAuthEvt_0
    877            {
    878              // Stop the reset timer so it doesn't reset
    879              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   `??ZDApp_ResetTimerCancel::?relay`; Banked call to: ZDApp_ResetTimerCancel
    880          
    881              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine10 & 0xFFFF
    882              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_76:
   \   000012   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
    883          
    884              // Set the Power Manager Device
    885          #if defined ( POWER_SAVING )
    886              osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7901         MOV     R1,#0x1
   \   000017   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
    887          #endif
    888          
    889              if ( ZSTACK_ROUTER_BUILD )
   \   00001A   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6004         JZ      ??ZDApp_DeviceAuthEvt_1
   \   000020   6401         XRL     A,#0x1
   \   000022   700E         JNZ     ??ZDApp_DeviceAuthEvt_2
    890              {
    891                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000024   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000027   6009         JZ      ??ZDApp_DeviceAuthEvt_2
    892                {
    893                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    894                  NLME_StartRouterRequest( 0, 0, false );
   \   000029                ; Setup parameters for call to function NLME_StartRouterRequest
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7A00         MOV     R2,#0x0
   \   00002D   7900         MOV     R1,#0x0
   \   00002F   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
    895                }
    896              }
    897          
    898              // Notify to save info into NV
    899              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   000032                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000032   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    900          
    901              // Save off the security
    902              ZDApp_SaveNwkKey();
   \   000035                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000035   12....       LCALL   `??ZDApp_SaveNwkKey::?relay`; Banked call to: ZDApp_SaveNwkKey
    903          
    904              ZDApp_AnnounceNewAddress();
   \   000038                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000038   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
    905          
    906              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    907                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    908          #if defined ( ZIGBEE_CHILD_AGING )
    909                    && (zgChildAgingEnable == TRUE)
    910          #endif // ZIGBEE_CHILD_AGING
    911                       ) )
   \   00003B   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   A2E3         MOV     C,0xE0 /* A   */.3
   \   000041   5008         JNC     ??ZDApp_DeviceAuthEvt_3
   \   000043   90....       MOV     DPTR,#zgChildAgingEnable
   \   000046   E0           MOVX    A,@DPTR
   \   000047   6401         XRL     A,#0x1
   \   000049   700E         JNZ     ??ZDApp_DeviceAuthEvt_4
    912              {
    913                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_3:
   \   00004B                ; Setup parameters for call to function NLME_SetPollRate
   \   00004B   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00004E   12....       LCALL   ??Subroutine58_0 & 0xFFFF
    914              }
    915            }
   \                     ??CrossCallReturnLabel_86:
   \   000051   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000054   8003         SJMP    ??ZDApp_DeviceAuthEvt_4
    916            else
    917            {
    918              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000056                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000056   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
    919            }
    920          }
   \                     ??ZDApp_DeviceAuthEvt_4:
   \   000059   02....       LJMP    ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   7406         MOV     A,#0x6
   \   000005                REQUIRE ??Subroutine55_0
   \   000005                ; // Fall through to label ??Subroutine55_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX    A,@DPTR
   \   000004   5407         ANL     A,#0x7
   \   000006   6402         XRL     A,#0x2
   \   000008   22           RET
    921          
    922          /*********************************************************************
    923           * @fn      ZDApp_SaveNetworkStateEvt()
    924           *
    925           * @brief   Process the Save the Network State Event
    926           *
    927           * @param   none
    928           *
    929           * @return  none
    930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    931          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    932          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    933          #if defined ( NV_RESTORE )
    934           #if defined ( NV_TURN_OFF_RADIO )
    935            // Turn off the radio's receiver during an NV update
    936            uint8 RxOnIdle;
    937            uint8 x = false;
    938            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    939            ZMacSetReq( ZMacRxOnIdle, &x );
    940           #endif
    941          
    942            // Update the Network State in NV
    943            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    944                           NWK_NV_DEVICELIST_ENABLE |
    945                           NWK_NV_BINDING_ENABLE    |
    946                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV     R1,#0xf
   \   000006   12....       LCALL   `??NLME_UpdateNV::?relay`; Banked call to: NLME_UpdateNV
    947          
    948            // Reset the NV startup option to resume from NV by
    949            // clearing the "New" join option.
    950            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV     R2,#0x2
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   `??zgWriteStartupOptions::?relay`; Banked call to: zgWriteStartupOptions
    951          
    952           #if defined ( NV_TURN_OFF_RADIO )
    953            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    954           #endif
    955          #endif // NV_RESTORE
    956          }
   \   000010   02....       LJMP    ??Subroutine61_0 & 0xFFFF
    957          
    958          #if defined ( NV_RESTORE )
    959          /*********************************************************************
    960           * @fn      ZDApp_RestoreNetworkState()
    961           *
    962           * @brief   This function will restore the network state of the
    963           *          device if the network state is stored in NV.
    964           *
    965           * @param   none
    966           *
    967           * @return
    968           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    969           *          restored.
    970           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    971           *          This could mean that zgStartupOption said to not restore, or
    972           *          it could mean that there was no network state to restore.
    973           *
    974           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    975          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    976          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    977            uint8 nvStat;
    978          
    979            // Initialize NWK NV items
    980            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   `??NLME_InitNV::?relay`; Banked call to: NLME_InitNV
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    981          
    982            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   6044         JZ      ??ZDApp_RestoreNetworkState_0
    983            {
    984              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   `??NLME_RestoreFromNV::?relay`; Banked call to: NLME_RestoreFromNV
   \   000012   E9           MOV     A,R1
   \   000013   6025         JZ      ??ZDApp_RestoreNetworkState_1
    985              {
    986                // Are we a coordinator
    987                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine71_0 & 0xFFFF
    988                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_154:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000024   7007         JNZ     ??ZDApp_RestoreNetworkState_2
    989                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000026   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   54F8         ANL     A,#0xf8
   \   00002C   F0           MOVX    @DPTR,A
    990                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   00002D   90....       MOV     DPTR,#devStartMode
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?Subroutine15 & 0xFFFF
    991                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    992              }
   \                     ??CrossCallReturnLabel_2:
   \   000035   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000038   8002         SJMP    ??ZDApp_RestoreNetworkState_3
    993              else
    994                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   00003A   7E09         MOV     R6,#0x9
    995          
    996              if ( ZG_SECURE_ENABLED )
    997              {
    998                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   00003C   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
    999          
   1000                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \   000043   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000046   E0           MOVX    A,@DPTR
   \   000047   7003         JNZ     ??ZDApp_RestoreNetworkState_4
   1001                {
   1002                  ZDApp_RestoreNwkKey();
   \   000049                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000049   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   1003                }
   1004              }
   1005          
   1006              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1007              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1008              // other than default.
   1009            }
   1010          
   1011            if ( nvStat == ZSUCCESS )
   \                     ??ZDApp_RestoreNetworkState_4:
   \   00004C   EE           MOV     A,R6
   \   00004D   7004         JNZ     ??ZDApp_RestoreNetworkState_0
   1012              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   00004F   7900         MOV     R1,#0x0
   \   000051   8002         SJMP    ??ZDApp_RestoreNetworkState_5
   1013            else
   1014              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   000053   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_5:
   \   000055   02....       LJMP    ??Subroutine62_0 & 0xFFFF
   1015          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   22           RET
   1016          #endif // NV_RESTORE
   1017          
   1018          /*********************************************************************
   1019           * @fn      ZDApp_InitUserDesc()
   1020           *
   1021           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1022           *          when needed.  If you want to initialize the User descriptor to
   1023           *          something other than all zero, do it here.
   1024           *
   1025           * @param   none
   1026           *
   1027           * @return  none
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1030          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1031            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1032          
   1033            // Initialize the User Descriptor, the descriptor is read from NV
   1034            // when needed.  If you want to initialize the User descriptor to something
   1035            // other than all zero, do it here.
   1036            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1037            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1038                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000017                ; Setup parameters for call to function osal_nv_item_init
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   7C11         MOV     R4,#0x11
   \   000026   7D00         MOV     R5,#0x0
   \   000028   7A81         MOV     R2,#-0x7f
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   E9           MOV     A,R1
   \   000035   7033         JNZ     ??ZDApp_InitUserDesc_0
   1039            {
   1040              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1041                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   75..11       MOV     ?V0,#0x11
   \   00003F   75..00       MOV     ?V1,#0x0
   \   000042   78..         MOV     R0,#?V0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   7C00         MOV     R4,#0x0
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7A81         MOV     R2,#-0x7f
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000052   7404         MOV     A,#0x4
   \   000054   12....       LCALL   ?DEALLOC_XSTACK8
   \   000057   E9           MOV     A,R1
   \   000058   7010         JNZ     ??ZDApp_InitUserDesc_0
   1042              {
   1043                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6007         JZ      ??ZDApp_InitUserDesc_0
   1044                {
   1045                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   000063   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000066   E0           MOVX    A,@DPTR
   \   000067   D2E4         SETB    0xE0 /* A   */.4
   \   000069   F0           MOVX    @DPTR,A
   1046                }
   1047              }
   1048            }
   1049          }
   \                     ??ZDApp_InitUserDesc_0:
   \   00006A   7411         MOV     A,#0x11
   \   00006C   02....       LJMP    ??Subroutine59_0 & 0xFFFF
   1050          
   1051          /*********************************************************************
   1052           * @fn      ZDAppCheckForHoldKey()
   1053           *
   1054           * @brief   Check for key to set the device into Hold Auto Start
   1055           *
   1056           * @param   none
   1057           *
   1058           * @return  none
   1059           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1060          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1061          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1062          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1063            
   1064            // Get Keypad directly to see if a HOLD is needed
   1065            zdappHoldKeys = HalKeyRead();
   1066            
   1067            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1068            // while booting to avoid starting up the device.
   1069            if ( zdappHoldKeys == SW_BYPASS_START )
   1070            {
   1071              // Change the device state to HOLD on start up
   1072              devState = DEV_HOLD;
   1073            }
   1074          #endif // HAL_KEY
   1075          }
   \   000000   02....       LJMP    ?BRET
   1076          
   1077          /*********************************************************************
   1078           * @fn      ZDApp_ProcessOSALMsg()
   1079           *
   1080           * @brief   Process the incoming task message.
   1081           *
   1082           * @param   msgPtr - message to process
   1083           *
   1084           * @return  none
   1085           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1086          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1087          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1088            // Data Confirmation message fields
   1089            uint8 sentEP;       // This should always be 0
   1090            uint8 sentStatus;
   1091            afDataConfirm_t *afDataConfirm;
   1092            uint8 tmp;
   1093          
   1094            switch ( msgPtr->event )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   603B         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC     A
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD     A,#-0x17
   \   000020   600B         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD     A,#0x47
   \   000024   600D         JZ      ??ZDApp_ProcessOSALMsg_4
   \   000026   24D6         ADD     A,#-0x2a
   \   000028   600F         JZ      ??ZDApp_ProcessOSALMsg_5
   \   00002A   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1095            {
   1096              // Incoming ZDO Message
   1097              case AF_INCOMING_MSG_CMD:
   1098                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   00002D                ; Setup parameters for call to function ZDP_IncomingData
   \   00002D   12....       LCALL   `??ZDP_IncomingData::?relay`; Banked call to: ZDP_IncomingData
   1099                break;
   \   000030   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1100          
   1101              case ZDO_CB_MSG:
   1102                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000033                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000033   12....       LCALL   `??ZDApp_ProcessMsgCBs::?relay`; Banked call to: ZDApp_ProcessMsgCBs
   1103                break;
   \   000036   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1104          
   1105              case AF_DATA_CONFIRM_CMD:
   1106                // This message is received as a confirmation of a data packet sent.
   1107                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1108                // The message fields are defined in AF.h
   1109                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1110                sentEP = afDataConfirm->endpoint;
   1111                sentStatus = afDataConfirm->hdr.status;
   1112          
   1113                // Action taken when confirmation is received.
   1114          #if defined ( ZIGBEE_FREQ_AGILITY )
   1115                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000039   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00003C   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00003F   7003         JNZ     $+5
   \   000041   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1116                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   000044                ; Setup parameters for indirect call
   \   000044   12....       LCALL   ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000047   12....       LCALL   ?CALL_IND
   \   00004A   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1117          #endif
   1118                (void)sentEP;
   1119                (void)sentStatus;
   1120                break;
   1121          
   1122              case ZDO_NWK_DISC_CNF:
   1123                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00004D   90....       MOV     DPTR,#devState
   \   000050   E0           MOVX    A,@DPTR
   \   000051   6402         XRL     A,#0x2
   \   000053   6003         JZ      $+5
   \   000055   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1124                  break;
   1125          
   1126                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000058   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6401         XRL     A,#0x1
   \   00005E   6008         JZ      ??ZDApp_ProcessOSALMsg_8
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6402         XRL     A,#0x2
   \   000063   6003         JZ      $+5
   \   000065   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1127                {
   1128                  // Process the network discovery scan results and choose a parent
   1129                  // device to join/rejoin itself
   1130                  networkDesc_t *pChosenNwk;
   1131                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   000068                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000068   12....       LCALL   `??ZDApp_NwkDescListProcessing::?relay`; Banked call to: ZDApp_NwkDescListProcessing
   \   00006B   8A..         MOV     ?V0,R2
   \   00006D   8B..         MOV     ?V1,R3
   \   00006F   AE..         MOV     R6,?V0
   \   000071   AF..         MOV     R7,?V1
   \   000073   EE           MOV     A,R6
   \   000074   4F           ORL     A,R7
   \   000075   7003         JNZ     $+5
   \   000077   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   \   00007A   90....       MOV     DPTR,#zdoDiscCounter
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   7003         JNZ     $+5
   \   000080   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   1132                  {
   1133                    if ( devStartMode == MODE_JOIN )
   \   000083   90....       MOV     DPTR,#devStartMode
   \   000086   E0           MOVX    A,@DPTR
   \   000087   7055         JNZ     ??ZDApp_ProcessOSALMsg_10
   1134                    {
   1135                      devState = DEV_NWK_JOINING;
   \   000089   90....       MOV     DPTR,#devState
   \   00008C   7403         MOV     A,#0x3
   \   00008E   12....       LCALL   ?Subroutine12 & 0xFFFF
   1136          
   1137                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \                     ??CrossCallReturnLabel_0:
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   1138          
   1139                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1140                                            pChosenNwk->logicalChannel,
   1141                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1142                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   000096                ; Setup parameters for call to function NLME_JoinRequest
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F5..         MOV     ?V0,A
   \   0000A7   78..         MOV     R0,#?V0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000BA   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   F5..         MOV     ?V0,A
   \   0000C0   78..         MOV     R0,#?V0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   12....       LCALL   ?Subroutine44 & 0xFFFF
   1143                      {
   1144                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1145                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1146                      }
   1147                    } // if ( devStartMode == MODE_JOIN )
   \                     ??CrossCallReturnLabel_80:
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   FC           MOV     R4,A
   \   0000CE   A3           INC     DPTR
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000D3   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   0000D6   7404         MOV     A,#0x4
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DB   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1148                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   0000DE   6403         XRL     A,#0x3
   \   0000E0   6003         JZ      $+5
   \   0000E2   02....       LJMP    ??ZDApp_ProcessOSALMsg_12 & 0xFFFF
   1149                    {
   1150                      ZStatus_t rejoinStatus;
   1151          
   1152                      devState = DEV_NWK_REJOIN;
   \   0000E5   90....       MOV     DPTR,#devState
   \   0000E8   7404         MOV     A,#0x4
   \   0000EA   F0           MOVX    @DPTR,A
   1153          
   1154                      // Before trying to do rejoin, check if the device has a valid short address
   1155                      // If not, generate a random short address for itself
   1156                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   0000EB   90....       MOV     DPTR,#_NIB + 20
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   64FE         XRL     A,#0xfe
   \   0000F1   7003         JNZ     ??ZDApp_ProcessOSALMsg_13
   \   0000F3   A3           INC     DPTR
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   0000F6   7065         JNZ     ??ZDApp_ProcessOSALMsg_14
   1157                      {
   1158                        uint16 commNwkAddr;
   1159          
   1160                        // Verify if the Network address has been commissioned by external tool
   1161                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1162                                           sizeof(commNwkAddr),
   1163                                           (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1164                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   \   0000F8                ; Setup parameters for call to function osal_nv_read
   \   0000F8   7401         MOV     A,#0x1
   \   0000FA   12....       LCALL   ?XSTACK_DISP100_8
   \   0000FD   88..         MOV     ?V0,R0
   \   0000FF   89..         MOV     ?V1,R1
   \   000101   78..         MOV     R0,#?V0
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   75..02       MOV     ?V0,#0x2
   \   000109   75..00       MOV     ?V1,#0x0
   \   00010C   78..         MOV     R0,#?V0
   \   00010E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000111   7C00         MOV     R4,#0x0
   \   000113   7D00         MOV     R5,#0x0
   \   000115   7A49         MOV     R2,#0x49
   \   000117   7B00         MOV     R3,#0x0
   \   000119   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00011C   7404         MOV     A,#0x4
   \   00011E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000121   E9           MOV     A,R1
   \   000122   7025         JNZ     ??ZDApp_ProcessOSALMsg_15
   \   000124   7401         MOV     A,#0x1
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   E0           MOVX    A,@DPTR
   \   00012A   64FE         XRL     A,#0xfe
   \   00012C   7003         JNZ     ??ZDApp_ProcessOSALMsg_16
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   000131   6016         JZ      ??ZDApp_ProcessOSALMsg_15
   1165                        {
   1166                          _NIB.nwkDevAddress = commNwkAddr;
   \   000133   7401         MOV     A,#0x1
   \   000135   12....       LCALL   ?XSTACK_DISP0_8
   \   000138   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00013B   90....       MOV     DPTR,#_NIB + 20
   \   00013E   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   1167          
   1168                          // clear Allocate address bit because device has a commissioned address
   1169                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   \                     ??CrossCallReturnLabel_102:
   \   000141   90....       MOV     DPTR,#_NIB + 14
   \   000144   E0           MOVX    A,@DPTR
   \   000145   C2E7         CLR     0xE0 /* A   */.7
   \   000147   800A         SJMP    ??ZDApp_ProcessOSALMsg_17
   1170                        }
   1171                        else
   1172                        {
   1173                          _NIB.nwkDevAddress = osal_rand();
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   000149                ; Setup parameters for call to function osal_rand
   \   000149   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   00014C   90....       MOV     DPTR,#_NIB + 20
   \   00014F   EA           MOV     A,R2
   \   000150   F0           MOVX    @DPTR,A
   \   000151   A3           INC     DPTR
   \   000152   EB           MOV     A,R3
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   000153   F0           MOVX    @DPTR,A
   1174                        }
   1175          
   1176                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   000154                ; Setup parameters for call to function ZMacSetReq
   \   000154   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   000156   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   000158   7953         MOV     R1,#0x53
   \   00015A   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1177                      }
   1178          
   1179                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1180                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   00015D   90....       MOV     DPTR,#_NIB + 33
   \   000160   E0           MOVX    A,@DPTR
   \   000161   64FE         XRL     A,#0xfe
   \   000163   7003         JNZ     ??ZDApp_ProcessOSALMsg_18
   \   000165   A3           INC     DPTR
   \   000166   E0           MOVX    A,@DPTR
   \   000167   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   000168   7012         JNZ     ??ZDApp_ProcessOSALMsg_19
   1181                      {
   1182                        _NIB.nwkPanId = pChosenNwk->panId;
   \   00016A   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00016D   90....       MOV     DPTR,#_NIB + 33
   \   000170   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   1183                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \                     ??CrossCallReturnLabel_103:
   \   000173                ; Setup parameters for call to function ZMacSetReq
   \   000173   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   000175   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   000177   7950         MOV     R1,#0x50
   \   000179   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1184                      }
   1185          
   1186                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_19:
   \   00017C   85..82       MOV     DPL,?XSP + 0
   \   00017F   85..83       MOV     DPH,?XSP + 1
   \   000182   7401         MOV     A,#0x1
   \   000184   F0           MOVX    @DPTR,A
   1187                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   000185                ; Setup parameters for call to function ZMacSetReq
   \   000185   AA..         MOV     R2,?XSP + 0
   \   000187   AB..         MOV     R3,?XSP + 1
   \   000189   7952         MOV     R1,#0x52
   \   00018B   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1188          
   1189                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1190                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == TRUE ) )
   \   00018E                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00018E   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000191   E9           MOV     A,R1
   \   000192   6401         XRL     A,#0x1
   \   000194   8E82         MOV     DPL,R6
   \   000196   8F83         MOV     DPH,R7
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   700B         JNZ     ??ZDApp_ProcessOSALMsg_20
   1191                      {
   1192                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \   00019C                ; Setup parameters for call to function NLME_ReJoinRequest
   \   00019C   E0           MOVX    A,@DPTR
   \   00019D   F9           MOV     R1,A
   \   00019E   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001A0   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001A2   12....       LCALL   `??NLME_ReJoinRequest::?relay`; Banked call to: NLME_ReJoinRequest
   \   0001A5   8009         SJMP    ??ZDApp_ProcessOSALMsg_11
   1193                      }
   1194                      else
   1195                      {
   1196                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \                     ??ZDApp_ProcessOSALMsg_20:
   \   0001A7                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   F9           MOV     R1,A
   \   0001A9   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001AB   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001AD   12....       LCALL   `??NLME_ReJoinRequestUnsecure::?relay`; Banked call to: NLME_ReJoinRequestUnsecure
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0001B0   E9           MOV     A,R1
   1197                      }
   1198          
   1199                      if ( rejoinStatus != ZSuccess )
   \   0001B1   600E         JZ      ??ZDApp_ProcessOSALMsg_12
   1200                      {
   1201                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1202                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0001B3                ; Setup parameters for call to function osal_rand
   \   0001B3   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001B6                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001B6   EA           MOV     A,R2
   \   0001B7   547F         ANL     A,#0x7f
   \   0001B9   2464         ADD     A,#0x64
   \   0001BB   FA           MOV     R2,A
   \   0001BC   7B00         MOV     R3,#0x0
   \   0001BE   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   1203                      }
   1204                    } // else if ( devStartMode == MODE_REJOIN )
   1205          
   1206                    // The receiver is on, turn network layer polling off.
   1207                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   0001C1   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001C4   E0           MOVX    A,@DPTR
   \   0001C5   A2E3         MOV     C,0xE0 /* A   */.3
   \   0001C7   5032         JNC     ??ZDApp_ProcessOSALMsg_21
   1208                    {
   1209                      // for an End Device with NO Child Table Management process or for a Router
   1210                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1211          #if defined ( ZIGBEE_CHILD_AGING )
   1212                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   0001C9   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001CC   E0           MOVX    A,@DPTR
   \   0001CD   6015         JZ      ??ZDApp_ProcessOSALMsg_22
   \   0001CF   6401         XRL     A,#0x1
   \   0001D1   6011         JZ      ??ZDApp_ProcessOSALMsg_22
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   6402         XRL     A,#0x2
   \   0001D6   6003         JZ      $+5
   \   0001D8   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   \   0001DB   90....       MOV     DPTR,#zgChildAgingEnable
   \   0001DE   E0           MOVX    A,@DPTR
   \   0001DF   6003         JZ      $+5
   \   0001E1   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1213          #else
   1214                           (ZG_DEVICE_ENDDEVICE_TYPE) )
   1215          #endif // ZIGBEE_CHILD_AGING
   1216                      {
   1217                        NLME_SetPollRate( 0 );
   \                     ??ZDApp_ProcessOSALMsg_22:
   \   0001E4                ; Setup parameters for call to function NLME_SetPollRate
   \   0001E4   7A00         MOV     R2,#0x0
   \   0001E6   7B00         MOV     R3,#0x0
   \   0001E8   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1218                        NLME_SetQueuedPollRate( 0 );
   \   0001EB                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   0001EB   7A00         MOV     R2,#0x0
   \   0001ED   7B00         MOV     R3,#0x0
   \   0001EF   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1219                        NLME_SetResponseRate( 0 );
   \   0001F2                ; Setup parameters for call to function NLME_SetResponseRate
   \   0001F2   7A00         MOV     R2,#0x0
   \   0001F4   7B00         MOV     R3,#0x0
   \   0001F6   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   \   0001F9   807A         SJMP    ??ZDApp_ProcessOSALMsg_7
   1220                      }
   1221                    }
   1222                    else
   1223                    {
   1224                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??ZDApp_ProcessOSALMsg_21:
   \   0001FB   90....       MOV     DPTR,#devStartMode
   \   0001FE   E0           MOVX    A,@DPTR
   \   0001FF   7074         JNZ     ??ZDApp_ProcessOSALMsg_7
   1225                      {
   1226                        ZDApp_SavedPollRate = zgPollRate;
   \   000201   90....       MOV     DPTR,#zgPollRate
   \   000204   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000207   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00020A   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   1227                        NLME_SetPollRate( zgRejoinPollRate );
   \                     ??CrossCallReturnLabel_104:
   \   00020D                ; Setup parameters for call to function NLME_SetPollRate
   \   00020D   90....       MOV     DPTR,#zgRejoinPollRate
   \   000210   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   1228                      }
   1229                    }
   1230                  }
   \                     ??CrossCallReturnLabel_87:
   \   000213   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000216   805D         SJMP    ??ZDApp_ProcessOSALMsg_7
   1231                  else
   1232                  {
   1233                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000218   90....       MOV     DPTR,#continueJoining
   \   00021B   E0           MOVX    A,@DPTR
   \   00021C   6057         JZ      ??ZDApp_ProcessOSALMsg_7
   1234                    {
   1235              #if defined ( MANAGED_SCAN )
   1236                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1237              #else
   1238                      zdoDiscCounter++;
   \   00021E   90....       MOV     DPTR,#zdoDiscCounter
   \   000221   E0           MOVX    A,@DPTR
   \   000222   04           INC     A
   \   000223   F0           MOVX    @DPTR,A
   1239                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1240                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   000224                ; Setup parameters for call to function osal_rand
   \   000224   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000227                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000227   EA           MOV     A,R2
   \   000228   2464         ADD     A,#0x64
   \   00022A   FA           MOV     R2,A
   \   00022B   E4           CLR     A
   \   00022C   3400         ADDC    A,#0x0
   \   00022E   FB           MOV     R3,A
   \   00022F   803C         SJMP    ??ZDApp_ProcessOSALMsg_23
   1241              #endif
   1242                    }
   1243                  }
   1244                }
   1245                break;
   1246          
   1247              case ZDO_NWK_JOIN_IND:
   1248                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000231   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000234   E0           MOVX    A,@DPTR
   \   000235   6401         XRL     A,#0x1
   \   000237   6005         JZ      ??ZDApp_ProcessOSALMsg_24
   \   000239   E0           MOVX    A,@DPTR
   \   00023A   6402         XRL     A,#0x2
   \   00023C   7037         JNZ     ??ZDApp_ProcessOSALMsg_7
   1249                {
   1250                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_24:
   \   00023E                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   00023E   12....       LCALL   `??ZDApp_ProcessNetworkJoin::?relay`; Banked call to: ZDApp_ProcessNetworkJoin
   \   000241   8032         SJMP    ??ZDApp_ProcessOSALMsg_7
   1251                }
   1252                break;
   1253          
   1254              case ZDO_NWK_JOIN_REQ:
   1255                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000243   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000246   E0           MOVX    A,@DPTR
   \   000247   6401         XRL     A,#0x1
   \   000249   6005         JZ      ??ZDApp_ProcessOSALMsg_25
   \   00024B   E0           MOVX    A,@DPTR
   \   00024C   6402         XRL     A,#0x2
   \   00024E   7025         JNZ     ??ZDApp_ProcessOSALMsg_7
   1256                {
   1257                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_25:
   \   000250   90....       MOV     DPTR,#retryCnt
   \   000253   E4           CLR     A
   \   000254   F0           MOVX    @DPTR,A
   1258                  devStartMode = MODE_RESUME;
   \   000255   90....       MOV     DPTR,#devStartMode
   \   000258   04           INC     A
   \   000259   F0           MOVX    @DPTR,A
   1259                  _tmpRejoinState = true;
   \   00025A   90....       MOV     DPTR,#_tmpRejoinState
   \   00025D   12....       LCALL   ?Subroutine15 & 0xFFFF
   1260                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_3:
   \   000260   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   1261                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   000263   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000266   7402         MOV     A,#0x2
   \   000268   F0           MOVX    @DPTR,A
   1262                  ZDApp_NetworkInit( 0 );
   \   000269                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000269   7A00         MOV     R2,#0x0
   \   00026B   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_23:
   \   00026D   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   000270   8003         SJMP    ??ZDApp_ProcessOSALMsg_7
   1263                }
   1264                break;
   1265          
   1266              default:
   1267                if ( ZG_SECURE_ENABLED )
   1268                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   000272                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   000272   12....       LCALL   `??ZDApp_ProcessSecMsg::?relay`; Banked call to: ZDApp_ProcessSecMsg
   1269                break;
   1270            }
   1271          
   1272          }
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   000275   7403         MOV     A,#0x3
   \   000277   02....       LJMP    ??Subroutine59_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine56_0
   \   000001                ; // Fall through to label ??Subroutine56_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine56_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   FD           MOV     R5,A
   \   000001                REQUIRE ??Subroutine57_0
   \   000001                ; // Fall through to label ??Subroutine57_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine57_0:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine63_0
   \   000004                ; // Fall through to label ??Subroutine63_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine63_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET
   1273          
   1274          /*********************************************************************
   1275           * @fn      ZDApp_ProcessMsgCBs()
   1276           *
   1277           * @brief   Process response messages
   1278           *
   1279           * @param   none
   1280           *
   1281           * @return  none
   1282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1283          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1284          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 44
   \   000005   74D4         MOV     A,#-0x2c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1285            switch ( inMsg->clusterID )
   \   00000E   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   000011   F5..         MOV     ?V1,A
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000018   0300         DW        3
   \   00001A   2100         DW        33
   \   00001C   2200         DW        34
   \   00001E   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   000020   0080         DW        32768
   \   000022   0180         DW        32769
   \   000024   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000026   2180         DW        32801
   \   000028   2280         DW        32802
   \   00002A   ....         DW        ??ZDApp_ProcessMsgCBs_2
   \   00002C   0100         DW        1
   \   00002E   2000         DW        32
   \   000030   ....         DW        ??ZDApp_ProcessMsgCBs_3
   \   000032   ....         DW        ??ZDApp_ProcessMsgCBs_4
   1286            {
   1287          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1288              case NWK_addr_rsp:
   1289              case IEEE_addr_rsp:
   1290                {
   1291                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1292          
   1293                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   000034                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000034   12....       LCALL   `??ZDO_ParseAddrRsp::?relay`; Banked call to: ZDO_ParseAddrRsp
   \   000037   8A..         MOV     ?V0,R2
   \   000039   8B..         MOV     ?V1,R3
   1294                  if ( pAddrRsp )
   \   00003B   EA           MOV     A,R2
   \   00003C   45..         ORL     A,?V1
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??ZDApp_ProcessMsgCBs_4 & 0xFFFF
   1295                  {
   1296                    if ( pAddrRsp->status == ZSuccess )
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   E0           MOVX    A,@DPTR
   \   000048   700F         JNZ     ??ZDApp_ProcessMsgCBs_5
   1297                    {
   1298                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   00004A                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   00004A   EA           MOV     A,R2
   \   00004B   2403         ADD     A,#0x3
   \   00004D   FC           MOV     R4,A
   \   00004E   E4           CLR     A
   \   00004F   35..         ADDC    A,?V1
   \   000051   FD           MOV     R5,A
   \   000052   A3           INC     DPTR
   \   000053   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   1299                    }
   \                     ??CrossCallReturnLabel_88:
   \   000056   12....       LCALL   `??ZDO_UpdateAddrManager::?relay`; Banked call to: ZDO_UpdateAddrManager
   1300          
   1301          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1302                    // look for pending bind entry for NWK_addr_rsp Only
   1303                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000059   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00005C   7004         JNZ     ??ZDApp_ProcessMsgCBs_6
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_6:
   \   000062   700C         JNZ     ??ZDApp_ProcessMsgCBs_7
   1304                    {
   1305          #if defined ( REFLECTOR )
   1306                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   000064                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   000064   E5..         MOV     A,?V0
   \   000066   2403         ADD     A,#0x3
   \   000068   FA           MOV     R2,A
   \   000069   E4           CLR     A
   \   00006A   35..         ADDC    A,?V1
   \   00006C   FB           MOV     R3,A
   \   00006D   12....       LCALL   `??ZDApp_ProcessPendingBindReq::?relay`; Banked call to: ZDApp_ProcessPendingBindReq
   1307          #endif
   1308                    }
   1309          #endif
   1310          
   1311                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_7:
   \   000070                ; Setup parameters for call to function osal_mem_free
   \   000070   AA..         MOV     R2,?V0
   \   000072   AB..         MOV     R3,?V1
   \   000074   807E         SJMP    ??CrossCallReturnLabel_90
   1312                  }
   1313                }
   1314                break;
   1315          #endif
   1316          
   1317          #if defined ( REFLECTOR )
   1318              case Bind_req:
   1319              case Unbind_req:
   1320                {
   1321                  ZDO_BindUnbindReq_t bindReq;
   1322                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   000076                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   000076   7417         MOV     A,#0x17
   \   000078   12....       LCALL   ?XSTACK_DISP102_8
   \   00007B   12....       LCALL   `??ZDO_ParseBindUnbindReq::?relay`; Banked call to: ZDO_ParseBindUnbindReq
   1323                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   00007E                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   00007E   7417         MOV     A,#0x17
   \   000080   12....       LCALL   ?XSTACK_DISP102_8
   \   000083   EE           MOV     A,R6
   \   000084   FA           MOV     R2,A
   \   000085   EF           MOV     A,R7
   \   000086   FB           MOV     R3,A
   \   000087   12....       LCALL   `??ZDO_ProcessBindUnbindReq::?relay`; Banked call to: ZDO_ProcessBindUnbindReq
   1324                }
   1325                break;
   \   00008A   806B         SJMP    ??ZDApp_ProcessMsgCBs_4
   1326          #endif
   1327          
   1328          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1329              case Bind_rsp:
   1330              case Unbind_rsp:
   1331                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00008C   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00008F   E0           MOVX    A,@DPTR
   \   000090   7065         JNZ     ??ZDApp_ProcessMsgCBs_4
   \   000092   90....       MOV     DPTR,#matchED
   \   000095   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000098   605D         JZ      ??ZDApp_ProcessMsgCBs_4
   1332                {
   1333                  ZDMatchSendState(
   1334                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1335                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   \   00009A   12....       LCALL   ?Subroutine35 & 0xFFFF
   1336                }
   \                     ??CrossCallReturnLabel_35:
   \   00009D   6421         XRL     A,#0x21
   \   00009F   7004         JNZ     ??ZDApp_ProcessMsgCBs_8
   \   0000A1   A3           INC     DPTR
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_8:
   \   0000A5   7004         JNZ     ??ZDApp_ProcessMsgCBs_9
   \   0000A7   7903         MOV     R1,#0x3
   \   0000A9   8002         SJMP    ??ZDApp_ProcessMsgCBs_10
   \                     ??ZDApp_ProcessMsgCBs_9:
   \   0000AB   7902         MOV     R1,#0x2
   \                     ??ZDApp_ProcessMsgCBs_10:
   \   0000AD                ; Setup parameters for call to function ZDMatchSendState
   \   0000AD   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   0000B0   FB           MOV     R3,A
   \   0000B1   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000B4   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   0000B7   FA           MOV     R2,A
   \   0000B8   12....       LCALL   `??ZDMatchSendState::?relay`; Banked call to: ZDMatchSendState
   \   0000BB   803A         SJMP    ??ZDApp_ProcessMsgCBs_4
   1337                break;
   1338          
   1339              case End_Device_Bind_req:
   1340                if (ZG_DEVICE_COORDINATOR_TYPE)
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   0000BD   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   7034         JNZ     ??ZDApp_ProcessMsgCBs_4
   1341                {
   1342                  ZDEndDeviceBind_t bindReq;
   1343                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   \   0000C3                ; Setup parameters for call to function ZDO_ParseEndDeviceBindReq
   \   0000C3   AC..         MOV     R4,?XSP + 0
   \   0000C5   AD..         MOV     R5,?XSP + 1
   \   0000C7   12....       LCALL   `??ZDO_ParseEndDeviceBindReq::?relay`; Banked call to: ZDO_ParseEndDeviceBindReq
   1344                  ZDO_MatchEndDeviceBind( &bindReq );
   \   0000CA                ; Setup parameters for call to function ZDO_MatchEndDeviceBind
   \   0000CA   AA..         MOV     R2,?XSP + 0
   \   0000CC   AB..         MOV     R3,?XSP + 1
   \   0000CE   12....       LCALL   `??ZDO_MatchEndDeviceBind::?relay`; Banked call to: ZDO_MatchEndDeviceBind
   1345          
   1346                  // Freeing the cluster lists - if allocated.
   1347                  if ( bindReq.numInClusters )
   \   0000D1   7411         MOV     A,#0x11
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   600B         JZ      ??ZDApp_ProcessMsgCBs_11
   1348                    osal_mem_free( bindReq.inClusters );
   \   0000D9                ; Setup parameters for call to function osal_mem_free
   \   0000D9   7412         MOV     A,#0x12
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   0000E1   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1349                  if ( bindReq.numOutClusters )
   \                     ??ZDApp_ProcessMsgCBs_11:
   \   0000E4   7414         MOV     A,#0x14
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   600B         JZ      ??ZDApp_ProcessMsgCBs_4
   1350                    osal_mem_free( bindReq.outClusters );
   \   0000EC                ; Setup parameters for call to function osal_mem_free
   \   0000EC   7415         MOV     A,#0x15
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   12....       LCALL   ??Subroutine58_0 & 0xFFFF
   1351                }
   1352                break;
   1353          #endif
   1354            }
   \                     ??CrossCallReturnLabel_90:
   \   0000F4   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1355          }
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   0000F7   742C         MOV     A,#0x2c
   \   0000F9   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   F5..         MOV     ?V0,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine72_0
   \   000003                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1356          
   1357          /*********************************************************************
   1358           * @fn      ZDApp_RegisterCBs()
   1359           *
   1360           * @brief   Process response messages
   1361           *
   1362           * @param   none
   1363           *
   1364           * @return  none
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1367          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1368          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1369            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1370          #endif
   1371          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1372            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B80         MOV     R3,#-0x80
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1373          #endif
   1374          #if ZG_BUILD_COORDINATOR_TYPE
   1375            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV     R2,#0x21
   \   00001E   7B80         MOV     R3,#-0x80
   \   000020   90....       MOV     DPTR,#ZDAppTaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1376            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV     R2,#0x22
   \   00002A   7B80         MOV     R3,#-0x80
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1377            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   \   000034                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000034   7A20         MOV     R2,#0x20
   \   000036   7B00         MOV     R3,#0x0
   \   000038   90....       MOV     DPTR,#ZDAppTaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1378          #endif
   1379          #if defined ( REFLECTOR )
   1380            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   000040                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000040   7A21         MOV     R2,#0x21
   \   000042   7B00         MOV     R3,#0x0
   \   000044   90....       MOV     DPTR,#ZDAppTaskID
   \   000047   E0           MOVX    A,@DPTR
   \   000048   F9           MOV     R1,A
   \   000049   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1381            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   00004C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00004C   7A22         MOV     R2,#0x22
   \   00004E   7B00         MOV     R3,#0x0
   \   000050   90....       MOV     DPTR,#ZDAppTaskID
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   `??ZDO_RegisterForZDOMsg::?relay`; Banked call to: ZDO_RegisterForZDOMsg
   1382          #endif
   1383          }
   \   000058   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   1384          
   1385          /*********************************************************************
   1386           * @fn      ZDApp_ProcessSecMsg()
   1387           *
   1388           * @brief   Process the incoming security message.
   1389           *
   1390           * @param   msgPtr - message to process
   1391           *
   1392           * @return  none
   1393           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1394          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1395          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1396            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FC         ADD     A,#-0x4
   \   00000B   6009         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   14           DEC     A
   \   00000E   6018         JZ      ??ZDApp_ProcessSecMsg_1
   \   000010   24FD         ADD     A,#-0x3
   \   000012   601F         JZ      ??ZDApp_ProcessSecMsg_2
   \   000014   802D         SJMP    ??ZDApp_ProcessSecMsg_3
   1397            {
   1398              case ZDO_TRANSPORT_KEY_IND:
   1399                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000016   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6401         XRL     A,#0x1
   \   00001C   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6402         XRL     A,#0x2
   \   000021   7020         JNZ     ??ZDApp_ProcessSecMsg_3
   1400                {
   1401                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000023                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000023   12....       LCALL   `??ZDSecMgrTransportKeyInd::?relay`; Banked call to: ZDSecMgrTransportKeyInd
   \   000026   801B         SJMP    ??ZDApp_ProcessSecMsg_3
   1402                }
   1403                break;
   1404          
   1405              case ZDO_UPDATE_DEVICE_IND:
   1406                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000028   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   7015         JNZ     ??ZDApp_ProcessSecMsg_3
   1407                {
   1408                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   \   00002E                ; Setup parameters for call to function ZDSecMgrUpdateDeviceInd
   \   00002E   12....       LCALL   `??ZDSecMgrUpdateDeviceInd::?relay`; Banked call to: ZDSecMgrUpdateDeviceInd
   \   000031   8010         SJMP    ??ZDApp_ProcessSecMsg_3
   1409                }
   1410                break;
   1411          
   1412              case ZDO_REMOVE_DEVICE_IND:
   1413                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   1414                {
   1415                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   1416                }
   1417                break;
   1418          
   1419              case ZDO_REQUEST_KEY_IND:
   1420                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1421                {
   1422                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1423                  {
   1424                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1425                  }
   1426                }
   1427                break;
   1428          
   1429              case ZDO_SWITCH_KEY_IND:
   1430                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000033   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6401         XRL     A,#0x1
   \   000039   6005         JZ      ??ZDApp_ProcessSecMsg_5
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   6402         XRL     A,#0x2
   \   00003E   7003         JNZ     ??ZDApp_ProcessSecMsg_3
   1431                {
   1432                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   000040                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000040   12....       LCALL   `??ZDSecMgrSwitchKeyInd::?relay`; Banked call to: ZDSecMgrSwitchKeyInd
   1433                }
   1434                break;
   1435          
   1436              default:
   1437                // Unsupported messages
   1438                break;
   1439            }
   1440          }
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000043   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   1441          
   1442          /*********************************************************************
   1443           * @fn      ZDApp_ProcessNetworkJoin()
   1444           *
   1445           * @brief
   1446           *
   1447           *   Save off the Network key information.
   1448           *
   1449           * @param   none
   1450           *
   1451           * @return  none
   1452           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1453          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1454          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1455            if ( (devState == DEV_NWK_JOINING) ||
   1456                ((devState == DEV_NWK_ORPHAN)  &&
   1457                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1458            {
   1459              // Result of a Join attempt by this device.
   1460              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   706B         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1461              {
   1462                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV     R2,#0x10
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1463          
   1464          #if defined ( POWER_SAVING )
   1465                osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000039                ; Setup parameters for call to function osal_pwrmgr_device
   \   000039   7901         MOV     R1,#0x1
   \   00003B   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1466          #endif
   1467          
   1468                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   00003E                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00003E   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000041   E9           MOV     A,R1
   \   000042   7003         JNZ     $+5
   \   000044   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1469                {
   1470                  // wait for auth from trust center
   1471                  devState = DEV_END_DEVICE_UNAUTH;
   1472          
   1473                  // Start the reset timer for MAX UNAUTH time
   1474                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1475                }
   1476                else
   1477                {
   1478                  if ( ZSTACK_ROUTER_BUILD )
   \   000047   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   6004         JZ      ??ZDApp_ProcessNetworkJoin_5
   \   00004D   6401         XRL     A,#0x1
   \   00004F   7015         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1479                  {
   1480                    if ( devState == DEV_NWK_ORPHAN
   1481                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000051   90....       MOV     DPTR,#devState
   \   000054   E0           MOVX    A,@DPTR
   \   000055   640A         XRL     A,#0xa
   \   000057   700D         JNZ     ??ZDApp_ProcessNetworkJoin_6
   \   000059   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00005C   6013         JZ      ??ZDApp_ProcessNetworkJoin_7
   1482                    {
   1483                      // Change NIB state to router for restore
   1484                      _NIB.nwkState = NWK_ROUTER;
   \   00005E   90....       MOV     DPTR,#_NIB + 35
   \   000061   7408         MOV     A,#0x8
   \   000063   F0           MOVX    @DPTR,A
   \   000064   800B         SJMP    ??ZDApp_ProcessNetworkJoin_7
   1485                    }
   1486                  }
   1487          
   1488                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   000066   90....       MOV     DPTR,#devState
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   6403         XRL     A,#0x3
   \   00006C   7003         JNZ     ??ZDApp_ProcessNetworkJoin_7
   1489                  {
   1490                    ZDApp_AnnounceNewAddress();
   \   00006E                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00006E   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1491                  }
   1492          
   1493                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   000071   90....       MOV     DPTR,#devState
   \   000074   7406         MOV     A,#0x6
   \   000076   F0           MOVX    @DPTR,A
   1494                  if ( ZSTACK_ROUTER_BUILD )
   \   000077   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   6007         JZ      ??ZDApp_ProcessNetworkJoin_8
   \   00007D   6401         XRL     A,#0x1
   \   00007F   6003         JZ      $+5
   \   000081   02....       LJMP    ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1495                  {
   1496                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1497                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   000084   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000087   7003         JNZ     $+5
   \   000089   02....       LJMP    ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1498                    {
   1499                      NLME_StartRouterRequest( 0, 0, false );
   \   00008C                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00008C   7B00         MOV     R3,#0x0
   \   00008E   7A00         MOV     R2,#0x0
   \   000090   7900         MOV     R1,#0x0
   \   000092   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   \   000095   02....       LJMP    ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1500                    }
   1501                  }
   1502                }
   1503              }
   1504              else
   1505              {
   1506                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000098   90....       MOV     DPTR,#devStartMode
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   6401         XRL     A,#0x1
   \   00009E   7036         JNZ     ??ZDApp_ProcessNetworkJoin_10
   \   0000A0   90....       MOV     DPTR,#retryCnt
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   04           INC     A
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6   C3           CLR     C
   \   0000A7   9403         SUBB    A,#0x3
   \   0000A9   402B         JC      ??ZDApp_ProcessNetworkJoin_10
   1507                {
   1508                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   0000AB   90....       MOV     DPTR,#_NIB + 33
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   F4           CPL     A
   \   0000B0   7003         JNZ     ??ZDApp_ProcessNetworkJoin_11
   \   0000B2   A3           INC     DPTR
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   0000B5   600D         JZ      ??ZDApp_ProcessNetworkJoin_12
   \   0000B7   90....       MOV     DPTR,#_NIB + 33
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   64FE         XRL     A,#0xfe
   \   0000BD   7003         JNZ     ??ZDApp_ProcessNetworkJoin_13
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000C2   7006         JNZ     ??ZDApp_ProcessNetworkJoin_14
   1509                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000C4   90....       MOV     DPTR,#devStartMode
   \   0000C7   E4           CLR     A
   \   0000C8   800B         SJMP    ??ZDApp_ProcessNetworkJoin_15
   1510                  else
   1511                  {
   1512                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000CA   90....       MOV     DPTR,#devStartMode
   \   0000CD   7403         MOV     A,#0x3
   \   0000CF   F0           MOVX    @DPTR,A
   1513                    _tmpRejoinState = true;
   \   0000D0   90....       MOV     DPTR,#_tmpRejoinState
   \   0000D3   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000D5   F0           MOVX    @DPTR,A
   1514                  }
   1515                }
   1516          
   1517                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1518                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000D6                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000D6   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   0000D9   8A..         MOV     ?V0,R2
   \   0000DB   8B..         MOV     ?V1,R3
   \   0000DD   74FE         MOV     A,#-0x2
   \   0000DF   65..         XRL     A,?V0
   \   0000E1   7004         JNZ     ??ZDApp_ProcessNetworkJoin_16
   \   0000E3   74FF         MOV     A,#-0x1
   \   0000E5   65..         XRL     A,?V1
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0000E7   700D         JNZ     ??ZDApp_ProcessNetworkJoin_17
   \   0000E9   90....       MOV     DPTR,#_NIB + 20
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   64FE         XRL     A,#0xfe
   \   0000EF   7003         JNZ     ??ZDApp_ProcessNetworkJoin_18
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   0000F4   601D         JZ      ??ZDApp_ProcessNetworkJoin_19
   1519                {
   1520                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   0000F6   85..82       MOV     DPL,?XSP + 0
   \   0000F9   85..83       MOV     DPH,?XSP + 1
   \   0000FC   74FE         MOV     A,#-0x2
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   A3           INC     DPTR
   \   000100   04           INC     A
   \   000101   F0           MOVX    @DPTR,A
   1521                  // Invalidate nwk addr so end device does not use in its data reqs.
   1522                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   000102   90....       MOV     DPTR,#_NIB + 20
   \   000105   14           DEC     A
   \   000106   F0           MOVX    @DPTR,A
   \   000107   A3           INC     DPTR
   \   000108   04           INC     A
   \   000109   F0           MOVX    @DPTR,A
   1523                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   \   00010A                ; Setup parameters for call to function ZMacSetReq
   \   00010A   AA..         MOV     R2,?XSP + 0
   \   00010C   AB..         MOV     R3,?XSP + 1
   \   00010E   7953         MOV     R1,#0x53
   \   000110   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   1524                }
   1525          
   1526                // Clear the neighbor Table and network discovery tables.
   1527                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   000113                ; Setup parameters for call to function nwkNeighborInitTable
   \   000113   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1528                NLME_NwkDiscTerm();
   \   000116                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000116   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1529          
   1530                zdoDiscCounter = 1;
   \   000119   90....       MOV     DPTR,#zdoDiscCounter
   \   00011C   7401         MOV     A,#0x1
   \   00011E   F0           MOVX    @DPTR,A
   1531          
   1532          //      ZDApp_NetworkInit( (uint16)
   1533          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1534          //                          (NWK_START_DELAY * 5)) );
   1535                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1536                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   00011F                ; Setup parameters for call to function osal_rand
   \   00011F   02....       LJMP    ??ZDApp_ProcessNetworkJoin_20 & 0xFFFF
   1537              }
   1538            }
   1539            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   000122   E0           MOVX    A,@DPTR
   \   000123   6404         XRL     A,#0x4
   \   000125   6003         JZ      $+5
   \   000127   02....       LJMP    ??ZDApp_ProcessNetworkJoin_21 & 0xFFFF
   1540            {
   1541              // results of an orphaning attempt by this device
   1542              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   00012A   90....       MOV     DPTR,#nwkStatus
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   706D         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1543              {
   1544                // Verify NWK key is available before sending Device_annce
   1545                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   000130                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000130   12....       LCALL   `??ZDApp_RestoreNwkKey::?relay`; Banked call to: ZDApp_RestoreNwkKey
   \   000133   E9           MOV     A,R1
   \   000134   701C         JNZ     ??ZDApp_ProcessNetworkJoin_23
   1546                {
   1547                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000136                ; Setup parameters for call to function osal_set_event
   \   000136   7A10         MOV     R2,#0x10
   \   000138   7B00         MOV     R3,#0x0
   \   00013A   90....       MOV     DPTR,#ZDAppTaskID
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F9           MOV     R1,A
   \   00013F   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1548          
   1549                  // wait for auth from trust center
   1550                  devState = DEV_END_DEVICE_UNAUTH;
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   000142   90....       MOV     DPTR,#devState
   \   000145   7405         MOV     A,#0x5
   \   000147   F0           MOVX    @DPTR,A
   1551          
   1552                  // Start the reset timer for MAX UNAUTH time
   1553                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   000148                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000148   7A10         MOV     R2,#0x10
   \   00014A   7B27         MOV     R3,#0x27
   \   00014C   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   \   00014F   02....       LJMP    ??ZDApp_ProcessNetworkJoin_9 & 0xFFFF
   1554                }
   1555                else
   1556                {
   1557          
   1558                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000152   12....       LCALL   ?Subroutine10 & 0xFFFF
   1559                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_77:
   \   000155   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1560                  // setup Power Manager Device
   1561          #if defined ( POWER_SAVING )
   1562                  osal_pwrmgr_device( PWRMGR_BATTERY );
   \   000158                ; Setup parameters for call to function osal_pwrmgr_device
   \   000158   7901         MOV     R1,#0x1
   \   00015A   12....       LCALL   `??osal_pwrmgr_device::?relay`; Banked call to: osal_pwrmgr_device
   1563          #endif
   1564          
   1565                  // The receiver is on, turn network layer polling off.
   1566                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   00015D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000160   E0           MOVX    A,@DPTR
   \   000161   A2E3         MOV     C,0xE0 /* A   */.3
   \   000163   501B         JNC     ??ZDApp_ProcessNetworkJoin_24
   1567                  {
   1568          #if defined ( ZIGBEE_CHILD_AGING )
   1569                    // if Child Table Management process is not enabled
   1570                    if ( zgChildAgingEnable == FALSE )
   \   000165   90....       MOV     DPTR,#zgChildAgingEnable
   \   000168   E0           MOVX    A,@DPTR
   \   000169   7015         JNZ     ??ZDApp_ProcessNetworkJoin_24
   1571          #endif // ZIGBEE_CHILD_AGING
   1572                    {
   1573                      NLME_SetPollRate( 0 );
   \   00016B                ; Setup parameters for call to function NLME_SetPollRate
   \   00016B   7A00         MOV     R2,#0x0
   \   00016D   7B00         MOV     R3,#0x0
   \   00016F   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   1574                      NLME_SetQueuedPollRate( 0 );
   \   000172                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000172   7A00         MOV     R2,#0x0
   \   000174   7B00         MOV     R3,#0x0
   \   000176   12....       LCALL   `??NLME_SetQueuedPollRate::?relay`; Banked call to: NLME_SetQueuedPollRate
   1575                      NLME_SetResponseRate( 0 );
   \   000179                ; Setup parameters for call to function NLME_SetResponseRate
   \   000179   7A00         MOV     R2,#0x0
   \   00017B   7B00         MOV     R3,#0x0
   \   00017D   12....       LCALL   `??NLME_SetResponseRate::?relay`; Banked call to: NLME_SetResponseRate
   1576                    }
   1577                  }
   1578          
   1579                  if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   000180   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000183   E0           MOVX    A,@DPTR
   \   000184   6004         JZ      ??ZDApp_ProcessNetworkJoin_25
   \   000186   6401         XRL     A,#0x1
   \   000188   700E         JNZ     ??ZDApp_ProcessNetworkJoin_26
   1580                  {
   1581                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1582                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   00018A   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00018D   6009         JZ      ??ZDApp_ProcessNetworkJoin_26
   1583                    {
   1584                      NLME_StartRouterRequest( 0, 0, false );
   \   00018F                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00018F   7B00         MOV     R3,#0x0
   \   000191   7A00         MOV     R2,#0x0
   \   000193   7900         MOV     R1,#0x0
   \   000195   12....       LCALL   `??NLME_StartRouterRequest::?relay`; Banked call to: NLME_StartRouterRequest
   1585                    }
   1586                  }
   1587          
   1588                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   000198                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000198   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   \   00019B   8073         SJMP    ??ZDApp_ProcessNetworkJoin_9
   1589                }
   1590              }
   1591              else
   1592              {
   1593                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   00019D   90....       MOV     DPTR,#devStartMode
   \   0001A0   E0           MOVX    A,@DPTR
   \   0001A1   6401         XRL     A,#0x1
   \   0001A3   703E         JNZ     ??ZDApp_ProcessNetworkJoin_27
   1594                {
   1595                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   0001A5   90....       MOV     DPTR,#retryCnt
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   04           INC     A
   \   0001AA   F0           MOVX    @DPTR,A
   \   0001AB   C3           CLR     C
   \   0001AC   9404         SUBB    A,#0x4
   \   0001AE   5026         JNC     ??ZDApp_ProcessNetworkJoin_28
   1596                  {
   1597                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   0001B0   90....       MOV     DPTR,#_NIB + 33
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F4           CPL     A
   \   0001B5   7003         JNZ     ??ZDApp_ProcessNetworkJoin_29
   \   0001B7   A3           INC     DPTR
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_29:
   \   0001BA   6022         JZ      ??ZDApp_ProcessNetworkJoin_30
   \   0001BC   90....       MOV     DPTR,#_NIB + 33
   \   0001BF   E0           MOVX    A,@DPTR
   \   0001C0   64FE         XRL     A,#0xfe
   \   0001C2   7003         JNZ     ??ZDApp_ProcessNetworkJoin_31
   \   0001C4   A3           INC     DPTR
   \   0001C5   E0           MOVX    A,@DPTR
   \   0001C6   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_31:
   \   0001C7   6015         JZ      ??ZDApp_ProcessNetworkJoin_30
   1598                      devStartMode = MODE_JOIN;
   1599                    else
   1600                    {
   1601                      devStartMode = MODE_REJOIN;
   \   0001C9   90....       MOV     DPTR,#devStartMode
   \   0001CC   7403         MOV     A,#0x3
   \   0001CE   F0           MOVX    @DPTR,A
   1602                      _tmpRejoinState = true;
   \   0001CF   90....       MOV     DPTR,#_tmpRejoinState
   \   0001D2   7401         MOV     A,#0x1
   \   0001D4   800C         SJMP    ??ZDApp_ProcessNetworkJoin_32
   1603                    }
   1604                  }
   1605                  // Do a normal join to the network after certain times of rejoin retries
   1606                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_28:
   \   0001D6   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   0001D9   E0           MOVX    A,@DPTR
   \   0001DA   6401         XRL     A,#0x1
   \   0001DC   7005         JNZ     ??ZDApp_ProcessNetworkJoin_27
   1607                  {
   1608                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_30:
   \   0001DE   90....       MOV     DPTR,#devStartMode
   \   0001E1   E4           CLR     A
   \                     ??ZDApp_ProcessNetworkJoin_32:
   \   0001E2   F0           MOVX    @DPTR,A
   1609                  }
   1610                }
   1611          
   1612                // Clear the neighbor Table and network discovery tables.
   1613                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   0001E3                ; Setup parameters for call to function nwkNeighborInitTable
   \   0001E3   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   1614                NLME_NwkDiscTerm();
   \   0001E6                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0001E6   12....       LCALL   `??NLME_NwkDiscTerm::?relay`; Banked call to: NLME_NwkDiscTerm
   1615          
   1616                // setup a retry for later...
   1617                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1618                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   0001E9                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   0001E9   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   0001EC                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001EC   EA           MOV     A,R2
   \   0001ED   547F         ANL     A,#0x7f
   \   0001EF   2464         ADD     A,#0x64
   \   0001F1   FA           MOV     R2,A
   \   0001F2   7B00         MOV     R3,#0x0
   \   0001F4   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   \   0001F7   8017         SJMP    ??ZDApp_ProcessNetworkJoin_9
   1619              }
   1620            }
   1621          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1622            else
   1623            {
   1624              // Assume from address conflict
   1625              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   0001F9   90....       MOV     DPTR,#_NIB + 96
   \   0001FC   E0           MOVX    A,@DPTR
   \   0001FD   6402         XRL     A,#0x2
   \   0001FF   700F         JNZ     ??ZDApp_ProcessNetworkJoin_9
   1626              {
   1627                // Notify the network
   1628                ZDApp_AnnounceNewAddress();
   \   000201                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000201   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   1629          
   1630                // Notify apps
   1631                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000204                ; Setup parameters for call to function osal_set_event
   \   000204   7A10         MOV     R2,#0x10
   \   000206   7B00         MOV     R3,#0x0
   \   000208   90....       MOV     DPTR,#ZDAppTaskID
   \   00020B   E0           MOVX    A,@DPTR
   \   00020C   F9           MOV     R1,A
   \   00020D   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   1632              }
   1633            }
   1634          #endif
   1635          }
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000210   02....       LJMP    ?Subroutine8 & 0xFFFF
   1636          
   1637          /*********************************************************************
   1638           * @fn      ZDApp_SaveNwkKey()
   1639           *
   1640           * @brief   Save off the Network key information.
   1641           *
   1642           * @param   none
   1643           *
   1644           * @return  none
   1645           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1646          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1647          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1648            nwkActiveKeyItems keyItems;
   1649          
   1650            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   AA..         MOV     R2,?XSP + 0
   \   00000C   AB..         MOV     R3,?XSP + 1
   \   00000E   12....       LCALL   `??SSP_ReadNwkActiveKey::?relay`; Banked call to: SSP_ReadNwkActiveKey
   1651          
   1652            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1653                          (void *)&keyItems );
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   A8..         MOV     R0,?XSP + 0
   \   000013   A9..         MOV     R1,?XSP + 1
   \   000015   88..         MOV     ?V0,R0
   \   000017   89..         MOV     ?V1,R1
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75..15       MOV     ?V0,#0x15
   \   000021   75..00       MOV     ?V1,#0x0
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A82         MOV     R2,#-0x7e
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   1654          
   1655            nwkFrameCounterChanges = 0;
   \   000039   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
   1656          
   1657            // Clear copy in RAM before return.
   1658            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   000040                ; Setup parameters for call to function osal_memset
   \   000040   7C15         MOV     R4,#0x15
   \   000042   FD           MOV     R5,A
   \   000043   F9           MOV     R1,A
   \   000044   AA..         MOV     R2,?XSP + 0
   \   000046   AB..         MOV     R3,?XSP + 1
   \   000048   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1659          
   1660          }
   \   00004B                REQUIRE ?Subroutine9
   \   00004B                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7415         MOV     A,#0x15
   \   000002   02....       LJMP    ??Subroutine59_0 & 0xFFFF
   1661          
   1662          /*********************************************************************
   1663           * @fn      ZDApp_ForceConcentratorChange()
   1664           *
   1665           * @brief   Force a network concentrator change by resetting 
   1666           *          zgConcentratorEnable and zgConcentratorDiscoveryTime 
   1667           *          from NV and set nwk event.
   1668           *
   1669           * @param   none
   1670           *
   1671           * @return  none
   1672           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1673          void ZDApp_ForceConcentratorChange( void )
   \                     ZDApp_ForceConcentratorChange:
   1674          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1675            osal_nv_read( ZCD_NV_CONCENTRATOR_ENABLE, 0, sizeof(zgConcentratorEnable), &zgConcentratorEnable );
   \   000005                ; Setup parameters for call to function osal_nv_read
   \   000005   75....       MOV     ?V0,#zgConcentratorEnable & 0xff
   \   000008   75....       MOV     ?V1,#(zgConcentratorEnable >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..01       MOV     ?V0,#0x1
   \   000013   75..00       MOV     ?V1,#0x0
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   7C00         MOV     R4,#0x0
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   7A32         MOV     R2,#0x32
   \   000021   7B00         MOV     R3,#0x0
   \   000023   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000026   7404         MOV     A,#0x4
   \   000028   12....       LCALL   ?DEALLOC_XSTACK8
   1676            osal_nv_read( ZCD_NV_CONCENTRATOR_DISCOVERY, 0, sizeof(zgConcentratorDiscoveryTime), &zgConcentratorDiscoveryTime );
   \   00002B                ; Setup parameters for call to function osal_nv_read
   \   00002B   75....       MOV     ?V0,#zgConcentratorDiscoveryTime & 0xff
   \   00002E   75....       MOV     ?V1,#(zgConcentratorDiscoveryTime >> 8) & 0xff
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..01       MOV     ?V0,#0x1
   \   000039   75..00       MOV     ?V1,#0x0
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A33         MOV     R2,#0x33
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   1677           
   1678            if ( zgConcentratorEnable == TRUE )
   \   000051   90....       MOV     DPTR,#zgConcentratorEnable
   \   000054   E0           MOVX    A,@DPTR
   \   000055   6401         XRL     A,#0x1
   \   000057   7019         JNZ     ??ZDApp_ForceConcentratorChange_0
   1679            {
   1680              // Start next event
   1681              osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   000059                ; Setup parameters for call to function osal_start_timerEx
   \   000059   90....       MOV     DPTR,#__Constant_64
   \   00005C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   7B08         MOV     R3,#0x8
   \   000063   90....       MOV     DPTR,#NWK_TaskID
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F9           MOV     R1,A
   \   000068   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000070   800C         SJMP    ??ZDApp_ForceConcentratorChange_1
   1682            }
   1683            else
   1684            {
   1685              // Stop the next event
   1686              osal_stop_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT );
   \                     ??ZDApp_ForceConcentratorChange_0:
   \   000072                ; Setup parameters for call to function osal_stop_timerEx
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B08         MOV     R3,#0x8
   \   000076   90....       MOV     DPTR,#NWK_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1687            }
   1688          }
   \                     ??ZDApp_ForceConcentratorChange_1:
   \   00007E   80..         SJMP    ??Subroutine60_0
   1689          
   1690          /*********************************************************************
   1691           * @fn      ZDApp_ResetNwkKey()
   1692           *
   1693           * @brief   Reset the Network key information in NV.
   1694           *
   1695           * @param   none
   1696           *
   1697           * @return  none
   1698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1699          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1700          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1701            nwkActiveKeyItems keyItems;
   1702          
   1703            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   AA..         MOV     R2,?XSP + 0
   \   000012   AB..         MOV     R3,?XSP + 1
   \   000014   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1704            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1705                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   A8..         MOV     R0,?XSP + 0
   \   000019   A9..         MOV     R1,?XSP + 1
   \   00001B   88..         MOV     ?V0,R0
   \   00001D   89..         MOV     ?V1,R1
   \   00001F   78..         MOV     R0,#?V0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..15       MOV     ?V0,#0x15
   \   000027   75..00       MOV     ?V1,#0x0
   \   00002A   78..         MOV     R0,#?V0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A82         MOV     R2,#-0x7e
   \   000035   7B00         MOV     R3,#0x0
   \   000037   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003A   7404         MOV     A,#0x4
   \   00003C   12....       LCALL   ?DEALLOC_XSTACK8
   1706          }
   \   00003F   02....       LJMP    ?Subroutine9 & 0xFFFF
   1707          
   1708          /*********************************************************************
   1709           * @fn      ZDApp_RestoreNwkKey()
   1710           *
   1711           * @brief
   1712           *
   1713           *   Save off the Network key information.
   1714           *
   1715           * @param   none
   1716           *
   1717           * @return  true if restored from NV, false if not
   1718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1719          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1720          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1721            nwkActiveKeyItems keyItems;
   1722            uint8 ret = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   1723          
   1724            // Restore the key information
   1725            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1726                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   A8..         MOV     R0,?XSP + 0
   \   00000E   A9..         MOV     R1,?XSP + 1
   \   000010   88..         MOV     ?V0,R0
   \   000012   89..         MOV     ?V1,R1
   \   000014   78..         MOV     R0,#?V0
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   75..15       MOV     ?V0,#0x15
   \   00001C   8E..         MOV     ?V1,R6
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   7C00         MOV     R4,#0x0
   \   000025   7D00         MOV     R5,#0x0
   \   000027   7A82         MOV     R2,#-0x7e
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00002E   7404         MOV     A,#0x4
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   \   000033   E9           MOV     A,R1
   \   000034   6003         JZ      $+5
   \   000036   02....       LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1727            {
   1728              uint8 nullKey[SEC_KEY_LEN];
   1729          
   1730              // initialize default value to compare to
   1731              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   000039                ; Setup parameters for call to function osal_memset
   \   000039   7C10         MOV     R4,#0x10
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   7900         MOV     R1,#0x0
   \   00003F   7415         MOV     A,#0x15
   \   000041   12....       LCALL   ?XSTACK_DISP101_8
   \   000044   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1732          
   1733              // if stored key is different than default value, then a key has been established
   1734              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   000047                ; Setup parameters for call to function osal_memcmp
   \   000047   7415         MOV     A,#0x15
   \   000049   12....       LCALL   ?XSTACK_DISP100_8
   \   00004C   88..         MOV     ?V0,R0
   \   00004E   89..         MOV     ?V1,R1
   \   000050   8E..         MOV     ?V2,R6
   \   000052   78..         MOV     R0,#?V0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000057   7C10         MOV     R4,#0x10
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   A982         MOV     R1,DPL
   \   000062   AA83         MOV     R2,DPH
   \   000064   7B00         MOV     R3,#0x0
   \   000066   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000069   7403         MOV     A,#0x3
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   E9           MOV     A,R1
   \   00006F   705B         JNZ     ??ZDApp_RestoreNwkKey_0
   1735              {
   1736                // Increment the frame counter stored in NV
   1737                keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1738                                           NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   000071   90....       MOV     DPTR,#__Constant_4e2
   \   000074   78..         MOV     R0,#?V0
   \   000076   12....       LCALL   ?L_MOV_X
   \   000079   7411         MOV     A,#0x11
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?L_ADD_TO_X
   1739          
   1740                nwkFrameCounter = keyItems.frameCounter;
   \   000083   7411         MOV     A,#0x11
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   12....       LCALL   ?XLOAD_R0123
   \   00008B   90....       MOV     DPTR,#nwkFrameCounter
   \   00008E   12....       LCALL   ?XSTORE_R0123
   1741          
   1742                // Save the updated Frame Counter right away
   1743                osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1744                               (void *)&keyItems );
   \   000091                ; Setup parameters for call to function osal_nv_write
   \   000091   A8..         MOV     R0,?XSP + 0
   \   000093   A9..         MOV     R1,?XSP + 1
   \   000095   88..         MOV     ?V0,R0
   \   000097   89..         MOV     ?V1,R1
   \   000099   78..         MOV     R0,#?V0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   75..15       MOV     ?V0,#0x15
   \   0000A1   8E..         MOV     ?V1,R6
   \   0000A3   78..         MOV     R0,#?V0
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   7C00         MOV     R4,#0x0
   \   0000AA   7D00         MOV     R5,#0x0
   \   0000AC   7A82         MOV     R2,#-0x7e
   \   0000AE   7B00         MOV     R3,#0x0
   \   0000B0   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000B3   7404         MOV     A,#0x4
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   1745          
   1746                nwkFrameCounterChanges = 0;
   \   0000B8   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000BB   E4           CLR     A
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   F0           MOVX    @DPTR,A
   1747          
   1748                ret = TRUE;
   \   0000BF   7E01         MOV     R6,#0x1
   1749          
   1750                // Clear copy in RAM before return.
   1751                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000C1                ; Setup parameters for call to function osal_memset
   \   0000C1   7C15         MOV     R4,#0x15
   \   0000C3   FD           MOV     R5,A
   \   0000C4   F9           MOV     R1,A
   \   0000C5   AA..         MOV     R2,?XSP + 0
   \   0000C7   AB..         MOV     R3,?XSP + 1
   \   0000C9   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   1752              }
   1753            }
   1754          
   1755            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000CC   EE           MOV     A,R6
   \   0000CD   F9           MOV     R1,A
   \   0000CE   7425         MOV     A,#0x25
   \   0000D0   02....       LJMP    ?Subroutine5 & 0xFFFF
   1756          }
   1757          
   1758          /*********************************************************************
   1759           * @fn      ZDApp_ResetTimerStart
   1760           *
   1761           * @brief   Start the reset timer.
   1762           *
   1763           * @param   delay - delay time(ms) before reset
   1764           *
   1765           * @return  none
   1766           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1767          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1768          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   1769            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   701B         JNZ     ??ZDApp_ResetTimerStart_0
   1770            {
   1771              // Start the rest timer
   1772              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   E4           CLR     A
   \   00001C   F5..         MOV     ?V2,A
   \   00001E   F5..         MOV     ?V3,A
   \   000020   78..         MOV     R0,#?V0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   1773            }
   1774          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000036   02....       LJMP    ??Subroutine72_0 & 0xFFFF
   1775          
   1776          /*********************************************************************
   1777           * @fn      ZDApp_ResetTimerCancel
   1778           *
   1779           * @brief   Cancel the reset timer.
   1780           *
   1781           * @param   none
   1782           *
   1783           * @return  none
   1784           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1785          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1786          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1787            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   1788            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000010                ; Setup parameters for call to function osal_clear_event
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??osal_clear_event::?relay`; Banked call to: osal_clear_event
   1789          }
   \   00001C   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   1790          
   1791          /*********************************************************************
   1792           * @fn      ZDApp_LeaveCtrlInit
   1793           *
   1794           * @brief   Initialize the leave control logic.
   1795           *
   1796           * @param   none
   1797           *
   1798           * @return  none
   1799           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1800          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1801          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1802            uint8 status;
   1803          
   1804          
   1805            // Initialize control state
   1806            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1807          
   1808            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1809                                        sizeof(ZDApp_LeaveCtrl),
   1810                                        &ZDApp_LeaveCtrl );
   1811          
   1812            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1813            {
   1814              // Read saved control
   1815              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1816                            0,
   1817                            sizeof( uint8 ),
   1818                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0,#0x1
   \   000030   75..00       MOV     ?V1,#0x0
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1819            }
   1820          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000048   02....       LJMP    ??Subroutine60_0 & 0xFFFF
   1821          
   1822          /*********************************************************************
   1823           * @fn      ZDApp_LeaveCtrlSet
   1824           *
   1825           * @brief   Set the leave control logic.
   1826           *
   1827           * @param   ra - reassociate flag
   1828           *
   1829           * @return  none
   1830           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   75....       MOV     ?V0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0,#0x1
   \   00000E   75..00       MOV     ?V1,#0x0
   \   000011   78..         MOV     R0,#?V0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine59_0
   \   000023                ; // Fall through to label ??Subroutine59_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1831          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1832          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1833            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1834          
   1835            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1836            {
   1837              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1838            }
   1839          
   1840            // Write the leave control
   1841            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1842                           0,
   1843                           sizeof( uint8 ),
   1844                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine3 & 0xFFFF
   1845          }
   1846          
   1847          /*********************************************************************
   1848           * @fn      ZDApp_LeaveCtrlReset
   1849           *
   1850           * @brief   Re-initialize the leave control logic.
   1851           *
   1852           * @param   none
   1853           *
   1854           * @return  none
   1855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1856          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1857          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1858            // Set leave control to initialized state
   1859            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1860          
   1861            // Write initialized control
   1862            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1863                          0,
   1864                          sizeof( uint8 ),
   1865                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine3 & 0xFFFF
   1866          }
   1867          
   1868          /*********************************************************************
   1869           * @fn      ZDApp_LeaveCtrlBypass
   1870           *
   1871           * @brief   Check if NV restore should be skipped during a leave reset.
   1872           *
   1873           * @param   none
   1874           *
   1875           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1876           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1877          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1878          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1879            uint8 bypass;
   1880          
   1881            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1882            {
   1883              bypass = TRUE;
   1884            }
   1885            else
   1886            {
   1887              bypass = FALSE;
   1888            }
   1889          
   1890            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ??Subroutine61_0
   1891          }
   1892          
   1893          /*********************************************************************
   1894           * @fn      ZDApp_LeaveCtrlStartup
   1895           *
   1896           * @brief   Check for startup conditions during a leave reset.
   1897           *
   1898           * @param   state      - devState_t determined by leave control logic
   1899           * @param   startDelay - startup delay
   1900           *
   1901           * @return  none
   1902           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1903          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1904          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1905            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   1906          
   1907            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   1908            {
   1909              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1910              {
   1911                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1912              }
   1913              else
   1914              {
   1915                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   1916              }
   1917          
   1918              // Reset leave control logic
   1919              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   `??ZDApp_LeaveCtrlReset::?relay`; Banked call to: ZDApp_LeaveCtrlReset
   1920            }
   1921          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP    ??Subroutine61_0
   1922          
   1923          /*********************************************************************
   1924           * @fn      ZDApp_LeaveReset
   1925           *
   1926           * @brief   Setup a device reset due to a leave indication/confirm.
   1927           *
   1928           * @param   ra - reassociate flag
   1929           *
   1930           * @return  none
   1931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1932          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1933          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1934            ZDApp_LeaveCtrlSet( ra );
   \   000005                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000005   12....       LCALL   `??ZDApp_LeaveCtrlSet::?relay`; Banked call to: ZDApp_LeaveCtrlSet
   1935          
   1936            ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \   000008                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000008   7A88         MOV     R2,#-0x78
   \   00000A   7B13         MOV     R3,#0x13
   \   00000C   12....       LCALL   `??ZDApp_ResetTimerStart::?relay`; Banked call to: ZDApp_ResetTimerStart
   1937          }
   \   00000F   02....       LJMP    ??Subroutine62_0 & 0xFFFF
   1938          
   1939          /*********************************************************************
   1940           * @fn      ZDApp_LeaveUpdate
   1941           *
   1942           * @brief   Update local device data related to leaving device.
   1943           *
   1944           * @param   nwkAddr        - NWK address of leaving device
   1945           * @param   extAddr        - EXT address of leaving device
   1946           * @param   removeChildren - remove children of leaving device
   1947           *
   1948           * @return  none
   1949           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1950          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1951                                  uint8 removeChildren )
   1952          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0,R2
   \   00000C   8B..         MOV     ?V1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V2,R1
   1953            // Remove Apps Key for leaving device
   1954            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   `??ZDSecMgrDeviceRemoveByExtAddr::?relay`; Banked call to: ZDSecMgrDeviceRemoveByExtAddr
   1955          
   1956            // Clear SECURITY bit from Address Manager
   1957            ZDSecMgrAddrClear( extAddr );
   \   00001B                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   `??ZDSecMgrAddrClear::?relay`; Banked call to: ZDSecMgrAddrClear
   1958          
   1959            if ( pbindRemoveDev )
   \   000022   90....       MOV     DPTR,#pbindRemoveDev
   \   000025   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000028   6036         JZ      ??ZDApp_LeaveUpdate_0
   1960            {
   1961              zAddrType_t devAddr;
   1962          
   1963              // Remove bind entry and all related data
   1964              devAddr.addrMode = Addr64Bit;
   \   00002A   7410         MOV     A,#0x10
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7403         MOV     A,#0x3
   \   000031   F0           MOVX    @DPTR,A
   1965              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   8E..         MOV     ?V4,R6
   \   000034   8F..         MOV     ?V5,R7
   \   000036   75..00       MOV     ?V6,#0x0
   \   000039   78..         MOV     R0,#?V4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   7C08         MOV     R4,#0x8
   \   000040   7D00         MOV     R5,#0x0
   \   000042   740B         MOV     A,#0xb
   \   000044   12....       LCALL   ?XSTACK_DISP101_8
   \   000047   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   1966          
   1967              pbindRemoveDev(&devAddr);
   \   00004F                ; Setup parameters for indirect call
   \   00004F   7408         MOV     A,#0x8
   \   000051   12....       LCALL   ?XSTACK_DISP101_8
   \   000054   90....       MOV     DPTR,#pbindRemoveDev
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F8           MOV     R0,A
   \   000059   A3           INC     DPTR
   \   00005A   12....       LCALL   ??Subroutine70_0 & 0xFFFF
   1968            }
   \                     ??CrossCallReturnLabel_144:
   \   00005D   12....       LCALL   ?CALL_IND
   1969          
   1970            // Remove if child
   1971            if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDApp_LeaveUpdate_0:
   \   000060   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000063   E0           MOVX    A,@DPTR
   \   000064   6004         JZ      ??ZDApp_LeaveUpdate_1
   \   000066   6401         XRL     A,#0x1
   \   000068   7047         JNZ     ??ZDApp_LeaveUpdate_2
   1972            {
   1973              // Router shall notify the Trust Center that a child device has left the network
   1974              if ( AssocIsChild( nwkAddr ) == TRUE )
   \                     ??ZDApp_LeaveUpdate_1:
   \   00006A                ; Setup parameters for call to function AssocIsChild
   \   00006A   AA..         MOV     R2,?V0
   \   00006C   AB..         MOV     R3,?V1
   \   00006E   12....       LCALL   `??AssocIsChild::?relay`; Banked call to: AssocIsChild
   \   000071   E9           MOV     A,R1
   \   000072   6401         XRL     A,#0x1
   \   000074   7032         JNZ     ??ZDApp_LeaveUpdate_3
   1975              {
   1976                  APSME_UpdateDeviceReq_t req;
   1977          
   1978                  // forward authorization to the Trust Center
   1979                  req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   000076   85..82       MOV     DPL,?XSP + 0
   \   000079   85..83       MOV     DPH,?XSP + 1
   \   00007C   E4           CLR     A
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   F0           MOVX    @DPTR,A
   1980                  req.devAddr    = nwkAddr;
   \   000080   7402         MOV     A,#0x2
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   12....       LCALL   ??Subroutine68_0 & 0xFFFF
   1981                  req.devExtAddr = extAddr;
   \                     ??CrossCallReturnLabel_139:
   \   000088   7404         MOV     A,#0x4
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   EE           MOV     A,R6
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   EF           MOV     A,R7
   \   000091   F0           MOVX    @DPTR,A
   1982                  req.status = APSME_UD_DEVICE_LEFT;
   \   000092   7406         MOV     A,#0x6
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   7402         MOV     A,#0x2
   \   000099   F0           MOVX    @DPTR,A
   1983          
   1984                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1985                  {
   1986                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1987                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1988                    // with legacy Coordinator devices which can only handle one or the other.
   1989                    if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   1990                    {
   1991                      req.apsSecure = FALSE;
   1992          
   1993                      // send and APSME_UPDATE_DEVICE request to the trust center
   1994                      APSME_UpdateDeviceReq( &req );
   1995                    }
   1996          
   1997                    // send the message APS encrypted
   1998                    req.apsSecure = TRUE;
   1999          
   2000                    // send and APSME_UPDATE_DEVICE request to the trust center
   2001                    APSME_UpdateDeviceReq( &req );
   2002                  }
   2003                  else
   2004                  {
   2005                    req.apsSecure = FALSE;
   \   00009A   7407         MOV     A,#0x7
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   E4           CLR     A
   \   0000A0   F0           MOVX    @DPTR,A
   2006          
   2007                    // send and APSME_UPDATE_DEVICE request to the trust center
   2008                    APSME_UpdateDeviceReq( &req );
   \   0000A1                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   0000A1   AA..         MOV     R2,?XSP + 0
   \   0000A3   AB..         MOV     R3,?XSP + 1
   \   0000A5   12....       LCALL   `??APSME_UpdateDeviceReq::?relay`; Banked call to: APSME_UpdateDeviceReq
   2009                  }
   2010              }
   2011          
   2012              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_3:
   \   0000A8                ; Setup parameters for call to function NLME_RemoveChild
   \   0000A8   A9..         MOV     R1,?V2
   \   0000AA   EE           MOV     A,R6
   \   0000AB   FA           MOV     R2,A
   \   0000AC   EF           MOV     A,R7
   \   0000AD   FB           MOV     R3,A
   \   0000AE   12....       LCALL   `??NLME_RemoveChild::?relay`; Banked call to: NLME_RemoveChild
   2013            }
   2014          
   2015            // Remove Routing table related entry
   2016            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \                     ??ZDApp_LeaveUpdate_2:
   \   0000B1                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000B1   7900         MOV     R1,#0x0
   \   0000B3   AA..         MOV     R2,?V0
   \   0000B5   AB..         MOV     R3,?V1
   \   0000B7   12....       LCALL   `??RTG_RemoveRtgEntry::?relay`; Banked call to: RTG_RemoveRtgEntry
   2017          
   2018            // Remove entry from neighborTable
   2019            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   0000BA                ; Setup parameters for call to function nwkNeighborRemove
   \   0000BA   90....       MOV     DPTR,#_NIB + 33
   \   0000BD   E0           MOVX    A,@DPTR
   \   0000BE   FC           MOV     R4,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   FD           MOV     R5,A
   \   0000C2   AA..         MOV     R2,?V0
   \   0000C4   AB..         MOV     R3,?V1
   \   0000C6   12....       LCALL   `??nwkNeighborRemove::?relay`; Banked call to: nwkNeighborRemove
   2020          
   2021            // Schedule to save data to NV
   2022            ZDApp_NwkWriteNVRequest();
   \   0000C9                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   0000C9   12....       LCALL   `??AddrMgrWriteNVRequest::?relay`; Banked call to: AddrMgrWriteNVRequest
   2023          }
   \   0000CC   7411         MOV     A,#0x11
   \   0000CE                REQUIRE ?Subroutine6
   \   0000CE                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
   2024          
   2025          /*********************************************************************
   2026           * @fn      ZDApp_NetworkDiscoveryReq
   2027           *
   2028           * @brief   Request a network discovery.
   2029           *
   2030           * @param  scanChannels -
   2031           * @param  scanDuration -
   2032           *
   2033           * @return  ZStatus_t
   2034           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2035          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2036          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2037            // Setup optional filters - tbd
   2038          
   2039            // Request NLME network discovery
   2040            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   `??NLME_NetworkDiscoveryRequest::?relay`; Banked call to: NLME_NetworkDiscoveryRequest
   \   000008   02....       LJMP    ??Subroutine72_0 & 0xFFFF
   2041          }
   2042          
   2043          /*********************************************************************
   2044           * @fn      ZDApp_JoinReq
   2045           *
   2046           * @brief   Request the device to join a parent in a network.
   2047           *
   2048           * @param   channel -
   2049           * @param   panID -
   2050           *
   2051           * @return  ZStatus_t
   2052           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2053          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2054                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2055          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V2,R1
   \   000007   8A..         MOV     ?V0,R2
   \   000009   8B..         MOV     ?V1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   2056            // Sync up the node with the stack profile (In the case where a pro device
   2057            // joins a non-pro network, or verse versa)
   2058            ZDApp_NodeProfileSync( stackProfile);
   \   00000F                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00000F   740F         MOV     A,#0xf
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??ZDApp_NodeProfileSync::?relay`; Banked call to: ZDApp_NodeProfileSync
   2059          
   2060            // Request NLME Join Request
   2061            return NLME_JoinRequest(extendedPanID, panID,channel,
   2062                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2063                                    chosenParent, parentDepth);
   \   000019                ; Setup parameters for call to function NLME_JoinRequest
   \   000019   740E         MOV     A,#0xe
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V3,A
   \   000021   78..         MOV     R0,#?V3
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000026   740D         MOV     A,#0xd
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00002E   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   A9..         MOV     R1,?V2
   \   00003B   AC..         MOV     R4,?V0
   \   00003D   AD..         MOV     R5,?V1
   \   00003F   EE           MOV     A,R6
   \   000040   FA           MOV     R2,A
   \   000041   EF           MOV     A,R7
   \   000042   FB           MOV     R3,A
   \   000043   12....       LCALL   `??NLME_JoinRequest::?relay`; Banked call to: NLME_JoinRequest
   \   000046   7404         MOV     A,#0x4
   \   000048   02....       LJMP    ?Subroutine5 & 0xFFFF
   2064          
   2065          }
   2066          
   2067          /*********************************************************************
   2068           * @fn      ZDApp_DeviceConfigured
   2069           *
   2070           * @brief   Check to see if the local device is configured (i.e., part
   2071           *          of a network).
   2072           *
   2073           * @param   none
   2074           *
   2075           * @return  TRUE if configured. FALSE, otherwise.
   2076           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2077          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2078          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2079            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   2080          
   2081            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2082                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   A8..         MOV     R0,?XSP + 0
   \   000018   A9..         MOV     R1,?XSP + 1
   \   00001A   88..         MOV     ?V0,R0
   \   00001C   89..         MOV     ?V1,R1
   \   00001E   78..         MOV     R0,#?V0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..02       MOV     ?V0,#0x2
   \   000026   75..00       MOV     ?V1,#0x0
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C14         MOV     R4,#0x14
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A21         MOV     R2,#0x21
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   2083          
   2084            // Does the NIB have anything more than default?
   2085            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   00003E   85..82       MOV     DPL,?XSP + 0
   \   000041   85..83       MOV     DPH,?XSP + 1
   \   000044   E0           MOVX    A,@DPTR
   \   000045   64FE         XRL     A,#0xfe
   \   000047   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   00004C   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   00004E   7900         MOV     R1,#0x0
   \   000050   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000052   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000054                REQUIRE ?Subroutine8
   \   000054                ; // Fall through to label ?Subroutine8
   2086          }
   2087          
   2088          /*********************************************************************
   2089           * CALLBACK FUNCTIONS
   2090           */
   2091          
   2092          
   2093          /*********************************************************************
   2094           * @fn      ZDApp_SendEventMsg()
   2095           *
   2096           * @brief
   2097           *
   2098           *   Sends a Network Join message
   2099           *
   2100           * @param  cmd - command ID
   2101           * @param  len - length (in bytes) of the buf field
   2102           * @param  buf - buffer for the rest of the message.
   2103           *
   2104           * @return  none
   2105           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2106          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2107          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   2108            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   90....       MOV     DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2109          }
   \   000013   80..         SJMP    ??Subroutine62_0
   2110          
   2111          /*********************************************************************
   2112           * @fn      ZDApp_SendMsg()
   2113           *
   2114           * @brief   Sends a OSAL message
   2115           *
   2116           * @param  taskID - Where to send the message
   2117           * @param  cmd - command ID
   2118           * @param  len - length (in bytes) of the buf field
   2119           * @param  buf - buffer for the rest of the message.
   2120           *
   2121           * @return  none
   2122           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2123          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2124          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V3,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V1,R5
   2125            osal_event_hdr_t *msgPtr;
   2126          
   2127            // Send the address to the task
   2128            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F                ; Setup parameters for call to function osal_msg_allocate
   \   00000F   AA..         MOV     R2,?V5
   \   000011   7B00         MOV     R3,#0x0
   \   000013   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000016   8A..         MOV     ?V6,R2
   \   000018   8B..         MOV     ?V7,R3
   \   00001A   AE..         MOV     R6,?V6
   \   00001C   AF..         MOV     R7,?V7
   2129            if ( msgPtr )
   \   00001E   EE           MOV     A,R6
   \   00001F   4F           ORL     A,R7
   \   000020   602E         JZ      ??ZDApp_SendMsg_0
   2130            {
   2131              if ( (len > 0) && (buf != NULL) )
   \   000022   E5..         MOV     A,?V5
   \   000024   601A         JZ      ??ZDApp_SendMsg_1
   \   000026   E5..         MOV     A,?V0
   \   000028   45..         ORL     A,?V1
   \   00002A   6014         JZ      ??ZDApp_SendMsg_1
   2132                osal_memcpy( msgPtr, buf, len );
   \   00002C                ; Setup parameters for call to function osal_memcpy
   \   00002C   75..00       MOV     ?V2,#0x0
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000034   AC..         MOV     R4,?V5
   \   000036   7D00         MOV     R5,#0x0
   \   000038   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00003B   7403         MOV     A,#0x3
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   2133          
   2134              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E5..         MOV     A,?V4
   \   000046   F0           MOVX    @DPTR,A
   2135              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000047                ; Setup parameters for call to function osal_msg_send
   \   000047   EE           MOV     A,R6
   \   000048   FA           MOV     R2,A
   \   000049   EF           MOV     A,R7
   \   00004A   FB           MOV     R3,A
   \   00004B   A9..         MOV     R1,?V3
   \   00004D   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2136            }
   2137          }
   \                     ??ZDApp_SendMsg_0:
   \   000050   02....       LJMP    ?Subroutine2 & 0xFFFF
   2138          
   2139          /*********************************************************************
   2140           * Call Back Functions from NWK  - API
   2141           */
   2142          
   2143          /*********************************************************************
   2144           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2145           *
   2146           * @brief       This function returns a choice of PAN to join.
   2147           *
   2148           * @param       status - return status of the nwk discovery confirm
   2149           *
   2150           * @return      ZStatus_t
   2151           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine61_0
   \   000003                ; // Fall through to label ??Subroutine61_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2152          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2153          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2154            osal_event_hdr_t msg;
   2155          
   2156            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2157            // Send ZDO_MGMT_NWK_DISC_RSP back
   2158          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2159            if ( zdappMgmtNwkDiscReqInProgress )
   \   000011   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6007         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2160            {
   2161              zdappMgmtNwkDiscReqInProgress = false;
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
   2162              ZDO_FinishProcessingMgmtNwkDiscReq();
   \   000019                ; Setup parameters for call to function ZDO_FinishProcessingMgmtNwkDiscReq
   \   000019   12....       LCALL   `??ZDO_FinishProcessingMgmtNwkDiscReq::?relay`; Banked call to: ZDO_FinishProcessingMgmtNwkDiscReq
   \   00001C   8027         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2163            }
   2164            else
   2165          #endif
   2166            {
   2167              // Pass the confirm to another task if it registers the callback
   2168              // Otherwise, pass the confirm to ZDApp.
   2169              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000021   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000024   6008         JZ      ??ZDO_NetworkDiscoveryConfirmCB_2
   2170              {
   2171                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL   ?Subroutine20 & 0xFFFF
   2172              }
   \                     ??CrossCallReturnLabel_150:
   \   000029   12....       LCALL   ?CALL_IND
   \   00002C   8017         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2173              else
   2174              {
   2175                // Otherwise, send scan confirm to ZDApp task to proceed
   2176                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_2:
   \   00002E   7402         MOV     A,#0x2
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
   2177                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000035                ; Setup parameters for call to function ZDApp_SendMsg
   \   000035   04           INC     A
   \   000036   12....       LCALL   ?XSTACK_DISP102_8
   \   000039   7B02         MOV     R3,#0x2
   \   00003B   7A01         MOV     R2,#0x1
   \   00003D   90....       MOV     DPTR,#ZDAppTaskID
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2178              }
   2179            }
   2180            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000045   7900         MOV     R1,#0x0
   \   000047   7403         MOV     A,#0x3
   \   000049   02....       LJMP    ?Subroutine4 & 0xFFFF
   2181          }  // ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   AA..         MOV     R2,?XSP + 0
   \   000002   AB..         MOV     R3,?XSP + 1
   \   000004                REQUIRE ??Subroutine70_0
   \   000004                ; // Fall through to label ??Subroutine70_0
   2182          
   2183          /*********************************************************************
   2184           * @fn          ZDApp_NwkDescListProcessing
   2185           *
   2186           * @brief       This function process the network discovery result and select
   2187           *              a parent device to join itself.
   2188           *
   2189           * @param       none
   2190           *
   2191           * @return      ZStatus_t
   2192           */
   2193          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2194          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2195          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2196            networkDesc_t *pNwkDesc;
   2197            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V1,#0x0
   2198            uint8 stackProfile;
   2199            uint8 stackProfilePro;
   2200            uint8 selected;
   2201          
   2202            // Count the number of nwk descriptors in the list
   2203            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   00000B   8A..         MOV     ?V2,R2
   \   00000D   8B..         MOV     ?V3,R3
   \   00000F   AE..         MOV     R6,?V2
   \   000011   AF..         MOV     R7,?V3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_135
   2204            while (pNwkDesc)
   2205            {
   2206              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V1
   2207              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine27 & 0xFFFF
   2208            }
   \                     ??CrossCallReturnLabel_135:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2209          
   2210            // process discovery results
   2211            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0,#0x0
   2212            selected = FALSE;
   2213          
   2214          
   2215            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V2,#0x0
   2216            {
   2217              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   `??nwk_getNwkDescList::?relay`; Banked call to: nwk_getNwkDescList
   \   000027   8A..         MOV     ?V4,R2
   \   000029   8B..         MOV     ?V5,R3
   \   00002B   AE..         MOV     R6,?V4
   \   00002D   AF..         MOV     R7,?V5
   2218              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V3,#0x0
   \   000032   8023         SJMP    ??CrossCallReturnLabel_136
   2219              {
   2220                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2221                {
   2222                  // If the extended Pan ID is commissioned to a non zero value
   2223                  // Only join the Pan that has match EPID
   2224                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2225                    continue;
   2226          
   2227                }
   2228                else if ( zgConfigPANID != 0xFFFF )
   2229                {
   2230                  // PAN Id is preconfigured. check if it matches
   2231                  if ( pNwkDesc->panId != zgConfigPANID )
   2232                    continue;
   2233                }
   2234          
   2235                // check that network is allowing joining
   2236                if ( ZSTACK_ROUTER_BUILD )
   2237                {
   2238                  if ( stackProfilePro == FALSE )
   2239                  {
   2240                    if ( !pNwkDesc->routerCapacity )
   2241                    {
   2242                      continue;
   2243                    }
   2244                  }
   2245                  else
   2246                  {
   2247                    if ( !pNwkDesc->deviceCapacity )
   2248                    {
   2249                      continue;
   2250                    }
   2251                  }
   2252                }
   2253                else if ( ZSTACK_END_DEVICE_BUILD )
   2254                {
   2255                  if ( !pNwkDesc->deviceCapacity )
   2256                  {
   2257                    continue;
   2258                  }
   2259                }
   2260          
   2261                // check version of zigbee protocol
   2262                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2263                  continue;
   2264          
   2265                // check version of stack profile
   2266                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2267                {
   2268                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2269                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7012         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   6401         XRL     A,#0x1
   \   000046   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2270                  {
   2271                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   000048   75..01       MOV     ?V0,#0x1
   2272                  }
   2273          
   2274                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   00004B   E5..         MOV     A,?V2
   \   00004D   6003         JZ      $+5
   \   00004F   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000052   05..         INC     ?V3
   \   000054   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000057   E5..         MOV     A,?V3
   \   000059   C3           CLR     C
   \   00005A   95..         SUBB    A,?V1
   \   00005C   4003         JC      $+5
   \   00005E   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000061                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000061   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000063   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000065   12....       LCALL   `??nwk_ExtPANIDValid::?relay`; Banked call to: nwk_ExtPANIDValid
   \   000068   E9           MOV     A,R1
   \   000069   6401         XRL     A,#0x1
   \   00006B   7013         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   00006D                ; Setup parameters for call to function sAddrExtCmp
   \   00006D   EE           MOV     A,R6
   \   00006E   240B         ADD     A,#0xb
   \   000070   FC           MOV     R4,A
   \   000071   E4           CLR     A
   \   000072   3F           ADDC    A,R7
   \   000073   FD           MOV     R5,A
   \   000074   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000076   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000078   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00007B   E9           MOV     A,R1
   \   00007C   701D         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   00007E   80D2         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000080   90....       MOV     DPTR,#zgConfigPANID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F4           CPL     A
   \   000085   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   00008A   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   00008C   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   00008F   90....       MOV     DPTR,#zgConfigPANID
   \   000092   E0           MOVX    A,@DPTR
   \   000093   68           XRL     A,R0
   \   000094   7003         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   000099   70B7         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   00009B   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   6004         JZ      ??ZDApp_NwkDescListProcessing_12
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   7010         JNZ     ??ZDApp_NwkDescListProcessing_13
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000A5   E5..         MOV     A,?V0
   \   0000A7   7011         JNZ     ??ZDApp_NwkDescListProcessing_14
   \   0000A9   8E82         MOV     DPL,R6
   \   0000AB   8F83         MOV     DPH,R7
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   7012         JNZ     ??ZDApp_NwkDescListProcessing_15
   \   0000B3   809D         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   6402         XRL     A,#0x2
   \   0000B8   700B         JNZ     ??ZDApp_NwkDescListProcessing_15
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000BA   8E82         MOV     DPL,R6
   \   0000BC   8F83         MOV     DPH,R7
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   608D         JZ      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000C5   8E82         MOV     DPL,R6
   \   0000C7   8F83         MOV     DPH,R7
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F8           MOV     R0,A
   \   0000D0   90....       MOV     DPTR,#_NIB + 17
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   68           XRL     A,R0
   \   0000D5   6003         JZ      $+5
   \   0000D7   02....       LJMP    ??ZDApp_NwkDescListProcessing_6 & 0xFFFF
   \   0000DA   8E82         MOV     DPL,R6
   \   0000DC   8F83         MOV     DPH,R7
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   F8           MOV     R0,A
   \   0000E6   90....       MOV     DPTR,#zgStackProfile
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   68           XRL     A,R0
   \   0000EB   6039         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   6401         XRL     A,#0x1
   \   0000F0   6003         JZ      $+5
   \   0000F2   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000F5   8E82         MOV     DPL,R6
   \   0000F7   8F83         MOV     DPH,R7
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   6402         XRL     A,#0x2
   \   000102   6003         JZ      $+5
   \   000104   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   000107   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2275                  {
   2276                    continue;
   2277                  }
   2278                }
   2279          
   2280                break;
   2281              }
   2282          
   2283              if (i < ResultCount)
   2284              {
   2285               selected = TRUE;
   2286                break;
   2287              }
   2288          
   2289              // break if selected or stack profile pro wasn't found
   2290              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   00010A   E5..         MOV     A,?V0
   \   00010C   600C         JZ      ??ZDApp_NwkDescListProcessing_16
   2291              {
   2292                break;
   2293              }
   2294            }
   \   00010E   05..         INC     ?V2
   \   000110   E5..         MOV     A,?V2
   \   000112   C3           CLR     C
   \   000113   9402         SUBB    A,#0x2
   \   000115   5003         JNC     $+5
   \   000117   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2295          
   2296            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_16:
   \   00011A   E5..         MOV     A,?V1
   \   00011C   65..         XRL     A,?V3
   \   00011E   7006         JNZ     ??ZDApp_NwkDescListProcessing_5
   2297            {
   2298              return (NULL);   // couldn't find appropriate PAN to join !
   \   000120   7A00         MOV     R2,#0x0
   \   000122   7B00         MOV     R3,#0x0
   \   000124   8004         SJMP    ??ZDApp_NwkDescListProcessing_17
   2299            }
   2300            else
   2301            {
   2302              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   000126   EE           MOV     A,R6
   \   000127   FA           MOV     R2,A
   \   000128   EF           MOV     A,R7
   \   000129   FB           MOV     R3,A
   2303            }
   \                     ??ZDApp_NwkDescListProcessing_17:
   \   00012A   02....       LJMP    ?Subroutine1 & 0xFFFF
   2304          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000003                REQUIRE ??Subroutine67_0
   \   000003                ; // Fall through to label ??Subroutine67_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine67_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2305          
   2306          /*********************************************************************
   2307           * @fn          ZDO_NetworkFormationConfirmCB
   2308           *
   2309           * @brief       This function reports the results of the request to
   2310           *              initialize a coordinator in a network.
   2311           *
   2312           * @param       Status - Result of NLME_NetworkFormationRequest()
   2313           *
   2314           * @return      none
   2315           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00000A                REQUIRE ??Subroutine62_0
   \   00000A                ; // Fall through to label ??Subroutine62_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2316          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2317          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2318            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2319          
   2320            if ( Status == ZSUCCESS )
   \   00000A   7017         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2321            {
   2322              // LED on shows Coordinator started
   2323              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2324          
   2325              // LED off forgets HOLD_AUTO_START
   2326              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2327          
   2328          #if defined ( ZBIT )
   2329              SIM_SetColor(0xd0ffd0);
   2330          #endif
   2331          
   2332              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   7003         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2333              {
   2334                // Began with HOLD_AUTO_START
   2335                devState = DEV_COORD_STARTING;
   \   000020   7408         MOV     A,#0x8
   \   000022   F0           MOVX    @DPTR,A
   2336              }
   2337            }
   2338          #if defined(BLINK_LEDS)
   2339            else
   2340            {
   2341              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2342            }
   2343          #endif
   2344          
   2345            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000023                ; Setup parameters for call to function osal_set_event
   \   000023   7A02         MOV     R2,#0x2
   \   000025   02....       LJMP    ?Subroutine0 & 0xFFFF
   2346          }
   2347          
   2348          /****************************************************************************
   2349           * @fn          ZDApp_beaconIndProcessing
   2350           *
   2351           * @brief       This function processes the incoming beacon indication.
   2352           *
   2353           *              When another task (MT or App) is registered to process
   2354           *              beacon indication themselves, this function will parse the
   2355           *              beacon payload and pass the beacon descriptor to that task
   2356           *              If no other tasks registered, this function will process
   2357           *              the beacon payload and generate the network descriptor link
   2358           *              list.
   2359           *
   2360           * @param
   2361           *
   2362           * @return      none
   2363           *
   2364           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2365          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2366          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2367            // Pass the beacon Indication to another task if it registers the callback
   2368            // Otherwise, process the beacon notification here.
   2369            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   00000F   6009         JZ      ??ZDO_beaconNotifyIndCB_0
   2370            {
   2371              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ??Subroutine70_0 & 0xFFFF
   2372            }
   \                     ??CrossCallReturnLabel_145:
   \   000014   12....       LCALL   ?CALL_IND
   \   000017   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2373            else
   2374            {
   2375              networkDesc_t *pNwkDesc;
   2376              networkDesc_t *pLastNwkDesc;
   2377              uint8 found = false;
   2378          
   2379              // Add the network to the Network Descriptor List
   2380              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   00001A   90....       MOV     DPTR,#NwkDescList
   \   00001D   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   2381              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_133:
   \   000020   90....       MOV     DPTR,#NwkDescList
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V2,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V3,A
   \   00002A   802D         SJMP    ??CrossCallReturnLabel_137
   2382              while (pNwkDesc)
   2383              {
   2384                if ((pNwkDesc->panId == pBeacon->panID) &&
   2385                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   00002C   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   68           XRL     A,R0
   \   000037   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   00003C   7014         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   68           XRL     A,R0
   \   000050   605F         JZ      ??ZDO_beaconNotifyIndCB_5
   2386                {
   2387                  found = true;
   2388                  break;
   2389                }
   2390                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   000052   8E..         MOV     ?V2,R6
   \   000054   8F..         MOV     ?V3,R7
   2391                pNwkDesc = pNwkDesc->nextDesc;
   \   000056   12....       LCALL   ?Subroutine27 & 0xFFFF
   2392              }
   \                     ??CrossCallReturnLabel_137:
   \   000059   EE           MOV     A,R6
   \   00005A   4F           ORL     A,R7
   \   00005B   70CF         JNZ     ??ZDO_beaconNotifyIndCB_2
   2393          
   2394              // If no existing descriptor found, make a new one and add to the list
   2395              if (found == false)
   2396              {
   2397                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   00005D                ; Setup parameters for call to function osal_mem_alloc
   \   00005D   7A16         MOV     R2,#0x16
   \   00005F   7B00         MOV     R3,#0x0
   \   000061   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000064   8A..         MOV     ?V4,R2
   \   000066   8B..         MOV     ?V5,R3
   \   000068   AE..         MOV     R6,?V4
   \   00006A   AF..         MOV     R7,?V5
   2398                if ( !pNwkDesc )
   \   00006C   EE           MOV     A,R6
   \   00006D   4F           ORL     A,R7
   \   00006E   7003         JNZ     $+5
   \   000070   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2399                {
   2400                  // Memory alloc failed, discard this beacon
   2401                  return;
   2402                }
   2403          
   2404                // Clear the network descriptor
   2405                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   000073                ; Setup parameters for call to function osal_memset
   \   000073   7C16         MOV     R4,#0x16
   \   000075   7D00         MOV     R5,#0x0
   \   000077   7900         MOV     R1,#0x0
   \   000079   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2406          
   2407                // Initialize the descriptor
   2408                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   74FE         MOV     A,#-0x2
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   04           INC     A
   \   00008C   12....       LCALL   ?Subroutine12 & 0xFFFF
   2409                pNwkDesc->chosenRouterDepth = 0xFF;
   \                     ??CrossCallReturnLabel_1:
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   F0           MOVX    @DPTR,A
   2410          
   2411                // Save new entry into the descriptor list
   2412                if ( !NwkDescList )
   \   000094   90....       MOV     DPTR,#NwkDescList
   \   000097   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00009A   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2413                {
   2414                  NwkDescList = pNwkDesc;
   \   00009C   90....       MOV     DPTR,#NwkDescList
   \   00009F   800B         SJMP    ??ZDO_beaconNotifyIndCB_7
   2415                }
   2416                else
   2417                {
   2418                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000A1   E5..         MOV     A,?V2
   \   0000A3   2414         ADD     A,#0x14
   \   0000A5   F582         MOV     DPL,A
   \   0000A7   E4           CLR     A
   \   0000A8   35..         ADDC    A,?V3
   \   0000AA   F583         MOV     DPH,A
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   0000AC   EE           MOV     A,R6
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   EF           MOV     A,R7
   \   0000B0   F0           MOVX    @DPTR,A
   2419                }
   2420              }
   2421          
   2422              // Update the descriptor with the incoming beacon
   2423              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000B1   85..82       MOV     DPL,?V0
   \   0000B4   85..83       MOV     DPH,?V1
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   F0           MOVX    @DPTR,A
   2424              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000C7   E5..         MOV     A,?V0
   \   0000C9   2408         ADD     A,#0x8
   \   0000CB   F8           MOV     R0,A
   \   0000CC   E4           CLR     A
   \   0000CD   35..         ADDC    A,?V1
   \   0000CF   F9           MOV     R1,A
   \   0000D0   8882         MOV     DPL,R0
   \   0000D2   8983         MOV     DPH,R1
   \   0000D4   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000D7   12....       LCALL   ?Subroutine16 & 0xFFFF
   2425              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_4:
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   12....       LCALL   ?Subroutine16 & 0xFFFF
   2426              pNwkDesc->panId          = pBeacon->panID;
   \                     ??CrossCallReturnLabel_5:
   \   0000E4   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   0000E7   12....       LCALL   ??Subroutine71_0 & 0xFFFF
   2427              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_155:
   \   0000EA   E5..         MOV     A,?V0
   \   0000EC   240C         ADD     A,#0xc
   \   0000EE   F582         MOV     DPL,A
   \   0000F0   E4           CLR     A
   \   0000F1   35..         ADDC    A,?V1
   \   0000F3   F583         MOV     DPH,A
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   C0E0         PUSH    A
   \   0000F8   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000FB   D0E0         POP     A
   \   0000FD   F0           MOVX    @DPTR,A
   2428          
   2429              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2430              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   0000FE   8882         MOV     DPL,R0
   \   000100   8983         MOV     DPH,R1
   \   000102   E0           MOVX    A,@DPTR
   \   000103   6401         XRL     A,#0x1
   \   000105   6010         JZ      ??ZDO_beaconNotifyIndCB_8
   2431              {
   2432                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   000107                ; Setup parameters for call to function sAddrExtCpy
   \   000107   E5..         MOV     A,?V0
   \   000109   240D         ADD     A,#0xd
   \   00010B   FC           MOV     R4,A
   \   00010C   E4           CLR     A
   \   00010D   35..         ADDC    A,?V1
   \   00010F   12....       LCALL   ?Subroutine37 & 0xFFFF
   2433              }
   \                     ??CrossCallReturnLabel_84:
   \   000112   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000115   800C         SJMP    ??ZDO_beaconNotifyIndCB_9
   2434              else
   2435              {
   2436                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000117                ; Setup parameters for call to function osal_memset
   \   000117   7C08         MOV     R4,#0x8
   \   000119   7D00         MOV     R5,#0x0
   \   00011B   79FF         MOV     R1,#-0x1
   \   00011D   12....       LCALL   ??Subroutine57_0 & 0xFFFF
   2437              }
   \                     ??CrossCallReturnLabel_82:
   \   000120   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2438          
   2439              // check if this device is a better choice to join...
   2440              // ...dont bother checking assocPermit flag is doing a rejoin
   2441              if ( ( pBeacon->LQI > gMIN_TREE_LQI ) &&
   2442                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   000123   85..82       MOV     DPL,?V0
   \   000126   85..83       MOV     DPH,?V1
   \   000129   A3           INC     DPTR
   \   00012A   A3           INC     DPTR
   \   00012B   A3           INC     DPTR
   \   00012C   A3           INC     DPTR
   \   00012D   A3           INC     DPTR
   \   00012E   A3           INC     DPTR
   \   00012F   A3           INC     DPTR
   \   000130   A3           INC     DPTR
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F8           MOV     R0,A
   \   000135   90....       MOV     DPTR,#gMIN_TREE_LQI
   \   000138   E0           MOVX    A,@DPTR
   \   000139   C3           CLR     C
   \   00013A   98           SUBB    A,R0
   \   00013B   4003         JC      $+5
   \   00013D   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000140   85..82       MOV     DPL,?V0
   \   000143   85..83       MOV     DPH,?V1
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   A3           INC     DPTR
   \   000149   A3           INC     DPTR
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   6401         XRL     A,#0x1
   \   00014E   6009         JZ      ??ZDO_beaconNotifyIndCB_10
   \   000150   90....       MOV     DPTR,#_tmpRejoinState
   \   000153   E0           MOVX    A,@DPTR
   \   000154   7003         JNZ     $+5
   \   000156   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2443              {
   2444                uint8 selected = FALSE;
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   000159   7800         MOV     R0,#0x0
   2445                uint8 capacity = FALSE;
   2446          
   2447                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \   00015B   90....       MOV     DPTR,#_NIB + 96
   \   00015E   E0           MOVX    A,@DPTR
   \   00015F   6402         XRL     A,#0x2
   \   000161   7039         JNZ     ??ZDO_beaconNotifyIndCB_11
   2448                {
   2449                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2450                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2451                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2452                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   000163   85..82       MOV     DPL,?V0
   \   000166   85..83       MOV     DPH,?V1
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   A3           INC     DPTR
   \   000170   A3           INC     DPTR
   \   000171   12....       LCALL   ?Subroutine44 & 0xFFFF
   2453                  {
   2454                    selected = TRUE;
   2455                  }
   2456                }
   \                     ??CrossCallReturnLabel_81:
   \   000174   A3           INC     DPTR
   \   000175   A3           INC     DPTR
   \   000176   A3           INC     DPTR
   \   000177   A3           INC     DPTR
   \   000178   A3           INC     DPTR
   \   000179   A3           INC     DPTR
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   E0           MOVX    A,@DPTR
   \   00017E   C3           CLR     C
   \   00017F   99           SUBB    A,R1
   \   000180   5009         JNC     ??ZDO_beaconNotifyIndCB_12
   \   000182   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000185   9414         SUBB    A,#0x14
   \   000187   4029         JC      ??ZDO_beaconNotifyIndCB_13
   \   000189   8029         SJMP    ??ZDO_beaconNotifyIndCB_14
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   00018B   8E82         MOV     DPL,R6
   \   00018D   8F83         MOV     DPH,R7
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   A3           INC     DPTR
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   E0           MOVX    A,@DPTR
   \   000199   69           XRL     A,R1
   \   00019A   7018         JNZ     ??ZDO_beaconNotifyIndCB_14
   2457                else
   2458                {
   2459                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   00019C   8E82         MOV     DPL,R6
   \   00019E   8F83         MOV     DPH,R7
   \   0001A0   A3           INC     DPTR
   \   0001A1   A3           INC     DPTR
   \   0001A2   A3           INC     DPTR
   \   0001A3   A3           INC     DPTR
   \   0001A4   A3           INC     DPTR
   \   0001A5   A3           INC     DPTR
   \   0001A6   A3           INC     DPTR
   \   0001A7   A3           INC     DPTR
   \   0001A8   A3           INC     DPTR
   \   0001A9   A3           INC     DPTR
   \   0001AA   E0           MOVX    A,@DPTR
   \   0001AB   F9           MOV     R1,A
   \   0001AC   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0001AF   99           SUBB    A,R1
   \   0001B0   5002         JNC     ??ZDO_beaconNotifyIndCB_14
   2460                  {
   2461                    selected = TRUE;
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   0001B2   7801         MOV     R0,#0x1
   2462                  }
   2463                }
   2464          
   2465                if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   0001B4   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   6004         JZ      ??ZDO_beaconNotifyIndCB_15
   \   0001BA   6401         XRL     A,#0x1
   \   0001BC   7008         JNZ     ??ZDO_beaconNotifyIndCB_16
   2466                {
   2467                  capacity = pBeacon->routerCapacity;
   \                     ??ZDO_beaconNotifyIndCB_15:
   \   0001BE   85..82       MOV     DPL,?V0
   \   0001C1   85..83       MOV     DPH,?V1
   \   0001C4   800C         SJMP    ??ZDO_beaconNotifyIndCB_17
   2468                }
   2469                else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_beaconNotifyIndCB_16:
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   6402         XRL     A,#0x2
   \   0001C9   703D         JNZ     ??ZDO_beaconNotifyIndCB_18
   2470                {
   2471                  capacity = pBeacon->deviceCapacity;
   \   0001CB   85..82       MOV     DPL,?V0
   \   0001CE   85..83       MOV     DPH,?V1
   \   0001D1   A3           INC     DPTR
   \                     ??ZDO_beaconNotifyIndCB_17:
   \   0001D2   A3           INC     DPTR
   \   0001D3   A3           INC     DPTR
   \   0001D4   A3           INC     DPTR
   \   0001D5   A3           INC     DPTR
   \   0001D6   A3           INC     DPTR
   \   0001D7   A3           INC     DPTR
   \   0001D8   E0           MOVX    A,@DPTR
   2472                }
   2473          
   2474                if ( (capacity) && (selected) )
   \   0001D9   602D         JZ      ??ZDO_beaconNotifyIndCB_18
   \   0001DB   E8           MOV     A,R0
   \   0001DC   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001DE   5028         JNC     ??ZDO_beaconNotifyIndCB_18
   2475                {
   2476                  // this is the new chosen router for joining...
   2477                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0001E0   85..82       MOV     DPL,?V0
   \   0001E3   85..83       MOV     DPH,?V1
   \   0001E6   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0001E9   12....       LCALL   ?Subroutine11 & 0xFFFF
   2478                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_109:
   \   0001EC   85..82       MOV     DPL,?V0
   \   0001EF   85..83       MOV     DPH,?V1
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   A3           INC     DPTR
   \   0001F5   A3           INC     DPTR
   \   0001F6   A3           INC     DPTR
   \   0001F7   A3           INC     DPTR
   \   0001F8   A3           INC     DPTR
   \   0001F9   A3           INC     DPTR
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0001FF   F0           MOVX    @DPTR,A
   2479                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   000200   12....       LCALL   ?Subroutine47 & 0xFFFF
   2480                }
   \                     ??CrossCallReturnLabel_57:
   \   000203   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000206   A3           INC     DPTR
   \   000207   F0           MOVX    @DPTR,A
   2481          
   2482                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_18:
   \   000208   85..82       MOV     DPL,?V0
   \   00020B   85..83       MOV     DPH,?V1
   \   00020E   A3           INC     DPTR
   \   00020F   A3           INC     DPTR
   \   000210   A3           INC     DPTR
   \   000211   A3           INC     DPTR
   \   000212   A3           INC     DPTR
   \   000213   A3           INC     DPTR
   \   000214   A3           INC     DPTR
   \   000215   E0           MOVX    A,@DPTR
   \   000216   600B         JZ      ??ZDO_beaconNotifyIndCB_19
   2483                  pNwkDesc->deviceCapacity = 1;
   \   000218   8E82         MOV     DPL,R6
   \   00021A   8F83         MOV     DPH,R7
   \   00021C   A3           INC     DPTR
   \   00021D   A3           INC     DPTR
   \   00021E   A3           INC     DPTR
   \   00021F   A3           INC     DPTR
   \   000220   7401         MOV     A,#0x1
   \   000222   F0           MOVX    @DPTR,A
   2484          
   2485                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_19:
   \   000223   85..82       MOV     DPL,?V0
   \   000226   85..83       MOV     DPH,?V1
   \   000229   A3           INC     DPTR
   \   00022A   A3           INC     DPTR
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   E0           MOVX    A,@DPTR
   \   000230   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2486                  pNwkDesc->routerCapacity = 1;
   \   000232   8E82         MOV     DPL,R6
   \   000234   8F83         MOV     DPH,R7
   \   000236   A3           INC     DPTR
   \   000237   A3           INC     DPTR
   \   000238   A3           INC     DPTR
   \   000239   7401         MOV     A,#0x1
   \   00023B   F0           MOVX    @DPTR,A
   2487              }
   2488            }
   2489          }
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   00023C   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C3           CLR     C
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E5..         MOV     A,?V0
   \   000002   240B         ADD     A,#0xb
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   35..         ADDC    A,?V1
   \   000009   F583         MOV     DPH,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?V0
   \   000006   85..83       MOV     DPH,?V1
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   12....       LCALL   ??Subroutine56_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine64_0
   \   000003                ; // Fall through to label ??Subroutine64_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine64_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine65_0
   \   000004                ; // Fall through to label ??Subroutine65_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET
   2490          
   2491          /*********************************************************************
   2492           * @fn          ZDO_StartRouterConfirmCB
   2493           *
   2494           * @brief       This function reports the results of the request to
   2495           *              start functioning as a router in a network.
   2496           *
   2497           * @param       Status - Result of NLME_StartRouterRequest()
   2498           *
   2499           * @return      none
   2500           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2501          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2502          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2503            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2504          
   2505            if ( Status == ZSUCCESS )
   \   00000A   7017         JNZ     ??ZDO_StartRouterConfirmCB_0
   2506            {
   2507              // LED on shows Router started
   2508              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2509              // LED off forgets HOLD_AUTO_START
   2510              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2511              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   7003         JNZ     ??ZDO_StartRouterConfirmCB_0
   2512              {
   2513                // Began with HOLD_AUTO_START
   2514                devState = DEV_END_DEVICE;
   \   000020   7406         MOV     A,#0x6
   \   000022   F0           MOVX    @DPTR,A
   2515              }
   2516            }
   2517          #if defined(BLINK_LEDS)
   2518            else
   2519            {
   2520              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2521            }
   2522          #endif
   2523          
   2524            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000023                ; Setup parameters for call to function osal_set_event
   \   000023   7A20         MOV     R2,#0x20
   \   000025   02....       LJMP    ?Subroutine0 & 0xFFFF
   2525          }
   2526          
   2527          /*********************************************************************
   2528           * @fn          ZDO_JoinConfirmCB
   2529           *
   2530           * @brief       This function allows the next higher layer to be notified
   2531           *              of the results of its request to join itself or another
   2532           *              device to a network.
   2533           *
   2534           * @param       Status - Result of NLME_JoinRequest()
   2535           *
   2536           * @return      none
   2537           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2538          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2539          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0,R1
   2540            (void)PanId;  // remove if this parameter is used.
   2541          
   2542            nwkStatus = (byte)Status;
   \   00000C   E9           MOV     A,R1
   \   00000D   90....       MOV     DPTR,#nwkStatus
   \   000010   F0           MOVX    @DPTR,A
   2543          
   2544            if ( Status == ZSUCCESS )
   \   000011   6003         JZ      $+5
   \   000013   02....       LJMP    ??ZDO_JoinConfirmCB_0 & 0xFFFF
   2545            {
   2546              if ( ZSTACK_END_DEVICE_BUILD
   2547                || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000016   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6402         XRL     A,#0x2
   \   00001C   600F         JZ      ??ZDO_JoinConfirmCB_1
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6004         JZ      ??ZDO_JoinConfirmCB_2
   \   000021   6401         XRL     A,#0x1
   \   000023   706D         JNZ     ??ZDO_JoinConfirmCB_3
   \                     ??ZDO_JoinConfirmCB_2:
   \   000025   90....       MOV     DPTR,#_NIB + 14
   \   000028   E0           MOVX    A,@DPTR
   \   000029   A2E1         MOV     C,0xE0 /* A   */.1
   \   00002B   4065         JC      ??ZDO_JoinConfirmCB_3
   2548              {
   2549                neighborEntry_t *pItem;
   2550           
   2551                // We don't need the neighbor table entries.  
   2552                // Clear the neighbor Table to remove beacon information
   2553                nwkNeighborInitTable();
   \                     ??ZDO_JoinConfirmCB_1:
   \   00002D                ; Setup parameters for call to function nwkNeighborInitTable
   \   00002D   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2554           
   2555                // Force a neighbor table entry for the parent
   2556                pItem = nwkNeighborFindEmptySlot();
   \   000030                ; Setup parameters for call to function nwkNeighborFindEmptySlot
   \   000030   12....       LCALL   `??nwkNeighborFindEmptySlot::?relay`; Banked call to: nwkNeighborFindEmptySlot
   \   000033   8A..         MOV     ?V2,R2
   \   000035   8B..         MOV     ?V3,R3
   \   000037   AE..         MOV     R6,?V2
   \   000039   AF..         MOV     R7,?V3
   2557                if ( pItem != NULL )
   \   00003B   EE           MOV     A,R6
   \   00003C   4F           ORL     A,R7
   \   00003D   6053         JZ      ??ZDO_JoinConfirmCB_3
   2558                {
   2559                  osal_memset( pItem, 0x00, sizeof ( neighborEntry_t  )  );
   \   00003F                ; Setup parameters for call to function osal_memset
   \   00003F   7C17         MOV     R4,#0x17
   \   000041   7D00         MOV     R5,#0x0
   \   000043   7900         MOV     R1,#0x0
   \   000045   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   2560                  pItem->neighborAddress = _NIB.nwkCoordAddress;
   \   000048   90....       MOV     DPTR,#_NIB + 23
   \   00004B   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00004E   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   2561                  osal_cpyExtAddr( pItem ->neighborExtAddr, _NIB. nwkCoordExtAddress );
   \                     ??CrossCallReturnLabel_105:
   \   000051                ; Setup parameters for call to function sAddrExtCpy
   \   000051   7C..         MOV     R4,#(_NIB + 25) & 0xff
   \   000053   7D..         MOV     R5,#((_NIB + 25) >> 8) & 0xff
   \   000055   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000058   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   2562                  pItem->panId = _NIB. nwkPanId;
   \   00005B   90....       MOV     DPTR,#_NIB + 33
   \   00005E   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   12....       LCALL   ?Subroutine11 & 0xFFFF
   2563                  pItem->linkInfo.rxLqi = DEF_LQI;
   \                     ??CrossCallReturnLabel_110:
   \   000067   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   00006A   74AA         MOV     A,#-0x56
   \   00006C   F0           MOVX    @DPTR,A
   2564                  pItem->linkInfo.txCounter = DEF_LINK_COUNTER;
   \   00006D   90....       MOV     DPTR,#gLINK_DOWN_TRIGGER
   \   000070   E4           CLR     A
   \   000071   93           MOVC    A,@A+DPTR
   \   000072   7900         MOV     R1,#0x0
   \   000074   2401         ADD     A,#0x1
   \   000076   F8           MOV     R0,A
   \   000077   5001         JNC     ??ZDO_JoinConfirmCB_4
   \   000079   09           INC     R1
   \                     ??ZDO_JoinConfirmCB_4:
   \   00007A   7A02         MOV     R2,#0x2
   \   00007C   7B00         MOV     R3,#0x0
   \   00007E   12....       LCALL   ?S_DIV_MOD
   \   000081   EE           MOV     A,R6
   \   000082   240D         ADD     A,#0xd
   \   000084   F582         MOV     DPL,A
   \   000086   E4           CLR     A
   \   000087   3F           ADDC    A,R7
   \   000088   F583         MOV     DPH,A
   \   00008A   E8           MOV     A,R0
   \   00008B   F0           MOVX    @DPTR,A
   2565                  pItem->linkInfo.txCost = DEF_LINK_COST;
   \   00008C   12....       LCALL   ?Subroutine42 & 0xFFFF
   2566                }
   2567              }
   \                     ??CrossCallReturnLabel_50:
   \   00008F   7401         MOV     A,#0x1
   \   000091   F0           MOVX    @DPTR,A
   2568              
   2569              // LED on shows device joined
   2570              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \                     ??ZDO_JoinConfirmCB_3:
   \   000092                ; Setup parameters for call to function HalLedSet
   \   000092   7A01         MOV     R2,#0x1
   \   000094   7904         MOV     R1,#0x4
   \   000096   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2571              // LED off forgets HOLD_AUTO_START
   2572              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000099                ; Setup parameters for call to function HalLedSet
   \   000099   7A00         MOV     R2,#0x0
   \   00009B   7908         MOV     R1,#0x8
   \   00009D   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   2573              if ( (devState == DEV_HOLD) )
   \   0000A0   90....       MOV     DPTR,#devState
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   7003         JNZ     ??ZDO_JoinConfirmCB_0
   2574              {
   2575                // Began with HOLD_AUTO_START
   2576                devState = DEV_NWK_JOINING;
   \   0000A6   7403         MOV     A,#0x3
   \   0000A8   F0           MOVX    @DPTR,A
   2577              }
   2578          
   2579              if ( !ZG_SECURE_ENABLED )
   2580              {
   2581                // Notify to save info into NV
   2582                ZDApp_NVUpdate();
   2583              }
   2584            }
   2585            else
   2586            {
   2587          #if defined(BLINK_LEDS)
   2588              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2589          #endif
   2590            }
   2591          
   2592            // Pass the join confirm to higher layer if callback registered
   2593            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_0:
   \   0000A9   90....       MOV     DPTR,#zdoCBFunc + 8
   \   0000AC   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   0000AF   6035         JZ      ??ZDO_JoinConfirmCB_5
   2594            {
   2595              zdoJoinCnf_t joinCnf;
   2596          
   2597              joinCnf.status = Status;
   \   0000B1   85..82       MOV     DPL,?XSP + 0
   \   0000B4   85..83       MOV     DPH,?XSP + 1
   \   0000B7   E5..         MOV     A,?V0
   \   0000B9   F0           MOVX    @DPTR,A
   2598              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   0000BA   90....       MOV     DPTR,#_NIB + 20
   \   0000BD   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   2599              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_106:
   \   0000C8   90....       MOV     DPTR,#_NIB + 23
   \   0000CB   12....       LCALL   ??Subroutine63_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   0000CE   7403         MOV     A,#0x3
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL   ??Subroutine65_0 & 0xFFFF
   2600          
   2601              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   \                     ??CrossCallReturnLabel_107:
   \   0000D6                ; Setup parameters for indirect call
   \   0000D6   AA..         MOV     R2,?XSP + 0
   \   0000D8   AB..         MOV     R3,?XSP + 1
   \   0000DA   90....       MOV     DPTR,#zdoCBFunc + 8
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   F8           MOV     R0,A
   \   0000DF   A3           INC     DPTR
   \   0000E0   12....       LCALL   ??Subroutine70_0 & 0xFFFF
   2602            }
   \                     ??CrossCallReturnLabel_146:
   \   0000E3   12....       LCALL   ?CALL_IND
   2603          
   2604            // Notify ZDApp
   2605            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_5:
   \   0000E6                ; Setup parameters for call to function ZDApp_SendMsg
   \   0000E6   7C00         MOV     R4,#0x0
   \   0000E8   7D00         MOV     R5,#0x0
   \   0000EA   7B02         MOV     R3,#0x2
   \   0000EC   7A02         MOV     R2,#0x2
   \   0000EE   90....       MOV     DPTR,#ZDAppTaskID
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   F9           MOV     R1,A
   \   0000F3   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2606          
   2607          }
   \   0000F6   7405         MOV     A,#0x5
   \   0000F8   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET
   2608          
   2609          /*********************************************************************
   2610           * @fn          ZDO_PermitJoinCB
   2611           *
   2612           * @brief      This function is called when there is a change in the
   2613           *             device's permit join status.
   2614           *
   2615           * @param       duration - the new duration
   2616           *
   2617           * @return      none
   2618           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2619          void ZDO_PermitJoinCB( uint8 duration )
   \                     ZDO_PermitJoinCB:
   2620          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2621            // Pass the Permit Join status to higher layer if callback registered
   2622            if (zdoCBFunc[ZDO_PERMIT_JOIN_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 14
   \   000014   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000017   6006         JZ      ??ZDO_PermitJoinCB_0
   2623            {
   2624              zdoCBFunc[ZDO_PERMIT_JOIN_CBID]( (void*)&duration );
   \   000019                ; Setup parameters for indirect call
   \   000019   12....       LCALL   ?Subroutine20 & 0xFFFF
   2625            }
   \                     ??CrossCallReturnLabel_151:
   \   00001C   12....       LCALL   ?CALL_IND
   2626          }
   \                     ??ZDO_PermitJoinCB_0:
   \   00001F   7401         MOV     A,#0x1
   \   000021   02....       LJMP    ?Subroutine4 & 0xFFFF
   2627          
   2628          /*********************************************************************
   2629           * @fn          ZDO_AddrChangeIndicationCB
   2630           *
   2631           * @brief       This function notifies the application that this
   2632           *              device's address has changed.  Could happen in
   2633           *              a network with stochastic addressing (PRO).
   2634           *
   2635           * @param       newAddr - the new address
   2636           *
   2637           * @return      none
   2638           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2639          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2640          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2641            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2642            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine67_0 & 0xFFFF
   2643          
   2644            // Notify to save info into NV
   2645            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_134:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   2646          
   2647            // Notify the applications
   2648            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#ZDAppTaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00001E   803B         SJMP    ??ZDO_AddrChangeIndicationCB_0
   2649          
   2650            while (pItem != NULL)
   2651            {
   2652              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000029   6029         JZ      ??ZDO_AddrChangeIndicationCB_2
   2653              {
   2654                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   00002B                ; Setup parameters for call to function osal_msg_allocate
   \   00002B   7A04         MOV     R2,#0x4
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   2655                if (pZDOAddrChangeMsg != NULL)
   \   000032   EA           MOV     A,R2
   \   000033   4B           ORL     A,R3
   \   000034   601E         JZ      ??ZDO_AddrChangeIndicationCB_2
   2656                {
   2657                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   74D6         MOV     A,#-0x2a
   \   00003C   F0           MOVX    @DPTR,A
   2658                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   00003D   12....       LCALL   ?Subroutine13 & 0xFFFF
   2659                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \                     ??CrossCallReturnLabel_140:
   \   000040                ; Setup parameters for call to function osal_msg_send
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F8           MOV     R0,A
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ??Subroutine70_0 & 0xFFFF
   2660                }
   2661              }
   \                     ??CrossCallReturnLabel_147:
   \   00004C   A3           INC     DPTR
   \   00004D   12....       LCALL   ??Subroutine54_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
   2662              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_2:
   \   000054   12....       LCALL   ?Subroutine24 & 0xFFFF
   2663            }
   \                     ??CrossCallReturnLabel_100:
   \   000057   E8           MOV     A,R0
   \   000058   FE           MOV     R6,A
   \   000059   E9           MOV     A,R1
   \   00005A   FF           MOV     R7,A
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   00005B   EE           MOV     A,R6
   \   00005C   4F           ORL     A,R7
   \   00005D   70C1         JNZ     ??ZDO_AddrChangeIndicationCB_1
   2664          
   2665            // Send out a device announce
   2666            ZDApp_AnnounceNewAddress();
   \   00005F                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00005F   12....       LCALL   `??ZDApp_AnnounceNewAddress::?relay`; Banked call to: ZDApp_AnnounceNewAddress
   2667          }
   \   000062   02....       LJMP    ??Subroutine72_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine68_0
   \   000002                ; // Fall through to label ??Subroutine68_0
   2668          
   2669          /*********************************************************************
   2670           * @fn          ZDO_JoinIndicationCB
   2671           *
   2672           * @brief       This function allows the next higher layer of a
   2673           *              coordinator to be notified of a remote join request.
   2674           *
   2675           * @param       ShortAddress - 16-bit address
   2676           * @param       ExtendedAddress - IEEE (64-bit) address
   2677           * @param       CapabilityFlags - Association Capability Flags
   2678           * @param       type - of joining -
   2679           *                          NWK_ASSOC_JOIN
   2680           *                          NWK_ASSOC_REJOIN_UNSECURE
   2681           *                          NWK_ASSOC_REJOIN_SECURE
   2682           *
   2683           * @return      ZStatus_t
   2684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2685          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2686                                          uint8 CapabilityFlags, uint8 type)
   2687          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   2688            (void)ExtendedAddress;
   2689          #if ZDO_NV_SAVE_RFDs
   2690            (void)CapabilityFlags;
   2691          
   2692          #else  // if !ZDO_NV_SAVE_RFDs
   2693            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2694          #endif
   2695            {
   2696              ZDApp_NVUpdate();  // Notify to save info into NV.
   \   000009                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000009   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   2697            }
   2698          
   2699            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2700            {
   2701              if ( type == NWK_ASSOC_JOIN ||
   2702                   type == NWK_ASSOC_REJOIN_UNSECURE ||
   2703                   type == NWK_ASSOC_REJOIN_SECURE )
   \   000013   600D         JZ      ??ZDO_JoinIndicationCB_0
   \   000015   7401         MOV     A,#0x1
   \   000017   68           XRL     A,R0
   \   000018   6008         JZ      ??ZDO_JoinIndicationCB_0
   \   00001A   7402         MOV     A,#0x2
   \   00001C   68           XRL     A,R0
   \   00001D   6003         JZ      $+5
   \   00001F   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2704              {
   2705                uint16 timeToFire;
   2706                ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2707          
   2708                pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_0:
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   7A06         MOV     R2,#0x6
   \   000024   7B00         MOV     R3,#0x0
   \   000026   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000029   8A..         MOV     ?V2,R2
   \   00002B   8B..         MOV     ?V3,R3
   \   00002D   AE..         MOV     R6,?V2
   \   00002F   AF..         MOV     R7,?V3
   2709          
   2710                if ( pNewDevice == NULL )
   \   000031   EE           MOV     A,R6
   \   000032   4F           ORL     A,R7
   \   000033   7005         JNZ     ??ZDO_JoinIndicationCB_2
   2711                {
   2712                  // Memory alloc failed
   2713                  return ZMemError;
   \   000035   7910         MOV     R1,#0x10
   \   000037   02....       LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
   2714                }
   2715          
   2716                // Add the new device to the New Device List
   2717                if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_2:
   \   00003A   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00003D   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000040   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000043   7006         JNZ     ??ZDO_JoinIndicationCB_4
   2718                {
   2719                  // The list is empty, add the first element
   2720                  ZDApp_NewDeviceList = pNewDevice;
   \   000045   EE           MOV     A,R6
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   EF           MOV     A,R7
   \   000049   801F         SJMP    ??ZDO_JoinIndicationCB_5
   2721                }
   2722                else
   2723                {
   2724                  pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_4:
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   8003         SJMP    ??ZDO_JoinIndicationCB_6
   2725          
   2726                  // Walk the list to last element
   2727                  while ( pDeviceList->next )
   2728                  {
   2729                    pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_7:
   \   000051   E8           MOV     A,R0
   \   000052   FA           MOV     R2,A
   \   000053   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_6:
   \   000054   FB           MOV     R3,A
   2730                  }
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00005C   70F3         JNZ     ??ZDO_JoinIndicationCB_7
   2731          
   2732                  // Add new device at the end
   2733                  pDeviceList->next = pNewDevice;
   \   00005E   EE           MOV     A,R6
   \   00005F   F8           MOV     R0,A
   \   000060   EF           MOV     A,R7
   \   000061   F9           MOV     R1,A
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   E8           MOV     A,R0
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_5:
   \   00006A   F0           MOVX    @DPTR,A
   2734                }
   2735          
   2736                // get the remaining time of the timer
   2737                timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   00006B                ; Setup parameters for call to function osal_get_timeoutEx
   \   00006B   7A40         MOV     R2,#0x40
   \   00006D   7B00         MOV     R3,#0x0
   \   00006F   90....       MOV     DPTR,#ZDAppTaskID
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000077   8A..         MOV     ?V4,R2
   \   000079   8B..         MOV     ?V5,R3
   2738          
   2739                pNewDevice->next = NULL;
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E4           CLR     A
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
   2740                pNewDevice->shortAddr = ShortAddress;
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   12....       LCALL   ?Subroutine13 & 0xFFFF
   2741                pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \                     ??CrossCallReturnLabel_141:
   \   00008A   7458         MOV     A,#0x58
   \   00008C   C3           CLR     C
   \   00008D   95..         SUBB    A,?V4
   \   00008F   F8           MOV     R0,A
   \   000090   7402         MOV     A,#0x2
   \   000092   95..         SUBB    A,?V5
   \   000094   F9           MOV     R1,A
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   12....       LCALL   ??Subroutine64_0 & 0xFFFF
   2742          
   2743                // Start the timer only if there is no pending timer
   2744                if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \                     ??CrossCallReturnLabel_108:
   \   00009C   7458         MOV     A,#0x58
   \   00009E   68           XRL     A,R0
   \   00009F   7003         JNZ     ??ZDO_JoinIndicationCB_8
   \   0000A1   7402         MOV     A,#0x2
   \   0000A3   69           XRL     A,R1
   \                     ??ZDO_JoinIndicationCB_8:
   \   0000A4   7017         JNZ     ??ZDO_JoinIndicationCB_1
   2745                {
   2746                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000A6                ; Setup parameters for call to function osal_start_timerEx
   \   0000A6   90....       MOV     DPTR,#__Constant_258
   \   0000A9   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000AC   7A40         MOV     R2,#0x40
   \   0000AE   7B00         MOV     R3,#0x0
   \   0000B0   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F9           MOV     R1,A
   \   0000B5   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000B8   7404         MOV     A,#0x4
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   2747                }
   2748              }
   2749            }
   2750          
   2751            return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000BD   7900         MOV     R1,#0x0
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000BF   02....       LJMP    ?Subroutine2 & 0xFFFF
   2752          }
   2753          
   2754          /*********************************************************************
   2755           * @fn          ZDO_ConcentratorIndicationCB
   2756           *
   2757           * @brief       This function allows the next higher layer of a
   2758           *              device to be notified of existence of the concentrator.
   2759           *
   2760           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2761           * @param       extAddr - pointer to extended Address
   2762           *                        NULL if not available
   2763           * @param       pktCost - PktCost from RREQ
   2764           *
   2765           * @return      void
   2766           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2767          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2768          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2769            zdoConcentratorInd_t conInd;
   2770          
   2771            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   2772            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_159:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2773            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2774          
   2775            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000024   6006         JZ      ??ZDO_ConcentratorIndicationCB_0
   2776            {
   2777              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL   ?Subroutine20 & 0xFFFF
   2778            }
   \                     ??CrossCallReturnLabel_152:
   \   000029   12....       LCALL   ?CALL_IND
   2779          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   00002C                REQUIRE ?Subroutine7
   \   00002C                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7405         MOV     A,#0x5
   \   000002                REQUIRE ??Subroutine69_0
   \   000002                ; // Fall through to label ??Subroutine69_0
   2780          
   2781          /*********************************************************************
   2782           * @fn          ZDO_LeaveCnf
   2783           *
   2784           * @brief       This function allows the next higher layer to be
   2785           *              notified of the results of its request for this or
   2786           *              a child device to leave the network.
   2787           *
   2788           * @param       cnf - NLME_LeaveCnf_t
   2789           *
   2790           * @return      none
   2791           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2792          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2793          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2794            // Check for this device
   2795            if ( osal_ExtAddrEqual( cnf->extAddr,
   2796                                    NLME_GetExtAddr() ) == TRUE )
   \   000009                ; Setup parameters for call to function NLME_GetExtAddr
   \   000009   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AC..         MOV     R4,?V0
   \   000012   AD..         MOV     R5,?V1
   \   000014                ; Setup parameters for call to function sAddrExtCmp
   \   000014   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000017   12....       LCALL   `??sAddrExtCmp::?relay`; Banked call to: sAddrExtCmp
   \   00001A   E9           MOV     A,R1
   \   00001B   6401         XRL     A,#0x1
   \   00001D   7022         JNZ     ??ZDO_LeaveCnf_0
   2797            {
   2798              // Pass the leave confirm to higher layer if callback registered
   2799              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2800                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   00001F   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000022   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000025   6011         JZ      ??ZDO_LeaveCnf_1
   \   000027                ; Setup parameters for indirect call
   \   000027   EE           MOV     A,R6
   \   000028   FA           MOV     R2,A
   \   000029   EF           MOV     A,R7
   \   00002A   FB           MOV     R3,A
   \   00002B   12....       LCALL   ??Subroutine70_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00002E   12....       LCALL   ?CALL_IND
   \   000031   8B..         MOV     ?V1,R3
   \   000033   EA           MOV     A,R2
   \   000034   45..         ORL     A,?V1
   \   000036   7027         JNZ     ??ZDO_LeaveCnf_2
   2801              {
   2802                // Prepare to leave with reset
   2803                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   000038                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000038   12....       LCALL   ?Subroutine33 & 0xFFFF
   2804              }
   2805            }
   \                     ??CrossCallReturnLabel_28:
   \   00003B   F9           MOV     R1,A
   \   00003C   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   00003F   801E         SJMP    ??ZDO_LeaveCnf_2
   2806            else if ( ZSTACK_ROUTER_BUILD )
   \                     ??ZDO_LeaveCnf_0:
   \   000041   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000044   E0           MOVX    A,@DPTR
   \   000045   6004         JZ      ??ZDO_LeaveCnf_3
   \   000047   6401         XRL     A,#0x1
   \   000049   7014         JNZ     ??ZDO_LeaveCnf_2
   2807            {
   2808              // Remove device address(optionally descendents) from data
   2809              ZDApp_LeaveUpdate( cnf->dstAddr,
   2810                                 cnf->extAddr,
   2811                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_3:
   \   00004B                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   12....       LCALL   ?Subroutine21 & 0xFFFF
   2812            }
   \                     ??CrossCallReturnLabel_6:
   \   00005C   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2813          }
   \                     ??ZDO_LeaveCnf_2:
   \   00005F   02....       LJMP    ??Subroutine60_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F9           MOV     R1,A
   \   000002   EE           MOV     A,R6
   \   000003   2402         ADD     A,#0x2
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3F           ADDC    A,R7
   \   000008   FD           MOV     R5,A
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FA           MOV     R2,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FB           MOV     R3,A
   \   000012   22           RET
   2814          
   2815          /*********************************************************************
   2816           * @fn          ZDO_LeaveInd
   2817           *
   2818           * @brief       This function allows the next higher layer of a
   2819           *              device to be notified of a remote leave request or
   2820           *              indication.
   2821           *
   2822           * @param       ind - NLME_LeaveInd_t
   2823           *
   2824           * @return      none
   2825           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2826          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2827          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2828            uint8 leave;
   2829          
   2830          
   2831            // Parent is requesting the leave - NWK layer filters out illegal
   2832            // requests
   2833            if ( ind->request == TRUE )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6401         XRL     A,#0x1
   \   00001F   7046         JNZ     ??ZDO_LeaveInd_0
   2834            {
   2835              // Only respond if we are not rejoining the network
   2836              if ( ind->rejoin == FALSE )
   \   000021   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000024   7030         JNZ     ??ZDO_LeaveInd_1
   2837              {
   2838                // Notify network of leave
   2839                NLME_LeaveRsp_t rsp;
   2840                rsp.rejoin = ind->rejoin;
   \   000026   7401         MOV     A,#0x1
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
   2841          
   2842                if ( ZSTACK_ROUTER_BUILD )
   \   00002D   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6004         JZ      ??ZDO_LeaveInd_2
   \   000033   6401         XRL     A,#0x1
   \   000035   700B         JNZ     ??ZDO_LeaveInd_3
   2843                {
   2844                  rsp.removeChildren = ind->removeChildren;
   \                     ??ZDO_LeaveInd_2:
   \   000037   12....       LCALL   ?Subroutine33 & 0xFFFF
   2845                }
   \                     ??CrossCallReturnLabel_29:
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   800C         SJMP    ??ZDO_LeaveInd_4
   2846                else if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_LeaveInd_3:
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6402         XRL     A,#0x2
   \   000045   7008         JNZ     ??ZDO_LeaveInd_5
   2847                {
   2848                  rsp.removeChildren = 0;
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   E4           CLR     A
   \                     ??ZDO_LeaveInd_4:
   \   00004E   F0           MOVX    @DPTR,A
   2849                }
   2850          
   2851                NLME_LeaveRsp( &rsp );
   \                     ??ZDO_LeaveInd_5:
   \   00004F                ; Setup parameters for call to function NLME_LeaveRsp
   \   00004F   AA..         MOV     R2,?XSP + 0
   \   000051   AB..         MOV     R3,?XSP + 1
   \   000053   12....       LCALL   `??NLME_LeaveRsp::?relay`; Banked call to: NLME_LeaveRsp
   2852              }
   2853          
   2854              if ( ZSTACK_END_DEVICE_BUILD )
   \                     ??ZDO_LeaveInd_1:
   \   000056   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   6402         XRL     A,#0x2
   \   00005C   702D         JNZ     ??ZDO_LeaveInd_6
   2855              {
   2856                // Stop polling and get ready to reset
   2857                NLME_SetPollRate( 0 );
   \   00005E                ; Setup parameters for call to function NLME_SetPollRate
   \   00005E   7A00         MOV     R2,#0x0
   \   000060   7B00         MOV     R3,#0x0
   \   000062   12....       LCALL   `??NLME_SetPollRate::?relay`; Banked call to: NLME_SetPollRate
   \   000065   8024         SJMP    ??ZDO_LeaveInd_6
   2858              }
   2859          
   2860              // Prepare to leave with reset
   2861              ZDApp_LeaveReset( ind->rejoin );
   2862            }
   2863            else
   2864            {
   2865              leave = FALSE;
   2866          
   2867              // Check if this device needs to leave as a child or descendent
   2868              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   000067                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000067   12....       LCALL   `??NLME_GetCoordShortAddr::?relay`; Banked call to: NLME_GetCoordShortAddr
   \   00006A   8A..         MOV     ?V0,R2
   \   00006C   8B..         MOV     ?V1,R3
   \   00006E   A8..         MOV     R0,?V0
   \   000070   A9..         MOV     R1,?V1
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   E0           MOVX    A,@DPTR
   \   000077   68           XRL     A,R0
   \   000078   7003         JNZ     ??ZDO_LeaveInd_7
   \   00007A   A3           INC     DPTR
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   69           XRL     A,R1
   \                     ??ZDO_LeaveInd_7:
   \   00007D   7015         JNZ     ??ZDO_LeaveInd_8
   2869              {
   2870                if ( ( ind->removeChildren == TRUE               ) ||
   2871                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2872                       NODETYPE_DEVICE                           )    )
   \   00007F   12....       LCALL   ?Subroutine33 & 0xFFFF
   2873                {
   2874                  leave = TRUE;
   2875                }
   2876              }
   \                     ??CrossCallReturnLabel_30:
   \   000082   6401         XRL     A,#0x1
   \   000084   6005         JZ      ??ZDO_LeaveInd_6
   \   000086   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000089   7009         JNZ     ??ZDO_LeaveInd_8
   2877              else if ( ind->removeChildren == TRUE )
   2878              {
   2879                // Check NWK address allocation algorithm
   2880                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2881              }
   2882          
   2883              if ( leave == TRUE )
   2884              {
   2885                // Prepare to leave with reset
   2886                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_6:
   \   00008B                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00008B   12....       LCALL   ?Subroutine35 & 0xFFFF
   2887              }
   \                     ??CrossCallReturnLabel_37:
   \   00008E   F9           MOV     R1,A
   \   00008F   12....       LCALL   `??ZDApp_LeaveReset::?relay`; Banked call to: ZDApp_LeaveReset
   \   000092   8009         SJMP    ??ZDO_LeaveInd_9
   2888              else
   2889              {
   2890                // Remove device address(optionally descendents) from data
   2891                ZDApp_LeaveUpdate( ind->srcAddr,
   2892                                   ind->extAddr,
   2893                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_8:
   \   000094                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000094   12....       LCALL   ?Subroutine49 & 0xFFFF
   2894              }
   2895            }
   \                     ??CrossCallReturnLabel_61:
   \   000097   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00009A   12....       LCALL   `??ZDApp_LeaveUpdate::?relay`; Banked call to: ZDApp_LeaveUpdate
   2896          
   2897            // Pass the leave indication to higher layer if callback registered.
   2898            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_9:
   \   00009D   90....       MOV     DPTR,#zdoCBFunc + 12
   \   0000A0   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   0000A3   600A         JZ      ??ZDO_LeaveInd_10
   2899            {
   2900              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000A5                ; Setup parameters for indirect call
   \   0000A5   EE           MOV     A,R6
   \   0000A6   FA           MOV     R2,A
   \   0000A7   EF           MOV     A,R7
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   ??Subroutine70_0 & 0xFFFF
   2901            }
   \                     ??CrossCallReturnLabel_149:
   \   0000AC   12....       LCALL   ?CALL_IND
   2902          }
   \                     ??ZDO_LeaveInd_10:
   \   0000AF   02....       LJMP    ?Subroutine8 & 0xFFFF
   2903          
   2904          /*********************************************************************
   2905           * @fn          ZDO_SyncIndicationCB
   2906           *
   2907           * @brief       This function allows the next higher layer of a
   2908           *              coordinator to be notified of a loss of synchronization
   2909           *                          with the parent/child device.
   2910           *
   2911           * @param       type: 0 - child; 1 - parent
   2912           *
   2913           *
   2914           * @return      none
   2915           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2916          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2917          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2918            (void)shortAddr;  // Remove this line if this parameter is used.
   2919          
   2920            if ( ZSTACK_END_DEVICE_BUILD
   2921              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000007   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6402         XRL     A,#0x2
   \   00000D   600F         JZ      ??ZDO_SyncIndicationCB_0
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   6004         JZ      ??ZDO_SyncIndicationCB_1
   \   000012   6401         XRL     A,#0x1
   \   000014   7020         JNZ     ??ZDO_SyncIndicationCB_2
   \                     ??ZDO_SyncIndicationCB_1:
   \   000016   90....       MOV     DPTR,#_NIB + 14
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   A2E1         MOV     C,0xE0 /* A   */.1
   \   00001C   4018         JC      ??ZDO_SyncIndicationCB_2
   2922            {
   2923              if ( type == 1 )
   \                     ??ZDO_SyncIndicationCB_0:
   \   00001E   7401         MOV     A,#0x1
   \   000020   6E           XRL     A,R6
   \   000021   7013         JNZ     ??ZDO_SyncIndicationCB_2
   2924              {
   2925                // We lost contact with our parent.  Clear the neighbor Table.
   2926                nwkNeighborInitTable();
   \   000023                ; Setup parameters for call to function nwkNeighborInitTable
   \   000023   12....       LCALL   `??nwkNeighborInitTable::?relay`; Banked call to: nwkNeighborInitTable
   2927          
   2928                // Start the rejoin process.
   2929                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000026                ; Setup parameters for call to function ZDApp_SendMsg
   \   000026   7C00         MOV     R4,#0x0
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7B02         MOV     R3,#0x2
   \   00002C   7A03         MOV     R2,#0x3
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   `??ZDApp_SendMsg::?relay`; Banked call to: ZDApp_SendMsg
   2930              }
   2931            }
   2932          }
   \                     ??ZDO_SyncIndicationCB_2:
   \   000036   02....       LJMP    ??Subroutine62_0 & 0xFFFF
   2933          
   2934          /*********************************************************************
   2935           * @fn          ZDO_ManytoOneFailureIndicationCB
   2936           *
   2937           * @brief       This function allows the next higher layer of a
   2938           *              concentrator to be notified of a many-to-one route
   2939           *              failure.
   2940           *
   2941           * @param       none
   2942           *
   2943           *
   2944           * @return      none
   2945           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2946          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2947          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2948            // By default, the concentrator automatically redo many-to-one route
   2949            // discovery to update all many-to-one routes in the network
   2950            // If you want anything processing other than the default,
   2951            // please replace the following code.
   2952          
   2953            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   `??RTG_MTORouteReq::?relay`; Banked call to: RTG_MTORouteReq
   2954          }
   \   000007   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   2955          
   2956          /*********************************************************************
   2957           * @fn          ZDO_PollConfirmCB
   2958           *
   2959           * @brief       This function allows the next higher layer to be
   2960           *              notified of a Poll Confirm.
   2961           *
   2962           * @param       none
   2963           *
   2964           * @return      none
   2965           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2966          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2967          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2968            (void)status;  // Remove this line if this parameter is used.
   2969            return;
   \   000000   02....       LJMP    ?BRET
   2970          }
   2971          
   2972          /*********************************************************************
   2973           * @fn          ZDO_NetworkStatusCB
   2974           *
   2975           * @brief       Network Status Callback function
   2976           *
   2977           * @param       nwkDstAddr - message's destination address- used to determine
   2978           *                           if the message was intended for this device or
   2979           *                           a sleeping end device.
   2980           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   2981           * @param       dstAddr - the destination address related to the status code
   2982           *
   2983           * @return      none
   2984           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2985          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   2986          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2987            (void)dstAddr;     // Remove this line if this parameter is used.
   2988          
   2989            if ( (nwkDstAddr == NLME_GetShortAddr())
   2990                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   2991            {
   2992              // Routing error for dstAddr, this is informational and a Route
   2993              // Request should happen automatically.
   2994            }
   2995          }
   \   000007   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   2996          
   2997          /******************************************************************************
   2998           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2999           *
   3000           * @brief       Stub routine implemented by NHLE. NHLE should call
   3001           *              <AddrMgrWriteNV> when appropriate.
   3002           *
   3003           * @param       none
   3004           *
   3005           * @return      none
   3006           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3007          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   3008          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3009          #if defined ( NV_RESTORE )
   3010            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??AddrMgrWriteNVRequest_0
   3011            {
   3012              // Trigger to save info into NV
   3013              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3014            }
   3015          #endif
   3016          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000019   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   3017          
   3018          /*********************************************************************
   3019           * Call Back Functions from Security  - API
   3020           */
   3021          
   3022           /*********************************************************************
   3023           * @fn          ZDO_UpdateDeviceIndication
   3024           *
   3025           * @brief       This function notifies the "Trust Center" of a
   3026           *              network when a device joins or leaves the network.
   3027           *
   3028           * @param       extAddr - pointer to 64 bit address of new device
   3029           * @param       status  - 0 if a new device joined securely
   3030           *                      - 1 if a new device joined un-securely
   3031           *                      - 2 if a device left the network
   3032           *
   3033           * @return      true if newly joined device should be allowed to
   3034           *                                              remain on network
   3035           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3036          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   3037          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3038            // can implement a network access policy based on the
   3039            // IEEE address of newly joining devices...
   3040            (void)extAddr;
   3041            (void)status;
   3042          
   3043            return ZSuccess;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   3044          }
   3045          
   3046          /*********************************************************************
   3047           * @fn          ZDApp_InMsgCB
   3048           *
   3049           * @brief       This function is called to pass up any message that is
   3050           *              not yet supported.  This allows for the developer to
   3051           *              support features themselves..
   3052           *
   3053           * @return      none
   3054           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3055          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   3056          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3057            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   5480         ANL     A,#0x80
   \   000010   703C         JNZ     ??ZDApp_InMsgCB_0
   3058            {
   3059              // Handle the response message
   3060            }
   3061            else
   3062            {
   3063              // Handle the request message by sending a generic "not supported".
   3064              // Device Announce doesn't have a response.
   3065              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000012   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000015   7037         JNZ     ??ZDApp_InMsgCB_0
   \   000017   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   00001A   6413         XRL     A,#0x13
   \   00001C   7002         JNZ     ??ZDApp_InMsgCB_1
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \                     ??ZDApp_InMsgCB_1:
   \   000020   602C         JZ      ??ZDApp_InMsgCB_0
   3066              {
   3067                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   3068                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000022                ; Setup parameters for call to function ZDP_GenericRsp
   \   000022   12....       LCALL   ?Subroutine34 & 0xFFFF
   3069              }
   3070            }
   \                     ??CrossCallReturnLabel_33:
   \   000025   4480         ORL     A,#0x80
   \   000027   F5..         MOV     ?V1,A
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   E4           CLR     A
   \   00002F   F5..         MOV     ?V0,A
   \   000031   F5..         MOV     ?V1,A
   \   000033   78..         MOV     R0,#?V0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   FD           MOV     R5,A
   \   00003D   7C84         MOV     R4,#-0x7c
   \   00003F   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000042   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   `??ZDP_GenericRsp::?relay`; Banked call to: ZDP_GenericRsp
   \   000049   7404         MOV     A,#0x4
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   3071          }
   \                     ??ZDApp_InMsgCB_0:
   \   00004E   02....       LJMP    ??Subroutine60_0 & 0xFFFF
   3072          
   3073          
   3074          /*********************************************************************
   3075           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3076           *
   3077           * @brief   Changes the Match Descriptor Response permission.
   3078           *
   3079           * @param   endpoint - endpoint to allow responses
   3080           * @param   action - true to allow responses, false to not
   3081           *
   3082           * @return  none
   3083           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3084          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3085          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3086            // Store the action
   3087            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
   3088          }
   \   000008   02....       LJMP    ??Subroutine62_0 & 0xFFFF
   3089          
   3090          /*********************************************************************
   3091           * @fn      ZDApp_NetworkInit()
   3092           *
   3093           * @brief   Used to start the network joining process
   3094           *
   3095           * @param   delay - mSec delay to wait before starting
   3096           *
   3097           * @return  none
   3098           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3099          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3100          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3101            if ( delay )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6021         JZ      ??ZDApp_NetworkInit_0
   3102            {
   3103              // Wait awhile before starting the device
   3104              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV     ?V0,R2
   \   00000B   8B..         MOV     ?V1,R3
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V2,A
   \   000010   F5..         MOV     ?V3,A
   \   000012   78..         MOV     R0,#?V0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   800C         SJMP    ??ZDApp_NetworkInit_1
   3105            }
   3106            else
   3107            {
   3108              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   3109            }
   3110          }
   \                     ??ZDApp_NetworkInit_1:
   \   000036   02....       LJMP    ??Subroutine72_0 & 0xFFFF
   3111          
   3112          /*********************************************************************
   3113           * @fn      ZDApp_NwkStateUpdateCB()
   3114           *
   3115           * @brief   This function notifies that this device's network
   3116           *          state info has been changed.
   3117           *
   3118           * @param   none
   3119           *
   3120           * @return  none
   3121           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3122          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3123          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3124            // Notify to save info into NV
   3125            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   `??osal_get_timeoutEx::?relay`; Banked call to: osal_get_timeoutEx
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??ZDApp_NwkStateUpdateCB_0
   3126            {
   3127              // Trigger to save info into NV
   3128              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3129            }
   3130          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000019   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   3131          
   3132          /*********************************************************************
   3133           * @fn      ZDApp_NodeProfileSync()
   3134           *
   3135           * @brief   Sync node with stack profile.
   3136           *
   3137           * @param   stackProfile - stack profile of the network to join
   3138           *
   3139           * @return  none
   3140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3141          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3142          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3143            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501B         JNC     ??ZDApp_NodeProfileSync_0
   3144            {
   3145              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6014         JZ      ??ZDApp_NodeProfileSync_0
   3146              {
   3147                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   4402         ORL     A,#0x2
   \   00001F   F0           MOVX    @DPTR,A
   3148                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   740C         MOV     A,#0xc
   \   000025   F0           MOVX    @DPTR,A
   3149                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000026                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000026   F9           MOV     R1,A
   \   000027   12....       LCALL   `??NLME_SetBroadcastFilter::?relay`; Banked call to: NLME_SetBroadcastFilter
   3150              }
   3151            }
   3152          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   00002A   02....       LJMP    ??Subroutine62_0 & 0xFFFF
   3153          
   3154          /*********************************************************************
   3155           * @fn      ZDApp_StartJoiningCycle()
   3156           *
   3157           * @brief   Starts the joining cycle of a device.  This will only
   3158           *          continue an already started (or stopped) joining cycle.
   3159           *
   3160           * @param   none
   3161           *
   3162           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3163           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3164          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3165          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3166            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   3167            {
   3168              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   3169              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   `??ZDApp_NetworkInit::?relay`; Banked call to: ZDApp_NetworkInit
   3170          
   3171              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3172            }
   3173            else
   3174              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   3175          }
   3176          
   3177          /*********************************************************************
   3178           * @fn      ZDApp_StopJoiningCycle()
   3179           *
   3180           * @brief   Stops the joining or rejoining process of a device.
   3181           *
   3182           * @param   none
   3183           *
   3184           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3185           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3186          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3187          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3188            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   3189            {
   3190              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   3191              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3192            }
   3193            else
   3194              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   3195          }
   3196          
   3197          /*********************************************************************
   3198           * @fn      ZDApp_AnnounceNewAddress()
   3199           *
   3200           * @brief   Send Device Announce and hold all transmissions for
   3201           *          new address timeout.
   3202           *
   3203           * @param   none
   3204           *
   3205           * @return  none
   3206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3207          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3208          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3209          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3210            // Turn off data request hold
   3211            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3212          #endif
   3213          
   3214            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3215                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   `??NLME_GetExtAddr::?relay`; Banked call to: NLME_GetExtAddr
   \   00000F   8A..         MOV     ?V0,R2
   \   000011   8B..         MOV     ?V1,R3
   \   000013   AE..         MOV     R6,?V0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0,#0x0
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   AD..         MOV     R5,?V1
   \   000029   12....       LCALL   `??ZDP_DeviceAnnce::?relay`; Banked call to: ZDP_DeviceAnnce
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   3216          
   3217          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3218            // Setup the timeout
   3219            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   `??APSME_HoldDataRequests::?relay`; Banked call to: APSME_HoldDataRequests
   3220          #endif
   3221          }
   \   000038   02....       LJMP    ??Subroutine60_0 & 0xFFFF
   3222          
   3223          /*********************************************************************
   3224           * @fn          ZDApp_NVUpdate
   3225           *
   3226           * @brief       Set the NV Update Timer.
   3227           *
   3228           * @param       none
   3229           *
   3230           * @return      none
   3231           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3232          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3233          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3234          #if defined ( NV_RESTORE )
   3235            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   90....       MOV     DPTR,#__Constant_2bc
   \   000007   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   90....       MOV     DPTR,#ZDAppTaskID
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000016   7404         MOV     A,#0x4
   \   000018   02....       LJMP    ?Subroutine4 & 0xFFFF
   3236          #endif
   3237          }
   3238          
   3239          /*********************************************************************
   3240           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3241           *
   3242           * @brief   Returns a PAN ID for the network layer to use during
   3243           *          a coordinator start and there is another network with
   3244           *          the intended PANID.
   3245           *
   3246           * @param   panid - the intended PAN ID
   3247           *
   3248           * @return  PANID to try
   3249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3250          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3251          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3252            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   5001         JNC     ??ZDApp_CoordStartPANIDConflictCB_0
   \   000006   0B           INC     R3
   \                     ??ZDApp_CoordStartPANIDConflictCB_0:
   \   000007   02....       LJMP    ?BRET
   3253          }
   3254          
   3255          /*********************************************************************
   3256           * @fn          ZDO_SrcRtgIndCB
   3257           *
   3258           * @brief       This function notifies the ZDO available src route record received.
   3259           *
   3260           * @param       srcAddr - source address of the source route
   3261           * @param       relayCnt - number of devices in the relay list
   3262           * @param       relayList - relay list of the source route
   3263           *
   3264           * @return      none
   3265           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3266          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3267          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3268            zdoSrcRtg_t srcRtg;
   3269          
   3270            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   3271            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_160:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   3272            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   3273          
   3274            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ??Subroutine66_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000024   6006         JZ      ??ZDO_SrcRtgIndCB_0
   3275            {
   3276              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   12....       LCALL   ?Subroutine20 & 0xFFFF
   3277            }
   \                     ??CrossCallReturnLabel_153:
   \   000029   12....       LCALL   ?CALL_IND
   3278          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   00002C   02....       LJMP    ?Subroutine7 & 0xFFFF
   3279          
   3280          /*********************************************************************
   3281           * @fn          ZDApp_InitZdoCBFunc
   3282           *
   3283           * @brief       Call this function to initialize zdoCBFunc[]
   3284           *
   3285           * @param       none
   3286           *
   3287           * @return      none
   3288           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3289          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3290          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3291            uint8 i;
   3292          
   3293            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   3294            {
   3295              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   EA           MOV     A,R2
   \   000007   25E0         ADD     A,0xE0 /* A   */
   \   000009   12....       LCALL   ?Subroutine32 & 0xFFFF
   3296            }
   \                     ??CrossCallReturnLabel_26:
   \   00000C   0A           INC     R2
   \   00000D   EA           MOV     A,R2
   \   00000E   C3           CLR     C
   \   00000F   9409         SUBB    A,#0x9
   \   000011   40F3         JC      ??ZDApp_InitZdoCBFunc_0
   3297          }
   \   000013   02....       LJMP    ??Subroutine61_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   F8           MOV     R0,A
   \   000001   E4           CLR     A
   \   000002   33           RLC     A
   \   000003   F9           MOV     R1,A
   \   000004   74..         MOV     A,#zdoCBFunc & 0xff
   \   000006   28           ADD     A,R0
   \   000007   F582         MOV     DPL,A
   \   000009   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000B   39           ADDC    A,R1
   \   00000C   F583         MOV     DPH,A
   \   00000E   22           RET
   3298          
   3299          /*********************************************************************
   3300           * @fn          ZDO_RegisterForZdoCB
   3301           *
   3302           * @brief       Call this function to register the higher layer (for
   3303           *              example, the Application layer or MT layer) with ZDO
   3304           *              callbacks to get notified of some ZDO indication like
   3305           *              existence of a concentrator or receipt of a source
   3306           *              route record.
   3307           *
   3308           * @param       indID - ZDO Indication ID
   3309           * @param       pFn   - Callback function pointer
   3310           *
   3311           * @return      ZSuccess - successful, ZInvalidParameter if not
   3312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3313          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3314          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3315            // Check the range of the indication ID
   3316            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   500C         JNC     ??ZDO_RegisterForZdoCB_0
   3317            {
   3318              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   29           ADD     A,R1
   \   00000D   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000010   12....       LCALL   ??Subroutine71_0 & 0xFFFF
   3319              return ZSuccess;
   \                     ??CrossCallReturnLabel_156:
   \   000013   7900         MOV     R1,#0x0
   \   000015   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3320            }
   3321          
   3322            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000017   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000019   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   3323          }
   3324          
   3325          /*********************************************************************
   3326           * @fn          ZDO_DeregisterForZdoCB
   3327           *
   3328           * @brief       Call this function to de-register the higher layer (for
   3329           *              example, the Application layer or MT layer) with ZDO
   3330           *              callbacks to get notified of some ZDO indication like
   3331           *              existence of a concentrator or receipt of a source
   3332           *              route record.
   3333           *
   3334           * @param       indID - ZDO Indication ID
   3335           *
   3336           * @return      ZSuccess - successful, ZInvalidParameter if not
   3337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3338          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3339          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3340            // Check the range of the indication ID
   3341            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9409         SUBB    A,#0x9
   \   000009   5008         JNC     ??ZDO_DeregisterForZdoCB_0
   3342            {
   3343              zdoCBFunc[indID] = NULL;
   \   00000B   EA           MOV     A,R2
   \   00000C   29           ADD     A,R1
   \   00000D   12....       LCALL   ?Subroutine32 & 0xFFFF
   3344              return ZSuccess;
   \                     ??CrossCallReturnLabel_27:
   \   000010   F9           MOV     R1,A
   \   000011   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3345            }
   3346          
   3347            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000013   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000015   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   3348          }
   3349          
   3350          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3351          #if defined ( REFLECTOR )
   3352          /*********************************************************************
   3353           * @fn          ZDApp_SetPendingBindDefault
   3354           *
   3355           * @brief       This function initializes a specific entry of pending
   3356           *              Bind Request.
   3357           *
   3358           * @param       pendBindReq - pointer to the entry in the table
   3359           *
   3360           * @return      none
   3361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3362          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3363          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3364            // Set it to an initial value
   3365            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV     R4,#0x21
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   3366          
   3367            // We are checking for age 0 for aged-out records
   3368            pendBindReq->age = 0;
   \   000012   EE           MOV     A,R6
   \   000013   2420         ADD     A,#0x20
   \   000015   F582         MOV     DPL,A
   \   000017   E4           CLR     A
   \   000018   3F           ADDC    A,R7
   \   000019   F583         MOV     DPH,A
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   3369          }
   \   00001D   02....       LJMP    ??Subroutine62_0 & 0xFFFF
   3370          
   3371          /*********************************************************************
   3372           * @fn          ZDApp_InitPendingBind
   3373           *
   3374           * @brief       This function initializes the buffer that holds
   3375           *              pending Bind Request messages if no valid NWK address
   3376           *              exists in Address Manager and a Network Address Req
   3377           *              has been sent out.
   3378           *
   3379           * @param       none
   3380           *
   3381           * @return      none
   3382           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003                REQUIRE ??Subroutine66_0
   \   000003                ; // Fall through to label ??Subroutine66_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3383          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3384          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3385            if ( ZDAppPendingBindReq == NULL )
   \   000005   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000008   7030         JNZ     ??ZDApp_InitPendingBind_0
   3386            {
   3387              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A63         MOV     R2,#0x63
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000014   12....       LCALL   ??Subroutine71_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000017   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00001A   601E         JZ      ??ZDApp_InitPendingBind_0
   3388              {
   3389                uint8 i;
   3390          
   3391                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001C   7E00         MOV     R6,#0x0
   3392                {
   3393                  // Set to default values
   3394                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \                     ??ZDApp_InitPendingBind_1:
   \   00001E                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00001E   EE           MOV     A,R6
   \   00001F   75F021       MOV     B,#0x21
   \   000022   A4           MUL     AB
   \   000023   F8           MOV     R0,A
   \   000024   A9F0         MOV     R1,B
   \   000026   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   28           ADD     A,R0
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   39           ADDC    A,R1
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   3395                }
   \   000033   0E           INC     R6
   \   000034   EE           MOV     A,R6
   \   000035   C3           CLR     C
   \   000036   9403         SUBB    A,#0x3
   \   000038   40E4         JC      ??ZDApp_InitPendingBind_1
   3396              }
   3397            }
   3398          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00003A   02....       LJMP    ??Subroutine62_0 & 0xFFFF
   3399          
   3400          /*********************************************************************
   3401           * @fn          ZDApp_GetEmptyPendingBindReq
   3402           *
   3403           * @brief       This function looks for an empty entry.
   3404           *
   3405           * @param       none
   3406           *
   3407           * @return      Pointer to entry
   3408           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3409          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3410          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3411            uint8 i;
   3412          
   3413            if ( ZDAppPendingBindReq != NULL )
   \   000004   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000007   602B         JZ      ??ZDApp_GetEmptyPendingBindReq_0
   3414            {
   3415              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000009   7A00         MOV     R2,#0x0
   3416              {
   3417                if ( ZDAppPendingBindReq[i].age == 0 )
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   00000B   EA           MOV     A,R2
   \   00000C   75F021       MOV     B,#0x21
   \   00000F   A4           MUL     AB
   \   000010   F8           MOV     R0,A
   \   000011   ABF0         MOV     R3,B
   \   000013   EB           MOV     A,R3
   \   000014   12....       LCALL   ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000017   7014         JNZ     ??ZDApp_GetEmptyPendingBindReq_2
   3418                {
   3419                  return ( &ZDAppPendingBindReq[i] );
   \   000019   EA           MOV     A,R2
   \   00001A   75F021       MOV     B,#0x21
   \   00001D   A4           MUL     AB
   \   00001E   F8           MOV     R0,A
   \   00001F   EB           MOV     A,R3
   \   000020   F9           MOV     R1,A
   \   000021   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000024   E0           MOVX    A,@DPTR
   \   000025   28           ADD     A,R0
   \   000026   FA           MOV     R2,A
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   39           ADDC    A,R1
   \   00002A   FB           MOV     R3,A
   \   00002B   800B         SJMP    ??ZDApp_GetEmptyPendingBindReq_3
   3420                }
   3421              }
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   00002D   0A           INC     R2
   \   00002E   EA           MOV     A,R2
   \   00002F   C3           CLR     C
   \   000030   9403         SUBB    A,#0x3
   \   000032   40D7         JC      ??ZDApp_GetEmptyPendingBindReq_1
   3422            }
   3423          
   3424            // No empty entry was found
   3425            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   000034   7A00         MOV     R2,#0x0
   \   000036   7B00         MOV     R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_3:
   \   000038   02....       LJMP    ??Subroutine61_0 & 0xFFFF
   3426          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   F9           MOV     R1,A
   \   000001   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000004   2420         ADD     A,#0x20
   \   000006   F582         MOV     DPL,A
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   28           ADD     A,R0
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   39           ADDC    A,R1
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   22           RET
   3427          
   3428          /*********************************************************************
   3429           * @fn          ZDApp_ProcessPendingBindReq
   3430           *
   3431           * @brief       Process pending entry based on EXT address.
   3432           *
   3433           * @param       extAddr - of device to look up
   3434           *
   3435           * @return      none
   3436           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3437          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3438          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V2,R2
   \   00000C   8B..         MOV     ?V3,R3
   3439            uint8 i;
   3440          
   3441            // Loop through all the pending entries for that Ext Address
   3442            // to create Bind Entries and send Bind Rsp
   3443            if ( ZDAppPendingBindReq != NULL )
   \   00000E   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3444            {
   3445              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000016   75..00       MOV     ?V0,#0x0
   3446              {
   3447                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3448                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   000019                ; Setup parameters for call to function osal_memcmp
   \   000019   85....       MOV     ?V4,?V2
   \   00001C   85....       MOV     ?V5,?V3
   \   00001F   75..00       MOV     ?V6,#0x0
   \   000022   78..         MOV     R0,#?V4
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000027   7C08         MOV     R4,#0x8
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   E5..         MOV     A,?V0
   \   00002D   75F021       MOV     B,#0x21
   \   000030   A4           MUL     AB
   \   000031   F8           MOV     R0,A
   \   000032   A9F0         MOV     R1,B
   \   000034   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000037   F5..         MOV     ?V4,A
   \   000039   E4           CLR     A
   \   00003A   39           ADDC    A,R1
   \   00003B   A9..         MOV     R1,?V4
   \   00003D   FA           MOV     R2,A
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000043   7403         MOV     A,#0x3
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   \   000048   E9           MOV     A,R1
   \   000049   6401         XRL     A,#0x1
   \   00004B   6003         JZ      $+5
   \   00004D   02....       LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3449                {
   3450                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   748C         MOV     A,#-0x74
   \   000058   F0           MOVX    @DPTR,A
   3451          
   3452                  // Add Bind entry
   3453                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3454                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3455                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3456                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   000059   E5..         MOV     A,?V0
   \   00005B   75F021       MOV     B,#0x21
   \   00005E   A4           MUL     AB
   \   00005F   FE           MOV     R6,A
   \   000060   AFF0         MOV     R7,B
   \   000062   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000065   E0           MOVX    A,@DPTR
   \   000066   2E           ADD     A,R6
   \   000067   FE           MOV     R6,A
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   3F           ADDC    A,R7
   \   00006B   FF           MOV     R7,A
   \   00006C                ; Setup parameters for call to function APSME_BindRequest
   \   00006C   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F5..         MOV     ?V1,A
   \   000072   78..         MOV     R0,#?V1
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   EE           MOV     A,R6
   \   000078   240B         ADD     A,#0xb
   \   00007A   FC           MOV     R4,A
   \   00007B   E4           CLR     A
   \   00007C   3F           ADDC    A,R7
   \   00007D   FD           MOV     R5,A
   \   00007E   8E82         MOV     DPL,R6
   \   000080   8F83         MOV     DPH,R7
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F9           MOV     R1,A
   \   000098   12....       LCALL   `??APSME_BindRequest::?relay`; Banked call to: APSME_BindRequest
   \   00009B   7401         MOV     A,#0x1
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A0   E9           MOV     A,R1
   \   0000A1   700B         JNZ     ??ZDApp_ProcessPendingBindReq_3
   3457                  {
   3458                    // valid entry
   3459                    bindStat = ZDP_SUCCESS;
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   E4           CLR     A
   \   0000AA   F0           MOVX    @DPTR,A
   3460          
   3461                    // Notify to save info into NV
   3462                    ZDApp_NVUpdate();
   \   0000AB                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000AB   12....       LCALL   `??ZDApp_NVUpdate::?relay`; Banked call to: ZDApp_NVUpdate
   3463                  }
   3464          
   3465                  // Send back a response message
   3466                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3467                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   0000AE   E5..         MOV     A,?V0
   \   0000B0   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000B3   F5..         MOV     ?V1,A
   \   0000B5   78..         MOV     R0,#?V1
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BA   7401         MOV     A,#0x1
   \   0000BC   12....       LCALL   ?XSTACK_DISP100_8
   \   0000BF   88..         MOV     ?V4,R0
   \   0000C1   89..         MOV     ?V5,R1
   \   0000C3   78..         MOV     R0,#?V4
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C8   75..21       MOV     ?V4,#0x21
   \   0000CB   75..80       MOV     ?V5,#-0x80
   \   0000CE   78..         MOV     R0,#?V4
   \   0000D0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D3   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   0000D6   5001         JNC     ??ZDApp_ProcessPendingBindReq_4
   \   0000D8   0B           INC     R3
   \                     ??ZDApp_ProcessPendingBindReq_4:
   \   0000D9   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000DC   7405         MOV     A,#0x5
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   3468          
   3469                  // Set the pending request entry to default values
   3470                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000E1                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000E1   12....       LCALL   ?Subroutine43 & 0xFFFF
   3471                }
   3472              }
   \                     ??CrossCallReturnLabel_52:
   \   0000E4   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   0000E7   05..         INC     ?V0
   \   0000E9   E5..         MOV     A,?V0
   \   0000EB   C3           CLR     C
   \   0000EC   9403         SUBB    A,#0x3
   \   0000EE   5003         JNC     $+5
   \   0000F0   02....       LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3473            }
   3474          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   0000F3   7401         MOV     A,#0x1
   \   0000F5   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EA           MOV     A,R2
   \   000003   2415         ADD     A,#0x15
   \   000005   FC           MOV     R4,A
   \   000006   E4           CLR     A
   \   000007   3B           ADDC    A,R3
   \   000008   FD           MOV     R5,A
   \   000009   EA           MOV     A,R2
   \   00000A   241F         ADD     A,#0x1f
   \   00000C   FA           MOV     R2,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   240B         ADD     A,#0xb
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   75F021       MOV     B,#0x21
   \   000003   A4           MUL     AB
   \   000004   FE           MOV     R6,A
   \   000005   AFF0         MOV     R7,B
   \   000007   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A   EA           MOV     A,R2
   \   00000B   241E         ADD     A,#0x1e
   \   00000D   F582         MOV     DPL,A
   \   00000F   E4           CLR     A
   \   000010   3B           ADDC    A,R3
   \   000011   F583         MOV     DPH,A
   \   000013   E0           MOVX    A,@DPTR
   \   000014   22           RET
   3475          
   3476          /*********************************************************************
   3477           * @fn          ZDApp_AgeOutPendingBindEntry
   3478           *
   3479           * @brief       Age out pending Bind Req entries.
   3480           *
   3481           * @param       none
   3482           *
   3483           * @return      none
   3484           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3485          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3486          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3487            uint8 i;
   3488            bool entryFound = FALSE;
   \   00000A   75..00       MOV     ?V0,#0x0
   3489          
   3490            if ( ZDAppPendingBindReq != NULL )
   \   00000D   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3491            {
   3492              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000015   75..00       MOV     ?V1,#0x0
   3493              {
   3494                if ( ZDAppPendingBindReq[i].age > 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   000018   E5..         MOV     A,?V1
   \   00001A   75F021       MOV     B,#0x21
   \   00001D   A4           MUL     AB
   \   00001E   F8           MOV     R0,A
   \   00001F   AAF0         MOV     R2,B
   \   000021   12....       LCALL   ??Subroutine73_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000024   C3           CLR     C
   \   000025   9402         SUBB    A,#0x2
   \   000027   E5..         MOV     A,?V1
   \   000029   75F021       MOV     B,#0x21
   \   00002C   400B         JC      ??ZDApp_AgeOutPendingBindEntry_2
   3495                {
   3496                  ZDAppPendingBindReq[i].age--;
   \   00002E   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000031   14           DEC     A
   \   000032   F0           MOVX    @DPTR,A
   3497          
   3498                  entryFound = TRUE;
   \   000033   75..01       MOV     ?V0,#0x1
   \   000036   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3499                }
   3500                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   000039   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   00003C   6401         XRL     A,#0x1
   \   00003E   6003         JZ      $+5
   \   000040   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3501                {
   3502                  // The record has aged out and has valid data
   3503                  AddrMgrEntry_t entry;
   3504                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   748C         MOV     A,#-0x74
   \   00004B   F0           MOVX    @DPTR,A
   3505          
   3506                  entry.user = ADDRMGR_USER_BINDING;
   \   00004C   7401         MOV     A,#0x1
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7404         MOV     A,#0x4
   \   000053   F0           MOVX    @DPTR,A
   3507          
   3508                  // Remove the entry in address manager so we do not keep entries
   3509                  // with invalid addresses
   3510                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   000054                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000054   E5..         MOV     A,?V1
   \   000056   75F021       MOV     B,#0x21
   \   000059   A4           MUL     AB
   \   00005A   F8           MOV     R0,A
   \   00005B   EA           MOV     A,R2
   \   00005C   F9           MOV     R1,A
   \   00005D   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000060   FC           MOV     R4,A
   \   000061   E4           CLR     A
   \   000062   39           ADDC    A,R1
   \   000063   FD           MOV     R5,A
   \   000064   7404         MOV     A,#0x4
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   AA82         MOV     R2,DPL
   \   00006B   AB83         MOV     R3,DPH
   \   00006D   12....       LCALL   `??AddrMgrExtAddrSet::?relay`; Banked call to: AddrMgrExtAddrSet
   3511          
   3512                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000070                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000070   7401         MOV     A,#0x1
   \   000072   12....       LCALL   ?XSTACK_DISP101_8
   \   000075   12....       LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
   \   000078   E9           MOV     A,R1
   \   000079   6401         XRL     A,#0x1
   \   00007B   7017         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3513                  {
   3514                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   00007D   7402         MOV     A,#0x2
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   E0           MOVX    A,@DPTR
   \   000083   64FE         XRL     A,#0xfe
   \   000085   7003         JNZ     ??ZDApp_AgeOutPendingBindEntry_5
   \   000087   A3           INC     DPTR
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F4           CPL     A
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   00008A   7008         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3515                    {
   3516                      // Release the entry that contains an invalid NWK address
   3517                      AddrMgrEntryRelease( &entry );
   \   00008C                ; Setup parameters for call to function AddrMgrEntryRelease
   \   00008C   7401         MOV     A,#0x1
   \   00008E   12....       LCALL   ?XSTACK_DISP101_8
   \   000091   12....       LCALL   `??AddrMgrEntryRelease::?relay`; Banked call to: AddrMgrEntryRelease
   3518                    }
   3519                  }
   3520          
   3521                  // Send the Bind Response with failure status
   3522                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3523                               &(ZDAppPendingBindReq[i].srcAddr),
   3524                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   000094   E5..         MOV     A,?V1
   \   000096   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000099   F5..         MOV     ?V2,A
   \   00009B   78..         MOV     R0,#?V2
   \   00009D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   12....       LCALL   ?XSTACK_DISP100_8
   \   0000A5   88..         MOV     ?V2,R0
   \   0000A7   89..         MOV     ?V3,R1
   \   0000A9   78..         MOV     R0,#?V2
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   75..21       MOV     ?V2,#0x21
   \   0000B1   75..80       MOV     ?V3,#-0x80
   \   0000B4   78..         MOV     R0,#?V2
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B9   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000BC   5001         JNC     ??ZDApp_AgeOutPendingBindEntry_6
   \   0000BE   0B           INC     R3
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0000BF   12....       LCALL   `??ZDP_SendData::?relay`; Banked call to: ZDP_SendData
   \   0000C2   7405         MOV     A,#0x5
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   3525          
   3526                  // Clear the record and set to default values
   3527                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000C7                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000C7   12....       LCALL   ?Subroutine43 & 0xFFFF
   3528                }
   3529              }
   \                     ??CrossCallReturnLabel_53:
   \   0000CA   12....       LCALL   `??ZDApp_SetPendingBindDefault::?relay`; Banked call to: ZDApp_SetPendingBindDefault
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   0000CD   05..         INC     ?V1
   \   0000CF   E5..         MOV     A,?V1
   \   0000D1   C3           CLR     C
   \   0000D2   9403         SUBB    A,#0x3
   \   0000D4   5003         JNC     $+5
   \   0000D6   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3530            }
   3531          
   3532            if ( entryFound == FALSE )
   \   0000D9   E5..         MOV     A,?V0
   \   0000DB   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000DD   400E         JC      ??ZDApp_AgeOutPendingBindEntry_7
   3533            {
   3534              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   0000DF                ; Setup parameters for call to function osal_stop_timerEx
   \   0000DF   7A00         MOV     R2,#0x0
   \   0000E1   7B10         MOV     R3,#0x10
   \   0000E3   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E6   E0           MOVX    A,@DPTR
   \   0000E7   F9           MOV     R1,A
   \   0000E8   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   0000EB   8017         SJMP    ??ZDApp_AgeOutPendingBindEntry_8
   3535            }
   3536            else
   3537            {
   3538              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3539                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   0000ED                ; Setup parameters for call to function osal_start_timerEx
   \   0000ED   90....       MOV     DPTR,#__Constant_3e8
   \   0000F0   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000F3   7A00         MOV     R2,#0x0
   \   0000F5   7B10         MOV     R3,#0x10
   \   0000F7   90....       MOV     DPTR,#ZDAppTaskID
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   F9           MOV     R1,A
   \   0000FC   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   0000FF   7404         MOV     A,#0x4
   \   000101   12....       LCALL   ?DEALLOC_XSTACK8
   3540            }
   3541          }
   \                     ??ZDApp_AgeOutPendingBindEntry_8:
   \   000104   740E         MOV     A,#0xe
   \   000106                REQUIRE ?Subroutine5
   \   000106                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   A4           MUL     AB
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine73_0
   \   000002                ; // Fall through to label ??Subroutine73_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine74_0
   \   000001                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2bc:
   \   000000   BC020000     DD 700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SecInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_event_loop::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDOInitDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ReadNetworkRestoreState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppDetermineDeviceType::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkStartEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceAuthEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNetworkStateEvt::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNetworkState::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitUserDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDAppCheckForHoldKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessOSALMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessMsgCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RegisterCBs::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessSecMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessNetworkJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SaveNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ForceConcentratorChange::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ForceConcentratorChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_RestoreNwkKey::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ResetTimerCancel::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlBypass::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveCtrlStartup::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_LeaveUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkDiscoveryReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_JoinReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_DeviceConfigured::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendEventMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SendMsg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkDiscoveryConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkDescListProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkFormationConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_beaconNotifyIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_StartRouterConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PermitJoinCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PermitJoinCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_AddrChangeIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_JoinIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ConcentratorIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveCnf::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_LeaveInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SyncIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_ManytoOneFailureIndicationCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_PollConfirmCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_NetworkStatusCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AddrMgrWriteNVRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_UpdateDeviceIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InMsgCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ChangeMatchDescRespPermission::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NetworkInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NwkStateUpdateCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NodeProfileSync::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StartJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_StopJoiningCycle::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AnnounceNewAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_NVUpdate::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_CoordStartPANIDConflictCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_SrcRtgIndCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitZdoCBFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_RegisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDO_DeregisterForZdoCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_SetPendingBindDefault::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_InitPendingBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_GetEmptyPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_ProcessPendingBindReq::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??ZDApp_AgeOutPendingBindEntry::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry
   3542          #endif
   3543          #endif
   3544          
   3545          /*********************************************************************
   3546          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     32   AddrMgrWriteNVRequest
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0      0   ZDAppCheckForHoldKey
      2     12   ZDAppDetermineDeviceType
        2      0   -> nwk_ExtPANIDValid
      0     45   ZDApp_AgeOutPendingBindEntry
        0     26   -> AddrMgrEntryLookupExt
        0     26   -> AddrMgrEntryRelease
        0     26   -> AddrMgrExtAddrSet
        0     26   -> ZDApp_SetPendingBindDefault
        0     31   -> ZDP_SendData
        0     30   -> osal_start_timerEx
        0     26   -> osal_stop_timerEx
      0     23   ZDApp_AnnounceNewAddress
        0     10   -> APSME_HoldDataRequests
        0     10   -> NLME_GetExtAddr
        0     10   -> NLME_GetShortAddr
        0     11   -> ZDP_DeviceAnnce
      0      9   ZDApp_ChangeMatchDescRespPermission
        0      9   -> afSetMatch
      0      0   ZDApp_CoordStartPANIDConflictCB
      2     16   ZDApp_DeviceAuthEvt
        2      0   -> NLME_SetPollRate
        2      0   -> NLME_StartRouterRequest
        2      0   -> ZDApp_AnnounceNewAddress
        2      0   -> ZDApp_NVUpdate
        2      0   -> ZDApp_ResetTimerCancel
        2      0   -> ZDApp_SaveNwkKey
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     16   ZDApp_DeviceConfigured
        0     16   -> osal_nv_read
      0     14   ZDApp_ForceConcentratorChange
        0     14   -> osal_nv_read
        0     14   -> osal_start_timerEx
        0     10   -> osal_stop_timerEx
      2      0   ZDApp_GetEmptyPendingBindReq
      0     14   ZDApp_InMsgCB
        0     14   -> ZDP_GenericRsp
      0      9   ZDApp_Init
        0      9   -> HalLedBlink
        0      9   -> NLME_GetExtAddr
        0      9   -> ZDApp_InitPendingBind
        0      9   -> ZDApp_InitUserDesc
        0      9   -> ZDApp_InitZdoCBFunc
        0      9   -> ZDApp_RegisterCBs
        0      9   -> ZDOInitDevice
        0      9   -> ZDO_Init
        0      9   -> afRegister
      0     18   ZDApp_InitPendingBind
        0      9   -> ZDApp_SetPendingBindDefault
        0      9   -> osal_mem_alloc
      0     40   ZDApp_InitUserDesc
        0     27   -> osal_memset
        0     29   -> osal_nv_item_init
        0     31   -> osal_nv_read
      2      9   ZDApp_InitZdoCBFunc
      0     20   ZDApp_JoinReq
        0     16   -> NLME_JoinRequest
        0     12   -> ZDApp_NodeProfileSync
      2      0   ZDApp_LeaveCtrlBypass
      0     26   ZDApp_LeaveCtrlInit
        0     12   -> osal_nv_item_init
        0     14   -> osal_nv_read
      0     14   ZDApp_LeaveCtrlReset
        0     14   -> osal_nv_write
      0     23   ZDApp_LeaveCtrlSet
        0     14   -> osal_nv_write
      2     12   ZDApp_LeaveCtrlStartup
        2      0   -> ZDApp_LeaveCtrlReset
      0     21   ZDApp_LeaveReset
        0      9   -> ZDApp_LeaveCtrlSet
        0      9   -> ZDApp_ResetTimerStart
      0     47   ZDApp_LeaveUpdate
        0     32   -> APSME_UpdateDeviceReq
        0     32   -> AddrMgrWriteNVRequest
        0     32   -> AssocIsChild
        0     32   -> NLME_RemoveChild
        0     32   -> RTG_RemoveRtgEntry
        0     32   -> ZDSecMgrAddrClear
        0     32   -> ZDSecMgrDeviceRemoveByExtAddr
        0     32   -> nwkNeighborRemove
        0     35   -> osal_memcpy
      2     20   ZDApp_NVUpdate
        2      4   -> osal_start_timerEx
      0     12   ZDApp_NetworkDiscoveryReq
        0     12   -> NLME_NetworkDiscoveryRequest
      0     29   ZDApp_NetworkInit
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
      2     14   ZDApp_NetworkStartEvt
        2      0   -> NLME_GetEnergyThreshold
        2      0   -> NLME_SetEnergyThreshold
        2      0   -> osal_pwrmgr_device
        2      0   -> osal_set_event
      0     22   ZDApp_NodeProfileSync
        0      9   -> NLME_SetBroadcastFilter
      0     27   ZDApp_NwkDescListProcessing
        0     14   -> nwk_ExtPANIDValid
        0     14   -> nwk_getNwkDescList
        0     14   -> sAddrExtCmp
      2      0   ZDApp_NwkStateUpdateCB
        2      0   -> ZDApp_NVUpdate
        2      0   -> osal_get_timeoutEx
      0     69   ZDApp_ProcessMsgCBs
        0     56   -> ZDApp_ProcessPendingBindReq
        0     56   -> ZDMatchSendState
        0     56   -> ZDO_MatchEndDeviceBind
        0     56   -> ZDO_ParseAddrRsp
        0     56   -> ZDO_ParseBindUnbindReq
        0     56   -> ZDO_ParseEndDeviceBindReq
        0     56   -> ZDO_ProcessBindUnbindReq
        0     56   -> ZDO_UpdateAddrManager
        0     56   -> osal_mem_free
      0     25   ZDApp_ProcessNetworkJoin
        0     12   -> NLME_GetShortAddr
        0     12   -> NLME_NwkDiscTerm
        0     12   -> NLME_SetPollRate
        0     12   -> NLME_SetQueuedPollRate
        0     12   -> NLME_SetResponseRate
        0     12   -> NLME_StartRouterRequest
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_ResetTimerStart
        0     12   -> ZDApp_RestoreNwkKey
        0     12   -> ZMacSetReq
        0     12   -> nwkNeighborInitTable
        0     12   -> osal_pwrmgr_device
        0     12   -> osal_rand
        0     12   -> osal_set_event
      0     31   ZDApp_ProcessOSALMsg
        0     17   -> NLME_JoinRequest
        0     13   -> NLME_ReJoinRequest
        0     13   -> NLME_ReJoinRequestUnsecure
        0     13   -> NLME_SetPollRate
        0     13   -> NLME_SetQueuedPollRate
        0     13   -> NLME_SetResponseRate
        0     13   -> ZDApp_NetworkInit
        0     13   -> ZDApp_NodeProfileSync
        0     13   -> ZDApp_NwkDescListProcessing
        0     13   -> ZDApp_ProcessMsgCBs
        0     13   -> ZDApp_ProcessNetworkJoin
        0     13   -> ZDApp_ProcessSecMsg
        0     13   -> ZDApp_RestoreNwkKey
        0     13   -> ZDP_IncomingData
        0     13   -> ZMacSetReq
        0     17   -> osal_nv_read
        0     13   -> osal_rand
        0     13   -> sAddrExtCpy
      0     77   ZDApp_ProcessPendingBindReq
        0     17   -> APSME_BindRequest
        0     16   -> ZDApp_NVUpdate
        0     16   -> ZDApp_SetPendingBindDefault
        0     21   -> ZDP_SendData
        0     19   -> osal_memcmp
      0     34   ZDApp_ProcessSecEvent
        0     16   -> ZDApp_DeviceAuthEvt
        0     16   -> ZDApp_SaveNwkKey
        0     16   -> ZDSecMgrNewDeviceEvent
        0     16   -> ZDSecMgrSaveApsLinkKey
        0     16   -> ZDSecMgrSaveTCLinkKey
        0     16   -> osal_mem_free
        0     20   -> osal_start_timerEx
      2     13   ZDApp_ProcessSecMsg
        2      0   -> ZDSecMgrSwitchKeyInd
        2      0   -> ZDSecMgrTransportKeyInd
        2      0   -> ZDSecMgrUpdateDeviceInd
      0     21   ZDApp_ReadNetworkRestoreState
        0      9   -> zgReadStartupOptions
      2      9   ZDApp_RegisterCBs
        2      0   -> ZDO_RegisterForZDOMsg
      0     35   ZDApp_ResetNwkKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      2      0   ZDApp_ResetTimerCancel
        2      0   -> osal_clear_event
        2      0   -> osal_stop_timerEx
      0     28   ZDApp_ResetTimerStart
        0     12   -> osal_get_timeoutEx
        0     16   -> osal_start_timerEx
      0     21   ZDApp_RestoreNetworkState
        0      9   -> NLME_GetShortAddr
        0      9   -> NLME_InitNV
        0      9   -> NLME_RestoreFromNV
        0      9   -> ZDApp_RestoreNwkKey
        0      9   -> sAddrExtCpy
      0     66   ZDApp_RestoreNwkKey
        0     52   -> osal_memcmp
        0     49   -> osal_memset
        0     53   -> osal_nv_read
        0     53   -> osal_nv_write
      2     14   ZDApp_SaveNetworkStateEvt
        2      0   -> NLME_UpdateNV
        2      0   -> zgWriteStartupOptions
      0     51   ZDApp_SaveNwkKey
        0     31   -> SSP_ReadNwkActiveKey
        0     31   -> osal_memset
        0     35   -> osal_nv_write
      0     37   ZDApp_SecInit
        0     25   -> SSP_SwitchNwkKey
        0     25   -> SSP_UpdateNwkKey
        0     25   -> ZDSecMgrInit
        0     25   -> ZDSecMgrReadKeyFromNv
        0     25   -> osal_mem_free
        0     25   -> osal_memset
      0      9   ZDApp_SendEventMsg
        0      9   -> ZDApp_SendMsg
      1     36   ZDApp_SendMsg
        0     19   -> osal_memcpy
        0     16   -> osal_msg_allocate
        0     16   -> osal_msg_send
      0     35   ZDApp_SetPendingBindDefault
        0      9   -> osal_memset
      2      0   ZDApp_StartJoiningCycle
        2      0   -> ZDApp_NetworkInit
      2      0   ZDApp_StopJoiningCycle
      0     18   ZDApp_event_loop
        0     14   -> Onboard_soft_reset
        0     14   -> ZDApp_AgeOutPendingBindEntry
        0     14   -> ZDApp_NetworkStartEvt
        0     14   -> ZDApp_ProcessOSALMsg
        0     14   -> ZDApp_ProcessSecEvent
        0     14   -> ZDApp_SaveNetworkStateEvt
        0     14   -> ZDO_StartDevice
        0     14   -> ZDO_UpdateNwkStatus
        0     14   -> osal_msg_deallocate
        0     14   -> osal_msg_receive
        0     14   -> osal_pwrmgr_device
        0     14   -> osal_set_event
        0     18   -> osal_start_timerEx
        0     14   -> zgWriteStartupOptions
      0     21   ZDOInitDevice
        0     12   -> NLME_InitNV
        0     12   -> NLME_SetBroadcastFilter
        0     12   -> NLME_SetDefaultNV
        0     12   -> ZDAppDetermineDeviceType
        0     12   -> ZDApp_LeaveCtrlInit
        0     12   -> ZDApp_LeaveCtrlStartup
        0     12   -> ZDApp_NetworkInit
        0     12   -> ZDApp_ReadNetworkRestoreState
        0     12   -> ZDApp_RestoreNetworkState
        0     12   -> ZDApp_SecInit
        0     12   -> ZDConfig_InitDescriptors
        0     12   -> ZDSecMgrClearNVKeyValues
        0     12   -> osal_rand
        0     12   -> osal_set_event
        0     12   -> zgInitItems
        0     12   -> zgWriteStartupOptions
      0     12   ZDO_AddrChangeIndicationCB
        0     12   -> ZDApp_AnnounceNewAddress
        0     12   -> ZDApp_NVUpdate
        0     12   -> osal_msg_allocate
        0     12   -> osal_msg_send
        0     12   -> osal_set_event
      1     14   ZDO_ConcentratorIndicationCB
      2      0   ZDO_DeregisterForZdoCB
      1     17   ZDO_JoinConfirmCB
        0     17   -> HalLedSet
        0     17   -> ZDApp_SendMsg
        0     17   -> nwkNeighborFindEmptySlot
        0     17   -> nwkNeighborInitTable
        0     17   -> osal_memset
        0     17   -> sAddrExtCpy
      0     21   ZDO_JoinIndicationCB
        0     16   -> ZDApp_NVUpdate
        0     16   -> osal_get_timeoutEx
        0     16   -> osal_mem_alloc
        0     20   -> osal_start_timerEx
      0     10   ZDO_LeaveCnf
        0     10   -> NLME_GetExtAddr
        0     10   -> ZDApp_LeaveReset
        0     10   -> ZDApp_LeaveUpdate
        0     10   -> sAddrExtCmp
      1     12   ZDO_LeaveInd
        0     12   -> NLME_GetCoordShortAddr
        0     12   -> NLME_LeaveRsp
        0     12   -> NLME_SetPollRate
        0     12   -> ZDApp_LeaveReset
        0     12   -> ZDApp_LeaveUpdate
      2      0   ZDO_ManytoOneFailureIndicationCB
        2      0   -> RTG_MTORouteReq
      3      3   ZDO_NetworkDiscoveryConfirmCB
        2      3   -> ZDApp_SendMsg
        2      3   -> ZDO_FinishProcessingMgmtNwkDiscReq
      0      9   ZDO_NetworkFormationConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      2      0   ZDO_NetworkStatusCB
        2      0   -> NLME_GetShortAddr
      3      1   ZDO_PermitJoinCB
      0      0   ZDO_PollConfirmCB
      2      0   ZDO_RegisterForZdoCB
      1     14   ZDO_SrcRtgIndCB
      0      9   ZDO_StartRouterConfirmCB
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0      9   ZDO_SyncIndicationCB
        0      9   -> ZDApp_SendMsg
        0      9   -> nwkNeighborInitTable
      0      0   ZDO_UpdateDeviceIndication
      1     14   ZDO_beaconNotifyIndCB
        0     14   -> osal_mem_alloc
        0     14   -> osal_memset
        0     14   -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for zdoDiscCounter>
      10  ??Subroutine54_0
      11  ??Subroutine55_0
       8  ??Subroutine56_0
       8  ??Subroutine57_0
       6  ??Subroutine58_0
       3  ??Subroutine59_0
       5  ??Subroutine60_0
       7  ??Subroutine61_0
       5  ??Subroutine62_0
       6  ??Subroutine63_0
       4  ??Subroutine64_0
       6  ??Subroutine65_0
       8  ??Subroutine66_0
       6  ??Subroutine67_0
       8  ??Subroutine68_0
       6  ??Subroutine69_0
       6  ??Subroutine70_0
       6  ??Subroutine71_0
       5  ??Subroutine72_0
       1  ??Subroutine73_0
      14  ??Subroutine74_0
      10  ?Subroutine0
       5  ?Subroutine1
       5  ?Subroutine10
       3  ?Subroutine11
      12  ?Subroutine12
       2  ?Subroutine13
       6  ?Subroutine14
      10  ?Subroutine15
      12  ?Subroutine16
       3  ?Subroutine17
       2  ?Subroutine18
       3  ?Subroutine19
       5  ?Subroutine2
       4  ?Subroutine20
      19  ?Subroutine21
      21  ?Subroutine22
       6  ?Subroutine23
       4  ?Subroutine24
      10  ?Subroutine25
       9  ?Subroutine26
       3  ?Subroutine27
       6  ?Subroutine28
      10  ?Subroutine29
      35  ?Subroutine3
       3  ?Subroutine30
       4  ?Subroutine31
       8  ?Subroutine32
       5  ?Subroutine33
       8  ?Subroutine34
       4  ?Subroutine35
       6  ?Subroutine36
       1  ?Subroutine37
       5  ?Subroutine38
      14  ?Subroutine39
       3  ?Subroutine4
       8  ?Subroutine40
      10  ?Subroutine41
      10  ?Subroutine42
      11  ?Subroutine43
       1  ?Subroutine44
      12  ?Subroutine45
       9  ?Subroutine46
      12  ?Subroutine47
      15  ?Subroutine48
      10  ?Subroutine49
       3  ?Subroutine5
       5  ?Subroutine50
      10  ?Subroutine51
      10  ?Subroutine52
      10  ?Subroutine53
       8  ?Subroutine6
       2  ?Subroutine7
       5  ?Subroutine8
       5  ?Subroutine9
      28  AddrMgrWriteNVRequest
       6  AddrMgrWriteNVRequest::?relay
       3  ZDAppCheckForHoldKey
       6  ZDAppCheckForHoldKey::?relay
      76  ZDAppDetermineDeviceType
       6  ZDAppDetermineDeviceType::?relay
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     262  ZDApp_AgeOutPendingBindEntry
       6  ZDApp_AgeOutPendingBindEntry::?relay
      59  ZDApp_AnnounceNewAddress
       6  ZDApp_AnnounceNewAddress::?relay
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
       6  ZDApp_ChangeMatchDescRespPermission::?relay
      10  ZDApp_CoordStartPANIDConflictCB
       6  ZDApp_CoordStartPANIDConflictCB::?relay
      92  ZDApp_DeviceAuthEvt
       6  ZDApp_DeviceAuthEvt::?relay
      84  ZDApp_DeviceConfigured
       6  ZDApp_DeviceConfigured::?relay
     128  ZDApp_ForceConcentratorChange
       6  ZDApp_ForceConcentratorChange::?relay
      59  ZDApp_GetEmptyPendingBindReq
       6  ZDApp_GetEmptyPendingBindReq::?relay
      81  ZDApp_InMsgCB
       6  ZDApp_InMsgCB::?relay
      88  ZDApp_Init
       6  ZDApp_Init::?relay
      61  ZDApp_InitPendingBind
       6  ZDApp_InitPendingBind::?relay
     111  ZDApp_InitUserDesc
       6  ZDApp_InitUserDesc::?relay
      22  ZDApp_InitZdoCBFunc
       6  ZDApp_InitZdoCBFunc::?relay
      75  ZDApp_JoinReq
       6  ZDApp_JoinReq::?relay
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
       6  ZDApp_LeaveCtrlBypass::?relay
      75  ZDApp_LeaveCtrlInit
       6  ZDApp_LeaveCtrlInit::?relay
      13  ZDApp_LeaveCtrlReset
       6  ZDApp_LeaveCtrlReset::?relay
      22  ZDApp_LeaveCtrlSet
       6  ZDApp_LeaveCtrlSet::?relay
      47  ZDApp_LeaveCtrlStartup
       6  ZDApp_LeaveCtrlStartup::?relay
      18  ZDApp_LeaveReset
       6  ZDApp_LeaveReset::?relay
     206  ZDApp_LeaveUpdate
       6  ZDApp_LeaveUpdate::?relay
      27  ZDApp_NVUpdate
       6  ZDApp_NVUpdate::?relay
      11  ZDApp_NetworkDiscoveryReq
       6  ZDApp_NetworkDiscoveryReq::?relay
      57  ZDApp_NetworkInit
       6  ZDApp_NetworkInit::?relay
      89  ZDApp_NetworkStartEvt
       6  ZDApp_NetworkStartEvt::?relay
       2  ZDApp_NewDeviceList
      45  ZDApp_NodeProfileSync
       6  ZDApp_NodeProfileSync::?relay
     301  ZDApp_NwkDescListProcessing
       6  ZDApp_NwkDescListProcessing::?relay
      28  ZDApp_NwkStateUpdateCB
       6  ZDApp_NwkStateUpdateCB::?relay
     252  ZDApp_ProcessMsgCBs
       6  ZDApp_ProcessMsgCBs::?relay
     531  ZDApp_ProcessNetworkJoin
       6  ZDApp_ProcessNetworkJoin::?relay
     634  ZDApp_ProcessOSALMsg
       6  ZDApp_ProcessOSALMsg::?relay
     248  ZDApp_ProcessPendingBindReq
       6  ZDApp_ProcessPendingBindReq::?relay
     231  ZDApp_ProcessSecEvent
       6  ZDApp_ProcessSecEvent::?relay
      70  ZDApp_ProcessSecMsg
       6  ZDApp_ProcessSecMsg::?relay
      23  ZDApp_ReadNetworkRestoreState
       6  ZDApp_ReadNetworkRestoreState::?relay
      91  ZDApp_RegisterCBs
       6  ZDApp_RegisterCBs::?relay
      66  ZDApp_ResetNwkKey
       6  ZDApp_ResetNwkKey::?relay
      31  ZDApp_ResetTimerCancel
       6  ZDApp_ResetTimerCancel::?relay
      57  ZDApp_ResetTimerStart
       6  ZDApp_ResetTimerStart::?relay
      88  ZDApp_RestoreNetworkState
       6  ZDApp_RestoreNetworkState::?relay
     211  ZDApp_RestoreNwkKey
       6  ZDApp_RestoreNwkKey::?relay
      19  ZDApp_SaveNetworkStateEvt
       6  ZDApp_SaveNetworkStateEvt::?relay
      75  ZDApp_SaveNwkKey
       6  ZDApp_SaveNwkKey::?relay
       2  ZDApp_SavedPollRate
     147  ZDApp_SecInit
       6  ZDApp_SecInit::?relay
      21  ZDApp_SendEventMsg
       6  ZDApp_SendEventMsg::?relay
      83  ZDApp_SendMsg
       6  ZDApp_SendMsg::?relay
      32  ZDApp_SetPendingBindDefault
       6  ZDApp_SetPendingBindDefault::?relay
      39  ZDApp_StartJoiningCycle
       6  ZDApp_StartJoiningCycle::?relay
      31  ZDApp_StopJoiningCycle
       6  ZDApp_StopJoiningCycle::?relay
       6  ZDApp_epDesc
     275  ZDApp_event_loop
       6  ZDApp_event_loop::?relay
     203  ZDOInitDevice
       6  ZDOInitDevice::?relay
     101  ZDO_AddrChangeIndicationCB
       6  ZDO_AddrChangeIndicationCB::?relay
      44  ZDO_ConcentratorIndicationCB
       6  ZDO_ConcentratorIndicationCB::?relay
      24  ZDO_DeregisterForZdoCB
       6  ZDO_DeregisterForZdoCB::?relay
     251  ZDO_JoinConfirmCB
       6  ZDO_JoinConfirmCB::?relay
     194  ZDO_JoinIndicationCB
       6  ZDO_JoinIndicationCB::?relay
      98  ZDO_LeaveCnf
       6  ZDO_LeaveCnf::?relay
     178  ZDO_LeaveInd
       6  ZDO_LeaveInd::?relay
      10  ZDO_ManytoOneFailureIndicationCB
       6  ZDO_ManytoOneFailureIndicationCB::?relay
      76  ZDO_NetworkDiscoveryConfirmCB
       6  ZDO_NetworkDiscoveryConfirmCB::?relay
      40  ZDO_NetworkFormationConfirmCB
       6  ZDO_NetworkFormationConfirmCB::?relay
      10  ZDO_NetworkStatusCB
       6  ZDO_NetworkStatusCB::?relay
      36  ZDO_PermitJoinCB
       6  ZDO_PermitJoinCB::?relay
       3  ZDO_PollConfirmCB
       6  ZDO_PollConfirmCB::?relay
      28  ZDO_RegisterForZdoCB
       6  ZDO_RegisterForZdoCB::?relay
      47  ZDO_SrcRtgIndCB
       6  ZDO_SrcRtgIndCB::?relay
      40  ZDO_StartRouterConfirmCB
       6  ZDO_StartRouterConfirmCB::?relay
      57  ZDO_SyncIndicationCB
       6  ZDO_SyncIndicationCB::?relay
       5  ZDO_UpdateDeviceIndication
       6  ZDO_UpdateDeviceIndication::?relay
       8  ZDO_UseExtendedPANID
     575  ZDO_beaconNotifyIndCB
       6  ZDO_beaconNotifyIndCB::?relay
       4  __Constant_258
       4  __Constant_2bc
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  retryCnt
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      18  zdoCBFunc
       1  zdoDiscCounter

 
 8 040 bytes in segment BANKED_CODE
   438 bytes in segment BANK_RELAYS
    10 bytes in segment XDATA_I
    10 bytes in segment XDATA_ID
    20 bytes in segment XDATA_ROM_C
    62 bytes in segment XDATA_Z
 
 8 488 bytes of CODE  memory
     0 bytes of CONST memory (+ 20 bytes shared)
    72 bytes of XDATA memory

Errors: none
Warnings: none
