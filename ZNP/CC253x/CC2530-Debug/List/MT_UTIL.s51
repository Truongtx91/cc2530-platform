///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.30.1.3056 for 8051               21/Nov/2018  13:52:10
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Components\mt\MT_UTIL.c
//    Command line       =  
//        -f "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
//        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR |
//        DEVICE_BUILD_ROUTER | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL
//        -DZNP_RUN_WDOG=FALSE -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO
//        -DZIGBEE_FRAGMENTATION -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE
//        -DSAPI_CB_FUNC=FALSE -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT
//        -DNUM_DISC_ATTEMPTS=0 -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC
//        -DMT_SAPI_FUNC -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC
//        -DMT_ZDO_MGMT -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
//        -DREJOIN_POLL_RATE=440) -f
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Components\mt\MT_UTIL.c" -D FEATURE_SYSTEM_STATS -D
//        POWER_SAVING -lC "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
//        Pe001,Pa010 -o "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e
//        --no_code_motion --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\Source\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\"
//        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
//        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
//        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\MT_UTIL.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_UTIL

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP100_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8

        FUNCTION `??MT_UtilBindAddEntry::?relay`,0203H
        PUBLIC `??MT_UtilCallbackSub::?relay`
        FUNCTION `??MT_UtilCallbackSub::?relay`,0203H
        PUBLIC `??MT_UtilCommandProcessing::?relay`
        FUNCTION `??MT_UtilCommandProcessing::?relay`,0203H
        PUBLIC `??MT_UtilDataReq::?relay`
        FUNCTION `??MT_UtilDataReq::?relay`,0203H
        PUBLIC `??MT_UtilGetDeviceInfo::?relay`
        FUNCTION `??MT_UtilGetDeviceInfo::?relay`,0203H
        PUBLIC `??MT_UtilGetNvInfo::?relay`
        FUNCTION `??MT_UtilGetNvInfo::?relay`,0203H
        PUBLIC `??MT_UtilGpioRead::?relay`
        FUNCTION `??MT_UtilGpioRead::?relay`,0203H
        PUBLIC `??MT_UtilGpioSetDirection::?relay`
        FUNCTION `??MT_UtilGpioSetDirection::?relay`,0203H
        PUBLIC `??MT_UtilGpioWrite::?relay`
        FUNCTION `??MT_UtilGpioWrite::?relay`,0203H
        PUBLIC `??MT_UtilSetChannels::?relay`
        FUNCTION `??MT_UtilSetChannels::?relay`,0203H
        PUBLIC `??MT_UtilSetPanID::?relay`
        FUNCTION `??MT_UtilSetPanID::?relay`,0203H
        PUBLIC `??MT_UtilSetPreCfgKey::?relay`
        FUNCTION `??MT_UtilSetPreCfgKey::?relay`,0203H
        PUBLIC `??MT_UtilSetSecLevel::?relay`
        FUNCTION `??MT_UtilSetSecLevel::?relay`,0203H
        PUBLIC `??MT_UtilSrcMatchAckAllPending::?relay`
        FUNCTION `??MT_UtilSrcMatchAckAllPending::?relay`,0203H
        PUBLIC `??MT_UtilSrcMatchAddEntry::?relay`
        FUNCTION `??MT_UtilSrcMatchAddEntry::?relay`,0203H
        PUBLIC `??MT_UtilSrcMatchCheckAllPending::?relay`
        FUNCTION `??MT_UtilSrcMatchCheckAllPending::?relay`,0203H
        PUBLIC `??MT_UtilSrcMatchCheckSrcAddr::?relay`
        FUNCTION `??MT_UtilSrcMatchCheckSrcAddr::?relay`,0203H
        PUBLIC `??MT_UtilSrcMatchDeleteEntry::?relay`
        FUNCTION `??MT_UtilSrcMatchDeleteEntry::?relay`,0203H
        PUBLIC `??MT_UtilSrcMatchEnable::?relay`
        FUNCTION `??MT_UtilSrcMatchEnable::?relay`,0203H
        PUBLIC `??MT_UtilTimeAlive::?relay`
        FUNCTION `??MT_UtilTimeAlive::?relay`,0203H
        FUNCTION `??packBindEntry_t::?relay`,0203H
        FUNCTION `??packDev_t::?relay`,0203H
        FUNCTION MT_UtilBindAddEntry,0a1203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC MT_UtilCallbackSub
        FUNCTION MT_UtilCallbackSub,0a1203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_UtilCommandProcessing
        FUNCTION MT_UtilCommandProcessing,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 64, STACK
        PUBLIC MT_UtilDataReq
        FUNCTION MT_UtilDataReq,021203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_UtilGetDeviceInfo
        FUNCTION MT_UtilGetDeviceInfo,0a1203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC MT_UtilGetNvInfo
        FUNCTION MT_UtilGetNvInfo,0a1203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC MT_UtilGpioRead
        FUNCTION MT_UtilGpioRead,021203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 6, STACK
        PUBLIC MT_UtilGpioSetDirection
        FUNCTION MT_UtilGpioSetDirection,0a1203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC MT_UtilGpioWrite
        FUNCTION MT_UtilGpioWrite,0a1203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC MT_UtilSetChannels
        FUNCTION MT_UtilSetChannels,0a1203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC MT_UtilSetPanID
        FUNCTION MT_UtilSetPanID,0a1203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC MT_UtilSetPreCfgKey
        FUNCTION MT_UtilSetPreCfgKey,0a1203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC MT_UtilSetSecLevel
        FUNCTION MT_UtilSetSecLevel,0a1203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC MT_UtilSrcMatchAckAllPending
        FUNCTION MT_UtilSrcMatchAckAllPending,021203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_UtilSrcMatchAddEntry
        FUNCTION MT_UtilSrcMatchAddEntry,021203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_UtilSrcMatchCheckAllPending
        FUNCTION MT_UtilSrcMatchCheckAllPending,021203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC MT_UtilSrcMatchCheckSrcAddr
        FUNCTION MT_UtilSrcMatchCheckSrcAddr,021203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC MT_UtilSrcMatchDeleteEntry
        FUNCTION MT_UtilSrcMatchDeleteEntry,021203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_UtilSrcMatchEnable
        FUNCTION MT_UtilSrcMatchEnable,021203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_UtilTimeAlive
        FUNCTION MT_UtilTimeAlive,0a1203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBWEAK P2DIR
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBWEAK __Constant_3e8
        FUNCTION packBindEntry_t,0a1203H
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION packDev_t,080203H
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
`??AddrMgrEntryLookupExt::?relay` SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
`??AddrMgrEntryLookupNwk::?relay` SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
`??AddrMgrExtAddrValid::?relay` SYMBOL "?relay", AddrMgrExtAddrValid
AssocCount          SYMBOL "AssocCount"
`??AssocCount::?relay` SYMBOL "?relay", AssocCount
AssocFindDevice     SYMBOL "AssocFindDevice"
`??AssocFindDevice::?relay` SYMBOL "?relay", AssocFindDevice
AssocGetWithAddress SYMBOL "AssocGetWithAddress"
`??AssocGetWithAddress::?relay` SYMBOL "?relay", AssocGetWithAddress
AssocMakeList       SYMBOL "AssocMakeList"
`??AssocMakeList::?relay` SYMBOL "?relay", AssocMakeList
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
`??MT_BuildAndSendZToolResponse::?relay` SYMBOL "?relay", MT_BuildAndSendZToolResponse
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NwkPollReq          SYMBOL "NwkPollReq"
`??NwkPollReq::?relay` SYMBOL "?relay", NwkPollReq
ZDSecMgrRequestAppKey SYMBOL "ZDSecMgrRequestAppKey"
`??ZDSecMgrRequestAppKey::?relay` SYMBOL "?relay", ZDSecMgrRequestAppKey
bindAddEntry        SYMBOL "bindAddEntry"
`??bindAddEntry::?relay` SYMBOL "?relay", bindAddEntry
osal_GetSystemClock SYMBOL "osal_GetSystemClock"
`??osal_GetSystemClock::?relay` SYMBOL "?relay", osal_GetSystemClock
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
MT_UtilCallbackSub  SYMBOL "MT_UtilCallbackSub"
`??MT_UtilCallbackSub::?relay` SYMBOL "?relay", MT_UtilCallbackSub
MT_UtilCommandProcessing SYMBOL "MT_UtilCommandProcessing"
`??MT_UtilCommandProcessing::?relay` SYMBOL "?relay", MT_UtilCommandProcessing
MT_UtilDataReq      SYMBOL "MT_UtilDataReq"
`??MT_UtilDataReq::?relay` SYMBOL "?relay", MT_UtilDataReq
MT_UtilGetDeviceInfo SYMBOL "MT_UtilGetDeviceInfo"
`??MT_UtilGetDeviceInfo::?relay` SYMBOL "?relay", MT_UtilGetDeviceInfo
MT_UtilGetNvInfo    SYMBOL "MT_UtilGetNvInfo"
`??MT_UtilGetNvInfo::?relay` SYMBOL "?relay", MT_UtilGetNvInfo
MT_UtilGpioRead     SYMBOL "MT_UtilGpioRead"
`??MT_UtilGpioRead::?relay` SYMBOL "?relay", MT_UtilGpioRead
MT_UtilGpioSetDirection SYMBOL "MT_UtilGpioSetDirection"
`??MT_UtilGpioSetDirection::?relay` SYMBOL "?relay", MT_UtilGpioSetDirection
MT_UtilGpioWrite    SYMBOL "MT_UtilGpioWrite"
`??MT_UtilGpioWrite::?relay` SYMBOL "?relay", MT_UtilGpioWrite
MT_UtilSetChannels  SYMBOL "MT_UtilSetChannels"
`??MT_UtilSetChannels::?relay` SYMBOL "?relay", MT_UtilSetChannels
MT_UtilSetPanID     SYMBOL "MT_UtilSetPanID"
`??MT_UtilSetPanID::?relay` SYMBOL "?relay", MT_UtilSetPanID
MT_UtilSetPreCfgKey SYMBOL "MT_UtilSetPreCfgKey"
`??MT_UtilSetPreCfgKey::?relay` SYMBOL "?relay", MT_UtilSetPreCfgKey
MT_UtilSetSecLevel  SYMBOL "MT_UtilSetSecLevel"
`??MT_UtilSetSecLevel::?relay` SYMBOL "?relay", MT_UtilSetSecLevel
MT_UtilSrcMatchAckAllPending SYMBOL "MT_UtilSrcMatchAckAllPending"
`??MT_UtilSrcMatchAckAllPending::?relay` SYMBOL "?relay", MT_UtilSrcMatchAckAllPending
MT_UtilSrcMatchAddEntry SYMBOL "MT_UtilSrcMatchAddEntry"
`??MT_UtilSrcMatchAddEntry::?relay` SYMBOL "?relay", MT_UtilSrcMatchAddEntry
MT_UtilSrcMatchCheckAllPending SYMBOL "MT_UtilSrcMatchCheckAllPending"
`??MT_UtilSrcMatchCheckAllPending::?relay` SYMBOL "?relay", MT_UtilSrcMatchCheckAllPending
MT_UtilSrcMatchCheckSrcAddr SYMBOL "MT_UtilSrcMatchCheckSrcAddr"
`??MT_UtilSrcMatchCheckSrcAddr::?relay` SYMBOL "?relay", MT_UtilSrcMatchCheckSrcAddr
MT_UtilSrcMatchDeleteEntry SYMBOL "MT_UtilSrcMatchDeleteEntry"
`??MT_UtilSrcMatchDeleteEntry::?relay` SYMBOL "?relay", MT_UtilSrcMatchDeleteEntry
MT_UtilSrcMatchEnable SYMBOL "MT_UtilSrcMatchEnable"
`??MT_UtilSrcMatchEnable::?relay` SYMBOL "?relay", MT_UtilSrcMatchEnable
MT_UtilTimeAlive    SYMBOL "MT_UtilTimeAlive"
`??MT_UtilTimeAlive::?relay` SYMBOL "?relay", MT_UtilTimeAlive

        EXTERN `??AddrMgrEntryLookupExt::?relay`
        FUNCTION `??AddrMgrEntryLookupExt::?relay`,00H
        EXTERN `??AddrMgrEntryLookupNwk::?relay`
        FUNCTION `??AddrMgrEntryLookupNwk::?relay`,00H
        EXTERN `??AddrMgrExtAddrValid::?relay`
        FUNCTION `??AddrMgrExtAddrValid::?relay`,00H
        EXTERN `??AssocCount::?relay`
        FUNCTION `??AssocCount::?relay`,00H
        EXTERN `??AssocFindDevice::?relay`
        FUNCTION `??AssocFindDevice::?relay`,00H
        EXTERN `??AssocGetWithAddress::?relay`
        FUNCTION `??AssocGetWithAddress::?relay`,00H
        EXTERN `??AssocMakeList::?relay`
        FUNCTION `??AssocMakeList::?relay`,00H
        EXTERN `??MT_BuildAndSendZToolResponse::?relay`
        FUNCTION `??MT_BuildAndSendZToolResponse::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NwkPollReq::?relay`
        FUNCTION `??NwkPollReq::?relay`,00H
        EXTERN `??ZDSecMgrRequestAppKey::?relay`
        FUNCTION `??ZDSecMgrRequestAppKey::?relay`,00H
        EXTERN `??bindAddEntry::?relay`
        FUNCTION `??bindAddEntry::?relay`,00H
        EXTERN `??osal_GetSystemClock::?relay`
        FUNCTION `??osal_GetSystemClock::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocCount
        FUNCTION AssocCount,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocFindDevice
        FUNCTION AssocFindDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithAddress
        FUNCTION AssocGetWithAddress,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMakeList
        FUNCTION AssocMakeList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NwkPollReq
        FUNCTION NwkPollReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrRequestAppKey
        FUNCTION ZDSecMgrRequestAppKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _sapiCallbackSub
        EXTERN _zdoCallbackSub
        EXTERN bindAddEntry
        FUNCTION bindAddEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN devState
        EXTERN osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgDeviceLogicalType

// D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh 1.0.0\Components\mt\MT_UTIL.c
//    1 /***************************************************************************************************
//    2   Filename:       MT_UTIL.c
//    3   Revised:        $Date: 2014-08-25 13:49:12 -0700 (Mon, 25 Aug 2014) $
//    4   Revision:       $Revision: 39868 $
//    5 
//    6   Description:    MonitorTest Utility Functions
//    7 
//    8   Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 
//   45 #include "AddrMgr.h"
//   46 
//   47 #include "OnBoard.h"   /* This is here because of the key reading */

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   48 #include "hal_key.h"
//   49 #include "hal_led.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "osal.h"
//   52 #include "NLMEDE.h"
//   53 #include "MT.h"
//   54 #include "MT_UTIL.h"
//   55 #include "MT_MAC.h"
//   56 #include "ssp.h"
//   57 #if defined ZCL_KEY_ESTABLISH
//   58 #include "zcl_key_establish.h"
//   59 #if defined TC_LINKKEY_JOIN
//   60 #include "zcl_se.h"
//   61 #endif
//   62 #endif
//   63 
//   64 #if !defined NONWK
//   65 #include "MT_ZDO.h"
//   66 #include "MT_SAPI.h"
//   67 #include "MT_NWK.h"
//   68 #include "MT_AF.h"
//   69 #include "AssocList.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDSecMgr.h"
//   72 #endif
//   73 
//   74 #if defined MT_SRNG
//   75 #include "hal_srng.h"
//   76 #endif
//   77 
//   78 /***************************************************************************************************
//   79  * CONSTANTS
//   80  ***************************************************************************************************/
//   81 #define MT_UTIL_DEVICE_INFO_RESPONSE_LEN 14
//   82 #define MT_UTIL_STATUS_LEN    1
//   83 #define MT_UTIL_FRM_CTR_LEN   4
//   84 // Status + LinkKeyDataLen + Tx+Rx Frame counter.
//   85 #define MT_APSME_LINKKEY_GET_RSP_LEN (MT_UTIL_STATUS_LEN + SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2))
//   86 // Status + NV id
//   87 #define MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN (MT_UTIL_STATUS_LEN + 2)
//   88 
//   89 /***************************************************************************************************
//   90  * LOCAL VARIABLES
//   91  ***************************************************************************************************/
//   92 #if defined ZCL_KEY_ESTABLISH
//   93 uint8 zcl_key_establish_task_id;
//   94 #endif
//   95 
//   96 #ifdef FEATURE_GET_PRIMARY_IEEE
//   97 /* This feature is not compatible with MSP430 or ARM platforms. */
//   98 __no_init const __xdata char ieeeMac[1] @ 0x780C;
//   99 #endif
//  100 
//  101 /***************************************************************************************************
//  102  * LOCAL FUNCTIONS
//  103  ***************************************************************************************************/
//  104 #ifdef AUTO_PEND
//  105 static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc );
//  106 static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc );
//  107 #endif
//  108 
//  109 #if defined (MT_UTIL_FUNC)
//  110 void MT_UtilGetDeviceInfo(void);
//  111 void MT_UtilGetNvInfo(void);
//  112 void MT_UtilSetPanID(uint8 *pBuf);
//  113 void MT_UtilSetChannels(uint8 *pBuf);
//  114 void MT_UtilSetSecLevel(uint8 *pBuf);
//  115 void MT_UtilSetPreCfgKey(uint8 *pBuf);
//  116 void MT_UtilCallbackSub(uint8 *pData);
//  117 void MT_UtilKeyEvent(uint8 *pBuf);
//  118 void MT_UtilTimeAlive(void);
//  119 void MT_UtilLedControl(uint8 *pBuf);
//  120 void MT_UtilSrcMatchEnable (uint8 *pBuf);
//  121 void MT_UtilSrcMatchAddEntry (uint8 *pBuf);
//  122 void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf);
//  123 void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf);
//  124 void MT_UtilSrcMatchAckAllPending (uint8 *pBuf);
//  125 void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf);
//  126 #ifdef MT_SRNG
//  127 void MT_UtilSrngGen(void);
//  128 #endif
//  129 
//  130 void MT_UtilGpioSetDirection(uint8 *pBuf);
//  131 void MT_UtilGpioRead(uint8 *pBuf);
//  132 void MT_UtilGpioWrite(uint8 *pBuf);
//  133 
//  134 #ifdef FEATURE_GET_PRIMARY_IEEE
//  135 void MT_UtilGetPrimaryIEEE(void);
//  136 #endif
//  137 
//  138 #if !defined NONWK
//  139 void MT_UtilDataReq(uint8 *pBuf);
//  140 static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf);
//  141 static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf);
//  142 #if defined MT_SYS_KEY_MANAGEMENT
//  143 static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf);
//  144 static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf);
//  145 #endif //MT_SYS_KEY_MANAGEMENT
//  146 static void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf);
//  147 static void MT_UtilAssocCount(uint8 *pBuf);
//  148 static void MT_UtilAssocFindDevice(uint8 *pBuf);
//  149 static void MT_UtilAssocGetWithAddress(uint8 *pBuf);
//  150 static void MT_UtilBindAddEntry(uint8 *pBuf);
//  151 static void packDev_t(uint8 *pBuf, associated_devices_t *pDev);
//  152 static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind);
//  153 #if defined ZCL_KEY_ESTABLISH
//  154 static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf);
//  155 static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf);
//  156 #endif // ZCL_KEY_ESTABLISH
//  157 static void MT_UtilSync(void);
//  158 #endif // !defined NONWK
//  159 #endif // MT_UTIL_FUNC
//  160 
//  161 #if defined (MT_UTIL_FUNC)
//  162 /***************************************************************************************************
//  163 * @fn      MT_UtilProcessing
//  164 *
//  165 * @brief   Process all the DEBUG commands that are issued by test tool
//  166 *
//  167 * @param   pBuf  - pointer to received SPI data message
//  168 *
//  169 * @return  status
//  170 ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  171 uint8 MT_UtilCommandProcessing(uint8 *pBuf)
MT_UtilCommandProcessing:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
        CODE
//  172 {
        FUNCALL MT_UtilCommandProcessing, MT_UtilGetDeviceInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilGetNvInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSetPanID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSetChannels
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSetSecLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSetPreCfgKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilCallbackSub
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilTimeAlive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchEnable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchDeleteEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchCheckSrcAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchAckAllPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchCheckAllPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilGpioSetDirection
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilGpioRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilGpioWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilDataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 64, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 64, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, ZDSecMgrRequestAppKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AssocCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AssocFindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, packDev_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AssocGetWithAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, packDev_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilBindAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 61, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 61, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 46
        MOV     A,#-0x2e
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 61)
//  173   uint8 status = MT_RPC_SUCCESS;
        MOV     ?V0,#0x0
//  174 
//  175   switch (pBuf[MT_RPC_POS_CMD1])
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_0 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_1 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_2 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_3 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_4 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_5 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_6 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_8 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
        ADD     A,#-0x6
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_9 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_10 & 0xFFFF
        ADD     A,#-0x3
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_11 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_12 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_13 & 0xFFFF
        ADD     A,#-0xa
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_14 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_15 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_16 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_17 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_18 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_19 & 0xFFFF
        ADD     A,#-0x1b
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_20 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_21 & 0xFFFF
        ADD     A,#-0x7
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_22 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_23 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_24 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_25 & 0xFFFF
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_26 & 0xFFFF
        ADD     A,#0x6d
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_27 & 0xFFFF
        LJMP    ??MT_UtilCommandProcessing_28 & 0xFFFF
//  176   {
//  177     // CC253X MAC Network Processor does not have NV support
//  178 #if !defined(CC253X_MACNP)
//  179   case MT_UTIL_GET_DEVICE_INFO:
//  180     MT_UtilGetDeviceInfo();
??MT_UtilCommandProcessing_0:
        ; Setup parameters for call to function MT_UtilGetDeviceInfo
        LCALL   `??MT_UtilGetDeviceInfo::?relay`; Banked call to: MT_UtilGetDeviceInfo
//  181     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  182 
//  183   case MT_UTIL_GET_NV_INFO:
//  184     MT_UtilGetNvInfo();
??MT_UtilCommandProcessing_1:
        ; Setup parameters for call to function MT_UtilGetNvInfo
        LCALL   `??MT_UtilGetNvInfo::?relay`; Banked call to: MT_UtilGetNvInfo
//  185     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  186 
//  187   case MT_UTIL_SET_PANID:
//  188     MT_UtilSetPanID(pBuf);
??MT_UtilCommandProcessing_2:
        ; Setup parameters for call to function MT_UtilSetPanID
        LCALL   `??MT_UtilSetPanID::?relay`; Banked call to: MT_UtilSetPanID
//  189     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  190 
//  191   case MT_UTIL_SET_CHANNELS:
//  192     MT_UtilSetChannels(pBuf);
??MT_UtilCommandProcessing_3:
        ; Setup parameters for call to function MT_UtilSetChannels
        LCALL   `??MT_UtilSetChannels::?relay`; Banked call to: MT_UtilSetChannels
//  193     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  194 
//  195   case MT_UTIL_SET_SECLEVEL:
//  196     MT_UtilSetSecLevel(pBuf);
??MT_UtilCommandProcessing_4:
        ; Setup parameters for call to function MT_UtilSetSecLevel
        LCALL   `??MT_UtilSetSecLevel::?relay`; Banked call to: MT_UtilSetSecLevel
//  197     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  198 
//  199   case MT_UTIL_SET_PRECFGKEY:
//  200     MT_UtilSetPreCfgKey(pBuf);
??MT_UtilCommandProcessing_5:
        ; Setup parameters for call to function MT_UtilSetPreCfgKey
        LCALL   `??MT_UtilSetPreCfgKey::?relay`; Banked call to: MT_UtilSetPreCfgKey
//  201     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  202 #endif
//  203 
//  204 #ifdef FEATURE_GET_PRIMARY_IEEE
//  205   case MT_UTIL_GET_PRIMARY_IEEE:
//  206     MT_UtilGetPrimaryIEEE();
//  207     break;
//  208 #endif 
//  209 
//  210   case MT_UTIL_CALLBACK_SUB_CMD:
//  211     MT_UtilCallbackSub(pBuf);
??MT_UtilCommandProcessing_6:
        ; Setup parameters for call to function MT_UtilCallbackSub
        LCALL   `??MT_UtilCallbackSub::?relay`; Banked call to: MT_UtilCallbackSub
//  212     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  213 
//  214   case MT_UTIL_KEY_EVENT:
//  215 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  216     MT_UtilKeyEvent(pBuf);
//  217 #endif
//  218     break;
//  219 
//  220   case MT_UTIL_TIME_ALIVE:
//  221     MT_UtilTimeAlive();
??MT_UtilCommandProcessing_8:
        ; Setup parameters for call to function MT_UtilTimeAlive
        LCALL   `??MT_UtilTimeAlive::?relay`; Banked call to: MT_UtilTimeAlive
//  222     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  223 
//  224   case MT_UTIL_LED_CONTROL:
//  225 #if (defined HAL_LED) && (HAL_LED == TRUE)
//  226     MT_UtilLedControl(pBuf);
//  227 #endif
//  228     break;
//  229 
//  230   case MT_UTIL_SRC_MATCH_ENABLE:
//  231     MT_UtilSrcMatchEnable(pBuf);
??MT_UtilCommandProcessing_14:
        ; Setup parameters for call to function MT_UtilSrcMatchEnable
        LCALL   `??MT_UtilSrcMatchEnable::?relay`; Banked call to: MT_UtilSrcMatchEnable
//  232     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  233 
//  234   case MT_UTIL_SRC_MATCH_ADD_ENTRY:
//  235     MT_UtilSrcMatchAddEntry(pBuf);
??MT_UtilCommandProcessing_15:
        ; Setup parameters for call to function MT_UtilSrcMatchAddEntry
        LCALL   `??MT_UtilSrcMatchAddEntry::?relay`; Banked call to: MT_UtilSrcMatchAddEntry
//  236     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  237 
//  238   case MT_UTIL_SRC_MATCH_DEL_ENTRY:
//  239     MT_UtilSrcMatchDeleteEntry(pBuf);
??MT_UtilCommandProcessing_16:
        ; Setup parameters for call to function MT_UtilSrcMatchDeleteEntry
        LCALL   `??MT_UtilSrcMatchDeleteEntry::?relay`; Banked call to: MT_UtilSrcMatchDeleteEntry
//  240     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  241 
//  242   case MT_UTIL_SRC_MATCH_CHECK_SRC_ADDR:
//  243     MT_UtilSrcMatchCheckSrcAddr(pBuf);
??MT_UtilCommandProcessing_17:
        ; Setup parameters for call to function MT_UtilSrcMatchCheckSrcAddr
        LCALL   `??MT_UtilSrcMatchCheckSrcAddr::?relay`; Banked call to: MT_UtilSrcMatchCheckSrcAddr
//  244     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  245 
//  246   case MT_UTIL_SRC_MATCH_ACK_ALL_PENDING:
//  247     MT_UtilSrcMatchAckAllPending(pBuf);
??MT_UtilCommandProcessing_18:
        ; Setup parameters for call to function MT_UtilSrcMatchAckAllPending
        LCALL   `??MT_UtilSrcMatchAckAllPending::?relay`; Banked call to: MT_UtilSrcMatchAckAllPending
//  248     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  249 
//  250   case MT_UTIL_SRC_MATCH_CHECK_ALL_PENDING:
//  251     MT_UtilSrcMatchCheckAllPending(pBuf);
??MT_UtilCommandProcessing_19:
        ; Setup parameters for call to function MT_UtilSrcMatchCheckAllPending
        LCALL   `??MT_UtilSrcMatchCheckAllPending::?relay`; Banked call to: MT_UtilSrcMatchCheckAllPending
//  252     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  253 
//  254   case MT_UTIL_TEST_LOOPBACK:
//  255     MT_BuildAndSendZToolResponse((MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_UTIL), MT_UTIL_TEST_LOOPBACK,
//  256                                  pBuf[MT_RPC_POS_LEN], (pBuf+MT_RPC_FRAME_HDR_SZ));
??MT_UtilCommandProcessing_9:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R2
        ADD     A,#0x3
        MOV     R4,A
        CLR     A
        ADDC    A,R3
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R2,#0x10
        LJMP    ??MT_UtilCommandProcessing_29 & 0xFFFF
//  257     break;
//  258 
//  259   case MT_UTIL_GPIO_SET_DIRECTION:
//  260     MT_UtilGpioSetDirection(pBuf);
??MT_UtilCommandProcessing_11:
        ; Setup parameters for call to function MT_UtilGpioSetDirection
        LCALL   `??MT_UtilGpioSetDirection::?relay`; Banked call to: MT_UtilGpioSetDirection
//  261     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  262 	  
//  263   case MT_UTIL_GPIO_READ:
//  264     MT_UtilGpioRead(pBuf);
??MT_UtilCommandProcessing_12:
        ; Setup parameters for call to function MT_UtilGpioRead
        LCALL   `??MT_UtilGpioRead::?relay`; Banked call to: MT_UtilGpioRead
//  265     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  266   
//  267   case MT_UTIL_GPIO_WRITE:
//  268     MT_UtilGpioWrite(pBuf);
??MT_UtilCommandProcessing_13:
        ; Setup parameters for call to function MT_UtilGpioWrite
        LCALL   `??MT_UtilGpioWrite::?relay`; Banked call to: MT_UtilGpioWrite
//  269     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  270   
//  271 #if !defined NONWK
//  272   case MT_UTIL_DATA_REQ:
//  273     MT_UtilDataReq(pBuf);
??MT_UtilCommandProcessing_10:
        ; Setup parameters for call to function MT_UtilDataReq
        LCALL   `??MT_UtilDataReq::?relay`; Banked call to: MT_UtilDataReq
//  274     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  275 
//  276   case MT_UTIL_ADDRMGR_EXT_ADDR_LOOKUP:
//  277     MT_UtilAddrMgrEntryLookupExt(pBuf);
??MT_UtilCommandProcessing_20:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 64)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 61)
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryLookupExt::?relay`; Banked call to: AddrMgrEntryLookupExt
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,#0x2
        LJMP    ??MT_UtilCommandProcessing_30 & 0xFFFF
//  278     break;
//  279 
//  280   case MT_UTIL_ADDRMGR_NWK_ADDR_LOOKUP:
//  281     MT_UtilAddrMgrEntryLookupNwk(pBuf);
??MT_UtilCommandProcessing_21:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,R2
        ADD     A,#0x3
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??AddrMgrEntryLookupNwk::?relay`; Banked call to: AddrMgrEntryLookupNwk
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x8
        LJMP    ??MT_UtilCommandProcessing_30 & 0xFFFF
//  282     break;
//  283 
//  284 #if defined MT_SYS_KEY_MANAGEMENT
//  285   case MT_UTIL_APSME_LINK_KEY_DATA_GET:
//  286     MT_UtilAPSME_LinkKeyDataGet(pBuf);
//  287     break;
//  288 
//  289   case MT_UTIL_APSME_LINK_KEY_NV_ID_GET:
//  290     MT_UtilAPSME_LinkKeyNvIdGet(pBuf);
//  291     break;
//  292 #endif // MT_SYS_KEY_MANAGEMENT
//  293 
//  294   case MT_UTIL_APSME_REQUEST_KEY_CMD:
//  295     MT_UtilAPSME_RequestKeyCmd(pBuf);
??MT_UtilCommandProcessing_25:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 64)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 61)
        ; Setup parameters for call to function ZDSecMgrRequestAppKey
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??ZDSecMgrRequestAppKey::?relay`; Banked call to: ZDSecMgrRequestAppKey
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_49:
        SJMP    ??MT_UtilCommandProcessing_30
//  296     break;
//  297 
//  298   case MT_UTIL_ASSOC_COUNT:
//  299     MT_UtilAssocCount(pBuf);
??MT_UtilCommandProcessing_22:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,R2
        ADD     A,#0x3
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
        ; Setup parameters for call to function AssocCount
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??AssocCount::?relay`; Banked call to: AssocCount
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R3,#0x2
        LJMP    ??MT_UtilCommandProcessing_31 & 0xFFFF
//  300     break;
//  301 
//  302   case MT_UTIL_ASSOC_FIND_DEVICE:
//  303     MT_UtilAssocFindDevice(pBuf);
??MT_UtilCommandProcessing_23:
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_40:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??AssocFindDevice::?relay`; Banked call to: AssocFindDevice
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R4,?V2
        MOV     R5,?V3
        ; Setup parameters for call to function packDev_t
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??packDev_t::?relay`; Banked call to: packDev_t
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,#0x16
??MT_UtilCommandProcessing_30:
        MOV     A,R6
        MOV     R2,A
        SJMP    ??MT_UtilCommandProcessing_29
//  304     break;
//  305 
//  306   case MT_UTIL_ASSOC_GET_WITH_ADDRESS:
//  307     MT_UtilAssocGetWithAddress(pBuf);
??MT_UtilCommandProcessing_24:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,R2
        ADD     A,#0x3
        MOV     R6,A
        CLR     A
        ADDC    A,R3
        MOV     R7,A
        ; Setup parameters for call to function AddrMgrExtAddrValid
        INC     R2
        INC     R2
        INC     R2
        MOV     R3,A
        LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
        MOV     A,R1
        JZ      ??MT_UtilCommandProcessing_32
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??MT_UtilCommandProcessing_33
??MT_UtilCommandProcessing_32:
        MOV     R2,#0x0
        MOV     R3,#0x0
??MT_UtilCommandProcessing_33:
        ; Setup parameters for call to function AssocGetWithAddress
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        LCALL   `??AssocGetWithAddress::?relay`; Banked call to: AssocGetWithAddress
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R4,?V2
        MOV     R5,?V3
        ; Setup parameters for call to function packDev_t
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??packDev_t::?relay`; Banked call to: packDev_t
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,#0x16
??MT_UtilCommandProcessing_31:
        MOV     R2,?V1
??MT_UtilCommandProcessing_29:
        MOV     R1,#0x67
        SJMP    ??MT_UtilCommandProcessing_34
//  308     break;
//  309 
//  310   case MT_UTIL_BIND_ADD_ENTRY:
//  311     MT_UtilBindAddEntry(pBuf);
??MT_UtilCommandProcessing_26:
        ; Setup parameters for call to function MT_UtilBindAddEntry
        LCALL   `??MT_UtilBindAddEntry::?relay`; Banked call to: MT_UtilBindAddEntry
//  312     break;
        SJMP    ??MT_UtilCommandProcessing_7
//  313 
//  314 #if defined ZCL_KEY_ESTABLISH
//  315   case MT_UTIL_ZCL_KEY_EST_INIT_EST:
//  316     MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(pBuf);
//  317     break;
//  318 
//  319   case MT_UTIL_ZCL_KEY_EST_SIGN:
//  320     MT_UtilzclGeneral_KeyEstablishment_ECDSASign(pBuf);
//  321     break;
//  322 #endif
//  323 
//  324   case MT_UTIL_SYNC_REQ:
//  325     MT_UtilSync();
??MT_UtilCommandProcessing_27:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x0
        MOV     R2,#-0x20
        MOV     R1,#0x47
??MT_UtilCommandProcessing_34:
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  326     break;
        SJMP    ??MT_UtilCommandProcessing_7
//  327 #endif /* !defined NONWK */
//  328 
//  329 #ifdef MT_SRNG
//  330   case MT_UTIL_SRNG_GENERATE:
//  331     MT_UtilSrngGen();
//  332     break;
//  333 #endif
//  334 
//  335   default:
//  336     status = MT_RPC_ERR_COMMAND_ID;
??MT_UtilCommandProcessing_28:
        MOV     ?V0,#0x2
//  337     break;
//  338   }
//  339 
//  340   return status;
??MT_UtilCommandProcessing_7:
        MOV     R1,?V0
        MOV     A,#0x2e
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
//  341 }
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 61)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function MT_UtilCommandProcessing
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 61)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V4,R1
        MOV     ?V5,R2
        MOV     ?V6,#0x0
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 61)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function MT_UtilCommandProcessing
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_2
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-4
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 61)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function MT_UtilCommandProcessing
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_3
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-4
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 61)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        ; Setup parameters for call to function AssocFindDevice
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
//  342 
//  343 /***************************************************************************************************
//  344 * @fn      MT_UtilGetDeviceInfo
//  345 *
//  346 * @brief   The Get Device Info serial message.
//  347 *
//  348 * @param   None.
//  349 *
//  350 * @return  void
//  351 ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  352 void MT_UtilGetDeviceInfo(void)
MT_UtilGetDeviceInfo:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
        CODE
//  353 {
        FUNCALL MT_UtilGetDeviceInfo, AssocMakeList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  354   uint8  *buf;
//  355   uint8  *pBuf;
//  356   uint8  bufLen = MT_UTIL_DEVICE_INFO_RESPONSE_LEN;
        MOV     ?V2,#0xe
//  357   uint16 *assocList = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  358 
//  359 #if !defined NONWK
//  360   uint8  assocCnt = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  361 
//  362   if (ZG_DEVICE_RTR_TYPE)
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??MT_UtilGetDeviceInfo_0
        XRL     A,#0x1
        JNZ     ??MT_UtilGetDeviceInfo_1
//  363   {
//  364     assocList = AssocMakeList( &assocCnt );
??MT_UtilGetDeviceInfo_0:
        ; Setup parameters for call to function AssocMakeList
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??AssocMakeList::?relay`; Banked call to: AssocMakeList
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
//  365     bufLen += (assocCnt * sizeof(uint16));
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        ADD     A,#0xe
        MOV     ?V2,A
//  366   }
//  367 #endif
//  368 
//  369   buf = osal_mem_alloc( bufLen );
??MT_UtilGetDeviceInfo_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V2
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
//  370   if ( buf )
        MOV     A,R2
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??MT_UtilGetDeviceInfo_2 & 0xFFFF
//  371   {
//  372     pBuf = buf;
//  373 
//  374     *pBuf++ = ZSUCCESS; // Status
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     ?V4,DPL
        MOV     ?V5,DPH
//  375 
//  376     osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V6,#0x8
        MOV     ?V7,#0x0
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  377     pBuf += Z_EXTADDR_LEN;
//  378 
//  379 #if defined NONWK
//  380     // Skip past ZStack only parameters for NONWK
//  381     *pBuf++ = 0;
//  382     *pBuf++ = 0;
//  383     *pBuf++ = 0;
//  384     *pBuf++ = 0;
//  385     *pBuf = 0;
//  386 #else
//  387     {
//  388       uint16 shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
//  389       *pBuf++ = LO_UINT16( shortAddr );
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        LCALL   ?Subroutine15 & 0xFFFF
//  390       *pBuf++ = HI_UINT16( shortAddr );
//  391     }
??CrossCallReturnLabel_19:
        MOV     A,R3
        LCALL   ?Subroutine15 & 0xFFFF
//  392 
//  393     /* Return device type */
//  394     *pBuf++ = ZSTACK_DEVICE_BUILD;
??CrossCallReturnLabel_20:
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
//  395 
//  396     /*Return device state */
//  397     *pBuf++ = (uint8)devState;
        MOV     DPTR,#devState
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V4
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  398 
//  399     if (ZG_DEVICE_RTR_TYPE)
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??MT_UtilGetDeviceInfo_3
        XRL     A,#0x1
        JNZ     ??MT_UtilGetDeviceInfo_4
//  400     {
//  401       *pBuf++ = assocCnt;
??MT_UtilGetDeviceInfo_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_32:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,?V4
        ADD     A,#0xd
        MOV     ?V4,A
        JNC     ??MT_UtilGetDeviceInfo_5
        INC     ?V5
//  402 
//  403       if ( assocCnt )
??MT_UtilGetDeviceInfo_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??MT_UtilGetDeviceInfo_6
//  404       {
//  405         uint8 x;
//  406         uint16 *puint16 = assocList;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
//  407 
//  408         for ( x = 0; x < assocCnt; x++, puint16++ )
        MOV     R4,#0x0
??MT_UtilGetDeviceInfo_7:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R4
        CLR     C
        SUBB    A,R2
        JNC     ??MT_UtilGetDeviceInfo_6
//  409         {
//  410           *pBuf++ = LO_UINT16( *puint16 );
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    @DPTR,A
//  411           *pBuf++ = HI_UINT16( *puint16 );
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,?V4
        ADD     A,#0x2
        MOV     ?V4,A
        JNC     ??MT_UtilGetDeviceInfo_8
        INC     ?V5
//  412         }
??MT_UtilGetDeviceInfo_8:
        INC     R4
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        JNC     ??MT_UtilGetDeviceInfo_7
        INC     R1
        SJMP    ??MT_UtilGetDeviceInfo_7
//  413       }
//  414     }
//  415     else
//  416     {
//  417       *pBuf++ = 0;
??MT_UtilGetDeviceInfo_4:
        LCALL   ?Subroutine22 & 0xFFFF
//  418     }
??CrossCallReturnLabel_33:
        CLR     A
        MOVX    @DPTR,A
        MOV     A,?V4
        ADD     A,#0xd
//  419 #endif
//  420 
//  421     MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
//  422                                  MT_UTIL_GET_DEVICE_INFO,
//  423                                  bufLen, buf );
??MT_UtilGetDeviceInfo_6:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     R3,?V2
        MOV     R2,#0x0
        MOV     R1,#0x67
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  424 
//  425     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  426   }
//  427 
//  428   if ( assocList )
??MT_UtilGetDeviceInfo_2:
        MOV     A,R6
        ORL     A,R7
        JZ      ??MT_UtilGetDeviceInfo_9
//  429   {
//  430     osal_mem_free( assocList );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  431   }
//  432 }
??MT_UtilGetDeviceInfo_9:
        MOV     A,#0x1
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function MT_UtilGetDeviceInfo
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOV     A,?V4
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V5
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function MT_UtilGetDeviceInfo
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//  433 
//  434 #ifdef MT_SRNG
//  435 /***************************************************************************************************
//  436 * @fn      MT_UtilSrngGen
//  437 *
//  438 * @brief   Generate Secure Random Numbers
//  439 *
//  440 * @param   None.
//  441 *
//  442 * @return  void
//  443 ***************************************************************************************************/
//  444 void MT_UtilSrngGen(void)
//  445 {
//  446   static uint32 count = 125000; /* 125000 * 8 bits = 1000000 bits */
//  447   uint8 outrng[100];
//  448   uint8 status;
//  449 
//  450   if(count > 0)
//  451   {
//  452     status = ssp_srng_generate((uint8 *)outrng, 100, NULL);
//  453     if (status != SRNG_SUCCESS)
//  454     {
//  455       if(RNG_INIT_ERROR == status)
//  456       {
//  457         ssp_srng_reseed();
//  458       }
//  459       else
//  460       {
//  461         while(1)
//  462         {
//  463           ASM_NOP;
//  464         }
//  465       } /* if(RNG_INIT_ERROR == status) */
//  466     }/*if (status != SRNG_SUCCESS) */
//  467 
//  468     if(count >= 100)
//  469     {
//  470       count -= 100;
//  471     }
//  472     else
//  473     {
//  474       count = 0;
//  475     }
//  476     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ |
//  477                                  (uint8)MT_RPC_SYS_DBG),
//  478                                   MT_DEBUG_MSG,
//  479                                   100,
//  480                                   outrng);
//  481     osal_start_timerEx(MT_TaskID, MT_SRNG_EVENT, 100);
//  482   }
//  483 }
//  484 #endif
//  485 
//  486 /***************************************************************************************************
//  487  * @fn      MT_UtilGetNvInfo
//  488  *
//  489  * @brief   The Get NV Info serial message.
//  490  *
//  491  * @param   None.
//  492  *
//  493  * @return  void
//  494  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  495 void MT_UtilGetNvInfo(void)
MT_UtilGetNvInfo:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function MT_UtilGetNvInfo
        CODE
//  496 {
        FUNCALL MT_UtilGetNvInfo, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  497   uint8 len;
//  498   uint8 stat;
//  499   uint8 *buf;
//  500   uint8 *pBuf;
//  501   uint16 tmp16;
//  502   uint32 tmp32;
//  503 
//  504   /*
//  505     Get required length of buffer
//  506     Status + ExtAddr + ChanList + PanID  + SecLevel + PreCfgKey
//  507   */
//  508   len = 1 + Z_EXTADDR_LEN + 4 + 2 + 1 + SEC_KEY_LEN;
//  509 
//  510   buf = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x20
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
//  511   if ( buf )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??MT_UtilGetNvInfo_0 & 0xFFFF
//  512   {
//  513     /* Assume NV not available */
//  514     osal_memset( buf, 0xFF, len );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#-0x1
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  515 
//  516     /* Skip over status */
//  517     pBuf = buf + 1;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
//  518 
//  519     /* Start with 64-bit extended address */
//  520     stat = osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0,#0x8
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     ?V0,A
//  521     if ( stat ) stat = 0x01;
        JZ      ??MT_UtilGetNvInfo_1
        MOV     ?V0,#0x1
//  522     pBuf += Z_EXTADDR_LEN;
??MT_UtilGetNvInfo_1:
        MOV     A,?V2
        ADD     A,#0x8
        MOV     ?V2,A
        JNC     ??MT_UtilGetNvInfo_2
        INC     ?V3
//  523 
//  524     /* Scan channel list (bit mask) */
//  525     if (  osal_nv_read( ZCD_NV_CHANLIST, 0, sizeof( tmp32 ), &tmp32 ) )
??MT_UtilGetNvInfo_2:
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V4,#0x4
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7c
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        JZ      ??MT_UtilGetNvInfo_3
//  526     {
//  527       stat |= 0x02;
        MOV     A,?V0
        SETB    0xE0 /* A   */.1
        MOV     ?V0,A
        SJMP    ??MT_UtilGetNvInfo_4
//  528     }
//  529     else
//  530     {
//  531       pBuf[0] = BREAK_UINT32( tmp32, 3 );
??MT_UtilGetNvInfo_3:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V4
        LCALL   ?UL_SHR
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOV     A,?V4
        MOVX    @DPTR,A
//  532       pBuf[1] = BREAK_UINT32( tmp32, 2 );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V4
        LCALL   ?UL_SHR
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     A,?V4
        MOVX    @DPTR,A
//  533       pBuf[2] = BREAK_UINT32( tmp32, 1 );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     A,?V5
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  534       pBuf[3] = BREAK_UINT32( tmp32, 0 );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V4
        MOVX    @DPTR,A
//  535     }
//  536     pBuf += sizeof( tmp32 );
??MT_UtilGetNvInfo_4:
        MOV     A,?V2
        ADD     A,#0x4
        MOV     ?V2,A
        JNC     ??MT_UtilGetNvInfo_5
        INC     ?V3
//  537 
//  538     /* ZigBee PanID */
//  539     if ( osal_nv_read( ZCD_NV_PANID, 0, sizeof( tmp16 ), &tmp16 ) )
??MT_UtilGetNvInfo_5:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,?XSP + 0
        MOV     R1,?XSP + 1
        MOV     ?V4,R0
        MOV     ?V5,R1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V4,#0x2
        MOV     ?V5,#0x0
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7d
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        JZ      ??MT_UtilGetNvInfo_6
//  540     {
//  541       stat |= 0x04;
        MOV     A,?V0
        SETB    0xE0 /* A   */.2
        MOV     ?V0,A
        SJMP    ??MT_UtilGetNvInfo_7
//  542     }
//  543     else
//  544     {
//  545       pBuf[0] = LO_UINT16( tmp16 );
??MT_UtilGetNvInfo_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    @DPTR,A
//  546       pBuf[1] = HI_UINT16( tmp16 );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOVX    @DPTR,A
//  547     }
//  548     pBuf += sizeof( tmp16 );
??MT_UtilGetNvInfo_7:
        MOV     A,?V2
        ADD     A,#0x2
        MOV     ?V2,A
        JNC     ??MT_UtilGetNvInfo_8
        INC     ?V3
//  549 
//  550     /* Security level */
//  551     if ( osal_nv_read( ZCD_NV_SECURITY_LEVEL, 0, sizeof( uint8 ), pBuf++ ) )
??MT_UtilGetNvInfo_8:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V4,#0x1
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x61
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     R0,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        MOV     ?V2,DPL
        MOV     ?V3,DPH
        JZ      ??MT_UtilGetNvInfo_9
//  552     {
//  553       stat |= 0x08;
        MOV     A,?V0
        SETB    0xE0 /* A   */.3
        MOV     ?V0,A
//  554     }
//  555     /* Pre-configured security key */
//  556     if ( osal_nv_read( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, pBuf ) )
??MT_UtilGetNvInfo_9:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V2,#0x10
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        JZ      ??MT_UtilGetNvInfo_10
//  557     {
//  558       stat |= 0x10;
        MOV     A,?V0
        SETB    0xE0 /* A   */.4
        MOV     ?V0,A
//  559     }
//  560     /* Status bit mask - bit=1 indicates failure */
//  561     *buf = stat;
??MT_UtilGetNvInfo_10:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0
        MOVX    @DPTR,A
//  562 
//  563     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GET_NV_INFO,
//  564                                   len, buf );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R3,#0x20
        MOV     R2,#0x1
        MOV     R1,#0x67
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  565 
//  566     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  567   }
//  568 }
??MT_UtilGetNvInfo_0:
        MOV     A,#0x6
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock15
//  569 
//  570 /***************************************************************************************************
//  571  * @fn      MT_UtilSetPanID
//  572  *
//  573  * @brief   Set PanID message
//  574  *
//  575  * @param   pBuf - pointer to the data
//  576  *
//  577  * @return  void
//  578  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  579 void MT_UtilSetPanID(uint8 *pBuf)
MT_UtilSetPanID:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function MT_UtilSetPanID
        CODE
//  580 {
        FUNCALL MT_UtilSetPanID, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetPanID, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetPanID, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
//  581   uint16 temp16;
//  582   uint8 retValue;
//  583   uint8 cmdId;
//  584 
//  585   /* parse header */
//  586   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  587   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        JNC     ??MT_UtilSetPanID_0
        INC     R3
//  588 
//  589   temp16 = BUILD_UINT16(pBuf[0], pBuf[1]);
??MT_UtilSetPanID_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  590 
//  591   retValue = osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &temp16);
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#-0x7d
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V0,R2
        MOV     ?V1,R3
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7d
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        LCALL   ?Subroutine16 & 0xFFFF
//  592 
//  593   /* Build and send back the response */
//  594   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
??CrossCallReturnLabel_21:
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  595 }
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock16
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock17
//  596 
//  597 /***************************************************************************************************
//  598  * @fn      MT_UtilSetChannels
//  599  *
//  600  * @brief   Set Channels
//  601  *
//  602  * @param   pBuf - pointer to the data
//  603  *
//  604  * @return  void
//  605  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  606 void MT_UtilSetChannels(uint8 *pBuf)
MT_UtilSetChannels:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function MT_UtilSetChannels
        CODE
//  607 {
        FUNCALL MT_UtilSetChannels, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetChannels, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetChannels, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  608   uint32 tmp32;
//  609   uint8 retValue;
//  610   uint8 cmdId;
//  611 
//  612   /* parse header */
//  613   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  614   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        JNC     ??MT_UtilSetChannels_0
        INC     R3
//  615 
//  616   tmp32 = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
??MT_UtilSetChannels_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0,A
        CLR     A
        MOV     ?V1,A
        MOV     ?V2,A
        MOV     ?V3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        CLR     A
        MOV     ?V5,A
        MOV     ?V6,A
        MOV     ?V7,A
        MOV     A,#0x8
        MOV     R0,#?V4
        LCALL   ?L_SHL
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_ADD
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        CLR     A
        MOV     ?V5,A
        MOV     A,#0x10
        MOV     R0,#?V4
        LCALL   ?L_SHL
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_ADD
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
        CLR     A
        MOV     ?V6,A
        MOV     A,#0x18
        MOV     R0,#?V4
        LCALL   ?L_SHL
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?L_ADD
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  617 
//  618   retValue = osal_nv_write(ZCD_NV_CHANLIST, 0, osal_nv_item_len( ZCD_NV_CHANLIST ), &tmp32);
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#-0x7c
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V0,R2
        MOV     ?V1,R3
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP100_8
        MOV     ?V2,R0
        MOV     ?V3,R1
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7c
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        LCALL   ?Subroutine16 & 0xFFFF
//  619 
//  620   /* Build and send back the response */
//  621   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
??CrossCallReturnLabel_22:
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  622 }
        MOV     A,#0x5
          CFI EndBlock cfiBlock18
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function MT_UtilSetPanID
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function MT_UtilSetChannels
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+-2
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x67
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  623 
//  624 /***************************************************************************************************
//  625  * @fn      MT_UtilSetSecLevel
//  626  *
//  627  * @brief   Set Sec Level
//  628  *
//  629  * @param   byte *msg - pointer to the data
//  630  *
//  631  * @return  void
//  632  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  633 void MT_UtilSetSecLevel(uint8 *pBuf)
MT_UtilSetSecLevel:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function MT_UtilSetSecLevel
        CODE
//  634 {
        FUNCALL MT_UtilSetSecLevel, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetSecLevel, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetSecLevel, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  635   uint8 retValue;
//  636   uint8 cmdId;
//  637 
//  638   /* parse header */
//  639   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
//  640   pBuf += MT_RPC_FRAME_HDR_SZ;
//  641 
//  642   retValue = osal_nv_write( ZCD_NV_SECURITY_LEVEL, 0, osal_nv_item_len( ZCD_NV_SECURITY_LEVEL ), pBuf);
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x61
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x61
          CFI EndBlock cfiBlock23
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  643 
//  644   /* Build and send back the response */
//  645   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  646 
//  647 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     R2,?V0
        MOV     R1,#0x67
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 61)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function MT_UtilSetSecLevel
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+-2
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function MT_UtilSetPreCfgKey
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+-2
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function MT_UtilDataReq
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond28) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond28) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond28) CFA_SP SP+-7
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function MT_UtilSrcMatchEnable
          CFI Conditional ??CrossCallReturnLabel_52
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function MT_UtilSrcMatchAddEntry
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond31) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond31) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond31) CFA_SP SP+-7
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function MT_UtilSrcMatchDeleteEntry
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond32) CFA_SP SP+-7
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function MT_UtilSrcMatchAckAllPending
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond33) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond33) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond33) CFA_SP SP+-7
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function MT_UtilCommandProcessing
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 61)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function MT_UtilSetSecLevel
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+-2
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function MT_UtilSetPreCfgKey
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function MT_UtilDataReq
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond37) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond37) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond37) CFA_SP SP+-7
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38
//  648 
//  649 /***************************************************************************************************
//  650  * @fn      MT_UtilSetPreCfgKey
//  651  *
//  652  * @brief   Set Pre Cfg Key
//  653  *
//  654  * @param   pBuf - pointer to the data
//  655  *
//  656  * @return  void
//  657  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  658 void MT_UtilSetPreCfgKey(uint8 *pBuf)
MT_UtilSetPreCfgKey:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function MT_UtilSetPreCfgKey
        CODE
//  659 {
        FUNCALL MT_UtilSetPreCfgKey, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetPreCfgKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetPreCfgKey, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  660   uint8 retValue;
//  661   uint8 cmdId;
//  662 
//  663   /* parse header */
//  664   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
//  665   pBuf += MT_RPC_FRAME_HDR_SZ;
//  666 
//  667   retValue = osal_nv_write( ZCD_NV_PRECFGKEY, 0, osal_nv_item_len( ZCD_NV_PRECFGKEY ), pBuf);
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x62
        SJMP    ?Subroutine2
//  668 
//  669   /* Build and send back the response */
//  670   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  671 
//  672 }
          CFI EndBlock cfiBlock39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond40 Using cfiCommon0
          CFI Function MT_UtilSetSecLevel
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function MT_UtilSetPreCfgKey
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker42 Using cfiCommon1
          CFI (cfiPicker42) NoFunction
          CFI (cfiPicker42) Picker
        MOV     ?V2,R2
        MOV     ?V3,R3
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_write
        MOV     A,R6
        ADD     A,#0x3
        MOV     ?V4,A
        CLR     A
        ADDC    A,R7
        MOV     ?V5,A
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiPicker42
//  673 
//  674 #ifdef FEATURE_GET_PRIMARY_IEEE
//  675 /***************************************************************************************************
//  676  * @fn      MT_UtilGetPrimaryIEEE
//  677  *
//  678  * @brief   Return a copy of the Primary IEEE address
//  679  *
//  680  * @param   none
//  681  *
//  682  * @return  void
//  683  ***************************************************************************************************/
//  684 void MT_UtilGetPrimaryIEEE(void)
//  685 {
//  686   uint8 i;
//  687   uint8 retBuf[Z_EXTADDR_LEN+1];
//  688 
//  689   retBuf[0] = SUCCESS;
//  690  
//  691   for(i = 1; i <= Z_EXTADDR_LEN; i++)
//  692   {
//  693     retBuf[i] = ieeeMac[i];
//  694   }
//  695   
//  696   MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), 
//  697                                   MT_UTIL_GET_PRIMARY_IEEE, Z_EXTADDR_LEN+1, retBuf );
//  698 }
//  699 #endif /* FEATURE_GET_PRIMARY_IEEE */
//  700 
//  701 /***************************************************************************************************
//  702  * @fn      MT_UtilCallbackSub
//  703  *
//  704  * @brief   The Callback subscribe.
//  705  *
//  706  * @param   pBuf - pointer to the data
//  707  *
//  708  * @return  void
//  709  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  710 void MT_UtilCallbackSub(uint8 *pBuf)
MT_UtilCallbackSub:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function MT_UtilCallbackSub
        CODE
//  711 {
        FUNCALL MT_UtilCallbackSub, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  712   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
//  713   uint8 retValue = ZFailure;
//  714 
//  715 #if defined(MT_MAC_CB_FUNC) || defined(MT_NWK_CB_FUNC) || defined(MT_ZDO_CB_FUNC) || defined(MT_AF_CB_FUNC) || defined(MT_SAPI_CB_FUNC)
//  716   uint8 subSystem;
//  717   uint16 subscribed_command;
//  718 
//  719   // Move past header
//  720   retValue = ZSuccess;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  721   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R4
        ADD     A,#0x3
        MOV     R4,A
        JNC     ??MT_UtilCallbackSub_0
        INC     R5
//  722 
//  723   /* Command */
//  724   subscribed_command = BUILD_UINT16(pBuf[0], pBuf[1]);
??MT_UtilCallbackSub_0:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        CLR     A
        ADDC    A,R1
        MOV     R3,A
//  725   pBuf += 2;
//  726 
//  727   /* Subsystem - 5 bits on the MSB of the command */
//  728   subSystem = HI_UINT16(subscribed_command) & 0x1F ;
        ANL     A,#0x1f
        MOV     R1,A
//  729 
//  730   /* What is the action - SUBSCRIBE or !SUBSCRIBE */
//  731   if (*pBuf)
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??MT_UtilCallbackSub_1
//  732   {
//  733     /* Turn ON */
//  734   #if defined( MT_MAC_CB_FUNC )
//  735     if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
//  736       _macCallbackSub = 0xFFFF;
//  737   #endif
//  738 
//  739   #if defined( MT_NWK_CB_FUNC )
//  740     if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
//  741       _nwkCallbackSub = 0xFFFF;
//  742   #endif
//  743 
//  744   #if defined( MT_ZDO_CB_FUNC )
//  745     if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
        MOV     A,#0x5
        XRL     A,R1
        JZ      ??MT_UtilCallbackSub_2
        MOV     A,#-0x1
        XRL     A,R2
        JNZ     ??MT_UtilCallbackSub_3
        MOV     A,#-0x1
        XRL     A,R3
??MT_UtilCallbackSub_3:
        JNZ     ??MT_UtilCallbackSub_4
//  746       _zdoCallbackSub = 0xFFFFFFFF;
??MT_UtilCallbackSub_2:
        MOV     DPTR,#_zdoCallbackSub
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  747   #endif
//  748 
//  749   #if defined( MT_AF_CB_FUNC )
//  750     if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
//  751       _afCallbackSub = 0xFFFF;
//  752   #endif
//  753 
//  754   #if defined( MT_SAPI_CB_FUNC )
//  755     if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
??MT_UtilCallbackSub_4:
        MOV     A,#0x6
        XRL     A,R1
        JZ      ??MT_UtilCallbackSub_5
        MOV     A,#-0x1
        XRL     A,R2
        JNZ     ??MT_UtilCallbackSub_6
        MOV     A,#-0x1
        XRL     A,R3
??MT_UtilCallbackSub_6:
        JNZ     ??MT_UtilCallbackSub_7
//  756       _sapiCallbackSub = 0xFFFF;
??MT_UtilCallbackSub_5:
        MOV     DPTR,#_sapiCallbackSub
        MOV     A,#-0x1
        SJMP    ??MT_UtilCallbackSub_8
//  757   #endif
//  758   }
//  759   else
//  760   {
//  761     /* Turn OFF */
//  762   #if defined( MT_MAC_CB_FUNC )
//  763     if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
//  764       _macCallbackSub = 0x0000;
//  765   #endif
//  766 
//  767   #if defined( MT_NWK_CB_FUNC )
//  768     if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
//  769       _nwkCallbackSub = 0x0000;
//  770   #endif
//  771 
//  772   #if defined( MT_ZDO_CB_FUNC )
//  773     if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
??MT_UtilCallbackSub_1:
        MOV     A,#0x5
        XRL     A,R1
        JZ      ??MT_UtilCallbackSub_9
        MOV     A,#-0x1
        XRL     A,R2
        JNZ     ??MT_UtilCallbackSub_10
        MOV     A,#-0x1
        XRL     A,R3
??MT_UtilCallbackSub_10:
        JNZ     ??MT_UtilCallbackSub_11
//  774       _zdoCallbackSub = 0x00000000;
??MT_UtilCallbackSub_9:
        MOV     DPTR,#_zdoCallbackSub
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  775   #endif
//  776 
//  777   #if defined( MT_AF_CB_FUNC )
//  778     if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
//  779       _afCallbackSub = 0x0000;
//  780   #endif
//  781 
//  782   #if defined( MT_SAPI_CB_FUNC )
//  783     if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
??MT_UtilCallbackSub_11:
        MOV     A,#0x6
        XRL     A,R1
        JZ      ??MT_UtilCallbackSub_12
        MOV     A,#-0x1
        XRL     A,R2
        JNZ     ??MT_UtilCallbackSub_13
        MOV     A,#-0x1
        XRL     A,R3
??MT_UtilCallbackSub_13:
        JNZ     ??MT_UtilCallbackSub_7
//  784         _sapiCallbackSub = 0x0000;
??MT_UtilCallbackSub_12:
        MOV     DPTR,#_sapiCallbackSub
        CLR     A
??MT_UtilCallbackSub_8:
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  785   #endif
//  786   }
//  787 #endif  // MT_MAC_CB_FUNC || MT_NWK_CB_FUNC || MT_ZDO_CB_FUNC || MT_AF_CB_FUNC || MT_SAPI_CB_FUNC || MT_SAPI_CB_FUNC
//  788 
//  789   /* Build and send back the response */
//  790   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
??MT_UtilCallbackSub_7:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     R2,?V0
        MOV     R1,#0x67
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  791 }
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock43
//  792 
//  793 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  794 /***************************************************************************************************
//  795  * @fn      MT_UtilKeyEvent
//  796  *
//  797  * @brief   Process Key Event
//  798  *
//  799  * @param   pBuf - pointer to the data
//  800  *
//  801  * @return  void
//  802  ***************************************************************************************************/
//  803 void MT_UtilKeyEvent(uint8 *pBuf)
//  804 {
//  805   uint8 x = 0;
//  806   uint8 retValue;
//  807   uint8 cmdId;
//  808 
//  809   /* parse header */
//  810   cmdId = pBuf[MT_RPC_POS_CMD1];
//  811   pBuf += MT_RPC_FRAME_HDR_SZ;
//  812 
//  813   /* Translate between SPI values to device values */
//  814   if ( *pBuf & 0x01 )
//  815     x |= HAL_KEY_SW_1;
//  816   if ( *pBuf & 0x02 )
//  817     x |= HAL_KEY_SW_2;
//  818   if ( *pBuf & 0x04 )
//  819     x |= HAL_KEY_SW_3;
//  820   if ( *pBuf & 0x08 )
//  821     x |= HAL_KEY_SW_4;
//  822 #if defined ( HAL_KEY_SW_5 )
//  823   if ( *pBuf & 0x10 )
//  824     x |= HAL_KEY_SW_5;
//  825 #endif
//  826 #if defined ( HAL_KEY_SW_6 )
//  827   if ( *pBuf & 0x20 )
//  828     x |= HAL_KEY_SW_6;
//  829 #endif
//  830 #if defined ( HAL_KEY_SW_7 )
//  831   if ( *pBuf & 0x40 )
//  832     x |= HAL_KEY_SW_7;
//  833 #endif
//  834 #if defined ( HAL_KEY_SW_8 )
//  835   if ( *pBuf & 0x80 )
//  836     x |= HAL_KEY_SW_8;
//  837 #endif
//  838   pBuf++;
//  839 
//  840   retValue = OnBoard_SendKeys(x, *pBuf);
//  841 
//  842   /* Build and send back the response */
//  843   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  844 }
//  845 #endif
//  846 
//  847 /***************************************************************************************************
//  848  * @fn      MT_UtilTimeAlive
//  849  *
//  850  * @brief   Process Time Alive
//  851  *
//  852  * @param   None.
//  853  *
//  854  * @return  None
//  855  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  856 void MT_UtilTimeAlive(void)
MT_UtilTimeAlive:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function MT_UtilTimeAlive
        CODE
//  857 {
        FUNCALL MT_UtilTimeAlive, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilTimeAlive, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  858   uint8 timeAlive[4];
//  859   uint32 tmp32;
//  860 
//  861   /* Time since last reset (seconds) */
//  862   tmp32 = osal_GetSystemClock() / 1000;
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   `??osal_GetSystemClock::?relay`; Banked call to: osal_GetSystemClock
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?UL_DIV_MOD
//  863 
//  864   /* Convert to high byte first into temp buffer */
//  865   timeAlive[0] = BREAK_UINT32(tmp32, 0);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V4
        MOVX    @DPTR,A
//  866   timeAlive[1] = BREAK_UINT32(tmp32, 1);
        MOV     ?V1,?V5
        MOV     A,?V1
        MOV     ?V0,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0
        MOVX    @DPTR,A
//  867   timeAlive[2] = BREAK_UINT32(tmp32, 2);
        MOV     ?V0,?V4
        MOV     ?V2,?V6
        MOV     ?V3,?V7
        MOV     A,#0x10
        MOV     R0,#?V0
        LCALL   ?UL_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0
        MOVX    @DPTR,A
//  868   timeAlive[3] = BREAK_UINT32(tmp32, 3);
        MOV     A,#0x18
        MOV     R0,#?V4
        LCALL   ?UL_SHR
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V4
        LCALL   ?Subroutine18 & 0xFFFF
//  869 
//  870   /* Build and send back the response */
//  871   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
//  872                                        MT_UTIL_TIME_ALIVE, sizeof(timeAlive), timeAlive);
??CrossCallReturnLabel_23:
        MOV     R3,#0x4
        MOV     R2,#0x9
        MOV     R1,#0x67
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  873 }
        MOV     A,#0x4
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock44
//  874 
//  875 #if (defined HAL_LED) && (HAL_LED == TRUE)
//  876 /***************************************************************************************************
//  877  * @fn      MT_UtilLedControl
//  878  *
//  879  * @brief   Process the LED Control Message
//  880  *
//  881  * @param   pBuf - pointer to the received data
//  882  *
//  883  * @return  None
//  884  ***************************************************************************************************/
//  885 void MT_UtilLedControl(uint8 *pBuf)
//  886 {
//  887   uint8 iLed, Led, iMode, Mode, cmdId;
//  888   uint8 retValue;
//  889 
//  890   /* parse header */
//  891   cmdId = pBuf[MT_RPC_POS_CMD1];
//  892   pBuf += MT_RPC_FRAME_HDR_SZ;
//  893 
//  894   /* LED and Mode */
//  895   iLed = *pBuf++;
//  896   iMode = *pBuf;
//  897 
//  898   if ( iLed == 1 )
//  899     Led = HAL_LED_1;
//  900   else if ( iLed == 2 )
//  901     Led = HAL_LED_2;
//  902   else if ( iLed == 3 )
//  903     Led = HAL_LED_3;
//  904   else if ( iLed == 4 )
//  905     Led = HAL_LED_4;
//  906   else if ( iLed == 0xFF )
//  907     Led = HAL_LED_ALL;
//  908   else
//  909     Led = 0;
//  910   
//  911   if ( iMode == 0 )
//  912     Mode = HAL_LED_MODE_OFF;
//  913   else if ( iMode == 1 )
//  914     Mode = HAL_LED_MODE_ON;
//  915   else if ( iMode == 2 )
//  916     Mode = HAL_LED_MODE_BLINK;
//  917   else if ( iMode == 3 )
//  918     Mode = HAL_LED_MODE_FLASH;
//  919   else if ( iMode == 4 )
//  920     Mode = HAL_LED_MODE_TOGGLE;
//  921   else
//  922     Led = 0;
//  923 
//  924   if ( Led != 0 )
//  925   {
//  926     HalLedSet (Led, Mode);
//  927     retValue = ZSuccess;
//  928   }
//  929   else
//  930   {
//  931     retValue = ZFailure;
//  932   }
//  933 
//  934   /* Build and send back the response */
//  935   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  936 }
//  937 #endif /* HAL_LED */
//  938 
//  939 /***************************************************************************************************
//  940  * @fn          MT_UtilSrcMatchEnable
//  941  *
//  942  * @brief      Enabled AUTOPEND and source address matching.
//  943  *
//  944  * @param      pBuf - Buffer contains the data
//  945  *
//  946  * @return     void
//  947  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  948 void MT_UtilSrcMatchEnable (uint8 *pBuf)
MT_UtilSrcMatchEnable:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function MT_UtilSrcMatchEnable
        CODE
        FUNCALL MT_UtilSrcMatchEnable, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock45
//  949 {
//  950   uint8 retValue, cmdId;
//  951 
//  952   /* Parse header */
//  953   cmdId = pBuf[MT_RPC_POS_CMD1];
//  954   pBuf += MT_RPC_FRAME_HDR_SZ;
//  955 
//  956 #ifdef AUTO_PEND
//  957   /* Call the routine */
//  958   retValue = ZMacSrcMatchEnable();
//  959 #else
//  960   retValue = ZMacUnsupported;
//  961 #endif
//  962 
//  963   /* Build and send back the response */
//  964   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  965 
//  966 }
//  967 
//  968 /***************************************************************************************************
//  969  * @fn          MT_UtilSrcMatchAddEntry
//  970  *
//  971  * @brief       Add a short or extended address to source address table.
//  972  *
//  973  * @param       pBuf - Buffer contains the data
//  974  *
//  975  * @return      void
//  976  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  977 void MT_UtilSrcMatchAddEntry (uint8 *pBuf)
MT_UtilSrcMatchAddEntry:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function MT_UtilSrcMatchAddEntry
        CODE
        FUNCALL MT_UtilSrcMatchAddEntry, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock46
//  978 {
//  979   uint8 retValue, cmdId;
//  980 
//  981   /* Parse header */
//  982   cmdId = pBuf[MT_RPC_POS_CMD1];
//  983   pBuf += MT_RPC_FRAME_HDR_SZ;
//  984 
//  985 #ifdef AUTO_PEND
//  986   uint16 panID;
//  987   zAddrType_t devAddr;
//  988 
//  989   /* Address mode */
//  990   devAddr.addrMode = *pBuf++;
//  991 
//  992   /* Address based on the address mode */
//  993   MT_UtilSpi2Addr( &devAddr, pBuf);
//  994   pBuf += Z_EXTADDR_LEN;
//  995 
//  996   /* PanID */
//  997   panID = BUILD_UINT16( pBuf[0] , pBuf[1] );
//  998 
//  999   /* Call the routine */
// 1000   retValue =  ZMacSrcMatchAddEntry (&devAddr, panID);
// 1001 #else
// 1002   retValue = ZMacUnsupported;
// 1003 #endif
// 1004 
// 1005   /* Build and send back the response */
// 1006   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
// 1007 }
// 1008 
// 1009 /***************************************************************************************************
// 1010  * @fn          MT_UtilSrcMatchDeleteEntry
// 1011  *
// 1012  * @brief      Delete a short or extended address from source address table.
// 1013  *
// 1014  * @param      pBuf - Buffer contains the data
// 1015  *
// 1016  * @return     void
// 1017  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1018 void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf)
MT_UtilSrcMatchDeleteEntry:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function MT_UtilSrcMatchDeleteEntry
        CODE
        FUNCALL MT_UtilSrcMatchDeleteEntry, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock47
// 1019 {
// 1020   uint8 retValue, cmdId;
// 1021 
// 1022   /* Parse header */
// 1023   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1024   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1025 
// 1026 #ifdef AUTO_PEND
// 1027   uint16 panID;
// 1028   zAddrType_t devAddr;
// 1029 
// 1030   /* Address mode */
// 1031   devAddr.addrMode = *pBuf++;
// 1032 
// 1033   /* Address based on the address mode */
// 1034   MT_UtilSpi2Addr( &devAddr, pBuf);
// 1035   pBuf += Z_EXTADDR_LEN;
// 1036 
// 1037   /* PanID */
// 1038   panID = BUILD_UINT16( pBuf[0] , pBuf[1] );
// 1039 
// 1040   /* Call the routine */
// 1041   retValue =  ZMacSrcMatchDeleteEntry (&devAddr, panID);
// 1042 #else
// 1043   retValue = ZMacUnsupported;
// 1044 #endif
// 1045 
// 1046   /* Build and send back the response */
// 1047   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
// 1048 }
// 1049 
// 1050 /***************************************************************************************************
// 1051  * @fn          MT_UtilSrcMatchCheckSrcAddr
// 1052  *
// 1053  * @brief      Check if a short or extended address is in the source address table.
// 1054  *
// 1055  * @param      pBuf - Buffer contains the data
// 1056  *
// 1057  * @return     void
// 1058  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1059 void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf)
MT_UtilSrcMatchCheckSrcAddr:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function MT_UtilSrcMatchCheckSrcAddr
        CODE
// 1060 {
        FUNCALL MT_UtilSrcMatchCheckSrcAddr, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 1061   uint8 cmdId;
// 1062   uint8 retArray[2];
// 1063 
// 1064   /* Parse header */
// 1065   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine10 & 0xFFFF
// 1066   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1067 
// 1068 #if 0  /* Unsupported  */
// 1069   uint16 panID;
// 1070   zAddrType_t devAddr;
// 1071 
// 1072   /* Address mode */
// 1073   devAddr.addrMode = *pBuf++;
// 1074 
// 1075   /* Address based on the address mode */
// 1076   MT_UtilSpi2Addr( &devAddr, pBuf);
// 1077   pBuf += Z_EXTADDR_LEN;
// 1078 
// 1079   /* PanID */
// 1080   panID = BUILD_UINT16( pBuf[0] , pBuf[1] );
// 1081 
// 1082   /* Call the routine */
// 1083   retArray[1] =  ZMacSrcMatchCheckSrcAddr (&devAddr, panID);
// 1084 
// 1085     /* Return failure if the index is invalid */
// 1086   if (retArray[1] == ZMacSrcMatchInvalidIndex )
// 1087   {
// 1088     retArray[0] = ZFailure;
// 1089   }
// 1090   else
// 1091   {
// 1092     retArray[0] = ZSuccess;
// 1093   }
// 1094 #else
// 1095   retArray[0] = ZMacUnsupported;
// 1096   retArray[1] = ZMacSrcMatchInvalidIndex;
??CrossCallReturnLabel_8:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
          CFI EndBlock cfiBlock48
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
// 1097 #endif
// 1098 
// 1099   /* Build and send back the response */
// 1100   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
// 1101 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     R3,#0x2
        MOV     R1,#0x67
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV     A,#0x2
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock49
// 1102 
// 1103 /***************************************************************************************************
// 1104  * @fn          MT_UtilSrcMatchAckAllPending
// 1105  *
// 1106  * @brief       Enabled/disable acknowledging all packets with pending bit set
// 1107  *              It is normally enabled when adding new entries to
// 1108  *              the source address table fails due to the table is full, or
// 1109  *              disabled when more entries are deleted and the table has
// 1110  *              empty slots.
// 1111  *
// 1112  * @param       pBuf - Buffer contains the data
// 1113  *
// 1114  * @return      void
// 1115  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1116 void MT_UtilSrcMatchAckAllPending (uint8 *pBuf)
MT_UtilSrcMatchAckAllPending:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function MT_UtilSrcMatchAckAllPending
        CODE
        FUNCALL MT_UtilSrcMatchAckAllPending, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock50
// 1117 {
// 1118   uint8 retValue, cmdId;
// 1119 
// 1120   /* Parse header */
// 1121   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1122   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1123 
// 1124 #ifdef AUTO_PEND
// 1125   /* Call the routine */
// 1126   retValue = ZMacSrcMatchAckAllPending(*pBuf);
// 1127 #else
// 1128   retValue = ZMacUnsupported;
// 1129 #endif
// 1130 
// 1131   /* Build and send back the response */
// 1132   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
// 1133 }
// 1134 
// 1135 /***************************************************************************************************
// 1136  * @fn          MT_UtilSrcMatchCheckAllPending
// 1137  *
// 1138  * @brief       Check if acknowledging all packets with pending bit set
// 1139  *              is enabled.
// 1140  *
// 1141  * @param       pBuf - Buffer contains the data
// 1142  *
// 1143  * @return      void
// 1144  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1145 void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf)
MT_UtilSrcMatchCheckAllPending:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function MT_UtilSrcMatchCheckAllPending
        CODE
// 1146 {
        FUNCALL MT_UtilSrcMatchCheckAllPending, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 1147   uint8 retArray[2], cmdId;
// 1148 
// 1149   /* Parse header */
// 1150   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine10 & 0xFFFF
// 1151   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1152 
// 1153 #ifdef AUTO_PEND
// 1154   /* Call the routine */
// 1155   retArray[0] = ZMacSuccess;
// 1156   retArray[1] = ZMacSrcMatchCheckAllPending();
// 1157 #else
// 1158   retArray[0] = ZMacUnsupported;
// 1159   retArray[1] = FALSE;
??CrossCallReturnLabel_9:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ?Subroutine5
// 1160 #endif
// 1161 
// 1162   /* Build and send back the response */
// 1163   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
// 1164 }
          CFI EndBlock cfiBlock51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function MT_UtilSrcMatchCheckSrcAddr
          CFI Conditional ??CrossCallReturnLabel_8
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function MT_UtilSrcMatchCheckAllPending
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond53) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond53) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond53) CFA_SP SP+-7
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_36:
        MOVX    @DPTR,A
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54
// 1165 
// 1166 /***************************************************************************************************
// 1167  * SUPPORT
// 1168  ***************************************************************************************************/
// 1169 
// 1170 #ifdef AUTO_PEND
// 1171 /***************************************************************************************************
// 1172  * @fn      MT_UtilRevExtCpy
// 1173  *
// 1174  * @brief
// 1175  *
// 1176  *   Reverse-copy an extended address.
// 1177  *
// 1178  * @param   pDst - Pointer to data destination
// 1179  * @param   pSrc - Pointer to data source
// 1180  *
// 1181  * @return  void
// 1182  ***************************************************************************************************/
// 1183 static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc )
// 1184 {
// 1185   int8 i;
// 1186 
// 1187   for ( i = Z_EXTADDR_LEN - 1; i >= 0; i-- )
// 1188   {
// 1189     *pDst++ = pSrc[i];
// 1190   }
// 1191 }
// 1192 
// 1193 /***************************************************************************************************
// 1194  * @fn      MT_UtilSpi2Addr
// 1195  *
// 1196  * @brief   Copy an address from an SPI message to an address struct.  The
// 1197  *          addrMode in pAddr must already be set.
// 1198  *
// 1199  * @param   pDst - Pointer to address struct
// 1200  * @param   pSrc - Pointer SPI message byte array
// 1201  *
// 1202  * @return  void
// 1203  ***************************************************************************************************/
// 1204 static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc )
// 1205 {
// 1206   if ( pDst->addrMode == Addr16Bit )
// 1207   {
// 1208     pDst->addr.shortAddr = BUILD_UINT16( pSrc[0] , pSrc[1] );
// 1209   }
// 1210   else if ( pDst->addrMode == Addr64Bit )
// 1211   {
// 1212     MT_UtilRevExtCpy( pDst->addr.extAddr, pSrc );
// 1213   }
// 1214 }
// 1215 #endif // AUTO_PEND
// 1216 
// 1217 /***************************************************************************************************
// 1218  * @fn      MT_UtilGpioRead
// 1219  *
// 1220  * @brief   Read values of all GPIOs (P0_0 -P2_4)
// 1221  *
// 1222  * @param   void
// 1223  *
// 1224  * @return  P0, P1, P2, P0DIR, P1DIR, P2DIR
// 1225  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1226 void MT_UtilGpioRead(uint8 *pBuf)
MT_UtilGpioRead:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function MT_UtilGpioRead
        CODE
// 1227 {
        FUNCALL MT_UtilGpioRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 6, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 6, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 6)
// 1228 #if defined ( HAL_MCU_CC2530 )
// 1229   uint8 rtrn[6] = {P0, P1, P2, P0DIR, P1DIR, P2DIR};
        MOV     A,0x80
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,0x90
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        MOVX    @DPTR,A
        MOV     A,0xa0
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        MOVX    @DPTR,A
        MOV     A,0xfd
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        MOVX    @DPTR,A
        MOV     A,0xfe
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        MOVX    @DPTR,A
        MOV     A,0xff
        PUSH    A
          CFI CFA_SP SP+-6
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+-5
        LCALL   ?Subroutine18 & 0xFFFF
// 1230 #else
// 1231   uint8 rtrn[6] = {0, 0, 0, 0, 0, 0};
// 1232 #endif
// 1233   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_READ,
// 1234     6, rtrn);
??CrossCallReturnLabel_25:
        MOV     R3,#0x6
        MOV     R2,#0x15
        MOV     R1,#0x67
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1235 }
        MOV     A,#0x6
        LJMP    ??Subroutine33_0 & 0xFFFF
          CFI EndBlock cfiBlock55
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE _A_P2
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function MT_UtilTimeAlive
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function MT_UtilSrcMatchCheckSrcAddr
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond57) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond57) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond57) CFA_SP SP+-7
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function MT_UtilSrcMatchCheckAllPending
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond58) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond58) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond58) CFA_SP SP+-7
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function MT_UtilGpioRead
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond59) CFA_SP SP+-7
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 6)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function MT_UtilGpioSetDirection
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+-2
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function MT_UtilGpioWrite
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+-2
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62
// 1236 
// 1237 /***************************************************************************************************
// 1238  * @fn      MT_UtilGpioSetDirection
// 1239  *
// 1240  * @brief   Set the direction of a specific GPIO (P0_0 -P2_4)
// 1241  *
// 1242  * @param   port - 0, 1 or 2
// 1243  * @param   bit - 0 - 7
// 1244  * @param   direction - 0 for input, 1 for output
// 1245  *
// 1246  * @return  oldP0DIR, oldP1DIR, oldP2DIR, newP0DIR, newP1DIR, newP2DIR
// 1247  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1248 void MT_UtilGpioSetDirection(uint8 *pBuf)
MT_UtilGpioSetDirection:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI Function MT_UtilGpioSetDirection
        CODE
// 1249 {
        FUNCALL MT_UtilGpioSetDirection, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
// 1250 #if defined ( HAL_MCU_CC2530 )
// 1251   uint8 rtrn[6] = {P0DIR, P1DIR, P2DIR, 0, 0, 0};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0}>`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x6
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     A,0xfd
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,0xfe
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,0xff
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine8 & 0xFFFF
// 1252   uint8 port = pBuf[MT_RPC_POS_DAT0 + 0];
// 1253   uint8 bit = pBuf[MT_RPC_POS_DAT0 + 1];
// 1254   uint8 direction = pBuf[MT_RPC_POS_DAT0 + 2];
// 1255   
// 1256   if (direction == 0)
??CrossCallReturnLabel_4:
        JNZ     ??MT_UtilGpioSetDirection_0
// 1257   {
// 1258     switch (port)
        MOV     A,R1
        JZ      ??MT_UtilGpioSetDirection_1
        DEC     A
        JZ      ??MT_UtilGpioSetDirection_2
        DEC     A
        JZ      ??MT_UtilGpioSetDirection_3
        SJMP    ??MT_UtilGpioSetDirection_4
// 1259     {
// 1260       case 0:
// 1261         P0DIR &= (~ BV(bit));
??MT_UtilGpioSetDirection_1:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        CPL     A
        ANL     0xfd,A
// 1262         break;
        SJMP    ??MT_UtilGpioSetDirection_4
// 1263       case 1:
// 1264         P1DIR &= (~ BV(bit));
??MT_UtilGpioSetDirection_2:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        CPL     A
        ANL     0xfe,A
// 1265         break;
        SJMP    ??MT_UtilGpioSetDirection_4
// 1266       case 2:
// 1267         P2DIR &= (~ BV(bit));
??MT_UtilGpioSetDirection_3:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        CPL     A
        ANL     0xff,A
// 1268         break;
        SJMP    ??MT_UtilGpioSetDirection_4
// 1269     }
// 1270   }
// 1271   else
// 1272   {
// 1273     switch (port)
??MT_UtilGpioSetDirection_0:
        MOV     A,R1
        JZ      ??MT_UtilGpioSetDirection_5
        DEC     A
        JZ      ??MT_UtilGpioSetDirection_6
        DEC     A
        JZ      ??MT_UtilGpioSetDirection_7
        SJMP    ??MT_UtilGpioSetDirection_4
// 1274     {
// 1275       case 0:
// 1276         P0DIR |= BV(bit);
??MT_UtilGpioSetDirection_5:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        ORL     0xfd,A
// 1277         break;
        SJMP    ??MT_UtilGpioSetDirection_4
// 1278       case 1:
// 1279         P1DIR |= BV(bit);
??MT_UtilGpioSetDirection_6:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        ORL     0xfe,A
// 1280         break;
        SJMP    ??MT_UtilGpioSetDirection_4
// 1281       case 2:
// 1282         P2DIR |= BV(bit);
??MT_UtilGpioSetDirection_7:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        ORL     0xff,A
// 1283         break;
// 1284     }
// 1285   }
// 1286   
// 1287   rtrn[3] = P0DIR;
??MT_UtilGpioSetDirection_4:
        MOV     A,0xfd
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1288   rtrn[4] = P1DIR;
        MOV     A,0xfe
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1289   rtrn[5] = P2DIR;
        MOV     A,0xff
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine18 & 0xFFFF
// 1290 #else
// 1291   uint8 rtrn[6] = {0, 0, 0, 0, 0, 0};
// 1292 #endif
// 1293   
// 1294   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_SET_DIRECTION,
// 1295     6, rtrn);
??CrossCallReturnLabel_26:
        MOV     R3,#0x6
        MOV     R2,#0x14
        MOV     R1,#0x67
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1296 }
        MOV     A,#0x6
          CFI EndBlock cfiBlock63
        REQUIRE ?Subroutine4
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock64

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0}>`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
// 1297 
// 1298 /***************************************************************************************************
// 1299  * @fn      MT_UtilGpioWrite
// 1300  *
// 1301  * @brief   Write value of a specific GPIO (P0_0 -P2_4)
// 1302  *
// 1303  * @param   port - 0, 1 or 2
// 1304  * @param   bit - 0 - 7
// 1305  * @param   value - 0 or 1
// 1306  *
// 1307  * @return  oldP0, oldP1, oldP2, newP0, newP1, newP2, P0DIR, P1DIR, P2DIR
// 1308  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1309 void MT_UtilGpioWrite(uint8 *pBuf)
MT_UtilGpioWrite:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI Function MT_UtilGpioWrite
        CODE
// 1310 {
        FUNCALL MT_UtilGpioWrite, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1311 #if defined ( HAL_MCU_CC2530 )
// 1312   uint8 rtrn[9] = {P0, P1, P2, 0, 0, 0, P0DIR, P1DIR, P2DIR};
        MOV     DPTR,#`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0}>`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     A,0x80
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     A,0x90
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,0xa0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,0xfd
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,0xfe
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,0xff
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine8 & 0xFFFF
// 1313   uint8 port = pBuf[MT_RPC_POS_DAT0 + 0];
// 1314   uint8 bit = pBuf[MT_RPC_POS_DAT0 + 1];
// 1315   uint8 value = pBuf[MT_RPC_POS_DAT0 + 2];
// 1316   
// 1317   if (value == 0)
??CrossCallReturnLabel_5:
        JNZ     ??MT_UtilGpioWrite_0
// 1318   {
// 1319     switch (port)
        MOV     A,R1
        JZ      ??MT_UtilGpioWrite_1
        DEC     A
        JZ      ??MT_UtilGpioWrite_2
        DEC     A
        JZ      ??MT_UtilGpioWrite_3
        SJMP    ??MT_UtilGpioWrite_4
// 1320     {
// 1321       case 0:
// 1322         P0 &= (~ BV(bit));
??MT_UtilGpioWrite_1:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        CPL     A
        ANL     0x80,A
// 1323         break;
        SJMP    ??MT_UtilGpioWrite_4
// 1324       case 1:
// 1325         P1 &= (~ BV(bit));
??MT_UtilGpioWrite_2:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        CPL     A
        ANL     0x90,A
// 1326         break;
        SJMP    ??MT_UtilGpioWrite_4
// 1327       case 2:
// 1328         P2 &= (~ BV(bit));
??MT_UtilGpioWrite_3:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        CPL     A
        ANL     0xa0,A
// 1329         break;
        SJMP    ??MT_UtilGpioWrite_4
// 1330     }
// 1331   }
// 1332   else
// 1333   {
// 1334     switch (port)
??MT_UtilGpioWrite_0:
        MOV     A,R1
        JZ      ??MT_UtilGpioWrite_5
        DEC     A
        JZ      ??MT_UtilGpioWrite_6
        DEC     A
        JZ      ??MT_UtilGpioWrite_7
        SJMP    ??MT_UtilGpioWrite_4
// 1335     {
// 1336       case 0:
// 1337         P0 |= BV(bit);
??MT_UtilGpioWrite_5:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        ORL     0x80,A
// 1338         break;
        SJMP    ??MT_UtilGpioWrite_4
// 1339       case 1:
// 1340         P1 |= BV(bit);
??MT_UtilGpioWrite_6:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        ORL     0x90,A
// 1341         break;
        SJMP    ??MT_UtilGpioWrite_4
// 1342       case 2:
// 1343         P2 |= BV(bit);
??MT_UtilGpioWrite_7:
        MOV     ?V0,#0x1
        MOV     ?V1,#0x0
        MOV     A,R0
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,?V0
        ORL     0xa0,A
// 1344         break;
// 1345     }
// 1346   }
// 1347   
// 1348   rtrn[3] = P0;
??MT_UtilGpioWrite_4:
        MOV     A,0x80
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1349   rtrn[4] = P1;
        MOV     A,0x90
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1350   rtrn[5] = P2;
        MOV     A,0xa0
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine18 & 0xFFFF
// 1351  
// 1352 #else
// 1353   uint8 rtrn[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
// 1354 #endif
// 1355 
// 1356   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GPIO_WRITE,
// 1357     9, rtrn);
??CrossCallReturnLabel_27:
        MOV     R3,#0x9
        MOV     R2,#0x16
        MOV     R1,#0x67
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1358 }
        MOV     A,#0x9
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock65
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE _A_P2
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE P2DIR

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function MT_UtilGpioSetDirection
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function MT_UtilGpioWrite
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_44:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0}>`:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
// 1359 
// 1360 #if !defined NONWK
// 1361 /**************************************************************************************************
// 1362  * @fn      MT_UtilDataReq
// 1363  *
// 1364  * @brief   Process the MAC Data Request command.
// 1365  *
// 1366  * @param   pBuf - pointer to the received data
// 1367  *
// 1368  * @return  None
// 1369 **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1370 void MT_UtilDataReq(uint8 *pBuf)
MT_UtilDataReq:
          CFI Block cfiBlock69 Using cfiCommon0
          CFI Function MT_UtilDataReq
        CODE
// 1371 {
        FUNCALL MT_UtilDataReq, NwkPollReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilDataReq, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
// 1372   uint8 rtrn = NwkPollReq(pBuf[MT_RPC_POS_DAT0]);
        ; Setup parameters for call to function NwkPollReq
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??NwkPollReq::?relay`; Banked call to: NwkPollReq
        LCALL   ?Subroutine17 & 0xFFFF
// 1373   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_DATA_REQ,
// 1374                                                                                1, &rtrn);
??CrossCallReturnLabel_51:
        MOV     R2,#0x11
        SJMP    ??Subroutine32_0
// 1375 }
          CFI EndBlock cfiBlock69

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI NoFunction
        PUSH    DPL
          CFI CFA_SP SP+-4
          CFI DPL0 Frame(CFA_SP, 4)
        PUSH    DPH
          CFI CFA_SP SP+-5
          CFI DPH0 Frame(CFA_SP, 5)
        ; Saved register size: 2
        ; Auto size: 1
        ; Saved register size: 2
        ; Auto size: 1
        ; Saved register size: 2
        ; Auto size: 1
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        LCALL   ?Subroutine24 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_52:
          CFI EndBlock cfiBlock70
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 1)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     R1,#0x67
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV     A,#0x1
          CFI EndBlock cfiBlock71
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
          CFI Valid
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function MT_UtilSrcMatchCheckSrcAddr
          CFI Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_8
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-9
          CFI CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function MT_UtilSrcMatchCheckAllPending
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_9
          CFI (cfiCond74) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond74) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond74) CFA_SP SP+-9
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function MT_UtilSrcMatchEnable
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond75) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond75) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond75) CFA_SP SP+-7
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function MT_UtilSrcMatchAddEntry
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond76) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond76) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond76) CFA_SP SP+-7
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function MT_UtilSrcMatchDeleteEntry
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond77) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond77) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond77) CFA_SP SP+-7
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function MT_UtilSrcMatchAckAllPending
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond78) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond78) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond78) CFA_SP SP+-7
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0xb
        RET
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79
// 1376 
// 1377 /***************************************************************************************************
// 1378  * @fn      MT_UtilAddrMgrEntryLookupExt
// 1379  *
// 1380  * @brief   Proxy the AddrMgrEntryLookupExt() function.
// 1381  *
// 1382  * @param   pBuf - pointer to the received buffer
// 1383  *
// 1384  * @return  void
// 1385  ***************************************************************************************************/
// 1386 static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf)
// 1387 {
// 1388   uint8 nwkAddr[2];
// 1389   AddrMgrEntry_t entry;
// 1390   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1391   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1392 
// 1393   osal_memcpy(entry.extAddr, pBuf, Z_EXTADDR_LEN);
// 1394   (void)AddrMgrEntryLookupExt(&entry);
// 1395 
// 1396   nwkAddr[0] = LO_UINT16(entry.nwkAddr);
// 1397   nwkAddr[1] = HI_UINT16(entry.nwkAddr);
// 1398   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
// 1399                                        cmdId, sizeof(uint16), nwkAddr);
// 1400 }
// 1401 
// 1402 /***************************************************************************************************
// 1403  * @fn      MT_UtilAddrMgrEntryLookupNwk
// 1404  *
// 1405  * @brief   Proxy the AddrMgrEntryLookupNwk() function.
// 1406  *
// 1407  * @param   pBuf - pointer to the received buffer
// 1408  *
// 1409  * @return  void
// 1410  ***************************************************************************************************/
// 1411 static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf)
// 1412 {
// 1413   AddrMgrEntry_t entry;
// 1414   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1415   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1416 
// 1417   entry.nwkAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1418   (void)AddrMgrEntryLookupNwk(&entry);
// 1419 
// 1420   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
// 1421                                        cmdId, Z_EXTADDR_LEN, entry.extAddr);
// 1422 }
// 1423 
// 1424 #if defined MT_SYS_KEY_MANAGEMENT
// 1425 /***************************************************************************************************
// 1426  * @fn      MT_UtilAPSME_LinkKeyDataGet
// 1427  *
// 1428  * @brief   Retrieves APS Link Key data from NV.
// 1429  *
// 1430  * @param   pBuf - pointer to the received buffer
// 1431  *
// 1432  * @return  void
// 1433  ***************************************************************************************************/
// 1434 static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf)
// 1435 {
// 1436   uint8 rsp[MT_APSME_LINKKEY_GET_RSP_LEN];
// 1437   APSME_LinkKeyData_t *pData = NULL;
// 1438   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1439   uint16 apsLinkKeyNvId;
// 1440   uint32 *apsRxFrmCntr;
// 1441   uint32 *apsTxFrmCntr;
// 1442 
// 1443   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1444 
// 1445   *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
// 1446 
// 1447   if (SUCCESS == *rsp)
// 1448   {
// 1449     pData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
// 1450 
// 1451     if (pData != NULL)
// 1452     {
// 1453       // retrieve key from NV
// 1454       if ( osal_nv_read( apsLinkKeyNvId, 0,
// 1455                         sizeof(APSME_LinkKeyData_t), pData) == SUCCESS)
// 1456 
// 1457       {
// 1458         uint8 *ptr = rsp+1;
// 1459         apsRxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr;
// 1460         apsTxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr;
// 1461 
// 1462         (void)osal_memcpy(ptr, pData->key, SEC_KEY_LEN);
// 1463         ptr += SEC_KEY_LEN;
// 1464         *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 0);
// 1465         *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 1);
// 1466         *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 2);
// 1467         *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 3);
// 1468         *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 0);
// 1469         *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 1);
// 1470         *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 2);
// 1471         *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 3);
// 1472       }
// 1473 
// 1474       // clear copy of key in RAM
// 1475       osal_memset( pData, 0x00, sizeof(APSME_LinkKeyData_t) );
// 1476 
// 1477       osal_mem_free(pData);
// 1478     }
// 1479   }
// 1480   else
// 1481   {
// 1482     // set data key and counters 0xFF
// 1483     osal_memset(&rsp[1], 0xFF, SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2));
// 1484   }
// 1485 
// 1486   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1487                                        MT_APSME_LINKKEY_GET_RSP_LEN, rsp);
// 1488 
// 1489   // clear key data
// 1490   osal_memset(rsp, 0x00, MT_APSME_LINKKEY_GET_RSP_LEN);
// 1491 
// 1492 }
// 1493 
// 1494 /***************************************************************************************************
// 1495  * @fn      MT_UtilAPSME_LinkKeyNvIdGet
// 1496  *
// 1497  * @brief   Retrieves APS Link Key NV ID from the entry table.
// 1498  *
// 1499  * @param   pBuf - pointer to the received buffer
// 1500  *
// 1501  * @return  void
// 1502  ***************************************************************************************************/
// 1503 static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf)
// 1504 {
// 1505   uint8 rsp[MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN];
// 1506   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1507   uint16 apsLinkKeyNvId;
// 1508 
// 1509   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1510 
// 1511   *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
// 1512 
// 1513   if (SUCCESS == *rsp)
// 1514   {
// 1515     rsp[1] = LO_UINT16(apsLinkKeyNvId);
// 1516     rsp[2] = HI_UINT16(apsLinkKeyNvId);
// 1517   }
// 1518   else
// 1519   {
// 1520     // send failure response with invalid NV ID
// 1521     osal_memset(&rsp[1], 0xFF, 2);
// 1522   }
// 1523 
// 1524   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1525                                        MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN, rsp);
// 1526 }
// 1527 #endif // MT_SYS_KEY_MANAGEMENT
// 1528 
// 1529 /***************************************************************************************************
// 1530  * @fn      MT_UtilAPSME_RequestKeyCmd
// 1531  *
// 1532  * @brief   Send RequestKey command message to TC for a specific partner Address.
// 1533  *
// 1534  * @param   pBuf  - pointer to the received buffer
// 1535  *
// 1536  * @return  void
// 1537  ***************************************************************************************************/
// 1538 void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf)
// 1539 {
// 1540   uint8 cmdId;
// 1541   uint8 partnerAddr[Z_EXTADDR_LEN];
// 1542   uint8 retValue;
// 1543 
// 1544   // parse header
// 1545   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1546   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1547 
// 1548   /* PartnerAddress */
// 1549   osal_memcpy(partnerAddr, pBuf, Z_EXTADDR_LEN);
// 1550 
// 1551   retValue = (uint8)ZDSecMgrRequestAppKey(partnerAddr);
// 1552 
// 1553   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
// 1554 }
// 1555 
// 1556 /***************************************************************************************************
// 1557  * @fn      MT_UtilAssocCount
// 1558  *
// 1559  * @brief   Proxy the AssocCount() function.
// 1560  *
// 1561  * @param   pBuf - pointer to the received buffer
// 1562  *
// 1563  * @return  void
// 1564  ***************************************************************************************************/
// 1565 static void MT_UtilAssocCount(uint8 *pBuf)
// 1566 {
// 1567   uint16 cnt;
// 1568   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1569   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1570 
// 1571   cnt = AssocCount(pBuf[0], pBuf[1]);
// 1572   pBuf[0] = LO_UINT16(cnt);
// 1573   pBuf[1] = HI_UINT16(cnt);
// 1574 
// 1575   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, pBuf);
// 1576 }
// 1577 
// 1578 /***************************************************************************************************
// 1579  * @fn      MT_UtilAssocFindDevice
// 1580  *
// 1581  * @brief   Get an associated device by index.
// 1582  *
// 1583  * @param   pBuf - pointer to the received buffer
// 1584  *
// 1585  * @return  void
// 1586  ***************************************************************************************************/
// 1587 static void MT_UtilAssocFindDevice(uint8 *pBuf)
// 1588 {
// 1589   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1590   uint8 buf[sizeof(associated_devices_t)];
// 1591 
// 1592   packDev_t(buf, AssocFindDevice(pBuf[MT_RPC_FRAME_HDR_SZ]));
// 1593   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1594                                        sizeof(associated_devices_t), buf);
// 1595 }
// 1596 
// 1597 /***************************************************************************************************
// 1598  * @fn      MT_UtilAssocGetWithAddress
// 1599  *
// 1600  * @brief   Get an associated device by address.
// 1601  *
// 1602  * @param   pBuf - pointer to the received buffer
// 1603  *
// 1604  * @return  void
// 1605  ***************************************************************************************************/
// 1606 static void MT_UtilAssocGetWithAddress(uint8 *pBuf)
// 1607 {
// 1608   extern associated_devices_t *AssocGetWithAddress(uint8 *extAddr, uint16 shortAddr);
// 1609   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1610   uint8 buf[sizeof(associated_devices_t)];
// 1611 
// 1612   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1613   packDev_t(buf, AssocGetWithAddress(((AddrMgrExtAddrValid(pBuf)) ? pBuf : NULL),
// 1614                                   BUILD_UINT16(pBuf[Z_EXTADDR_LEN], pBuf[Z_EXTADDR_LEN+1])));
// 1615 
// 1616   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1617                                        sizeof(associated_devices_t), buf);
// 1618 }
// 1619 
// 1620 /***************************************************************************************************
// 1621  * @fn      MT_UtilBindAddEntry
// 1622  *
// 1623  * @brief   Add Binding Entry into Local Table.
// 1624  *
// 1625  * @param   pBuf - pointer to the received buffer
// 1626  *
// 1627  * @return  void
// 1628  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1629 static void MT_UtilBindAddEntry(uint8 *pBuf)
MT_UtilBindAddEntry:
          CFI Block cfiBlock80 Using cfiCommon0
          CFI Function MT_UtilBindAddEntry
        CODE
// 1630 {
        FUNCALL MT_UtilBindAddEntry, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, bindAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, packBindEntry_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1631   uint8 srcEp;
// 1632   zAddrType_t dstAddr;
// 1633   uint8 dstEp;
// 1634   uint8 numClusterIds;
// 1635   uint16 *clusterIds;
// 1636   uint8 buf[sizeof(BindingEntry_t)];
// 1637   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V7,A
// 1638   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1639 
// 1640   // Initialize the return buffer
// 1641   osal_memset( buf, 0xFF, sizeof(BindingEntry_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
// 1642   buf[2] = 0xFE;    // set the default value of INVALID_NODE_ADDR
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
// 1643   buf[3] = 0xFF;    // set the default value of INVALID_NODE_ADDR
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1644 
// 1645   srcEp = *pBuf++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V4,A
// 1646 
// 1647   // Destination Address mode
// 1648   dstAddr.addrMode = *pBuf++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x5
        MOV     R6,A
        JNC     ??MT_UtilBindAddEntry_0
        INC     R7
// 1649 
// 1650   // Destination Address
// 1651   if ( dstAddr.addrMode == Addr64Bit )
??MT_UtilBindAddEntry_0:
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??MT_UtilBindAddEntry_1
// 1652   {
// 1653     uint8 *ptr; // Use this additional pointer because *pBuf is incremented later for both cases
// 1654 
// 1655     ptr = pBuf;
// 1656     osal_cpyExtAddr( dstAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP    ??MT_UtilBindAddEntry_2
// 1657   }
// 1658   else
// 1659   {
// 1660     dstAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_UtilBindAddEntry_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1661   }
// 1662   // The short address occupies LSB two bytes
// 1663   pBuf += Z_EXTADDR_LEN;
// 1664 
// 1665   // DstEPInt
// 1666   dstEp = *pBuf++;
??MT_UtilBindAddEntry_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
// 1667 
// 1668   numClusterIds = *pBuf++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V6,A
// 1669 
// 1670   if ( numClusterIds > 0 )
        JZ      ??MT_UtilBindAddEntry_3
// 1671   {
// 1672     // copy list of clusters
// 1673     clusterIds = (uint16 *)osal_mem_alloc( numClusterIds * sizeof(uint16) );
        ADD     A,0xE0 /* A   */
        MOV     ?V2,A
        CLR     A
        RLC     A
        MOV     ?V3,A
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V2
        MOV     R3,A
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
// 1674     osal_memcpy( clusterIds, pBuf, numClusterIds * sizeof(uint16));
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        ADD     A,#0xa
        MOV     ?V8,A
        CLR     A
        ADDC    A,R7
        MOV     ?V9,A
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 45)
        MOV     R4,?V2
        MOV     R5,?V3
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
// 1675 
// 1676     if ( clusterIds != NULL )
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??MT_UtilBindAddEntry_3
// 1677     {
// 1678       // The response to MT interface has to be pack into buf
// 1679       packBindEntry_t( buf, bindAddEntry( srcEp, &dstAddr, dstEp, numClusterIds, clusterIds ));
        ; Setup parameters for call to function bindAddEntry
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     R5,?V6
        MOV     R4,?V5
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        MOV     R1,?V4
        LCALL   `??bindAddEntry::?relay`; Banked call to: bindAddEntry
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R4,?V2
        MOV     R5,?V3
        ; Setup parameters for call to function packBindEntry_t
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??packBindEntry_t::?relay`; Banked call to: packBindEntry_t
// 1680 
// 1681       osal_mem_free( clusterIds );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1682     }
// 1683   }
// 1684 
// 1685   MT_BuildAndSendZToolResponse( ( (uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL ),
// 1686                                 cmdId, sizeof(BindingEntry_t), buf );
??MT_UtilBindAddEntry_3:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,#0xe
        MOV     R2,?V7
        MOV     R1,#0x67
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1687 }
        MOV     A,#0x17
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock80
// 1688 
// 1689 /***************************************************************************************************
// 1690  * @fn      packDev_t
// 1691  *
// 1692  * @brief   Pack an associated_devices_t structure into a byte buffer (pack INVALID_NODE_ADDR if
// 1693  *          the pDev parameter is NULL).
// 1694  *
// 1695  * @param   pBuf - pointer to the buffer into which to pack the structure.
// 1696  * @param   pDev - pointer to the structure.
// 1697  *
// 1698  * @return  void
// 1699  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1700 static void packDev_t(uint8 *pBuf, associated_devices_t *pDev)
packDev_t:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI Function packDev_t
        CODE
// 1701 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 1702   if (NULL == pDev)
        MOV     A,R4
        ORL     A,R5
        JNZ     ??packDev_t_0
// 1703   {
// 1704     uint16 rtrn = INVALID_NODE_ADDR;
// 1705     *pBuf++ = LO_UINT16(rtrn);
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2
        MOVX    @DPTR,A
// 1706     *pBuf++ = HI_UINT16(rtrn);
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x2
        LJMP    ??packDev_t_1 & 0xFFFF
// 1707   }
// 1708   else
// 1709   {
// 1710     *pBuf++ = LO_UINT16(pDev->shortAddr);
??packDev_t_0:
        LCALL   ?Subroutine6 & 0xFFFF
// 1711     *pBuf++ = HI_UINT16(pDev->shortAddr);
// 1712     *pBuf++ = LO_UINT16(pDev->addrIdx);
// 1713     *pBuf++ = HI_UINT16(pDev->addrIdx);
// 1714     *pBuf++ = pDev->nodeRelation;
// 1715     *pBuf++ = pDev->devStatus;
??CrossCallReturnLabel_0:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine12 & 0xFFFF
// 1716     *pBuf++ = pDev->assocCnt;
??CrossCallReturnLabel_12:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ?Subroutine19 & 0xFFFF
// 1717     *pBuf++ = pDev->age;
??CrossCallReturnLabel_53:
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_10:
        LCALL   ??Subroutine34_0 & 0xFFFF
// 1718     *pBuf++ = pDev->linkInfo.txCounter;
??CrossCallReturnLabel_55:
        INC     DPTR
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_11:
        LCALL   ?Subroutine19 & 0xFFFF
// 1719     *pBuf++ = pDev->linkInfo.txCost;
??CrossCallReturnLabel_54:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ??Subroutine34_0 & 0xFFFF
// 1720     *pBuf++ = pDev->linkInfo.rxLqi;
??CrossCallReturnLabel_56:
        INC     DPTR
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_7:
        INC     DPTR
        MOVX    @DPTR,A
// 1721     *pBuf++ = pDev->linkInfo.inKeySeqNum;
        MOV     A,R4
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,#0xb
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1722     *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 0);
        MOV     A,R4
        ADD     A,#0xc
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,R2
        ADD     A,#0xc
        LCALL   ?Subroutine14 & 0xFFFF
// 1723     *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 1);
??CrossCallReturnLabel_16:
        LCALL   ?L_MOV_X
        MOV     A,?V1
        MOV     ?V0,A
        MOV     A,R2
        ADD     A,#0xd
        LCALL   ?Subroutine14 & 0xFFFF
// 1724     *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 2);
??CrossCallReturnLabel_17:
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0
        LCALL   ?UL_SHR
        MOV     A,R2
        ADD     A,#0xe
        LCALL   ?Subroutine14 & 0xFFFF
// 1725     *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 3);
??CrossCallReturnLabel_18:
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V0
        LCALL   ?UL_SHR
        MOV     A,R2
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOV     A,?V0
        MOVX    @DPTR,A
// 1726     *pBuf++ = LO_UINT16(pDev->linkInfo.txFailure);
        MOV     A,R4
        ADD     A,#0x10
        MOV     R0,A
        CLR     A
        ADDC    A,R5
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1727     *pBuf++ = HI_UINT16(pDev->linkInfo.txFailure);
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,#0x11
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x12
// 1728   }
// 1729 }
??packDev_t_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond82 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function packDev_t
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker84 Using cfiCommon1
          CFI (cfiPicker84) NoFunction
          CFI (cfiPicker84) Picker
        INC     DPTR
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiPicker84
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function packDev_t
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function packDev_t
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function packDev_t
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker89 Using cfiCommon1
          CFI (cfiPicker89) NoFunction
          CFI (cfiPicker89) Picker
        MOVX    @DPTR,A
        MOV     DPL,R4
        MOV     DPH,R5
        RET
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiPicker89

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond90 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function packDev_t
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function packDev_t
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond92) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond92) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond92) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond92) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond92) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond92) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond92) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond92) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond92) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond92) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond92) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond92) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond92) CFA_SP SP+-2
          CFI (cfiCond92) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker93 Using cfiCommon1
          CFI (cfiPicker93) NoFunction
          CFI (cfiPicker93) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,R3
        MOV     DPH,A
        MOV     A,?V0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiPicker93

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond94 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function packDev_t
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_35:
        RET
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond97 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function packDev_t
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_11
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+-4
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function packDev_t
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_6
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+-4
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function packDev_t
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_7
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-4
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_47:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function packDev_t
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_34:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104
// 1730 
// 1731 /***************************************************************************************************
// 1732  * @fn      packBindEntry_t
// 1733  *
// 1734  * @brief   Pack a BindingEntry_t structure into a byte buffer (pack INVALID_NODE_ADDR
// 1735  *          as dstIdx if the pBind parameter is NULL).
// 1736  *
// 1737  * @param   pBuf - pointer to the buffer into which to pack the structure.
// 1738  * @param   pBind - pointer to the structure.
// 1739  *
// 1740  * @return  void
// 1741  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1742 static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind)
packBindEntry_t:
          CFI Block cfiBlock105 Using cfiCommon0
          CFI Function packBindEntry_t
        CODE
// 1743 {
        FUNCALL packBindEntry_t, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
// 1744   if ( NULL == pBind )
        MOV     A,R4
        ORL     A,R5
        JNZ     ??packBindEntry_t_0
// 1745   {
// 1746     uint16 rtrn = INVALID_NODE_ADDR;
// 1747     *pBuf++ = 0xFF;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1748     *pBuf++ = 0xFF;
        INC     DPTR
        MOVX    @DPTR,A
// 1749     *pBuf++ = LO_UINT16(rtrn);
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        DEC     A
        LCALL   ?Subroutine28 & 0xFFFF
// 1750     *pBuf++ = HI_UINT16(rtrn);
// 1751     *pBuf++ = 0xFF;
// 1752     *pBuf++ = 0xFF;
// 1753 
// 1754   }
??CrossCallReturnLabel_45:
        INC     A
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_28:
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_29:
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,R2
        ADD     A,#0x6
        SJMP    ??packBindEntry_t_1
// 1755   else
// 1756   {
// 1757     *pBuf++ = pBind->srcEP;
??packBindEntry_t_0:
        LCALL   ?Subroutine6 & 0xFFFF
// 1758     *pBuf++ = pBind->dstGroupMode;
// 1759     *pBuf++ = LO_UINT16( pBind->dstIdx );
// 1760     *pBuf++ = HI_UINT16( pBind->dstIdx );
// 1761     *pBuf++ = pBind->dstEP;
// 1762     *pBuf++ = pBind->numClusterIds;
??CrossCallReturnLabel_1:
        MOV     A,R4
        ADD     A,#0x5
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_31:
        LCALL   ?Subroutine12 & 0xFFFF
// 1763 
// 1764     osal_memcpy( pBuf, pBind->clusterIdList, pBind->numClusterIds * sizeof(uint16));
??CrossCallReturnLabel_13:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R4
        ADD     A,#0x6
        MOV     ?V0,A
        CLR     A
        ADDC    A,R5
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,0xE0 /* A   */
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        MOV     A,R2
        ADD     A,#0x6
        MOV     R2,A
        JNC     ??packBindEntry_t_2
        INC     R3
??packBindEntry_t_2:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1765   }
// 1766 }
??packBindEntry_t_1:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock105

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond106 Using cfiCommon0
          CFI Function MT_UtilGpioSetDirection
          CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function MT_UtilGpioWrite
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_5
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-4
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function packBindEntry_t
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function packBindEntry_t
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_28
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-4
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function packBindEntry_t
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_29
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-4
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker111 Using cfiCommon1
          CFI (cfiPicker111) NoFunction
          CFI (cfiPicker111) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiPicker111

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond112 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function packBindEntry_t
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+-2
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker114 Using cfiCommon1
          CFI (cfiPicker114) NoFunction
          CFI (cfiPicker114) Picker
        MOV     R0,A
        CLR     A
        ADDC    A,R5
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiPicker114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond115 Using cfiCommon0
          CFI Function packBindEntry_t
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function packBindEntry_t
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_46:
        INC     DPTR
        RET
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond118 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function packBindEntry_t
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+-2
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_39:
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function packDev_t
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_12
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+-4
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function packBindEntry_t
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_13
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+-4
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_48:
        RET
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function packDev_t
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_11
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-6
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function packDev_t
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_6
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-6
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function packDev_t
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_34, ??CrossCallReturnLabel_7
          CFI (cfiCond128) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond128) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond128) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond128) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond128) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond128) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond128) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond128) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond128) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond128) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond128) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond128) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond128) CFA_SP SP+-6
          CFI (cfiCond128) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function packDev_t
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_38
          CFI (cfiCond129) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond129) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond129) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond129) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond129) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond129) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond129) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond129) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond129) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond129) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond129) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond129) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond129) CFA_SP SP+-4
          CFI (cfiCond129) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function packDev_t
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_12
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+-6
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function packBindEntry_t
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_13
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-6
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker132 Using cfiCommon1
          CFI (cfiPicker132) NoFunction
          CFI (cfiPicker132) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiPicker132

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond133 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function packBindEntry_t
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+-2
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_58:
        MOVX    @DPTR,A
        MOV     A,R4
        ADD     A,#0x2
        MOV     R0,A
        CLR     A
        ADDC    A,R5
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_57:
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_42:
        MOVX    @DPTR,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_43:
        INC     DPTR
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function packBindEntry_t
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_1
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+-4
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function packDev_t
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_0
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+-4
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function packBindEntry_t
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_1
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+-4
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_59:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function packBindEntry_t
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_1
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-4
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function packDev_t
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_0
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-6
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function packBindEntry_t
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_1
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+-6
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function packDev_t
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_0
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-6
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function packBindEntry_t
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_1
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-6
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker147 Using cfiCommon1
          CFI (cfiPicker147) NoFunction
          CFI (cfiPicker147) Picker
        INC     DPTR
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiPicker147
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond148 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function packBindEntry_t
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_1
          CFI (cfiCond149) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond149) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond149) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond149) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond149) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond149) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond149) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond149) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond149) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond149) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond149) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond149) CFA_SP SP+-4
          CFI (cfiCond149) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function packDev_t
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_0
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+-4
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function packBindEntry_t
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_1
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-4
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function packDev_t
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_0
          CFI (cfiCond152) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond152) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond152) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond152) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond152) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond152) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond152) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond152) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond152) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond152) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond152) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond152) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond152) CFA_SP SP+-6
          CFI (cfiCond152) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function packBindEntry_t
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_42, ??CrossCallReturnLabel_1
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+-6
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function packDev_t
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_0
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+-6
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function packBindEntry_t
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_1
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+-6
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker156 Using cfiCommon1
          CFI (cfiPicker156) NoFunction
          CFI (cfiPicker156) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        RET
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiPicker156

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilCommandProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGetDeviceInfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGetDeviceInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGetNvInfo::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGetNvInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilSetPanID::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSetPanID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilSetChannels::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSetChannels

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilSetSecLevel::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSetSecLevel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilSetPreCfgKey::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSetPreCfgKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilCallbackSub::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilCallbackSub

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilTimeAlive::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilTimeAlive

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilSrcMatchEnable::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilSrcMatchAddEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilSrcMatchDeleteEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchDeleteEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilSrcMatchCheckSrcAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchCheckSrcAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilSrcMatchAckAllPending::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchAckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilSrcMatchCheckAllPending::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchCheckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGpioRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGpioRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGpioSetDirection::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGpioSetDirection

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilGpioWrite::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGpioWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilDataReq::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilDataReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_UtilBindAddEntry::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilBindAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??packDev_t::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packDev_t

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??packBindEntry_t::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packBindEntry_t

        END
// 1767 
// 1768 #if defined ZCL_KEY_ESTABLISH
// 1769 /***************************************************************************************************
// 1770  * @fn      MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment
// 1771  *
// 1772  * @brief   Proxy the zclGeneral_KeyEstablish_InitiateKeyEstablishment() function.
// 1773  *
// 1774  * @param   pBuf - pointer to the received buffer
// 1775  *
// 1776  * @return  void
// 1777  ***************************************************************************************************/
// 1778 static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf)
// 1779 {
// 1780   afAddrType_t partnerAddr;
// 1781   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1782   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1783 
// 1784   partnerAddr.panId = 0;  // Not an inter-pan message.
// 1785   partnerAddr.endPoint = pBuf[2];
// 1786   partnerAddr.addrMode = (afAddrMode_t)pBuf[3];
// 1787   if (afAddr64Bit == partnerAddr.addrMode)
// 1788   {
// 1789     (void)osal_memcpy(partnerAddr.addr.extAddr, pBuf+4, Z_EXTADDR_LEN);
// 1790   }
// 1791   else
// 1792   {
// 1793     partnerAddr.addr.shortAddr = BUILD_UINT16(pBuf[4], pBuf[5]);
// 1794   }
// 1795 
// 1796   zcl_key_establish_task_id = pBuf[0];
// 1797   *pBuf = zclGeneral_KeyEstablish_InitiateKeyEstablishment(MT_TaskID, &partnerAddr, pBuf[1]);
// 1798   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
// 1799 }
// 1800 
// 1801 /***************************************************************************************************
// 1802  * @fn      MT_UtilzclGeneral_KeyEstablishment_ECDSASign
// 1803  *
// 1804  * @brief   Proxy the zclGeneral_KeyEstablishment_ECDSASign() function.
// 1805  *
// 1806  * @param   pBuf - pointer to the received buffer
// 1807  *
// 1808  * @return  void
// 1809  ***************************************************************************************************/
// 1810 static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf)
// 1811 {
// 1812 #if defined TC_LINKKEY_JOIN
// 1813   uint8 *output = osal_mem_alloc(SE_PROFILE_SIGNATURE_LENGTH+1);
// 1814   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1815   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1816 
// 1817   if (NULL == output)
// 1818   {
// 1819     *pBuf = FAILURE;
// 1820     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
// 1821   }
// 1822   else
// 1823   {
// 1824     *output = zclGeneral_KeyEstablishment_ECDSASign(pBuf+1, *pBuf, output+1);
// 1825     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1826                                          SE_PROFILE_SIGNATURE_LENGTH+1, output);
// 1827     osal_mem_free(output);
// 1828   }
// 1829 #endif
// 1830 }
// 1831 
// 1832 /***************************************************************************************************
// 1833  * @fn      MT_UtilKeyEstablishInd
// 1834  *
// 1835  * @brief   Proxy the ZCL_KEY_ESTABLISH_IND command.
// 1836  *
// 1837  * @param   pInd - Pointer to a keyEstablishmentInd_t structure.
// 1838  *
// 1839  * @return  None
// 1840  ***************************************************************************************************/
// 1841 void MT_UtilKeyEstablishInd(keyEstablishmentInd_t *pInd)
// 1842 {
// 1843   uint8 msg[6];
// 1844 
// 1845   msg[0] = zcl_key_establish_task_id;
// 1846   msg[1] = pInd->hdr.event;
// 1847   msg[2] = pInd->hdr.status;
// 1848   msg[3] = pInd->waitTime;
// 1849   msg[4] = LO_UINT16(pInd->keyEstablishmentSuite);
// 1850   msg[5] = HI_UINT16(pInd->keyEstablishmentSuite);
// 1851 
// 1852   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_UTIL),
// 1853                                        MT_UTIL_ZCL_KEY_ESTABLISH_IND, 6, msg);
// 1854 }
// 1855 #endif
// 1856 
// 1857 /***************************************************************************************************
// 1858  * @fn      MT_UtilSync
// 1859  *
// 1860  * @brief   Process the MT_UTIL_SYNC command
// 1861  *
// 1862  * @param   None
// 1863  *
// 1864  * @return  None
// 1865  ***************************************************************************************************/
// 1866 static void MT_UtilSync(void)
// 1867 {
// 1868  MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_UTIL),MT_UTIL_SYNC_REQ,0,0);
// 1869 }
// 1870 #endif /* !defined NONWK */
// 1871 #endif /* MT_UTIL_FUNC */
// 1872 /**************************************************************************************************
// 1873  **************************************************************************************************/
// 
// 3 946 bytes in segment BANKED_CODE
//   132 bytes in segment BANK_RELAYS
//     6 bytes in segment SFR_AN
//    19 bytes in segment XDATA_ROM_C
// 
// 4 078 bytes of CODE  memory
//    15 bytes of CONST memory (+ 4 bytes shared)
//     0 bytes of DATA  memory (+ 6 bytes shared)
//
//Errors: none
//Warnings: none
