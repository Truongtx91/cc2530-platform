###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                21/Nov/2018  13:52:09
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Components\mt\MT_SAPI.c
#    Command line       =  
#        -f "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -f "D:\1.embedded\kit\cc2530\Reference\Z-Stack
#        Mesh 1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Components\mt\MT_SAPI.c" -D FEATURE_SYSTEM_STATS -D POWER_SAVING
#        -lC "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
#        Pe001,Pa010 -o "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --no_code_motion
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\MT_SAPI.lst
#    Object file        =  
#        D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\MT_SAPI.r51
#
###############################################################################

D:\1.embedded\kit\cc2530\Reference\Z-Stack Mesh 1.0.0\Components\mt\MT_SAPI.c
      1          /**************************************************************************************************
      2            Filename:       MT_SAPI.c
      3            Revised:        $Date: 2012-11-21 06:19:37 -0800 (Wed, 21 Nov 2012) $
      4            Revision:       $Revision: 32270 $
      5          
      6            Description:    MonitorTest functions for the Simple API.
      7          
      8          
      9            Copyright 2007-2012 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          
     39          **************************************************************************************************/
     40          
     41          /***************************************************************************************************
     42           * INCLUDES
     43           ***************************************************************************************************/
     44          #include "ZComDef.h"
     45          #include "AddrMgr.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "OnBoard.h"
     49          #include "MT.h"
     50          #include "MT_SAPI.h"
     51          #include "MT_UART.h"
     52          
     53          /***************************************************************************************************
     54           * GLOBAL VARIABLES
     55           ***************************************************************************************************/
     56          #if defined ( MT_SAPI_CB_FUNC )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     57          uint16 _sapiCallbackSub;
   \                     _sapiCallbackSub:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     58          #endif
     59          
     60          /***************************************************************************************************
     61           * LOCAL FUNCTIONS
     62           ***************************************************************************************************/
     63          void MT_SapiSystemReset(uint8 *pBuf);
     64          void MT_SapiStart(uint8* pBuf);
     65          void MT_SapiBindDevice(uint8 *pBuf);
     66          void MT_SapiAllowBind(uint8 *pBuf);
     67          void MT_SapiSendData(uint8 *pBuf);
     68          void MT_SapiReadCfg(uint8 *pBuf);
     69          void MT_SapiWriteCfg(uint8 *pBuf);
     70          void MT_SapiGetDevInfo(uint8 *pBuf);
     71          void MT_SapiFindDev(uint8 *pBuf);
     72          void MT_SapiPermitJoin(uint8 *pBuf);
     73          void MT_SapiAppRegister(uint8 *pBuf);
     74          
     75          #if defined ( MT_SAPI_FUNC )
     76          /***************************************************************************************************
     77           * @fn      MT_sapiCommandProcessing
     78           *
     79           * @brief   Process all the SAPI commands that are issued by test tool
     80           *
     81           * @param   pBuf - pointer to received buffer
     82           *
     83           * @return  MT_RPC_SUCCESS if command processed, MT_RPC_ERR_COMMAND_ID if not.
     84           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     85          uint8 MT_SapiCommandProcessing(uint8 *pBuf)
   \                     MT_SapiCommandProcessing:
     86          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     87            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV     R6,#0x0
     88          
     89            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6020         JZ      ??MT_SapiCommandProcessing_0
   \   000010   14           DEC     A
   \   000011   6022         JZ      ??MT_SapiCommandProcessing_1
   \   000013   14           DEC     A
   \   000014   6024         JZ      ??MT_SapiCommandProcessing_2
   \   000016   14           DEC     A
   \   000017   6026         JZ      ??MT_SapiCommandProcessing_3
   \   000019   14           DEC     A
   \   00001A   6028         JZ      ??MT_SapiCommandProcessing_4
   \   00001C   14           DEC     A
   \   00001D   602A         JZ      ??MT_SapiCommandProcessing_5
   \   00001F   14           DEC     A
   \   000020   602C         JZ      ??MT_SapiCommandProcessing_6
   \   000022   14           DEC     A
   \   000023   602E         JZ      ??MT_SapiCommandProcessing_7
   \   000025   14           DEC     A
   \   000026   6030         JZ      ??MT_SapiCommandProcessing_8
   \   000028   14           DEC     A
   \   000029   6032         JZ      ??MT_SapiCommandProcessing_9
   \   00002B   14           DEC     A
   \   00002C   6034         JZ      ??MT_SapiCommandProcessing_10
   \   00002E   8037         SJMP    ??MT_SapiCommandProcessing_11
     90            {
     91              case MT_SAPI_START_REQ:
     92                MT_SapiStart(pBuf);
   \                     ??MT_SapiCommandProcessing_0:
   \   000030                ; Setup parameters for call to function MT_SapiStart
   \   000030   12....       LCALL   `??MT_SapiStart::?relay`; Banked call to: MT_SapiStart
     93                break;
   \   000033   8034         SJMP    ??MT_SapiCommandProcessing_12
     94          
     95              case MT_SAPI_BIND_DEVICE_REQ:
     96                MT_SapiBindDevice(pBuf);
   \                     ??MT_SapiCommandProcessing_1:
   \   000035                ; Setup parameters for call to function MT_SapiBindDevice
   \   000035   12....       LCALL   `??MT_SapiBindDevice::?relay`; Banked call to: MT_SapiBindDevice
     97                break;
   \   000038   802F         SJMP    ??MT_SapiCommandProcessing_12
     98          
     99              case MT_SAPI_ALLOW_BIND_REQ:
    100                MT_SapiAllowBind(pBuf);
   \                     ??MT_SapiCommandProcessing_2:
   \   00003A                ; Setup parameters for call to function MT_SapiAllowBind
   \   00003A   12....       LCALL   `??MT_SapiAllowBind::?relay`; Banked call to: MT_SapiAllowBind
    101                break;
   \   00003D   802A         SJMP    ??MT_SapiCommandProcessing_12
    102          
    103              case MT_SAPI_SEND_DATA_REQ:
    104                MT_SapiSendData(pBuf);
   \                     ??MT_SapiCommandProcessing_3:
   \   00003F                ; Setup parameters for call to function MT_SapiSendData
   \   00003F   12....       LCALL   `??MT_SapiSendData::?relay`; Banked call to: MT_SapiSendData
    105                break;
   \   000042   8025         SJMP    ??MT_SapiCommandProcessing_12
    106          
    107              case MT_SAPI_READ_CFG_REQ:
    108                MT_SapiReadCfg(pBuf);
   \                     ??MT_SapiCommandProcessing_4:
   \   000044                ; Setup parameters for call to function MT_SapiReadCfg
   \   000044   12....       LCALL   `??MT_SapiReadCfg::?relay`; Banked call to: MT_SapiReadCfg
    109                break;
   \   000047   8020         SJMP    ??MT_SapiCommandProcessing_12
    110          
    111              case MT_SAPI_WRITE_CFG_REQ:
    112                MT_SapiWriteCfg(pBuf);
   \                     ??MT_SapiCommandProcessing_5:
   \   000049                ; Setup parameters for call to function MT_SapiWriteCfg
   \   000049   12....       LCALL   `??MT_SapiWriteCfg::?relay`; Banked call to: MT_SapiWriteCfg
    113                break;
   \   00004C   801B         SJMP    ??MT_SapiCommandProcessing_12
    114          
    115              case MT_SAPI_GET_DEV_INFO_REQ:
    116                MT_SapiGetDevInfo(pBuf);
   \                     ??MT_SapiCommandProcessing_6:
   \   00004E                ; Setup parameters for call to function MT_SapiGetDevInfo
   \   00004E   12....       LCALL   `??MT_SapiGetDevInfo::?relay`; Banked call to: MT_SapiGetDevInfo
    117                break;
   \   000051   8016         SJMP    ??MT_SapiCommandProcessing_12
    118          
    119              case MT_SAPI_FIND_DEV_REQ:
    120                MT_SapiFindDev(pBuf);
   \                     ??MT_SapiCommandProcessing_7:
   \   000053                ; Setup parameters for call to function MT_SapiFindDev
   \   000053   12....       LCALL   `??MT_SapiFindDev::?relay`; Banked call to: MT_SapiFindDev
    121                break;
   \   000056   8011         SJMP    ??MT_SapiCommandProcessing_12
    122          
    123              case MT_SAPI_PMT_JOIN_REQ:
    124                MT_SapiPermitJoin(pBuf);
   \                     ??MT_SapiCommandProcessing_8:
   \   000058                ; Setup parameters for call to function MT_SapiPermitJoin
   \   000058   12....       LCALL   `??MT_SapiPermitJoin::?relay`; Banked call to: MT_SapiPermitJoin
    125                break;
   \   00005B   800C         SJMP    ??MT_SapiCommandProcessing_12
    126          
    127              case MT_SAPI_SYS_RESET:
    128                MT_SapiSystemReset(pBuf);
   \                     ??MT_SapiCommandProcessing_9:
   \   00005D                ; Setup parameters for call to function zb_SystemReset
   \   00005D   12....       LCALL   `??zb_SystemReset::?relay`; Banked call to: zb_SystemReset
    129                break;
   \   000060   8007         SJMP    ??MT_SapiCommandProcessing_12
    130          
    131              case MT_SAPI_APP_REGISTER_REQ:
    132                MT_SapiAppRegister(pBuf);
   \                     ??MT_SapiCommandProcessing_10:
   \   000062                ; Setup parameters for call to function MT_SapiAppRegister
   \   000062   12....       LCALL   `??MT_SapiAppRegister::?relay`; Banked call to: MT_SapiAppRegister
    133                break;
   \   000065   8002         SJMP    ??MT_SapiCommandProcessing_12
    134          
    135              default:
    136                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_SapiCommandProcessing_11:
   \   000067   7E02         MOV     R6,#0x2
    137                break;
    138            }
    139          
    140            return status;
   \                     ??MT_SapiCommandProcessing_12:
   \   000069   EE           MOV     A,R6
   \   00006A   F9           MOV     R1,A
   \   00006B   80..         SJMP    ??Subroutine9_0
    141          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    142          
    143          /***************************************************************************************************
    144           * @fn          MT_SapiSystemReset
    145           *
    146           * @brief       Process SAPI System Reset
    147           *
    148           * @param       pBuf - pointer to received buffer
    149           *
    150           * @return      none
    151           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    152          void MT_SapiSystemReset(uint8 *pBuf)
   \                     MT_SapiSystemReset:
    153          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    154            zb_SystemReset();
   \   000004                ; Setup parameters for call to function zb_SystemReset
   \   000004   12....       LCALL   `??zb_SystemReset::?relay`; Banked call to: zb_SystemReset
    155          }
   \   000007   02....       LJMP    ??Subroutine12_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine12_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    156          
    157          /***************************************************************************************************
    158           * @fn          MT_SapiStart
    159           *
    160           * @brief       Process SAPI Start
    161           *
    162           * @param       pBuf - pointer to received buffer
    163           *
    164           * @return      none
    165           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    166          void MT_SapiStart(uint8 *pBuf)
   \                     MT_SapiStart:
    167          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    168            zb_StartRequest();
   \   000004                ; Setup parameters for call to function zb_StartRequest
   \   000004   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    169          
    170            /* Build and send back the response */
    171            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SAPI), MT_SAPI_START_REQ, 0, NULL);
   \   000007                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7966         MOV     R1,#0x66
   \   000011   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    172          }
   \   000014   02....       LJMP    ??Subroutine12_0 & 0xFFFF
    173          /***************************************************************************************************
    174           * @fn          MT_SapiAppRegister
    175           *
    176           * @brief       Process SAPI App Register
    177           *
    178           * @param       pBuf - pointer to received buffer
    179           *
    180           * @return      none
    181           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    182          void MT_SapiAppRegister(uint8 *pBuf)
   \                     MT_SapiAppRegister:
    183          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    184            uint8 ret = ZApsIllegalRequest;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   74B3         MOV     A,#-0x4d
   \   000011   F0           MOVX    @DPTR,A
    185          
    186            /* check if sapi is alredy registered with an endpoint */
    187            if ( (sapi_epDesc.endPoint == 0) && (*pBuf != 0) )
   \   000012   90....       MOV     DPTR,#sapi_epDesc
   \   000015   E0           MOVX    A,@DPTR
   \   000016   704E         JNZ     ??MT_SapiAppRegister_0
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6047         JZ      ??MT_SapiAppRegister_0
    188            {
    189              ret = MT_BuildEndpointDesc( pBuf+MT_RPC_FRAME_HDR_SZ, &sapi_epDesc );
   \   00001F                ; Setup parameters for call to function MT_BuildEndpointDesc
   \   00001F   7C..         MOV     R4,#sapi_epDesc & 0xff
   \   000021   7D..         MOV     R5,#(sapi_epDesc >> 8) & 0xff
   \   000023   EA           MOV     A,R2
   \   000024   2403         ADD     A,#0x3
   \   000026   FA           MOV     R2,A
   \   000027   5001         JNC     ??MT_SapiAppRegister_1
   \   000029   0B           INC     R3
   \                     ??MT_SapiAppRegister_1:
   \   00002A   12....       LCALL   `??MT_BuildEndpointDesc::?relay`; Banked call to: MT_BuildEndpointDesc
   \   00002D   E9           MOV     A,R1
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   F0           MOVX    @DPTR,A
    190              if ( ret == ZSuccess )
   \   000035   7021         JNZ     ??MT_SapiAppRegister_2
    191              {
    192                ret = afRegister( &sapi_epDesc );
   \   000037                ; Setup parameters for call to function afRegister
   \   000037   7A..         MOV     R2,#sapi_epDesc & 0xff
   \   000039   7B..         MOV     R3,#(sapi_epDesc >> 8) & 0xff
   \   00003B   12....       LCALL   `??afRegister::?relay`; Banked call to: afRegister
   \   00003E   E9           MOV     A,R1
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   F0           MOVX    @DPTR,A
    193                // Turn off match descriptor response by default
    194                afSetMatch(sapi_epDesc.simpleDesc->EndPoint, FALSE);
   \   000046                ; Setup parameters for call to function afSetMatch
   \   000046   7A00         MOV     R2,#0x0
   \   000048   90....       MOV     DPTR,#sapi_epDesc + 3
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F8           MOV     R0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F583         MOV     DPH,A
   \   000051   8882         MOV     DPL,R0
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   12....       LCALL   `??afSetMatch::?relay`; Banked call to: afSetMatch
    195              }
    196          
    197              if ( ret != ZSuccess )
   \                     ??MT_SapiAppRegister_2:
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   6005         JZ      ??MT_SapiAppRegister_0
    198              {
    199                sapi_epDesc.endPoint = 0;
   \   000061   90....       MOV     DPTR,#sapi_epDesc
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
    200              }
    201            }
    202          
    203            /* Build and send back the response */
    204            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SAPI),
    205                                                 MT_SAPI_APP_REGISTER_REQ, 1, &ret);
   \                     ??MT_SapiAppRegister_0:
   \   000066                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000066   AC..         MOV     R4,?XSP + 0
   \   000068   AD..         MOV     R5,?XSP + 1
   \   00006A   7B01         MOV     R3,#0x1
   \   00006C   7A0A         MOV     R2,#0xa
   \   00006E   7966         MOV     R1,#0x66
   \   000070   02....       LJMP    ?Subroutine1 & 0xFFFF
    206          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000003   7401         MOV     A,#0x1
   \   000005                REQUIRE ??Subroutine11_0
   \   000005                ; // Fall through to label ??Subroutine11_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine11_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine12_0
   \   000003                ; // Fall through to label ??Subroutine12_0
    207          /***************************************************************************************************
    208           * @fn          MT_SapiBindDevice
    209           *
    210           * @brief       Process SAPI Bind Device Command
    211           *
    212           * @param       pBuf - pointer to received buffer
    213           *
    214           * @return      none
    215           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    216          void MT_SapiBindDevice(uint8 *pBuf)
   \                     MT_SapiBindDevice:
    217          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    218            uint8 cmdId;
    219          
    220            /* parse header */
    221            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0,A
    222            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   EE           MOV     A,R6
   \   000013   2403         ADD     A,#0x3
   \   000015   FE           MOV     R6,A
   \   000016   5001         JNC     ??MT_SapiBindDevice_0
   \   000018   0F           INC     R7
    223          
    224            if (AddrMgrExtAddrValid(pBuf+3))
   \                     ??MT_SapiBindDevice_0:
   \   000019                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000019   2403         ADD     A,#0x3
   \   00001B   FA           MOV     R2,A
   \   00001C   E4           CLR     A
   \   00001D   3F           ADDC    A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   `??AddrMgrExtAddrValid::?relay`; Banked call to: AddrMgrExtAddrValid
   \   000022   E9           MOV     A,R1
   \   000023   6012         JZ      ??MT_SapiBindDevice_1
    225            {
    226              zb_BindDevice(pBuf[0], BUILD_UINT16(pBuf[1], pBuf[2]), &pBuf[3]);
   \   000025                ; Setup parameters for call to function zb_BindDevice
   \   000025   EE           MOV     A,R6
   \   000026   2403         ADD     A,#0x3
   \   000028   FC           MOV     R4,A
   \   000029   E4           CLR     A
   \   00002A   3F           ADDC    A,R7
   \   00002B   FD           MOV     R5,A
   \   00002C   12....       LCALL   ?Subroutine5 & 0xFFFF
    227            }
   \                     ??CrossCallReturnLabel_5:
   \   00002F   F8           MOV     R0,A
   \   000030   E4           CLR     A
   \   000031   C8           XCH     A,R0
   \   000032   F9           MOV     R1,A
   \   000033   EA           MOV     A,R2
   \   000034   28           ADD     A,R0
   \   000035   800A         SJMP    ??MT_SapiBindDevice_2
    228            else
    229            {
    230              zb_BindDevice(pBuf[0], BUILD_UINT16(pBuf[1], pBuf[2]), (uint8 *)NULL);
   \                     ??MT_SapiBindDevice_1:
   \   000037                ; Setup parameters for call to function zb_BindDevice
   \   000037   7C00         MOV     R4,#0x0
   \   000039   7D00         MOV     R5,#0x0
   \   00003B   12....       LCALL   ?Subroutine5 & 0xFFFF
    231            }
   \                     ??CrossCallReturnLabel_6:
   \   00003E   F9           MOV     R1,A
   \   00003F   EA           MOV     A,R2
   \   000040   2C           ADD     A,R4
   \                     ??MT_SapiBindDevice_2:
   \   000041   E4           CLR     A
   \   000042   39           ADDC    A,R1
   \   000043   FB           MOV     R3,A
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   E0           MOVX    A,@DPTR
   \   000049   F9           MOV     R1,A
   \   00004A   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    232          
    233            /* Build and send back the response */
    234            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SAPI), cmdId, 0, NULL);
   \   00004D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00004D   7C00         MOV     R4,#0x0
   \   00004F   7D00         MOV     R5,#0x0
   \   000051   7B00         MOV     R3,#0x0
   \   000053   AA..         MOV     R2,?V0
   \   000055   80..         SJMP    ??Subroutine10_0
    235          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FA           MOV     R2,A
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   7966         MOV     R1,#0x66
   \   000002   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005   02....       LJMP    ??Subroutine9_0 & 0xFFFF
    236          
    237          /***************************************************************************************************
    238           * @fn          MT_SapiAllowBind
    239           *
    240           * @brief       Process SAPI Allow Bind
    241           *
    242           * @param       pBuf - pointer to received buffer
    243           *
    244           * @return      none
    245           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void MT_SapiAllowBind(uint8 *pBuf)
   \                     MT_SapiAllowBind:
    247          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    248            uint8 cmdId;
    249          
    250            /* parse header */
    251            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FE           MOV     R6,A
    252            pBuf += MT_RPC_FRAME_HDR_SZ;
    253          
    254            zb_AllowBind(pBuf[0]);
   \   00000D                ; Setup parameters for call to function zb_AllowBind
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    255          
    256            /* Build and send back the response */
    257            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SAPI), cmdId, 0, NULL);
   \   000019                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000019                REQUIRE ?Subroutine3
   \   000019                ; // Fall through to label ?Subroutine3
    258          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7C00         MOV     R4,#0x0
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7B00         MOV     R3,#0x0
   \   000006   EE           MOV     A,R6
   \   000007   FA           MOV     R2,A
   \   000008                REQUIRE ??Subroutine10_0
   \   000008                ; // Fall through to label ??Subroutine10_0
    259          
    260          /***************************************************************************************************
    261           * @fn          MT_SapiSendData
    262           *
    263           * @brief       Process SAPI Send Data Command
    264           *
    265           * @param       pBuf - pointer to received buffer
    266           *
    267           * @return      none
    268           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    269          void MT_SapiSendData(uint8 *pBuf)
   \                     MT_SapiSendData:
    270          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    271            uint8 cmdId;
    272            uint16 destination, command;
    273            uint8 len, handle, txOption, radius;
    274          
    275            /* parse header */
    276            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000005   12....       LCALL   ?Subroutine6 & 0xFFFF
    277            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_7:
   \   000008   5001         JNC     ??MT_SapiSendData_0
   \   00000A   0B           INC     R3
    278          
    279            /* Destination */
    280            destination = BUILD_UINT16(pBuf[0], pBuf[1]);
    281            /* Command */
    282            command = BUILD_UINT16(pBuf[2], pBuf[3]);
    283            /* Handle */
    284            handle = pBuf[4];
    285            /* txOption */
    286            txOption = pBuf[5];
    287            /* Radius */
    288            radius = pBuf[6];
    289            /* Length */
    290            len = pBuf[7];
    291          
    292            zb_SendDataRequest(destination, command, len, &pBuf[8], handle, txOption, radius);
   \                     ??MT_SapiSendData_0:
   \   00000B                ; Setup parameters for call to function zb_SendDataRequest
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0,A
   \   000018   78..         MOV     R0,#?V0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0,A
   \   000029   78..         MOV     R0,#?V0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0,A
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003E   EA           MOV     A,R2
   \   00003F   2408         ADD     A,#0x8
   \   000041   F5..         MOV     ?V0,A
   \   000043   E4           CLR     A
   \   000044   3B           ADDC    A,R3
   \   000045   F5..         MOV     ?V1,A
   \   000047   78..         MOV     R0,#?V0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F5..         MOV     ?V0,A
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   FD           MOV     R5,A
   \   00006B   AC..         MOV     R4,?V0
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   8B83         MOV     DPH,R3
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F5..         MOV     ?V0,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   FB           MOV     R3,A
   \   000077   AA..         MOV     R2,?V0
   \   000079   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   00007C   7405         MOV     A,#0x5
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
    293          
    294            /* Build and send back the response */
    295            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SAPI), cmdId, 0, NULL);
   \   000081                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000081   7C00         MOV     R4,#0x0
   \   000083   7D00         MOV     R5,#0x0
   \   000085   7B00         MOV     R3,#0x0
   \   000087   EE           MOV     A,R6
   \   000088   FA           MOV     R2,A
   \   000089   7966         MOV     R1,#0x66
   \   00008B   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    296          }
   \   00008E   7F02         MOV     R7,#0x2
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008                ; Setup parameters for call to function zb_FindDeviceRequest
   \   000008   EA           MOV     A,R2
   \   000009   2403         ADD     A,#0x3
   \   00000B   FA           MOV     R2,A
   \   00000C   22           RET
    297          
    298          /***************************************************************************************************
    299           * @fn          MT_SapiReadCfg
    300           *
    301           * @brief       Process SAPI Read Config Commands
    302           *
    303           * @param       pBuf - pointer to received buffer
    304           *
    305           * @return      none
    306           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          void MT_SapiReadCfg(uint8 *pBuf)
   \                     MT_SapiReadCfg:
    308          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    309            uint8 len, retStatus;
    310            uint8 cfgId, cmdId;
    311            uint8 *pRetBuf;
    312          
    313            /* Parse header */
    314            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V2,A
    315            cfgId = pBuf[MT_RPC_POS_DAT0];
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V0,A
    316          
    317            /* Length of item in NV memory */
    318            len = (uint8)osal_nv_item_len(cfgId);
   \   000018                ; Setup parameters for call to function osal_nv_item_len
   \   000018   FA           MOV     R2,A
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00001E   EA           MOV     A,R2
   \   00001F   F5..         MOV     ?V1,A
    319          
    320            pRetBuf = osal_mem_alloc(len+3);
   \   000021                ; Setup parameters for call to function osal_mem_alloc
   \   000021   2403         ADD     A,#0x3
   \   000023   FA           MOV     R2,A
   \   000024   E4           CLR     A
   \   000025   3400         ADDC    A,#0x0
   \   000027   FB           MOV     R3,A
   \   000028   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00002B   8A..         MOV     ?V4,R2
   \   00002D   8B..         MOV     ?V5,R3
   \   00002F   AE..         MOV     R6,?V4
   \   000031   AF..         MOV     R7,?V5
    321            if (pRetBuf != NULL)
   \   000033   EE           MOV     A,R6
   \   000034   4F           ORL     A,R7
   \   000035   6063         JZ      ??MT_SapiReadCfg_0
    322            {
    323              if (len && ((cfgId != ZCD_NV_NIB) && (cfgId != ZCD_NV_DEVICE_LIST) &&
    324                          (cfgId != ZCD_NV_ADDRMGR) && (cfgId != ZCD_NV_NWKKEY)))
   \   000037   E5..         MOV     A,?V1
   \   000039   6031         JZ      ??MT_SapiReadCfg_1
   \   00003B   7421         MOV     A,#0x21
   \   00003D   65..         XRL     A,?V0
   \   00003F   602B         JZ      ??MT_SapiReadCfg_1
   \   000041   7422         MOV     A,#0x22
   \   000043   65..         XRL     A,?V0
   \   000045   6025         JZ      ??MT_SapiReadCfg_1
   \   000047   7423         MOV     A,#0x23
   \   000049   65..         XRL     A,?V0
   \   00004B   601F         JZ      ??MT_SapiReadCfg_1
   \   00004D   7482         MOV     A,#-0x7e
   \   00004F   65..         XRL     A,?V0
   \   000051   6019         JZ      ??MT_SapiReadCfg_1
    325              {
    326                if ((zb_ReadConfiguration(cfgId, len, pRetBuf+3)) == ZSUCCESS)
   \   000053                ; Setup parameters for call to function zb_ReadConfiguration
   \   000053   EE           MOV     A,R6
   \   000054   2403         ADD     A,#0x3
   \   000056   FC           MOV     R4,A
   \   000057   E4           CLR     A
   \   000058   3F           ADDC    A,R7
   \   000059   FD           MOV     R5,A
   \   00005A   AA..         MOV     R2,?V1
   \   00005C   A9..         MOV     R1,?V0
   \   00005E   12....       LCALL   `??zb_ReadConfiguration::?relay`; Banked call to: zb_ReadConfiguration
   \   000061   E9           MOV     A,R1
   \   000062   7004         JNZ     ??MT_SapiReadCfg_2
    327                {
    328                  retStatus = ZSuccess;
   \   000064   7400         MOV     A,#0x0
   \   000066   8009         SJMP    ??MT_SapiReadCfg_3
    329                }
    330                else
    331                {
    332                  retStatus = ZFailure;
   \                     ??MT_SapiReadCfg_2:
   \   000068   7401         MOV     A,#0x1
   \   00006A   8002         SJMP    ??MT_SapiReadCfg_4
    333                }
    334              }
    335              else
    336              {
    337                retStatus = ZInvalidParameter;
   \                     ??MT_SapiReadCfg_1:
   \   00006C   7402         MOV     A,#0x2
    338              }
    339          
    340              if (retStatus != ZSuccess)
    341              {
    342                 /* Don't return garbage with error */
    343                 len = 0;
   \                     ??MT_SapiReadCfg_4:
   \   00006E   75..00       MOV     ?V1,#0x0
    344              }
    345          
    346              /* Status */
    347              pRetBuf[0] = retStatus;
   \                     ??MT_SapiReadCfg_3:
   \   000071   8E82         MOV     DPL,R6
   \   000073   8F83         MOV     DPH,R7
   \   000075   F0           MOVX    @DPTR,A
    348              /* Config ID */
    349              pRetBuf[1] = cfgId;
   \   000076   A3           INC     DPTR
   \   000077   E5..         MOV     A,?V0
   \   000079   F0           MOVX    @DPTR,A
    350              /* NV item length */
    351              pRetBuf[2] = len;
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   E5..         MOV     A,?V1
   \   000082   F0           MOVX    @DPTR,A
    352          
    353              /* Build and send back the response */
    354              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SAPI), cmdId, len+3, pRetBuf );
   \   000083                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000083   EE           MOV     A,R6
   \   000084   FC           MOV     R4,A
   \   000085   EF           MOV     A,R7
   \   000086   FD           MOV     R5,A
   \   000087   7403         MOV     A,#0x3
   \   000089   25..         ADD     A,?V1
   \   00008B   FB           MOV     R3,A
   \   00008C   AA..         MOV     R2,?V2
   \   00008E   7966         MOV     R1,#0x66
   \   000090   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    355          
    356              osal_mem_free(pRetBuf);
   \   000093                ; Setup parameters for call to function osal_mem_free
   \   000093   EE           MOV     A,R6
   \   000094   FA           MOV     R2,A
   \   000095   EF           MOV     A,R7
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    357            }
    358          }
   \                     ??MT_SapiReadCfg_0:
   \   00009A                REQUIRE ?Subroutine2
   \   00009A                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    359          
    360          /***************************************************************************************************
    361           * @fn          MT_SpiWriteCfg
    362           *
    363           * @brief       Process Write Configuration Command
    364           *
    365           * @param       pBuf - pointer to received buffer
    366           *
    367           * @return      none
    368           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000003   7B01         MOV     R3,#0x1
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   7966         MOV     R1,#0x66
   \   000009   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   00000C   7401         MOV     A,#0x1
   \   00000E                REQUIRE ??Subroutine8_0
   \   00000E                ; // Fall through to label ??Subroutine8_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine8_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine9_0
   \   000003                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          void MT_SapiWriteCfg(uint8 *pBuf)
   \                     MT_SapiWriteCfg:
    370          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   F9           MOV     R1,A
    371            uint8 retValue, cmdId;
    372          
    373            /* Parse header */
    374            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FE           MOV     R6,A
    375            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000016   E8           MOV     A,R0
   \   000017   2403         ADD     A,#0x3
   \   000019   F8           MOV     R0,A
   \   00001A   5001         JNC     ??MT_SapiWriteCfg_0
   \   00001C   09           INC     R1
    376          
    377            if ((pBuf[0] != ZCD_NV_NIB) && (pBuf[0] != ZCD_NV_DEVICE_LIST) &&
    378                (pBuf[0] != ZCD_NV_ADDRMGR) && (pBuf[0] != ZCD_NV_NWKKEY))
   \                     ??MT_SapiWriteCfg_0:
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6421         XRL     A,#0x21
   \   000024   6032         JZ      ??MT_SapiWriteCfg_1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6422         XRL     A,#0x22
   \   000029   602D         JZ      ??MT_SapiWriteCfg_1
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6423         XRL     A,#0x23
   \   00002E   6028         JZ      ??MT_SapiWriteCfg_1
   \   000030   E0           MOVX    A,@DPTR
   \   000031   6482         XRL     A,#0x82
   \   000033   6023         JZ      ??MT_SapiWriteCfg_1
    379            {
    380              if ((zb_WriteConfiguration(pBuf[0], pBuf[1], &pBuf[2])) == ZSUCCESS)
   \   000035                ; Setup parameters for call to function zb_WriteConfiguration
   \   000035   E8           MOV     A,R0
   \   000036   2402         ADD     A,#0x2
   \   000038   FC           MOV     R4,A
   \   000039   E4           CLR     A
   \   00003A   39           ADDC    A,R1
   \   00003B   FD           MOV     R5,A
   \   00003C   A3           INC     DPTR
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   FA           MOV     R2,A
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   12....       LCALL   `??zb_WriteConfiguration::?relay`; Banked call to: zb_WriteConfiguration
   \   000048   E9           MOV     A,R1
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   7003         JNZ     ??MT_SapiWriteCfg_2
    381              {
    382                retValue = ZSuccess;
   \   000051   E4           CLR     A
   \   000052   800C         SJMP    ??MT_SapiWriteCfg_3
    383              }
    384              else
    385              {
    386                retValue = ZFailure;
   \                     ??MT_SapiWriteCfg_2:
   \   000054   7401         MOV     A,#0x1
   \   000056   8008         SJMP    ??MT_SapiWriteCfg_3
    387              }
    388            }
    389            else
    390            {
    391              retValue = ZInvalidParameter;
   \                     ??MT_SapiWriteCfg_1:
   \   000058   85..82       MOV     DPL,?XSP + 0
   \   00005B   85..83       MOV     DPH,?XSP + 1
   \   00005E   7402         MOV     A,#0x2
    392            }
   \                     ??MT_SapiWriteCfg_3:
   \   000060   02....       LJMP    ?Subroutine0 & 0xFFFF
    393          
    394            /* Build and send back the response */
    395            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SAPI), cmdId, 1, &retValue );
    396          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   22           RET
    397          
    398          /***************************************************************************************************
    399           * @fn          MT_SapiGetDevInfo
    400           *
    401           * @brief       Process Get Device Info command
    402           *
    403           * @param       pBuf - pointer to received buffer
    404           *
    405           * @return      none
    406           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    407          void MT_SapiGetDevInfo(uint8 *pBuf)
   \                     MT_SapiGetDevInfo:
    408          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8B..         MOV     ?V1,R3
    409            uint8 *pRetBuf;
    410            uint8 cmdId;
    411          
    412            /* parse header */
    413            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V2,A
    414            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000010   EA           MOV     A,R2
   \   000011   2403         ADD     A,#0x3
   \   000013   F5..         MOV     ?V0,A
   \   000015   5002         JNC     ??MT_SapiGetDevInfo_0
   \   000017   05..         INC     ?V1
    415          
    416            pRetBuf = osal_mem_alloc(Z_EXTADDR_LEN+1);
   \                     ??MT_SapiGetDevInfo_0:
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   7A09         MOV     R2,#0x9
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000020   8A..         MOV     ?V4,R2
   \   000022   8B..         MOV     ?V5,R3
   \   000024   AE..         MOV     R6,?V4
   \   000026   AF..         MOV     R7,?V5
    417            if (pRetBuf)
   \   000028   EE           MOV     A,R6
   \   000029   4F           ORL     A,R7
   \   00002A   6034         JZ      ??MT_SapiGetDevInfo_1
    418            {
    419              zb_GetDeviceInfo(pBuf[0], pRetBuf+1);
   \   00002C                ; Setup parameters for call to function zb_GetDeviceInfo
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   A3           INC     DPTR
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   85..82       MOV     DPL,?V0
   \   000038   85..83       MOV     DPH,?V1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   `??zb_GetDeviceInfo::?relay`; Banked call to: zb_GetDeviceInfo
    420              pRetBuf[0] = pBuf[0];
   \   000040   85..82       MOV     DPL,?V0
   \   000043   85..83       MOV     DPH,?V1
   \   000046   E0           MOVX    A,@DPTR
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   F0           MOVX    @DPTR,A
    421          
    422              /* Build and send back the response */
    423              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SAPI), cmdId, Z_EXTADDR_LEN+1, pRetBuf );
   \   00004C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00004C   EE           MOV     A,R6
   \   00004D   FC           MOV     R4,A
   \   00004E   EF           MOV     A,R7
   \   00004F   FD           MOV     R5,A
   \   000050   7B09         MOV     R3,#0x9
   \   000052   AA..         MOV     R2,?V2
   \   000054   7966         MOV     R1,#0x66
   \   000056   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    424          
    425              osal_mem_free(pRetBuf);
   \   000059                ; Setup parameters for call to function osal_mem_free
   \   000059   EE           MOV     A,R6
   \   00005A   FA           MOV     R2,A
   \   00005B   EF           MOV     A,R7
   \   00005C   FB           MOV     R3,A
   \   00005D   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    426            }
    427          }
   \                     ??MT_SapiGetDevInfo_1:
   \   000060   02....       LJMP    ?Subroutine2 & 0xFFFF
    428          
    429          /***************************************************************************************************
    430           * @fn          MT_SapiFindDev
    431           *
    432           * @brief       Process Find Device Command
    433           *
    434           * @param       pBuf - pointer to received buffer
    435           *
    436           * @return      none
    437           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    438          void MT_SapiFindDev(uint8 *pBuf)
   \                     MT_SapiFindDev:
    439          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    440            uint8 cmdId;
    441          
    442            /* parse header */
    443            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000005   12....       LCALL   ?Subroutine6 & 0xFFFF
    444            pBuf += MT_RPC_FRAME_HDR_SZ;
    445          
    446            /* Currently only supports IEEE search */
    447            zb_FindDeviceRequest(ZB_IEEE_SEARCH, pBuf);
   \                     ??CrossCallReturnLabel_8:
   \   000008   5001         JNC     ??MT_SapiFindDev_0
   \   00000A   0B           INC     R3
   \                     ??MT_SapiFindDev_0:
   \   00000B   7901         MOV     R1,#0x1
   \   00000D   12....       LCALL   `??zb_FindDeviceRequest::?relay`; Banked call to: zb_FindDeviceRequest
    448          
    449            /* Build and send back the response */
    450            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SAPI), cmdId, 0, NULL );
   \   000010                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000010   02....       LJMP    ?Subroutine3 & 0xFFFF
    451          }
    452          
    453          /***************************************************************************************************
    454           * @fn          MT_SapiPermitJoin
    455           *
    456           * @brief       Process Permit Join Command
    457           *
    458           * @param       pBuf - pointer to received buffer
    459           *
    460           * @return      none
    461           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          void MT_SapiPermitJoin(uint8 *pBuf)
   \                     MT_SapiPermitJoin:
    463          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    464            uint8 retValue, cmdId;
    465          
    466            /* parse header */
    467            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine6 & 0xFFFF
    468            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_9:
   \   00000D   5001         JNC     ??MT_SapiPermitJoin_0
   \   00000F   0B           INC     R3
    469          
    470            retValue = (zb_PermitJoiningRequest(BUILD_UINT16(pBuf[0], pBuf[1]), pBuf[2]));
   \                     ??MT_SapiPermitJoin_0:
   \   000010                ; Setup parameters for call to function zb_PermitJoiningRequest
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FC           MOV     R4,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FB           MOV     R3,A
   \   000021   EC           MOV     A,R4
   \   000022   FA           MOV     R2,A
   \   000023   12....       LCALL   `??zb_PermitJoiningRequest::?relay`; Banked call to: zb_PermitJoiningRequest
   \   000026   E9           MOV     A,R1
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   02....       LJMP    ?Subroutine0 & 0xFFFF
    471          
    472            /* Build and send back the response */
    473            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SAPI), cmdId, 1, &retValue );
    474          
    475          }
    476          #endif  /* MT_SAPI_FUNC */
    477          
    478          #if defined ( MT_SAPI_CB_FUNC )
    479          /***************************************************************************************************
    480           * @fn          zb_MTCallbackStartConfirm
    481           *
    482           * @brief       Process the callback subscription for zb_StartConfirm
    483           *
    484           * @param       Status - status
    485           *
    486           * @return      none
    487           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    488          void zb_MTCallbackStartConfirm( uint8 status )
   \                     zb_MTCallbackStartConfirm:
    489          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   12....       LCALL   ?Subroutine4 & 0xFFFF
    490            /* Build and send back the response */
    491            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SAPI), MT_SAPI_START_CNF, 1, &status);
   \                     ??CrossCallReturnLabel_1:
   \   000013   7B01         MOV     R3,#0x1
   \   000015   7A80         MOV     R2,#-0x80
   \   000017   7946         MOV     R1,#0x46
   \   000019   02....       LJMP    ?Subroutine1 & 0xFFFF
    492          }
    493          
    494          /***************************************************************************************************
    495           * @fn          zb_MTCallbackSendDataConfirm
    496           *
    497           * @brief       Process the callback subscription for zb_SendDataConfirm
    498           *
    499           * @param
    500           *
    501           * @return      none
    502           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    503          void zb_MTCallbackSendDataConfirm(uint8 handle, uint8 status)
   \                     zb_MTCallbackSendDataConfirm:
    504          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    505            uint8 retArray[2];
    506          
    507            retArray[0] = handle;
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
    508            retArray[1] = status;
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine4 & 0xFFFF
    509          
    510            /* Build and send back the response */
    511            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SAPI), MT_SAPI_SEND_DATA_CNF, 2, retArray);
   \                     ??CrossCallReturnLabel_2:
   \   00001B   7B02         MOV     R3,#0x2
   \   00001D   7A83         MOV     R2,#-0x7d
   \   00001F   7946         MOV     R1,#0x46
   \   000021   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    512          
    513          }
   \   000024   7402         MOV     A,#0x2
   \   000026   02....       LJMP    ??Subroutine8_0 & 0xFFFF
    514          
    515          /***************************************************************************************************
    516           * @fn          zb_MTCallbackBindConfirm
    517           *
    518           * @brief       Process the callback subscription for zb_BindConfirm
    519           *
    520           * @param
    521           *
    522           * @return      none
    523           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    524          void zb_MTCallbackBindConfirm( uint16 commandId, uint8 status )
   \                     zb_MTCallbackBindConfirm:
    525          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    526            uint8 retArray[3];
    527          
    528            retArray[0] = LO_UINT16(commandId);
   \   00000A   EA           MOV     A,R2
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
    529            retArray[1] = HI_UINT16(commandId);
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   EB           MOV     A,R3
   \   000018   F0           MOVX    @DPTR,A
    530            retArray[2] = status;
   \   000019   7402         MOV     A,#0x2
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E9           MOV     A,R1
   \   00001F   12....       LCALL   ?Subroutine4 & 0xFFFF
    531          
    532            /* Build and send back the response */
    533            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SAPI), MT_SAPI_BIND_CNF, 3, retArray);
   \                     ??CrossCallReturnLabel_3:
   \   000022   7B03         MOV     R3,#0x3
   \   000024   7A81         MOV     R2,#-0x7f
   \   000026   7946         MOV     R1,#0x46
   \   000028   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    534          
    535          }
   \   00002B   7403         MOV     A,#0x3
   \   00002D   02....       LJMP    ??Subroutine8_0 & 0xFFFF
    536          /***************************************************************************************************
    537           * @fn          zb_MTCallbackAllowBindConfirm
    538           *
    539           * @brief       Indicates when another device attempted to bind to this device
    540           *
    541           * @param
    542           *
    543           * @return      none
    544           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    545          void zb_MTCallbackAllowBindConfirm( uint16 source )
   \                     zb_MTCallbackAllowBindConfirm:
    546          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    547            uint8 retArray[2];
    548          
    549            retArray[0] = LO_UINT16(source);
   \   000009   EA           MOV     A,R2
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
    550            retArray[1] = HI_UINT16(source);
   \   000011   7401         MOV     A,#0x1
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   EB           MOV     A,R3
   \   000017   12....       LCALL   ?Subroutine4 & 0xFFFF
    551          
    552            /* Build and send back the response */
    553            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SAPI), MT_SAPI_ALLOW_BIND_CNF, 2, retArray);
   \                     ??CrossCallReturnLabel_4:
   \   00001A   7B02         MOV     R3,#0x2
   \   00001C   7A82         MOV     R2,#-0x7e
   \   00001E   7946         MOV     R1,#0x46
   \   000020   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    554          
    555          }
   \   000023   7402         MOV     A,#0x2
   \   000025   80..         SJMP    ??Subroutine11_0
    556          /***************************************************************************************************
    557           * @fn          zb_MTCallbackFindDeviceConfirm
    558           *
    559           * @brief       Process the callback subscription for zb_FindDeviceConfirm
    560           *
    561           * @param
    562           *
    563           * @return      none
    564           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    565          void zb_MTCallbackFindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_MTCallbackFindDeviceConfirm:
    566          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    567            uint8 retArray[SPI_CB_SAPI_FIND_DEV_CNF_LEN];
    568            uint16 addr = *((uint16*)searchKey);
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F8           MOV     R0,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
    569          
    570            // Currently only supports IEEE Addr Search
    571            retArray[0] = ZB_IEEE_SEARCH;
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   7401         MOV     A,#0x1
   \   00001B   F0           MOVX    @DPTR,A
    572            retArray[1] = LO_UINT16(addr);
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E8           MOV     A,R0
   \   000020   F0           MOVX    @DPTR,A
    573            retArray[2] = HI_UINT16(addr);
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E9           MOV     A,R1
   \   000027   F0           MOVX    @DPTR,A
    574            osal_memcpy(&retArray[3], result, Z_EXTADDR_LEN);
   \   000028                ; Setup parameters for call to function osal_memcpy
   \   000028   8C..         MOV     ?V0,R4
   \   00002A   8D..         MOV     ?V1,R5
   \   00002C   75..00       MOV     ?V2,#0x0
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000034   7C08         MOV     R4,#0x8
   \   000036   7D00         MOV     R5,#0x0
   \   000038   7406         MOV     A,#0x6
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000044   7403         MOV     A,#0x3
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
    575          
    576            /* Build and send back the response */
    577            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SAPI), MT_SAPI_FIND_DEV_CNF, 11, retArray);
   \   000049                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000049   AC..         MOV     R4,?XSP + 0
   \   00004B   AD..         MOV     R5,?XSP + 1
   \   00004D   7B0B         MOV     R3,#0xb
   \   00004F   7A85         MOV     R2,#-0x7b
   \   000051   7946         MOV     R1,#0x46
   \   000053   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    578          
    579          }
   \   000056   740B         MOV     A,#0xb
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   7F03         MOV     R7,#0x3
   \   00005D   02....       LJMP    ?BANKED_LEAVE_XDATA
    580          
    581          /***************************************************************************************************
    582           * @fn          zb_MTCallbackReceiveDataIndication
    583           *
    584           * @brief       Process the callback subscription for zb_ReceiveDataIndication
    585           *
    586           * @param
    587           *
    588           * @return      none
    589           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    590          void zb_MTCallbackReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_MTCallbackReceiveDataIndication:
    591          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V2,R2
   \   000007   8B..         MOV     ?V3,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V4,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V5,A
    592            uint8 *memPtr;
    593            int8 i;
    594            uint8 msgLen = 6 + len;
   \   000019   E5..         MOV     A,?V4
   \   00001B   2406         ADD     A,#0x6
   \   00001D   F5..         MOV     ?V6,A
    595          
    596            memPtr = osal_mem_alloc(msgLen);
   \   00001F                ; Setup parameters for call to function osal_mem_alloc
   \   00001F   FA           MOV     R2,A
   \   000020   7B00         MOV     R3,#0x0
   \   000022   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000025   8A..         MOV     ?V0,R2
   \   000027   8B..         MOV     ?V1,R3
    597          
    598            if (memPtr)
   \   000029   EA           MOV     A,R2
   \   00002A   45..         ORL     A,?V1
   \   00002C   6077         JZ      ??zb_MTCallbackReceiveDataIndication_0
    599            {
    600              memPtr[0] = LO_UINT16(source);
   \   00002E   8A82         MOV     DPL,R2
   \   000030   8B83         MOV     DPH,R3
   \   000032   E5..         MOV     A,?V2
   \   000034   F0           MOVX    @DPTR,A
    601              memPtr[1] = HI_UINT16(source);
   \   000035   E5..         MOV     A,?V3
   \   000037   A3           INC     DPTR
   \   000038   F0           MOVX    @DPTR,A
    602              memPtr[2] = LO_UINT16(command);
   \   000039   EE           MOV     A,R6
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   F0           MOVX    @DPTR,A
    603              memPtr[3] = HI_UINT16(command);
   \   000041   EF           MOV     A,R7
   \   000042   8A82         MOV     DPL,R2
   \   000044   8B83         MOV     DPH,R3
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   12....       LCALL   ?Subroutine7 & 0xFFFF
    604              memPtr[4] = LO_UINT16(len);
   \                     ??CrossCallReturnLabel_10:
   \   00004C   E5..         MOV     A,?V4
   \   00004E   12....       LCALL   ?Subroutine7 & 0xFFFF
    605              memPtr[5] = HI_UINT16(len);
   \                     ??CrossCallReturnLabel_11:
   \   000051   A3           INC     DPTR
   \   000052   E5..         MOV     A,?V5
   \   000054   F0           MOVX    @DPTR,A
    606          
    607              for (i=0; i<len; i++)
   \   000055   7C00         MOV     R4,#0x0
   \   000057   7414         MOV     A,#0x14
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F8           MOV     R0,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   801F         SJMP    ??zb_MTCallbackReceiveDataIndication_1
    608              {
    609                memPtr[6+i] = pData[i];
   \                     ??zb_MTCallbackReceiveDataIndication_2:
   \   000063   E8           MOV     A,R0
   \   000064   2A           ADD     A,R2
   \   000065   F582         MOV     DPL,A
   \   000067   E9           MOV     A,R1
   \   000068   3B           ADDC    A,R3
   \   000069   F583         MOV     DPH,A
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   C0E0         PUSH    A
   \   00006E   E5..         MOV     A,?V0
   \   000070   2A           ADD     A,R2
   \   000071   F582         MOV     DPL,A
   \   000073   E5..         MOV     A,?V1
   \   000075   3B           ADDC    A,R3
   \   000076   F583         MOV     DPH,A
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   D0E0         POP     A
   \   000080   F0           MOVX    @DPTR,A
    610              }
   \   000081   0C           INC     R4
   \                     ??zb_MTCallbackReceiveDataIndication_1:
   \   000082   EC           MOV     A,R4
   \   000083   FA           MOV     R2,A
   \   000084   33           RLC     A
   \   000085   95E0         SUBB    A,0xE0 /* A   */
   \   000087   FB           MOV     R3,A
   \   000088   C3           CLR     C
   \   000089   EA           MOV     A,R2
   \   00008A   95..         SUBB    A,?V4
   \   00008C   EB           MOV     A,R3
   \   00008D   95..         SUBB    A,?V5
   \   00008F   40D2         JC      ??zb_MTCallbackReceiveDataIndication_2
    611          
    612              /* Build and send back the response */
    613              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SAPI), MT_SAPI_RCV_DATA_IND, msgLen, memPtr);
   \   000091                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000091   AC..         MOV     R4,?V0
   \   000093   AD..         MOV     R5,?V1
   \   000095   AB..         MOV     R3,?V6
   \   000097   7A87         MOV     R2,#-0x79
   \   000099   7946         MOV     R1,#0x46
   \   00009B   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    614          
    615              osal_mem_free( memPtr );
   \   00009E                ; Setup parameters for call to function osal_mem_free
   \   00009E   AA..         MOV     R2,?V0
   \   0000A0   AB..         MOV     R3,?V1
   \   0000A2   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    616            }
    617          }
   \                     ??zb_MTCallbackReceiveDataIndication_0:
   \   0000A5   7F0A         MOV     R7,#0xa
   \   0000A7   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiSystemReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiSystemReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiStart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiAppRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiAppRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiBindDevice::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiBindDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiAllowBind::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiAllowBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiSendData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiSendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiReadCfg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiReadCfg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiWriteCfg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiWriteCfg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiGetDevInfo::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiGetDevInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiFindDev::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiFindDev

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SapiPermitJoin::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SapiPermitJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_MTCallbackStartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_MTCallbackStartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_MTCallbackSendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_MTCallbackSendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_MTCallbackBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_MTCallbackBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_MTCallbackAllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_MTCallbackAllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_MTCallbackFindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_MTCallbackFindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_MTCallbackReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_MTCallbackReceiveDataIndication
    618          #endif  /* MT_SAPI_CB_FUNC */
    619          
    620          /***************************************************************************************************
    621           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     18   MT_SapiAllowBind
        0      9   -> MT_BuildAndSendZToolResponse
        0      9   -> zb_AllowBind
      3     10   MT_SapiAppRegister
        2      1   -> MT_BuildAndSendZToolResponse
        2      1   -> MT_BuildEndpointDesc
        2      1   -> afRegister
        2      1   -> afSetMatch
      0     18   MT_SapiBindDevice
        0      9   -> AddrMgrExtAddrValid
        0      9   -> MT_BuildAndSendZToolResponse
        0      9   -> zb_BindDevice
      0      9   MT_SapiCommandProcessing
        0      9   -> MT_SapiAllowBind
        0      9   -> MT_SapiAppRegister
        0      9   -> MT_SapiBindDevice
        0      9   -> MT_SapiFindDev
        0      9   -> MT_SapiGetDevInfo
        0      9   -> MT_SapiPermitJoin
        0      9   -> MT_SapiReadCfg
        0      9   -> MT_SapiSendData
        0      9   -> MT_SapiStart
        0      9   -> MT_SapiWriteCfg
        0      9   -> zb_SystemReset
      0     18   MT_SapiFindDev
        0      9   -> MT_BuildAndSendZToolResponse
        0      9   -> zb_FindDeviceRequest
      1     23   MT_SapiGetDevInfo
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> zb_GetDeviceInfo
      1     19   MT_SapiPermitJoin
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> zb_PermitJoiningRequest
      1     23   MT_SapiReadCfg
        0     14   -> MT_BuildAndSendZToolResponse
        0     14   -> osal_mem_alloc
        0     14   -> osal_mem_free
        0     14   -> osal_nv_item_len
        0     14   -> zb_ReadConfiguration
      0     24   MT_SapiSendData
        0     10   -> MT_BuildAndSendZToolResponse
        0     15   -> zb_SendDataRequest
      2      9   MT_SapiStart
        2      0   -> MT_BuildAndSendZToolResponse
        2      0   -> zb_StartRequest
      2      0   MT_SapiSystemReset
        2      0   -> zb_SystemReset
      0     19   MT_SapiWriteCfg
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> zb_WriteConfiguration
      3      2   zb_MTCallbackAllowBindConfirm
        2      2   -> MT_BuildAndSendZToolResponse
      1     12   zb_MTCallbackBindConfirm
        0     12   -> MT_BuildAndSendZToolResponse
      1     25   zb_MTCallbackFindDeviceConfirm
        0     22   -> MT_BuildAndSendZToolResponse
        0     25   -> osal_memcpy
      1     22   zb_MTCallbackReceiveDataIndication
        0     18   -> MT_BuildAndSendZToolResponse
        0     18   -> osal_mem_alloc
        0     18   -> osal_mem_free
      1     11   zb_MTCallbackSendDataConfirm
        0     11   -> MT_BuildAndSendZToolResponse
      3      1   zb_MTCallbackStartConfirm
        2      1   -> MT_BuildAndSendZToolResponse


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ??Subroutine10_0
       3  ??Subroutine11_0
       7  ??Subroutine12_0
       3  ??Subroutine8_0
       5  ??Subroutine9_0
      14  ?Subroutine0
       5  ?Subroutine1
       5  ?Subroutine2
       8  ?Subroutine3
       6  ?Subroutine4
      15  ?Subroutine5
      13  ?Subroutine6
      10  ?Subroutine7
      25  MT_SapiAllowBind
       6  MT_SapiAllowBind::?relay
     115  MT_SapiAppRegister
       6  MT_SapiAppRegister::?relay
      87  MT_SapiBindDevice
       6  MT_SapiBindDevice::?relay
     109  MT_SapiCommandProcessing
       6  MT_SapiCommandProcessing::?relay
      19  MT_SapiFindDev
       6  MT_SapiFindDev::?relay
      99  MT_SapiGetDevInfo
       6  MT_SapiGetDevInfo::?relay
      48  MT_SapiPermitJoin
       6  MT_SapiPermitJoin::?relay
     154  MT_SapiReadCfg
       6  MT_SapiReadCfg::?relay
     147  MT_SapiSendData
       6  MT_SapiSendData::?relay
      23  MT_SapiStart
       6  MT_SapiStart::?relay
      10  MT_SapiSystemReset
       6  MT_SapiSystemReset::?relay
      99  MT_SapiWriteCfg
       6  MT_SapiWriteCfg::?relay
       2  _sapiCallbackSub
      39  zb_MTCallbackAllowBindConfirm
       6  zb_MTCallbackAllowBindConfirm::?relay
      48  zb_MTCallbackBindConfirm
       6  zb_MTCallbackBindConfirm::?relay
      96  zb_MTCallbackFindDeviceConfirm
       6  zb_MTCallbackFindDeviceConfirm::?relay
     170  zb_MTCallbackReceiveDataIndication
       6  zb_MTCallbackReceiveDataIndication::?relay
      41  zb_MTCallbackSendDataConfirm
       6  zb_MTCallbackSendDataConfirm::?relay
      28  zb_MTCallbackStartConfirm
       6  zb_MTCallbackStartConfirm::?relay

 
 1 459 bytes in segment BANKED_CODE
   108 bytes in segment BANK_RELAYS
     2 bytes in segment XDATA_Z
 
 1 567 bytes of CODE  memory
     2 bytes of XDATA memory

Errors: none
Warnings: none
